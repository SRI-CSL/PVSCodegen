creduction: THEORY
  BEGIN

    IMPORTING finite_set_theorems, list2finseq_extra, finseq_theorems

    pop[T: TYPE](S: finseq[T] | S`length > 0) : finseq[T] =
      (# length := S`length - 1,
         seq := LAMBDA (i: below(S`length - 1)): S`seq(i)
       #)


    % All types we are considering have a size of sizeof(int) or sizeof(int*)
    % We will assume these two are equal, and every size we will
    % use will mean that size times sizeof(int)

    ctype: DATATYPE
      BEGIN
        cint: cint?
        carray(arraytype: ctype): carray?
        cstruct(sfields: finseq[ctype]): cstruct?
      END ctype

    tp1, tp2, tp3: VAR ctype

    lvalue: DATATYPE
      BEGIN
        cvar(cindex: nat): cvar?
        caccess(clhs: (cvar?), crhs: (cvar?)): caccess?
        cfield(cval: (cvar?), cfindex:  nat): cfield?
        creturn: creturn?
      END lvalue

    lv1, lv2, lv3: VAR lvalue
    lrvalue?(lv1) : bool = NOT creturn?(lv1)
    lr1, lr2, lr3: VAR (lrvalue?)

    builtin_num: nat = 1

    cexpr: DATATYPE
      BEGIN
        elv(lval: (lrvalue?)): elv?
        econstant(cvalue: int): econstant?
        enil: enil?
        ecall(cfun: nat, cargs: finseq[(cvar?)]): ecall?
        ebuiltin(cbuiltin: below(builtin_num), cbv1: (cvar?), cbv2: (cvar?)): ebuiltin?
      END cexpr

    e1, e2, e3: VAR cexpr

    cstat: DATATYPE
      BEGIN
        sassign(aval: lvalue, aexpr: cexpr): sassign?
        scall(sfun: nat, sargs: finseq[(cvar?)]): scall?
        sdecl(dtype: ctype, dstat: cstat): sdecl?
        sif(scond: (cvar?), iftrue: cstat, iffalse: cstat): sif?
        sblock(bstats: finseq[cstat]): sblock?
        smalloc(msize: nat): smalloc?
        sfree(fvar: (cvar?)): sfree?
      END cstat

    s1, s2, s3: VAR cstat

    cvalue: DATATYPE
      BEGIN
        cref(crefindex: nat): cref?
        cintv(cintvalue: int): cintv?
        cnil: cnil?
        cundef: cundef?
      END cvalue

    dom: VAR finite_set[nat]
    Store(dom): TYPE = [(dom) -> finseq[cvalue]]
    Stack: TYPE = finseq[cvalue]
    i, j, k: VAR nat

    vars(lv1)(i) : bool =
      CASES lv1 OF
        cvar(j): i = j,
        caccess(v1, v2): i = cindex(v1) OR i = cindex(v2),
        cfield(v1, j): i = cindex(v1),
        creturn: FALSE
      ENDCASES

    vars(e1)(i) : bool =
      CASES e1 OF
        elv(lr1) : vars(lr1)(i),
        econstant(c) : FALSE,
        enil: FALSE,
        ecall(f, args) : EXISTS (j: below(args`length)): cindex(args`seq(j)) = i,
        ebuiltin(f, v1, v2) : i = cindex(v1) OR i = cindex(v2)
      ENDCASES

    vars(s1)(i) : RECURSIVE bool =
      CASES s1 OF
        sassign(lv1, e1): vars(lv1)(i) OR vars(e1)(i),
        scall(f, args): EXISTS (j: below(args`length)): cindex(args`seq(j)) = i,
        sdecl(tp1, s2): vars(s2)(i + 1),
        sif(v1, thenc, elsec): cindex(v1) = i OR vars(thenc)(i) OR vars(elsec)(i),
        sblock(stats): EXISTS (j: below(stats`length)): vars(stats`seq(j))(i),
        smalloc(size): FALSE,
        sfree(v1): cindex(v1) = i
      ENDCASES
    MEASURE s1 BY <<

    length_cdr[T: TYPE]: LEMMA
      FORALL (l: list[T]):
        cons?(l) IMPLIES length(cdr(l)) = length(l) - 1

    nth_cdr[T: TYPE]: LEMMA
      FORALL (l: list[T]):
        cons?(l) AND i < length(cdr(l)) IMPLIEs nth(cdr(l), i) = nth(l, i + 1)

    measure_stat(s1): RECURSIVE posnat =
      CASES s1 OF
        sdecl(tp1, s2): 1 + measure_stat(s2),
        sif(v1, thenc, elsec): 1 + measure_stat(thenc) + measure_stat(elsec),
        sblock(stats): 1 + Sigma((LAMBDA j: j < stats`length), LAMBDA j: IF j < stats`length THEN measure_stat(stats`seq(j)) ELSE 0 ENDIF)
        ELSE 1
      ENDCASES
    MEASURE s1 BY <<

    measure_stat_car: LEMMA
      sblock?(s1) AND bstats(s1)`length > 0 IMPLIES
        measure_stat(car(bstats(s1))) < measure_stat(s1)

    measure_stat_cdr: LEMMA
      sblock?(s1) AND bstats(s1)`length > 0 IMPLIES
        measure_stat(sblock(cdr(bstats(s1)))) < measure_stat(s1)

    stat_induction: LEMMA
      FORALL (P: pred[cstat]):
        (FORALL tp1, s1: P(s1) IMPLIES P(sdecl(tp1, s1))) AND
        (FORALL (v1: (cvar?)), s1, s2: P(s1) AND P(s2) IMPLIES P(sif(v1, s1, s2))) AND
        P(sblock(null)) AND
        (FORALL s1, (l: finseq[cstat]): P(s1) AND P(sblock(l)) IMPLIES P(sblock(cons(s1, l)))) AND
        (FORALL s1: NOT sdecl?(s1) AND NOT sif?(s1) AND NOT sblock?(s1) IMPLIES P(s1)) IMPLIES
          FORALL s1: P(s1)

    clength(s1) : RECURSIVE nat =
      CASES s1 OF
        sdecl(tp1, s2): clength(s2) + 2,
        sif(v1, thenc, elsec): clength(thenc) + clength(elsec) + 1,
        sblock(stats):
          IF stats`length = 0 THEN
            0
          ELSE
            clength(car(stats)) + clength(sblock(cdr(stats)))
          ENDIF,
%        scall(f, args): 1 + args`length,
%        sassign(lv1, e1): IF ecall?(e1) THEN 2 + cargs(e1)`length ELSE 2 ENDIF
        scall(f, args): 1 + 2 * args`length,
        sassign(lv1, e1): IF ecall?(e1) THEN 2 + 2 * cargs(e1)`length ELSE 2 ENDIF
        ELSE 1
      ENDCASES
    MEASURE measure_stat(s1)

    stack_size_at(s1)(i: below(clength(s1))) : RECURSIVE nat =
      CASES s1 OF
        sdecl(tp1, s2):
          IF i = 0 THEN
            0
          ELSIF i < clength(s2) + 1 THEN
            1 + stack_size_at(s2)(i - 1)
          ELSE
            1
          ENDIF,
        sif(v1, thenc, elsec):
          IF i = 0 THEN
            0
          ELSIF i < clength(thenc) + 1 THEN
            stack_size_at(thenc)(i - 1)
          ELSE
            stack_size_at(elsec)(i - 1 - clength(thenc))
          ENDIF,
        sblock(stats):
          IF i < clength(car(stats)) THEN
            stack_size_at(car(stats))(i)
          ELSE
            stack_size_at(sblock(cdr(stats)))(i-clength(car(stats)))
          ENDIF
        ELSE 0
      ENDCASES
    MEASURE measure_stat(s1)

    stack_size_at_zero: LEMMA
      FORALL (s1 | clength(s1) > 0):
        stack_size_at(s1)(0) = 0

    % is_fun_call_at(s1)(i: below(clength(s1))) : RECURSIVE bool =
    %   CASES s1 OF
    %     sdecl(tp1, s2):
    %       IF i = 0 THEN
    %         FALSE
    %       ELSIF i < clength(s2) + 1 THEN
    %         is_fun_call_at(s2)(i - 1)
    %       ELSE
    %         FALSE
    %       ENDIF,
    %     sif(v1, thenc, elsec):
    %       IF i = 0 THEN
    %         FALSE
    %       ELSIF i < clength(thenc) + 1 THEN
    %         is_fun_call_at(thenc)(i - 1)
    %       ELSIF i < clength(thenc) + clength(elsec) + 1 THEN
    %         is_fun_call_at(elsec)(i - 1 - clength(thenc))
    %       ELSE
    %         FALSE
    %       ENDIF,
    %     sblock(stats):
    %       IF i < clength(car(stats)) THEN
    %         is_fun_call_at(car(stats))(i)
    %       ELSE
    %         is_fun_call_at(sblock(cdr(stats)))(i-clength(car(stats)))
    %       ENDIF,
    %     sassign(lv1, e1): ecall?(e1),
    %     scall(f, args): TRUE
    %     ELSE FALSE
    %   ENDCASES
    % MEASURE measure_stat(s1)
    
    executable_stat?(s1, (i: below(clength(s1)))): bool =
      CASES s1 OF
        sdecl(tp1, s2): i = 0 OR i = 1 + clength(s2),
        sif(v1, thenc, elsec): i = 0,
        sblock(stats): FALSE
        ELSE TRUE
      ENDCASES

    extract_stat(s1)(i: below(clength(s1))) : RECURSIVE
        {(s2, j) | j < clength(s2) AND executable_stat?(s2, j)} =
      CASES s1 OF
        sdecl(tp1, s2):
          IF i = 0 THEN
            (s1, i)
          ELSIF i < 1 + clength(s2) THEN
            extract_stat(s2)(i - 1)
          ELSE
            (s1, i)
          ENDIF,
        sif(v1, thenc, elsec):
          IF i = 0 THEN
            (s1, i)
          ELSIF i < 1 + clength(thenc) THEN
            extract_stat(thenc)(i - 1)
          ELSE
            extract_stat(elsec)(i - 1 - clength(thenc))
          ENDIF,
        sblock(stats):
          IF i < clength(car(stats)) THEN
            extract_stat(car(stats))(i)
          ELSE
            extract_stat(sblock(cdr(stats)))(i-clength(car(stats)))
          ENDIF
        ELSE (s1, i)
      ENDCASES
    MEASURE measure_stat(s1)

    is_return_at_end?(s1) : RECURSIVE bool =
      CASES s1 OF
        sif(v1, thenc, elsec): is_return_at_end?(thenc) AND is_return_at_end?(elsec),
        sblock(stats):
          IF stats`length = 0 THEN FALSE
          ELSIF stats`length = 1 THEN is_return_at_end?(car(stats))
          ELSE is_return_at_end?(sblock(cdr(stats))) ENDIF,
        sassign(lv1, e1): creturn?(lv1)
        ELSE FALSE
      ENDCASES
    MEASURE measure_stat(s1)

    is_return?(s1)(i: below(clength(s1))) : bool =
      LET (s2, j) = extract_stat(s1)(i) IN
      sassign?(s2) AND creturn?(aval(s2)) AND j = clength(s2) - 1

    is_fun_call_at(s1)(i: below(clength(s1)), fct: nat) : bool =
      LET (s2, j) = extract_stat(s1)(i) IN
%      (sassign?(s2) AND ecall?(aexpr(s2)) AND fct = cfun(aexpr(s2)) AND j = cargs(aexpr(s2))`length) OR
%        (scall?(s2) AND fct = sfun(s2) AND j = sargs(s2)`length)
      (sassign?(s2) AND ecall?(aexpr(s2)) AND fct = cfun(aexpr(s2)) AND j = 2 * cargs(aexpr(s2))`length) OR
        (scall?(s2) AND fct = sfun(s2) AND j = 2 * sargs(s2)`length)

    %TODO definitions are well typed
    %actually, is this really needed? we can just let the C compiler check that
    Definition: TYPE = [#
        arity: nat,
        body: {s1 |
            (FORALL i: vars(s1)(i) IMPLIES i < arity)
          AND clength(s1) > 0
          AND is_return_at_end?(s1)
        }
    #]
    D: VAR finseq[Definition]

    extra_size_at(s1)(i: below(clength(s1))): nat =
      LET (s2, j) = extract_stat(s1)(i) IN
      IF scall?(s2) AND j <= 2 * sargs(s2)`length THEN
        IF even?(j) THEN j/2 ELSE (j-1)/2 + 1 ENDIF
      ELSIF sassign?(s2) AND ecall?(aexpr(s2)) AND j <= 2 * cargs(aexpr(s2))`length THEN
        IF even?(j) THEN j/2 ELSE (j-1)/2 + 1 ENDIF
      ELSE
        0
      ENDIF

    cstack_frame(D): TYPE = [#
      ffct: below(D`length),
      fpc: below(clength(D`seq(ffct)`body)),
      %fstack: {S : Stack | S`length = stack_size_at(D`seq(ffct)`body)(fpc) + D`seq(ffct)`arity}
      fdepth: {k : nat | k = stack_size_at(D`seq(ffct)`body)(fpc) + D`seq(ffct)`arity OR
                     (k <= stack_size_at(D`seq(ffct)`body)(fpc) + D`seq(ffct)`arity AND
                        is_return?(D`seq(ffct)`body)(fpc))}
    #]

    fdepth_sum(D)(C: finseq[cstack_frame(D)]): nat =
      Sigma((LAMBDA i: i < C`length), (LAMBDA i: IF i < C`length THEN C`seq(i)`fdepth ELSE 0 ENDIF))

    fdepth_sum_eq: LEMMA
      FORALL (C1, C2: finseq[cstack_frame(D)]):
        C1`length = C2`length AND
        (FORALL (i: below(C1`length)): C1`seq(i)`fdepth = C2`seq(i)`fdepth) IMPLIES
          fdepth_sum(D)(C1) = fdepth_sum(D)(C2)

    fdepth_sum_pop: LEMMA
      FORALL (C: finseq[cstack_frame(D)]):
        C`length > 0 IMPLIES
          fdepth_sum(D)(C) = C`seq(C`length - 1)`fdepth + fdepth_sum(D)(pop(C))

    expected_stack_size(D)(C: finseq[cstack_frame(D)]): nat =
       fdepth_sum(D)(C) +
        IF C`length > 0 THEN
          extra_size_at(D`seq(C`seq(C`length - 1)`ffct)`body)(C`seq(C`length - 1)`fpc)
        ELSE
          0
        ENDIF

    cstate: TYPE = [#
      error: boolean,
      cdefs: finseq[Definition],
      callstack: {C : finseq[cstack_frame(cdefs)] |
        FORALL (i | i < C`length - 1):
          is_fun_call_at(cdefs`seq(C`seq(i)`ffct)`body)(C`seq(i)`fpc, C`seq(i+1)`ffct)
      },
%      stack : Stack,
% +args pushed when calling
      stack: {S: Stack | S`length = expected_stack_size(cdefs)(callstack)
%      Sigma((LAMBDA i: i < callstack`length),
%          LAMBDA i: IF i < callstack`length THEN callstack`seq(i)`fdepth ELSE 0 ENDIF) +
%        IF callstack`length > 0 THEN
%          extra_size_at(cdefs`seq(callstack`seq(callstack`length - 1)`ffct)`body)
%            (callstack`seq(callstack`length - 1)`fpc)
%        ELSE
%          0
%        ENDIF
      },
      domain: finite_set[nat],
      store: Store(domain),
      return_value: cvalue
    #]

    cS, cS1, cS2: VAR cstate

    next_pc(s1)(i | i < clength(s1)) : RECURSIVE upto(clength(s1)) =
      CASES s1 OF
        sdecl(tp1, s2):
          IF i = 0 THEN
            1
          ELSIF i < 1 + clength(s2) THEN
            1 + next_pc(s2)(i - 1)
          ELSE
            2 + clength(s2)
          ENDIF,
        sif(v1, thenc, elsec):
          IF i = 0 THEN % this should never matter however
            1
          ELSIF i < 1 + clength(thenc) THEN
            IF next_pc(thenc)(i - 1) = clength(thenc) THEN
              1 + clength(thenc) + clength(elsec)
            ELSE
              1 + next_pc(thenc)(i - 1)
            ENDIF
          ELSE
            1 + clength(thenc) + next_pc(elsec)(i - 1 - clength(thenc))
          ENDIF,
        sblock(stats):
          IF i < clength(car(stats)) THEN
            next_pc(car(stats))(i)
          ELSE
            clength(car(stats)) + next_pc(sblock(cdr(stats)))(i-clength(car(stats)))
          ENDIF
        ELSE i + 1
      ENDCASES
    MEASURE measure_stat(s1)

    is_return_at_end_clength: LEMMA
      is_return_at_end?(s1) IMPLIES clength(s1) > 0

    next_pc_no_overflow: LEMMA
      i < clength(s1) AND
        NOT is_return?(s1)(i) AND
        is_return_at_end?(s1) IMPLIES
          next_pc(s1)(i) < clength(s1)

    next_pc_overflow: LEMMA
      clength(s1) > 0 IMPLIES next_pc(s1)(clength(s1) - 1) = clength(s1)

    extract_stat_index: LEMMA
      i < clength(s1) IMPLIES
         i + clength(extract_stat(s1)(i)`1) - extract_stat(s1)(i)`2 <= clength(s1)

    next_pc_if_upto: LEMMA
      i < clength(s1) AND sif?(extract_stat(s1)(i)`1) IMPLIES
        i + 1 + clength(iftrue(extract_stat(s1)(i)`1)) <= clength(s1)

    next_pc_if_no_overflow: LEMMA
      i < clength(s1) AND 
        is_return_at_end?(s1) IMPLIES
        (LET (s2, j) = extract_stat(s1)(i) IN
         sif?(s2) IMPLIES
           i + 1 + clength(iftrue(s2)) < clength(s1))

    stack_size_at_overflow: LEMMA
      i < clength(s1) AND
        NOT sdecl?(extract_stat(s1)(i)`1) AND
        next_pc(s1)(i) = clength(s1) IMPLIES
          stack_size_at(s1)(i) = 0

    stack_size_at_next_pc: LEMMA
      i < clength(s1) AND next_pc(s1)(i) < clength(s1) AND
        NOT sdecl?(extract_stat(s1)(i)`1) IMPLIES
          stack_size_at(s1)(next_pc(s1)(i)) = stack_size_at(s1)(i)

    stack_size_at2(s1)(i: upto(clength(s1))): nat =
      IF i = clength(s1) THEN 0 ELSE stack_size_at(s1)(i) ENDIF


    stack_size_at2_alt : LEMMA
     FORALL (i: upto(clength(s1))):
     stack_size_at2(s1)(i) =
      CASES s1 OF
        sdecl(tp1, s2):
          IF i = 0 THEN
            0
          ELSIF i < clength(s1) THEN
            1 + stack_size_at2(s2)(i - 1)
          ELSE
            0
          ENDIF,
        sif(v1, thenc, elsec):
          IF i = 0 THEN
            0
          ELSIF i < clength(thenc) + 1 THEN
            stack_size_at(thenc)(i - 1)
          ELSE
            stack_size_at2(elsec)(i - 1 - clength(thenc))
          ENDIF,
        sblock(stats):
          IF stats`length = 0 THEN
            0
          ELSIF i < clength(car(stats)) THEN
            stack_size_at(car(stats))(i)
          ELSE
            stack_size_at2(sblock(cdr(stats)))(i-clength(car(stats)))
          ENDIF
        ELSE 0
      ENDCASES

    stack_size_at_next_pc_iftrue: LEMMA
      i + 1 < clength(s1) AND
       sif?(extract_stat(s1)(i)`1) IMPLIES
          stack_size_at(s1)(i + 1) = stack_size_at(s1)(i)

    stack_size_at_next_pc_iffalse: LEMMA
      i < clength(s1) IMPLIES
       (LET (s2, j) = extract_stat(s1)(i) IN
        sif?(s2) AND i + 1 + clength(iftrue(s2)) <= clength(s1) IMPLIES
           stack_size_at2(s1)(i + 1 + clength(iftrue(s2))) = stack_size_at(s1)(i))

    next_pc_decl_begin_no_overflow: LEMMA
      i < clength(s1) AND sdecl?(extract_stat(s1)(i)`1) AND extract_stat(s1)(i)`2 = 0 IMPLIES
        next_pc(s1)(i) < clength(s1)

    stack_size_at_next_pc_decl_begin: LEMMA
      i < clength(s1) AND next_pc(s1)(i) < clength(s1) AND
        sdecl?(extract_stat(s1)(i)`1) AND extract_stat(s1)(i)`2 = 0 IMPLIES
          stack_size_at(s1)(next_pc(s1)(i)) = stack_size_at(s1)(i) + 1

    AUTO_REWRITE+ list2finseq_finseq2list
    AUTO_REWRITE+ finseq2list_list2finseq

    stack_size_at_next_pc_decl_end: LEMMA
      i < clength(s1) AND next_pc(s1)(i) <= clength(s1) AND
        sdecl?(extract_stat(s1)(i)`1) AND
        extract_stat(s1)(i)`2 = clength(extract_stat(s1)(i)`1) - 1 IMPLIES
          stack_size_at2(s1)(next_pc(s1)(i)) = stack_size_at(s1)(i) - 1

    stack_size_at_vars: LEMMA
      i < clength(s1) AND NOT sdecl?(extract_stat(s1)(i)`1) IMPLIES
        vars(extract_stat(s1)(i)`1)(j + stack_size_at(s1)(i)) IMPLIES vars(s1)(j)

    extract_stat_compose: LEMMA
      i < clength(s1) AND j + extract_stat(s1)(i)`2 < clength(extract_stat(s1)(i)`1) IMPLIES
        extract_stat(s1)(i + j) = extract_stat(extract_stat(s1)(i)`1)(j + extract_stat(s1)(i)`2)

    extra_size_at_expand: LEMMA
     FORALL (i: below(clength(s1))):
     extra_size_at(s1)(i) =
      CASES s1 OF
        sdecl(tp1, s2):
          IF i = 0 THEN
            0
          ELSIF i < 1 + clength(s2) THEN
            extra_size_at(s2)(i - 1)
          ELSE
            0
          ENDIF,
        sif(v1, thenc, elsec):
          IF i = 0 THEN
            0
          ELSIF i < clength(thenc) + 1 THEN
            extra_size_at(thenc)(i - 1)
          ELSE
            extra_size_at(elsec)(i - 1 - clength(thenc))
          ENDIF,
        sblock(stats):
          IF i < clength(car(stats)) THEN
            extra_size_at(car(stats))(i)
          ELSE
            extra_size_at(sblock(cdr(stats)))(i-clength(car(stats)))
          ENDIF
        ELSE extra_size_at(s1)(i)
      ENDCASES

    extra_size_at_zero: LEMMA
      clength(s1) > 0 IMPLIES extra_size_at(s1)(0) = 0

    next_pc_extract: LEMMA
      i < clength(s1) AND
        NOT sdecl?(extract_stat(s1)(i)`1) AND NOT sif?(extract_stat(s1)(i)`1) AND
        extract_stat(s1)(i)`2 < clength(extract_stat(s1)(i)`1) - 1 IMPLIES
      next_pc(s1)(i) < clength(s1) AND
        extract_stat(s1)(next_pc(s1)(i))`1 = extract_stat(s1)(i)`1 AND
        extract_stat(s1)(next_pc(s1)(i))`2 = extract_stat(s1)(i)`2 + 1

    make_call((cS | cS`callstack`length > 0), (f: nat |
      is_fun_call_at(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)
        (cS`callstack`seq(cS`callstack`length - 1)`fpc, f) %AND
%      (f < cS`cdefs`length IMPLIES
%        extra_size_at(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)
%          (cS`callstack`seq(cS`callstack`length - 1)`fpc) = cS`cdefs`seq(f)`arity)
    )): cstate =
      IF f < cS`cdefs`length AND
           extra_size_at(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)
             (cS`callstack`seq(cS`callstack`length - 1)`fpc) = cS`cdefs`seq(f)`arity THEN
        cS WITH [`callstack := add((# ffct := f,
                                      fpc := 0,
                                      fdepth := cS`cdefs`seq(f)`arity
                                    #), cS`callstack)]
      ELSE
        cS WITH [`error := TRUE]
      ENDIF

    extra_size_at_next_pc_overflow: LEMMA
      i < clength(s1) AND next_pc(s1)(i) >= clength(s1) AND
        NOT scall?(extract_stat(s1)(i)`1) IMPLIES
        extra_size_at(s1)(i) = 0

    extra_size_at_next_pc: LEMMA
      i < clength(s1) AND next_pc(s1)(i) < clength(s1) AND
        NOT scall?(extract_stat(s1)(i)`1) AND
        (NOT (sassign?(extract_stat(s1)(i)`1) AND ecall?(aexpr(extract_stat(s1)(i)`1))) OR
          extract_stat(s1)(i)`2 = clength(extract_stat(s1)(i)`1) - 1)
        IMPLIES
          extra_size_at(s1)(next_pc(s1)(i)) = extra_size_at(s1)(i)

    extra_size_at_next_pc_funcall: LEMMA
      FORALL (f: nat):
        i < clength(s1) AND is_fun_call_at(s1)(i, f) AND next_pc(s1)(i) < clength(s1)
          IMPLIES
             extra_size_at(s1)(next_pc(s1)(i)) = 0

    extra_size_at_next_pc_iftrue: LEMMA
      i + 1 < clength(s1) AND
        sif?(extract_stat(s1)(i)`1)
        IMPLIES
          extra_size_at(s1)(i + 1) = extra_size_at(s1)(i)

    extra_size_at_next_pc_iffalse: LEMMA
      i < clength(s1) AND
        sif?(extract_stat(s1)(i)`1) AND
        i + 1 + clength(iftrue(extract_stat(s1)(i)`1)) < clength(s1)
        IMPLIES
          extra_size_at(s1)(i + 1 + clength(iftrue(extract_stat(s1)(i)`1))) =
            extra_size_at(s1)(i)

    cframe_vars: LEMMA
      FORALL (cf: cstack_frame(D)):
        NOT sdecl?(extract_stat(D`seq(cf`ffct)`body)(cf`fpc)`1) AND
        NOT is_return?(D`seq(cf`ffct)`body)(cf`fpc) IMPLIES
          vars(extract_stat(D`seq(cf`ffct)`body)(cf`fpc)`1)(j) IMPLIES j < cf`fdepth

    cstate_vars: LEMMA
      cS`callstack`length > 0 IMPLIES
      LET cf = cS`callstack`seq(cS`callstack`length - 1) IN
        NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1) AND
        NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND
        vars(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)(j) IMPLIES
          j + extra_size_at(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) < cS`stack`length

    cframe_next_pc(D)(cf: cstack_frame(D) |
      NOT is_return?(D`seq(cf`ffct)`body)(cf`fpc) AND
      NOT sdecl?(extract_stat(D`seq(cf`ffct)`body)(cf`fpc)`1)
    ): cstack_frame(D) =
      cf WITH [`fpc := next_pc(D`seq(cf`ffct)`body)(cf`fpc)]

    reduce(cS | NOT cS`error): cstate =
      IF cS`callstack`length = 0 THEN
        cS
      ELSE
        LET lf = cS`callstack`seq(cS`callstack`length - 1) IN
        LET fbody = cS`cdefs`seq(lf`ffct)`body IN
        LET (s1, i) = extract_stat(fbody)(lf`fpc) IN
        CASES s1 OF
          sdecl(tp, s2):
            IF i = 0 THEN % Push new variable TODO undefined
              cS WITH [`stack := add(cundef, cS`stack),
                       `callstack`seq(cS`callstack`length - 1) :=
                         lf WITH [
                          `fdepth := lf`fdepth + 1,
                          `fpc := next_pc(fbody)(lf`fpc)
                         ]
                      ]

            ELSE % Pop it
              cS WITH [`stack := pop(cS`stack),
                       `callstack`seq(cS`callstack`length - 1) :=
                         lf WITH [
                          `fdepth := lf`fdepth - 1,
                          `fpc := next_pc(fbody)(lf`fpc)
                         ]
                      ]
            ENDIF,
          sif(v1, cthen, celse):
            LET x = cS`stack`seq(cS`stack`length - 1 - cindex(v1)) IN
            IF x = cundef THEN
              cS WITH [`error := TRUE]
            ELSIF x = cintv(0) OR x = cnil THEN
              cS WITH [`callstack`seq(cS`callstack`length - 1)`fpc := lf`fpc + clength(cthen) + 1]
            ELSE
              cS WITH [`callstack`seq(cS`callstack`length - 1)`fpc := lf`fpc + 1]
            ENDIF,
          sfree(v1):
            LET x = cS`stack`seq(cS`stack`length - 1 - cindex(v1)) IN
            % Freeing an int or something outside the domain is liable to memory
            % corruption, so this is an error.
            % However, freeing null it legal and is a nop.
            IF cintv?(x) OR (cref?(x) AND NOT cS`domain(crefindex(x))) OR x = cundef THEN
              cS WITH [`error := TRUE]
            ELSE
              LET ndomain = IF x = cnil THEN cS`domain ELSE remove(crefindex(x), cS`domain) ENDIF IN
              cS WITH [`domain := ndomain,
                       `store := LAMBDA (x: (ndomain)): cS`store(x),
                       `callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)]
            ENDIF,
          smalloc(n):
            cS WITH [`domain := add(least_out(cS`domain), cS`domain),
                     `store := cS`store WITH
                       [(least_out(cS`domain)) |->
                         (# length := n, seq := LAMBDA (i: below(n)): cundef #)],
                     `callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)],
          scall(f, args):
%            IF i < args`length THEN % Push arg
%              cS WITH [`callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf),
%                       `stack := add(cS`stack(cS`stack`length - 1 - i - cindex(args`seq(i))), cS`stack)
%              ]
            IF i < 2 * args`length THEN % Push arg
              IF even?(i) THEN
                cS WITH [`callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf),
                         `stack := add(cS`stack(cS`stack`length - 1 - (i/2) - cindex(args`seq(i/2))), cS`stack)
                ]
              ELSE
                cS WITH [`callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)]
              ENDIF
            ELSE % Call
              make_call(cS, f)
            ENDIF,
          sassign(lv1, e1):
            IF ecall?(e1) AND i <= 2 * cargs(e1)`length THEN
%              IF i < cargs(e1)`length THEN % Push arg
%                cS WITH [`callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf),
%                         `stack := add(cS`stack(cS`stack`length - 1 - i - cindex(cargs(e1)`seq(i))), cS`stack)
%                ]
              IF i < 2 * cargs(e1)`length THEN % Push arg
                IF even?(i) THEN
                  cS WITH [`callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf),
                           `stack := add(cS`stack(cS`stack`length - 1 - (i/2) - cindex(cargs(e1)`seq(i/2))), cS`stack)
                  ]
                ELSE
                  cS WITH [`callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)]
                ENDIF
              ELSE % Call
                make_call(cS, cfun(e1))
              ENDIF
            ELSIF i = 0 THEN % compute rhs and put in return value
              CASES e1 OF
                econstant(n):
                  cS WITH [`return_value := cintv(n),
                           `callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)],
                enil:
                  cS WITH [`return_value := cnil,
                           `callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)],
                ebuiltin(b, v1, v2):
                  LET x1 = cS`stack`seq(cS`stack`length - 1 - cindex(v1)) IN
                  LET x2 = cS`stack`seq(cS`stack`length - 1 - cindex(v2)) IN
                  IF cintv?(x1) AND cintv?(x2) THEN
                    cS WITH [`return_value := cintv(cintvalue(x1) + cintvalue(x2)),
                             `callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)]
                  ELSE
                    cS WITH [`error := TRUE]
                  ENDIF,
                elv(lr1):
                  CASES lr1 OF
                    cvar(i):
                      cS WITH [`return_value := cS`stack`seq(cS`stack`length - 1 - i),
                               `callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)],
                    caccess(v1, v2):
                      LET r = cS`stack`seq(cS`stack`length - 1 - cindex(v1)) IN
                      LET i = cS`stack`seq(cS`stack`length - 1 - cindex(v2)) IN
                      IF cref?(r) AND cS`domain(crefindex(r))
                          AND cintv?(i) AND cintvalue(i) >= 0
                          AND cintvalue(i) < cS`store(crefindex(r))`length THEN
                        cS WITH [`return_value := cS`store(crefindex(r))`seq(cintvalue(i)),
                                 `callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)]
                      ELSE
                        cS WITH [`error := TRUE]
                      ENDIF,
                    cfield(v1, k):
                      LET r = cS`stack`seq(cS`stack`length - 1 - cindex(v1)) IN
                      IF cref?(r) AND cS`domain(crefindex(r)) AND k < cS`store(crefindex(r))`length THEN
                        cS WITH [`return_value := cS`store(crefindex(r))`seq(k),
                                 `callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)]
                      ELSE
                        cS WITH [`error := TRUE]
                     ENDIF
                  ENDCASES
              ENDCASES
            ELSE
              CASES lv1 OF
                cvar(i):
                  cS WITH [`stack`seq(cS`stack`length - 1 - i) := cS`return_value,
                           `callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)],
                caccess(v1, v2):
                  LET r = cS`stack`seq(cS`stack`length - 1 - cindex(v1)) IN
                  LET i = cS`stack`seq(cS`stack`length - 1 - cindex(v2)) IN
                  IF cref?(r) AND cS`domain(crefindex(r))
                      AND cintv?(i) AND cintvalue(i) >= 0
                      AND cintvalue(i) < cS`store(crefindex(r))`length THEN
                    cS WITH [`store(crefindex(r))`seq(cintvalue(i)) := cS`return_value,
                             `callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)]
                  ELSE
                    cS WITH [`error := TRUE]
                  ENDIF,
                cfield(v1, k):
                  LET r = cS`stack`seq(cS`stack`length - 1 - cindex(v1)) IN
                  IF cref?(r) AND cS`domain(crefindex(r)) AND k < cS`store(crefindex(r))`length THEN
                    cS WITH [`store(crefindex(r))`seq(k) := cS`return_value,
                             `callstack`seq(cS`callstack`length - 1) := cframe_next_pc(cS`cdefs)(lf)]
                  ELSE
                    cS WITH [`error := TRUE]
                  ENDIF,
                creturn:
                  IF lf`fdepth > 0 THEN
                    cS WITH [`callstack`seq(cS`callstack`length - 1)`fdepth := lf`fdepth - 1,
                             `stack := pop(cS`stack)]
                  ELSIF cS`callstack`length > 1 THEN
                    LET nc = pop(cS`callstack) IN
                    LET nlf = nc`seq(nc`length - 1) IN
                    cS WITH [`callstack := nc WITH
                      [`seq(nc`length - 1) := cframe_next_pc(cS`cdefs)(nlf)]
                    ]
                  ELSE
                    cS WITH [`callstack := pop(cS`callstack)]
                  ENDIF
              ENDCASES
            ENDIF
        ENDCASES
      ENDIF

  END creduction
