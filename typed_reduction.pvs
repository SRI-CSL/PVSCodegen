typed_reduction: THEORY
  BEGIN

    IMPORTING IExpression, IL, finite_set_theorems, finseq_theorems, reduction, typeinfo, typeinfo_adt, preprocess

    typeinfo_ctx: DATATYPE
      BEGIN
        letct(letctype: nat, lcrhs: typeinfo_ctx, lcbody: typeinfo): letct?
        popct(pctbody: typeinfo_ctx): popct?
        holet: holet?
      END typeinfo_ctx

    A, B, C: VAR IExpression
    tA, tB, tC: VAR typeinfo
    K, K1, K2: VAR IContext
    tK, tK1, tK2: VAR typeinfo_ctx

    typeinfo_fill(tK, tA): RECURSIVE typeinfo =
      CASES tK OF
        holet: tA,
        letct(n, tK1, tB): lett(n, typeinfo_fill(tK1, tA), tB),
        popct(tK1): popt(typeinfo_fill(tK1, tA))
      ENDCASES
    MEASURE tK BY <<

    %a, b, c: VAR (atom?)
    u, v, w: VAR (value?)
    x, y, z: VAR (variable?)
    i, j, k, hole_type: VAR nat
    F: VAR finite_set[nat]

    S, S1, S2: VAR Stack
    nS: VAR neStack

    dom: VAR finite_set[nat]
    
    Store(dom): TYPE = [(dom) -> finseq[(domainValue?(dom))]]

    Definition: TYPE = [# arity: nat, body: {A |  pure?(A) AND FORALL i: vars(A)(i) IMPLIES i < arity} #]

    tdef: TYPE = [# return_type: nat, args_type: finseq[nat], body_type: typeinfo #]

    Defs: TYPE = finseq[Definition]

    D: VAR Defs

    stypes, stypes2: VAR finseq[nat]
    dom_types, dom_types2: VAR [nat -> nat]
    def_types: VAR finseq[tdef]

    expr_type(tA): RECURSIVE nat =
      CASES tA OF
        lett(t, rhs, body): expr_type(body),
        popt(pbody): expr_type(pbody),
        releaset(rbody): expr_type(rbody),
        iftt(tthen, telse): expr_type(tthen),
        leaft(n): n
      ENDCASES
    MEASURE tA BY <<

    tvars(A)(i): RECURSIVE bool =
      CASES A OF
        variable(j, b): i = j,
        application(f, args): in_varlist(args)(i),
        letexpr(B, C): tvars(B)(i) OR tvars(C)(i+1),
        ift(x, B, C): i = index(x) OR tvars(B)(i) OR tvars(C)(i),
        update(x, y, z): i = index(x) OR i = index(y) OR i = index(z),
        lookup(x, y): i = index(x) OR i = index(y),
        pop(B): i >= 1 AND tvars(B)(i-1),
        release(x, B): i = index(x) OR tvars(B)(i)
        ELSE FALSE
      ENDCASES
    MEASURE A BY <<

    popn(L: finseq[nat], n: upto(L`length)): finseq[nat] =
      (# length := L`length - n, seq := LAMBDA (i: below(L`length - n)): L`seq(i) #)

    popn_popn: LEMMA
      FORALL (L: finseq[nat]):
        i + j <= L`length IMPLIES popn(popn(L, i), j) = popn(L, i + j)

    popn_zero: LEMMA
      FORALL (L: finseq[nat]):
        popn(L, 0) = L

    AUTO_REWRITE+ popn_zero
    AUTO_REWRITE+ popn_popn

    add_append: LEMMA
      FORALL (L, M: finseq[nat], x : nat):
        L o add(x, M) = add(x, L o M)

    popn_append: LEMMA
      FORALL (L, M: finseq[nat]):
        i <= M`length IMPLIES L o popn(M, i) = popn(L o M, i)

    is_well_typed(A: (contextPure?), tA, (stypes | popDepth(A) <= stypes`length AND FORALL i: cvars(A)(i) IMPLIES i < stypes`length), dom_types, def_types): RECURSIVE bool =
      CASES A OF
        letexpr(rhs, body):
          lett?(tA) AND
          is_well_typed(rhs, lrhs(tA), stypes, dom_types, def_types) AND
          expr_type(lrhs(tA)) = lettype(tA) AND
          is_well_typed(body, lbody(tA), add(lettype(tA), popn(stypes, popDepth(letrhs(A)))), dom_types, def_types),
        pop(body):
          popt?(tA) AND is_well_typed(body, ptbody(tA), stypes, dom_types, def_types),
        release(x, body):
          is_well_typed(body, tA, stypes, dom_types, def_types),
        constant(n): tA = leaft(0),
        nil: leaft?(tA) and leaftype(tA) > 0,
        ref(index): leaft?(tA) AND leaftype(tA) = dom_types(index) + 1,
        variable(index, m): leaft?(tA) AND leaftype(tA) = stypes`seq(stypes`length - 1 - index),
        ift(c, texpr, eexpr):
          iftt?(tA) AND expr_type(tthen(tA)) = expr_type(telse(tA)) AND
          is_well_typed(c, leaft(0), stypes, dom_types, def_types) AND
          is_well_typed(texpr, tthen(tA), stypes, dom_types, def_types) AND
          is_well_typed(eexpr, telse(tA), stypes, dom_types, def_types),
        newint(n): tA = leaft(1),
        newref(n): leaft?(tA) AND leaftype(tA) > 1,
        lookup(arr, pos):
          leaft?(tA) AND
          is_well_typed(arr, leaft(leaftype(tA) + 1), stypes, dom_types, def_types) AND
          is_well_typed(pos, leaft(0), stypes, dom_types, def_types),
        update(arr, pos, rhs):
          leaft?(tA) AND leaftype(tA) > 0 AND
          is_well_typed(arr, tA, stypes, dom_types, def_types) AND
          is_well_typed(pos, leaft(0), stypes, dom_types, def_types) AND
          is_well_typed(rhs, leaft(leaftype(tA) - 1), stypes, dom_types, def_types),
        application(f, args):
          f < def_types`length AND tA = leaft(def_types`seq(f)`return_type) AND
          length(args) = def_types`seq(f)`args_type`length AND
          FORALL (i: below(length(args))):
            is_well_typed(nth(args, i), leaft(def_types`seq(f)`args_type`seq(i)), stypes, dom_types, def_types)
      ENDCASES
    MEASURE (A :: IExpression) BY <<

    is_well_typed_dom: LEMMA
      FORALL (A, tA, (stypes | popDepth(A) <= stypes`length AND FORALL i: cvars(A)(i) IMPLIES i < stypes`length), dom_types, dom_types2, def_types):
        contextPure?(A) AND (FORALL i: refs(A)(i) IMPLIES dom_types(i) = dom_types2(i)) IMPLIES
          is_well_typed(A, tA, stypes, dom_types, def_types) =
            is_well_typed(A, tA, stypes, dom_types2, def_types)

    letApply_type(arity: nat, (args_type: list[nat] | length(args_type) = arity), tA): RECURSIVE typeinfo =
      IF arity = 0 THEN
        tA
      ELSE
        lett(car(args_type), leaft(car(args_type)), letApply_type(arity - 1, cdr(args_type), tA))
      ENDIF
    MEASURE arity

    is_well_typed_extend_stack: LEMMA
      FORALL (A, tA, (stypes | popDepth(A) <= stypes`length AND FORALL i: cvars(A)(i) IMPLIES i < stypes`length), stypes2, dom_types, def_types):
        contextPure?(A) IMPLIES
          is_well_typed(A, tA, stypes2 o stypes, dom_types, def_types) =
            is_well_typed(A, tA, stypes, dom_types, def_types)

    is_well_typed_letApply: LEMMA
      FORALL (arity: nat, (args: list[(variable?)] | length(args) = arity),
                          (args_type: list[nat] | length(args_type) = arity)):
        pure?(A) AND
        (FORALL i: cvars(A)(i) IMPLIES i < stypes`length + arity) AND
        (FORALL i: in_varlist(args)(i) IMPLIES i < stypes`length) AND
        (FORALL (i: below(arity)): is_well_typed(nth(args, i), leaft(nth(args_type, i)), stypes, dom_types, def_types)) AND
        is_well_typed(A, tA, stypes o args_type, (LAMBDA i: 0), def_types)
        IMPLIES
        is_well_typed(letApply(arity, args, A),
                      letApply_type(arity, args_type, tA),
                      stypes, dom_types, def_types)

    letApply_expr_type: LEMMA
      FORALL (arity: nat, (args_type: list[nat] | length(args_type) = arity), tA):
        expr_type(letApply_type(arity, args_type, tA)) = expr_type(tA)

    ctx_type(tK, hole_type): RECURSIVE nat =
      CASES tK OF
        holet: hole_type,
        letct(n, tK1, tA): expr_type(tA),
        popct(tK1): ctx_type(tK1, hole_type)
      ENDCASES
    MEASURE tK BY <<

    is_well_typed_ctx(K: (cpure?), tK, (stypes | popDepth(K) <= stypes`length AND
      FORALL i: cvars(K)(i) IMPLIES i < stypes`length), dom_types, def_types, hole_type): RECURSIVE bool =
        CASES K OF
          hole: holet?(tK),
          letc(K1, B):
            letct?(tK) AND
            is_well_typed_ctx(K1, lcrhs(tK), stypes, dom_types, def_types, hole_type) AND
            ctx_type(lcrhs(tK), hole_type) = letctype(tK) AND
            is_well_typed(B, lcbody(tK), add(letctype(tK), popn(stypes, popDepth(letcrhs(K)))), dom_types, def_types),
          popc(K1):
            popct?(tK) AND
            is_well_typed_ctx(K1, pctbody(tK), stypes, dom_types, def_types, hole_type)
        ENDCASES
    MEASURE (K :: IContext) BY <<

    is_well_typed_ctx_dom: LEMMA
      FORALL (K, tK, (stypes | popDepth(K) <= stypes`length AND
        FORALL i: cvars(K)(i) IMPLIES i < stypes`length), dom_types, dom_types2, def_types, hole_type):
          cpure?(K) IMPLIES
            is_well_typed_ctx(K, tK, stypes, dom_types, def_types, hole_type) =
              is_well_typed_ctx(K, tK, stypes, dom_types2, def_types, hole_type)

    value_of_type(u, i, dom_types): boolean =
      CASES u OF
        constant(n): i = 0,
        nil: i > 0,
        ref(r): i > 0 and dom_types(r) = i - 1
      ENDCASES

    value_well_typed: LEMMA
      is_well_typed(u, tA, stypes, dom_types, def_types) =
        (leaft?(tA) AND value_of_type(u, leaftype(tA), dom_types))

    typed_state: TYPE = [#
      state: estate,
      dom_types: {dom_types |
        FORALL (r: (state`domain)):
          FORALL (j: below(state`store(r)`length)):
            value_of_type(state`store(r)`seq(j), dom_types(r), dom_types)
      },
      stack_types: {stypes |
        stypes`length = state`stack`length AND
        FORALL (i: below(stypes`length)):
          value_of_type(state`stack`seq(i), stypes`seq(i), dom_types)
      },
      def_types: finseq[tdef],
      redex_type: {tA | is_well_typed(state`redex, tA, stack_types, dom_types, def_types)},
      context_type: {tK |
        is_well_typed_ctx(state`context, tK, popn(stack_types, popDepth(state`redex)),
                          dom_types, def_types, expr_type(redex_type)) }
    #]

    tS, tS1, tS2: VAR typed_state

    fill_type: LEMMA
      expr_type(typeinfo_fill(tK, tA)) = ctx_type(tK, expr_type(tA))

    fill_well_typed: LEMMA
      contextPure?(A) AND cpure?(K) AND
      popDepth(A) + popDepth(K) <= stypes`length AND
      (FORALL i: cvars(A)(i) IMPLIES i < stypes`length) AND
      (FORALL i: cvars(K)(i) IMPLIES i + popDepth(A) < stypes`length) AND
      is_well_typed(A, tA, stypes, dom_types, def_types) AND
      is_well_typed_ctx(K, tK, popn(stypes, popDepth(A)), dom_types, def_types, expr_type(tA)) IMPLIES
        is_well_typed(fill(K, A), typeinfo_fill(tK, tA), stypes, dom_types, def_types)

    typed_to_topstate(tS): typed_state =
      tS WITH [`state := to_topstate(tS`state),
               `redex_type := typeinfo_fill(tS`context_type, tS`redex_type),
               `context_type := holet]

    buildRedexType(A, tA): RECURSIVE {(tK, tB) | typeinfo_fill(tK, tB) = tA} = 
      CASES A OF
        letexpr(B, C):
          IF value?(B) OR NOT lett?(tA) THEN
            (holet, tA)
          ELSE
            LET (tK, tB) = buildRedexType(B, lrhs(tA)) IN
            (letct(lettype(tA), tK, lbody(tA)), tB)
          ENDIF,
        pop(B):
          IF value?(B) OR NOT popt?(tA) THEN
            (holet, tA)
          ELSE
            LET (tK, tB) = buildRedexType(B, ptbody(tA)) IN
            (popct(tK), tB)
          ENDIF
        ELSE (holet, tA)
      ENDCASES
    MEASURE A BY <<

    buildRedexType_args_correct: LEMMA
      LET (K, B) = buildRedex(A) IN
      LET (tK, tB) = buildRedexType(A, tA) IN
        contextPure?(A) AND
        popDepth(A) <= stypes`length AND
        (FORALL i: cvars(A)(i) IMPLIES i < stypes`length) IMPLIES
          contextPure?(B) AND cpure?(K) AND
          popDepth(B) + popDepth(K) <= stypes`length AND
          (FORALL i: cvars(B)(i) IMPLIES i < stypes`length) AND
          (FORALL i: cvars(K)(i) IMPLIES i < popn(stypes, popDepth(B))`length)

    buildRedexType_correct: LEMMA
      LET (K, B) = buildRedex(A) IN
      LET (tK, tB) = buildRedexType(A, tA) IN
        contextPure?(A) AND
        popDepth(A) <= stypes`length AND
        (FORALL i: cvars(A)(i) IMPLIES i < stypes`length) AND
        is_well_typed(A, tA, stypes, dom_types, def_types) IMPLIES
          is_well_typed(B, tB, stypes, dom_types, def_types) AND
          is_well_typed_ctx(K, tK, popn(stypes, popDepth(B)), dom_types, def_types, expr_type(tB))

    make_redex_typed(tS | tS`state`context = hole AND NOT value?(tS`state`redex)): typed_state =
      LET (tK, tA) = buildRedexType(tS`state`redex, tS`redex_type) IN
      tS WITH [`state := make_redex_e(tS`state),
               `redex_type := tA,
               `context_type := tK]

    defs_well_typed(D, def_types): boolean =
      D`length = def_types`length AND
      FORALL (i: below(D`length)):
        D`seq(i)`arity = def_types`seq(i)`args_type`length AND
        def_types`seq(i)`return_type = expr_type(def_types`seq(i)`body_type) AND
        is_well_typed(D`seq(i)`body, def_types`seq(i)`body_type,
                      def_types`seq(i)`args_type, (LAMBDA i: 0), def_types)

    set_new_type(tS, i) : typed_state =
      tS WITH [`dom_types(least_out(tS`state`domain)) := i]

    typed_reduce(D)(tS | NOT tS`state`error AND defs_well_typed(D, tS`def_types)) : typed_state =
      LET t = typed_to_topstate(tS) IN
      IF value?(t`state`redex) THEN
        t
      ELSE
        LET nS = make_redex_typed(t) IN
        IF variable?(nS`state`redex) THEN
          nS WITH [`state := variableReduce(D)(nS`state)]
        ELSIF pureLetRedex?(nS`state`redex) THEN
          nS WITH [`state := letReduce(D)(nS`state),
                   `stack_types := add(lettype(nS`redex_type), nS`stack_types),
                   `redex_type := popt(lbody(nS`redex_type))]
        ELSIF applyRedex?(nS`state`redex) THEN
          nS WITH [`state := applyReduce(D)(nS`state),
                   `redex_type := letApply_type(length(tS`def_types`seq(fun(nS`state`redex))`args_type), tS`def_types`seq(fun(nS`state`redex))`args_type, tS`def_types`seq(fun(nS`state`redex))`body_type)]
        ELSIF pureIftRedex?(nS`state`redex) THEN
          nS WITH [`state := ifReduce(D)(nS`state),
                   `redex_type :=
                     IF get(nS`state`stack)(condition(nS`state`redex)) = constant(0) THEN
                       telse(nS`redex_type)
                     ELSE
                       tthen(nS`redex_type)
                     ENDIF
                  ]
        ELSIF updateRedex?(nS`state`redex) THEN
          nS WITH [`state := updateReduce(D)(nS`state),
                   `dom_types := nS`dom_types WITH [(least_out(nS`state`domain)) |-> leaftype(nS`redex_type) - 1]]
        ELSIF lookupRedex?(nS`state`redex) THEN
          nS WITH [`state := lookupReduce(D)(nS`state)]
        ELSIF newintRedex?(nS`state`redex) THEN
          nS WITH [`state := newintReduce(D)(nS`state),
                   `dom_types := nS`dom_types WITH [(least_out(nS`state`domain)) |-> leaftype(nS`redex_type) - 1]]
        ELSIF newrefRedex?(nS`state`redex) THEN
          nS WITH [`state := newrefReduce(D)(nS`state),
                   `dom_types := nS`dom_types WITH [(least_out(nS`state`domain)) |-> leaftype(nS`redex_type) - 1]]
        ELSIF popRedex?(nS`state`redex) THEN
          nS WITH [`state := popReduce(D)(nS`state),
                   `stack_types := tail(nS`stack_types),
                   `redex_type := ptbody(nS`redex_type)]
        ELSE
          nS WITH [`state`error := TRUE]
        ENDIF
      ENDIF

    typed_reduce_defs: LEMMA
      FORALL (tS | NOT tS`state`error AND defs_well_typed(D, tS`def_types)):
        typed_reduce(D)(tS)`def_types = tS`def_types

    typed_reduce_state: LEMMA
      FORALL (tS | NOT tS`state`error AND defs_well_typed(D, tS`def_types)):
        typed_reduce(D)(tS)`state = reduce(D)(tS`state)

  END typed_reduction
