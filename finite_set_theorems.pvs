finite_set_theorems : THEORY

  BEGIN

   
    is_finite_complement[T: TYPE]: LEMMA
    (FORALL (S: finite_set[T]): 
      is_finite(S) IMPLIES is_finite(fullset[T]) OR nonempty?(complement(S)))

    nat_infinite: LEMMA
      (FORALL (n: nat): NOT EXISTS (f: (injective?[nat, below(n)])): TRUE)

    below_finite: LEMMA
      FORALL (n: nat): is_finite[nat](LAMBDA (i: nat): i < n)

    nat_fullset_infinite: LEMMA
      NOT is_finite(fullset[nat])

    i, j, k: VAR nat

    NS: VAR finite_set[nat]

    pick_new(NS): {j | NOT NS(j)} =
      (choose! j: complement(NS)(j))

   n, m: VAR nat

    least_out_rec(NS, (i | i <= pick_new(NS))): RECURSIVE
      {n | NOT NS(n)}
    = (IF NS(i) THEN least_out_rec(NS, i + 1) ELSE i ENDIF)
    MEASURE pick_new(NS) - i

    least_out(NS): {n | NOT NS(n)} = least_out_rec(NS, 0)

    X, Y, Z: VAR finite_set[nat]

    f: VAR [nat -> nat]

    Sigma(X, f): RECURSIVE nat =
     IF empty?(X)
      THEN 0
      ELSE f(choose(X)) + Sigma(remove(choose(X), X), f)
      ENDIF
      MEASURE card(X)

    list2finset[T: TYPE](LL: list[T]):  finite_set[T]  =
     list2set(LL)

    finite_set_induction: LEMMA
      (FORALL (P: PRED[finite_set[nat]]):
        P(emptyset) AND (FORALL X: nonempty?(X) AND P(remove(choose(X), X)) => P(X)) => (FORALL X: P(X)))

    IMPORTING sigma_set@sigma_set

   finite_nonzero_elts: LEMMA
     is_finite(nonzero_elts(f, X))

    sigma_sigma_set: LEMMA
      Sigma(X, f) = sigma_set.sigma(X, f)

    g : VAR [nat -> nat]

    sigma_eq: LEMMA
      (FORALL (x : (X)): f(x) = g(x)) IMPLIES Sigma(X, f) = Sigma(X, g)

    sigma_zero: LEMMA
      (FORALL (x : (X)): f(x) = 0) IMPLIES Sigma(X, f) = 0

    sigma_with: LEMMA
      g = f WITH [(i) := j] AND member(i, X) IMPLIES Sigma(X, g) = Sigma(X, f) + j - f(i)

    sigma_add: LEMMA
      member(i, X) IMPLIES Sigma(X, f) = f(i) + Sigma(remove(i, X), f)

    sigma_shift: LEMMA
      Sigma(X, f) = Sigma((LAMBDA i: X(i + 1)), (LAMBDA i: f(i + 1))) + IF X(0) THEN f(0) ELSE 0 ENDIF

  END finite_set_theorems
