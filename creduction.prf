(creduction
 (vars_TCC1 0
  (vars_TCC1-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil))
   nil (vars termination "vars(s2)" "nil")))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil))
   nil (vars termination "vars(thenc)" "nil")))
 (vars_TCC3 0
  (vars_TCC3-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil))
   nil (vars termination "vars(elsec)" "nil")))
 (vars_TCC4 0
  (vars_TCC4-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil)
    (subterm adt-def-decl "boolean" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (vars termination "vars(stats`seq(j))" "nil")))
 (length_cdr 0
  (length_cdr-1 nil 3703618864 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (nth_cdr_TCC1 0
  (nth_cdr_TCC1-1 nil 3703618864
   ("" (skeep*) (("" (rewrite length_cdr) (("" (grind) nil nil)) nil))
    nil)
   ((length_cdr formula-decl nil creduction nil)
    (T decl-formal-type nil creduction nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil (nth_cdr subtype "i + 1" "below[length[T](l)]")))
 (nth_cdr 0
  (nth_cdr-1 nil 3703618930 ("" (grind) nil nil)
   ((nth def-decl "T" list_props nil)) shostak))
 (measure_stat_TCC1 0
  (measure_stat_TCC1-1 nil 3703617429 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil))
   nil (measure_stat termination "measure_stat(thenc)" "nil")))
 (measure_stat_TCC2 0
  (measure_stat_TCC2-1 nil 3703617429 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil))
   nil (measure_stat termination "measure_stat(elsec)" "nil")))
 (measure_stat_TCC3 0
  (measure_stat_TCC3-1 nil 3703617429
   ("" (skeep*)
    (("" (expand is_finite)
      (("" (inst 1 "stats`length" "lambda (j: below(stats`length)): j")
        (("" (expand injective?) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (measure_stat subtype "(LAMBDA j: j < stats`length)"
    "finite_set[nat]")))
 (measure_stat_TCC4 0
  (measure_stat_TCC4-1 nil 3703617429 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm adt-def-decl "boolean" creduction nil)
    (<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (measure_stat termination "measure_stat(stats`seq(j))" "nil")))
 (measure_stat_car_TCC1 0
  (measure_stat_car_TCC1-1 nil 3703617691
   ("" (skeep* :preds? t)
    (("" (expand finseq2list)
      (("" (expand finseq2list_rec) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((finseq2list const-decl "list[T]" list2finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil))
   nil
   (measure_stat_car subtype "finseq2list[cstat](bstats(s1))"
    "(cons?[cstat])")))
 (measure_stat_car 0
  (measure_stat_car-1 nil 3703617691
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (expand measure_stat + 2)
        (("" (lemma sigma_add)
          (("" (inst -1 _ _ 0)
            (("" (inst? -1)
              (("1" (rewrite -1)
                (("1" (expand finseq2list)
                  (("1" (expand finseq2list_rec)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (expand is_finite)
                (("2"
                  (inst 1 "bstats(s1)`length"
                   "lambda (j: below(bstats(s1)`length)): j")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_add formula-decl nil finite_set_theorems nil)
    (s1 skolem-const-decl "cstat" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (cstat type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (empty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_stat def-decl "posnat" creduction nil))
   shostak))
 (measure_stat_cdr 0
  (measure_stat_cdr-1 nil 3703617862
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (expand measure_stat)
        (("" (expand list2finseq + (1 2))
          (("" (expand list2finseq)
            ((""
              (case-replace "(lambda j:
               IF j < length(cdr(finseq2list[cstat](bstats(s1))))
                 THEN measure_stat(nth(cdr(finseq2list[cstat](bstats(s1))),
                                       j))
               ELSE 0
               ENDIF) = (lambda j:
               IF j < bstats(s1)`length - 1
                 THEN measure_stat(bstats(s1)`seq(j+1))
               ELSE 0
               ENDIF)")
              (("1" (rewrite length_cdr)
                (("1" (rewrite finseq2list_length)
                  (("1" (delete -1)
                    (("1" (assert)
                      (("1" (lemma sigma_shift)
                        (("1"
                          (inst -1 "lambda j: j < bstats(s1)`length" _)
                          (("1" (inst?)
                            (("1" (rewrite -1)
                              (("1"
                                (case-replace
                                 "(lambda j:
                IF j < bstats(s1)`length - 1
                  THEN measure_stat(bstats(s1)`seq(1 + j))
                ELSE 0
                ENDIF) = lambda i:
                  IF 1 + i < bstats(s1)`length
                    THEN measure_stat(bstats(s1)`seq(1 + i))
                  ELSE 0
                  ENDIF")
                                (("1"
                                  (case-replace
                                   "(lambda j: j < bstats(s1)`length - 1) = lambda i: 1 + i < bstats(s1)`length")
                                  (("1"
                                    (assert)
                                    (("1" (postpone) nil nil))
                                    nil)
                                   ("2" (decompose-equality) nil nil))
                                  nil)
                                 ("2"
                                  (decompose-equality)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand is_finite)
                            (("2"
                              (inst 1 "bstats(s1)`length"
                               "lambda (j: below(bstats(s1)`length)): j")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (delete 2)
                (("2" (decompose-equality)
                  (("1" (lift-if)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (rewrite nth_cdr)
                          (("1" (rewrite finseq2list_nth)
                            (("1" (rewrite length_cdr)
                              (("1"
                                (rewrite finseq2list_length)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (rewrite length_cdr)
                              (("1"
                                (rewrite finseq2list_length)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (rewrite length_cdr)
                          (("1" (rewrite finseq2list_length)
                            (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete 2) (("2" (grind) nil nil)) nil)
                   ("3" (delete 2) (("3" (grind) nil nil)) nil)
                   ("4" (grind) nil nil))
                  nil))
                nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil)
    (cstat type-decl nil creduction nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (finseq2list_length formula-decl nil list2finseq_extra nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (s1 skolem-const-decl "cstat" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (sigma_shift formula-decl nil finite_set_theorems nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr formula-decl nil creduction nil)
    (nth_cdr formula-decl nil creduction nil)
    (finseq2list_nth formula-decl nil list2finseq_extra nil)
    (measure_stat def-decl "posnat" creduction nil))
   shostak))
 (stat_induction 0
  (stat_induction-1 nil 3705150944
   ("" (skeep)
    (("" (measure-induct+ "measure_stat(s1)" ("s1"))
      (("" (case "sdecl?(x!1)")
        (("1" (apply-eta "x!1" "(sdecl?)")
          (("1" (replace -1 + :dir RL)
            (("1" (inst? -4)
              (("1" (split)
                (("1" (propax) nil nil)
                 ("2" (inst?) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "sif?(x!1)")
          (("1" (apply-eta "x!1" "(sif?)")
            (("1" (replace -1 + :dir RL)
              (("1" (inst? -5)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (inst?) (("2" (grind) nil nil)) nil)
                   ("3" (inst?) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "sblock?(x!1)")
            (("1" (apply-eta "x!1" "(sblock?)")
              (("1" (replace -1 + :dir RL)
                (("1" (case-replace "bstats(x!1) = null")
                  (("1" (apply-eta "bstats(x!1)" "(cons?[cstat])")
                    (("1"
                      (inst -8 "car(finseq2list[cstat](bstats(x!1)))"
                       "cdr(finseq2list[cstat](bstats(x!1)))")
                      (("1" (split)
                        (("1" (rewrite finseq2list_list2finseq)
                          (("1" (replace -2)
                            (("1" (rewrite list2finseq_finseq2list) nil
                              nil))
                            nil))
                          nil)
                         ("2" (inst? -4)
                          (("2" (split)
                            (("1" (propax) nil nil)
                             ("2" (use measure_stat_car)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (inst?)
                          (("3" (split)
                            (("1" (propax) nil nil)
                             ("2" (use measure_stat_cdr)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "bstats(x!1)`length > 0")
                      (("1" (grind) nil nil)
                       ("2" (case "bstats(x!1)`length = 0")
                        (("1" (decompose-equality 3)
                          (("1" (grind) nil nil)
                           ("2" (decompose-equality 1) nil nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst? -6)
              (("2" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil) ("4" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (cstat type-decl nil creduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (measure_stat def-decl "posnat" creduction nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (scond adt-accessor-decl "[(sif?) -> (cvar?)]" creduction nil)
    (iftrue adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (iffalse adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (cstat_sif_eta formula-decl nil creduction nil)
    (cstat_sblock_eta formula-decl nil creduction nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (list type-decl nil list_adt nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (measure_stat_car formula-decl nil creduction nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq2list_list2finseq formula-decl nil list2finseq_extra nil)
    (list2finseq_finseq2list formula-decl nil list2finseq_extra nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (cstat_sdecl_eta formula-decl nil creduction nil)
    (x!1 skolem-const-decl "cstat" creduction nil)
    (dstat adt-accessor-decl "[(sdecl?) -> cstat]" creduction nil)
    (dtype adt-accessor-decl "[(sdecl?) -> ctype]" creduction nil)
    (ctype type-decl nil creduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil))
   shostak))
 (clength_TCC1 0
  (clength_TCC1-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (measure_stat def-decl "posnat" creduction nil))
   nil (clength termination "clength(s2)" "nil")))
 (clength_TCC2 0
  (clength_TCC2-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (measure_stat def-decl "posnat" creduction nil))
   nil (clength termination "clength(thenc)" "nil")))
 (clength_TCC3 0
  (clength_TCC3-1 nil 3703602385
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (measure_stat def-decl "posnat" creduction nil))
   nil (clength termination "clength(elsec)" "nil")))
 (clength_TCC4 0
  (clength_TCC4-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((finseq2list_rec def-decl "list[T]" list2finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq2list const-decl "list[T]" list2finseq nil))
   nil (clength subtype "finseq2list[cstat](stats)" "(cons?[cstat])")))
 (clength_TCC5 0
  (clength_TCC5-1 nil 3703602385
   ("" (skeep*)
    (("" (lemma measure_stat_car)
      (("" (inst -1 s1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((measure_stat_car formula-decl nil creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (measure_stat def-decl "posnat" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cstat type-decl nil creduction nil))
   nil
   (clength termination "clength(car(finseq2list[cstat](stats)))"
    "nil")))
 (clength_TCC6 0
  (clength_TCC6-1 nil 3703617429
   ("" (skeep*)
    (("" (lemma measure_stat_cdr)
      (("" (inst -1 s1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((measure_stat_cdr formula-decl nil creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (measure_stat def-decl "posnat" creduction nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cstat type-decl nil creduction nil))
   nil
   (clength termination
    "clength(sblock(list2finseq[cstat](cdr(finseq2list[cstat](stats)))))"
    "nil")))
 (stack_size_at_TCC1 0
  (stack_size_at_TCC1-1 nil 3703854481 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (stack_size_at subtype "i - 1" "below(clength(s2))")))
 (stack_size_at_TCC2 0
  (stack_size_at_TCC2-1 nil 3703854481 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (stack_size_at subtype "i - 1" "below(clength(thenc))")))
 (stack_size_at_TCC3 0
  (stack_size_at_TCC3-1 nil 3703854481 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (stack_size_at subtype "i - 1 - clength(thenc)"
    "below(clength(elsec))")))
 (stack_size_at_TCC4 0
  (stack_size_at_TCC4-1 nil 3703854481 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq2list const-decl "list[T]" list2finseq nil))
   nil
   (stack_size_at subtype "finseq2list[cstat](stats)"
    "(cons?[cstat])")))
 (stack_size_at_TCC5 0
  (stack_size_at_TCC5-1 nil 3703854481
   ("" (skeep* :preds? t)
    (("" (lemma measure_stat_car)
      (("" (inst -1 s1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((measure_stat_car formula-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (measure_stat def-decl "posnat" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cstat type-decl nil creduction nil))
   nil
   (stack_size_at termination
    "stack_size_at(car(finseq2list[cstat](stats)))" "nil")))
 (stack_size_at_TCC6 0
  (stack_size_at_TCC6-1 nil 3703854481
   ("" (skeep* :preds? t)
    (("" (lemma measure_stat_cdr)
      (("" (inst -1 s1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((measure_stat_cdr formula-decl nil creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (clength def-decl "nat" creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (measure_stat def-decl "posnat" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cstat type-decl nil creduction nil))
   nil
   (stack_size_at termination
    "stack_size_at(sblock(list2finseq[cstat](cdr(finseq2list[cstat](stats)))))"
    "nil")))
 (stack_size_at_TCC7 0
  (stack_size_at_TCC7-1 nil 3703854481
   ("" (skeep* :preds? t)
    (("" (replace -2)
      (("" (expand clength -)
        (("" (lift-if -)
          (("" (split -)
            (("1" (grind) nil nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (clength def-decl "nat" creduction nil))
   nil
   (stack_size_at subtype "i - clength(car(finseq2list[cstat](stats)))"
    "below(clength(sblock(list2finseq[cstat](cdr(finseq2list[cstat](stats))))))")))
 (stack_size_at_zero_TCC1 0
  (stack_size_at_zero_TCC1-1 nil 3703874317 ("" (subtype-tcc) nil nil)
   nil nil (stack_size_at_zero subtype "0" "below(clength(s1))")))
 (stack_size_at_zero 0
  (stack_size_at_zero-1 nil 3703874318
   ("" (measure-induct+ "measure_stat(s1)" ("s1"))
    (("" (expand stack_size_at +)
      (("" (lift-if)
        (("" (ground)
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil)
               ("2" (lemma measure_stat_car)
                (("2" (inst -1 "x!1")
                  (("2" (typepred "x!1") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst?)
            (("1" (split)
              (("1"
                (case-replace
                 "clength(car(finseq2list[cstat](bstats(x!1)))) = 0")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
               ("2" (lemma measure_stat_cdr)
                (("2" (inst -1 "x!1")
                  (("2" (typepred "x!1") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "x!1")
              (("2" (expand clength -)
                (("2" (lift-if -) (("2" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (measure_stat_car formula-decl nil creduction nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (x!1 skolem-const-decl "{s1 | clength(s1) > 0}" creduction nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (stack_size_at def-decl "nat" creduction nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (clength def-decl "nat" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (extract_stat_TCC1 0
  (extract_stat_TCC1-1 nil 3703876546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (executable_stat? const-decl "bool" creduction nil))
   nil
   (extract_stat subtype "(s1, i)"
    "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}")))
 (extract_stat_TCC2 0
  (extract_stat_TCC2-1 nil 3703876546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (extract_stat subtype "i - 1" "below(clength(s2))")))
 (extract_stat_TCC3 0
  (extract_stat_TCC3-1 nil 3703876546
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (clength def-decl "nat" creduction nil)
    (executable_stat? const-decl "bool" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (extract_stat subtype "(s1, i)"
    "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}")))
 (extract_stat_TCC4 0
  (extract_stat_TCC4-1 nil 3703876546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (executable_stat? const-decl "bool" creduction nil))
   nil
   (extract_stat subtype "(s1, i)"
    "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}")))
 (extract_stat_TCC5 0
  (extract_stat_TCC5-1 nil 3703876546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (extract_stat subtype "i - 1" "below(clength(thenc))")))
 (extract_stat_TCC6 0
  (extract_stat_TCC6-1 nil 3703876546 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (extract_stat subtype "i - 1 - clength(thenc)"
    "below(clength(elsec))")))
 (extract_stat_TCC7 0
  (extract_stat_TCC7-1 nil 3703876546
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((executable_stat? const-decl "bool" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (extract_stat subtype "(s1, i)"
    "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}")))
 (extra_size_at_TCC1 0
  (extra_size_at_TCC1-1 nil 3705257026 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even? const-decl "bool" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   nil (extra_size_at subtype "j / 2" "nat")))
 (extra_size_at_TCC2 0
  (extra_size_at_TCC2-1 nil 3705257026
   ("" (skeep* :preds? t)
    (("" (case "odd?(j)")
      (("1" (use odd_div2)
        (("1" (split)
          (("1" (split)
            (("1" (assert)
              (("1" (generalize "(j - 1) / 2" "a" "nat")
                (("1" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil)
       ("2" (use odd_or_even_int)
        (("2" (split) (("1" (propax) nil nil) ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (odd? const-decl "bool" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (scall? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sargs adt-accessor-decl "[(scall?) -> finseq[(cvar?)]]" creduction
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (executable_stat? const-decl "bool" creduction nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even? const-decl "bool" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (odd_div2 formula-decl nil naturalnumbers nil)
    (odd_or_even_int formula-decl nil naturalnumbers nil))
   nil (extra_size_at subtype "(j - 1) / 2 + 1" "nat")))
 (extra_size_at_TCC3 0
  (extra_size_at_TCC3-1 nil 3705257026 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even? const-decl "bool" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   nil (extra_size_at subtype "j / 2" "nat")))
 (extra_size_at_TCC4 0
  (extra_size_at_TCC4-1 nil 3705257026
   ("" (skeep* :preds? t)
    (("" (case "odd?(j)")
      (("1" (split 3)
        (("1" (use odd_div2)
          (("1" (split -)
            (("1" (hide-all-but (-1 -2 1))
              (("1" (generalize "(j - 1) / 2" "a" "int")
                (("1" (grind) nil nil)) nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil)
       ("2" (use odd_or_even_int)
        (("2" (split) (("1" (propax) nil nil) ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (odd? const-decl "bool" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_div2 formula-decl nil naturalnumbers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (j skolem-const-decl "nat" creduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_or_even_int formula-decl nil naturalnumbers nil))
   nil (extra_size_at subtype "(j - 1) / 2 + 1" "nat")))
 (cstate_TCC1 0
  (cstate_TCC1-1 nil 3703872785 ("" (subtype-tcc) nil nil) nil nil
   (cstate subtype "i" "below[C`length]")))
 (cstate_TCC2 0
  (cstate_TCC2-1 nil 3704114985 ("" (subtype-tcc) nil nil) nil nil
   (cstate subtype "i + 1" "below[C`length]")))
 (make_call_TCC1 0
  (make_call_TCC2-1 nil 3704041017 ("" (subtype-tcc) nil nil) nil nil
   (make_call subtype
    "add((# ffct := f, fpc := 0, fdepth := cS`cdefs`seq(f)`arity #), cS`callstack)"
    "{C: finseq[cstack_frame(cS`cdefs)] | FORALL (i: nat | i < C`length - 1): is_fun_call_at(cS`cdefs`seq(C`seq(i)`ffct)`body)(C`seq(i)`fpc)}")))
 (make_call_TCC2 0
  (make_call_TCC1-1 nil 3704041017
   ("" (skeep* :preds? t)
    (("" (case-replace "x1 = cS`callstack`length")
      (("1" (expand add)
        (("1" (typepred "cS`cdefs`seq(f)`body")
          (("1" (split)
            (("1" (grind) nil nil) ("2" (propax) nil nil)
             ("3" (flatten)
              (("3" (rewrite stack_size_at_zero) nil nil)) nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil)
       ("2" (expand add)
        (("2" (assert)
          (("2" (typepred "cS`callstack`seq(x1)`fpc")
            (("2" (split)
              (("1" (propax) nil nil)
               ("2" (typepred "cS`callstack`seq(x1)`fdepth")
                (("2" (grind) nil nil)) nil)
               ("3" (typepred "cS`callstack`seq(x1)`fdepth")
                (("3" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (seq type-eq-decl nil more_finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (> const-decl "bool" reals nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (stack_size_at_zero formula-decl nil creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (make_call subtype
    "add((# ffct := f, fpc := 0, fdepth := cS`cdefs`seq(f)`arity #), cS`callstack)"
    "finseq[cstack_frame(cS`cdefs)]")))
 (make_call_TCC3 0
  (make_call_TCC3-1 nil 3704118130
   ("" (skeep* :preds? t)
    (("" (split)
      (("1" (skeep* :preds? t)
        (("1" (case-replace "x1 = cS`callstack`length")
          (("1" (expand add)
            (("1" (typepred "cS`cdefs`seq(f)`body")
              (("1" (split)
                (("1" (grind) nil nil) ("2" (propax) nil nil)
                 ("3" (flatten)
                  (("3" (rewrite stack_size_at_zero) nil nil)) nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil)
           ("2" (expand add)
            (("2" (assert)
              (("2" (typepred "cS`callstack`seq(x1)`fpc")
                (("2" (split)
                  (("1" (propax) nil nil)
                   ("2" (typepred "cS`callstack`seq(x1)`fdepth")
                    (("2" (grind) nil nil)) nil)
                   ("3" (typepred "cS`callstack`seq(x1)`fdepth")
                    (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep* :preds? t)
        (("2" (case-replace "i = cS`callstack`length - 1")
          (("1" (expand add) (("1" (propax) nil nil)) nil)
           ("2" (expand add)
            (("2" (assert)
              (("2" (typepred "cS`callstack") (("2" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (seq type-eq-decl nil more_finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (> const-decl "bool" reals nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (stack_size_at_zero formula-decl nil creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (make_call subtype
    "add((# ffct := f, fpc := 0, fdepth := cS`cdefs`seq(f)`arity #), cS`callstack)"
    "{C: finseq[cstack_frame(cS`cdefs)] | FORALL (i: nat | i < C`length - 1): is_fun_call_at(cS`cdefs`seq(C`seq(i)`ffct)`body)(C`seq(i)`fpc, C`seq(1 + i)`ffct)}")))
 (next_pc_TCC1 0
  (next_pc_TCC1-1 nil 3703872785 ("" (subtype-tcc) nil nil) nil nil
   (next_pc subtype "1" "upto(clength(s1))")))
 (next_pc_TCC2 0
  (next_pc_TCC2-1 nil 3703872785 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (next_pc subtype "1 + next_pc(s2)(i - 1)" "upto(clength(s1))")))
 (next_pc_TCC3 0
  (next_pc_TCC3-1 nil 3703872785 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (next_pc subtype "2 + clength(s2)" "upto(clength(s1))")))
 (next_pc_TCC4 0
  (next_pc_TCC4-1 nil 3703872785 ("" (subtype-tcc) nil nil) nil nil
   (next_pc subtype "1" "upto(clength(s1))")))
 (next_pc_TCC5 0
  (next_pc_TCC5-1 nil 3703872785 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (next_pc subtype "1 + clength(thenc) + clength(elsec)"
    "upto(clength(s1))")))
 (next_pc_TCC6 0
  (next_pc_TCC6-1 nil 3703872785 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (next_pc subtype "1 + next_pc(thenc)(i - 1)" "upto(clength(s1))")))
 (next_pc_TCC7 0
  (next_pc_TCC7-1 nil 3703872785 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (next_pc subtype
    "1 + clength(thenc) + next_pc(elsec)(i - 1 - clength(thenc))"
    "upto(clength(s1))")))
 (next_pc_TCC8 0
  (next_pc_TCC8-1 nil 3703872785
   ("" (skeep* :preds? t)
    (("" (typepred "v(car[cstat](finseq2list[cstat](stats)))(i)")
      (("" (replace -4)
        (("" (expand clength 1)
          (("" (lift-if)
            (("" (split)
              (("1" (grind) nil nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (clength def-decl "nat" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (cstat type-decl nil creduction nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (next_pc subtype "next_pc(car(finseq2list[cstat](stats)))(i)"
    "upto(clength(s1))")))
 (next_pc_TCC9 0
  (next_pc_TCC9-1 nil 3703872785
   ("" (skeep* :preds? t)
    ((""
      (typepred
       "v(sblock(list2finseq[cstat](cdr[cstat](finseq2list[cstat](stats)))))
        (i - clength(car[cstat](finseq2list[cstat](stats))))")
      (("1" (replace -3)
        (("1" (expand clength 2 3)
          (("1" (lift-if)
            (("1" (split)
              (("1" (grind) nil nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (list type-decl nil list_adt nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (clength def-decl "nat" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (cstat type-decl nil creduction nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (next_pc subtype
    "clength(car(finseq2list[cstat](stats))) + next_pc(sblock(list2finseq[cstat](cdr(finseq2list[cstat](stats)))))(i - clength(car(finseq2list[cstat](stats))))"
    "upto(clength(s1))")))
 (next_pc_TCC10 0
  (next_pc_TCC10-1 nil 3703872785 ("" (grind) nil nil) nil nil
   (next_pc subtype "i + 1" "upto(clength(s1))")))
 (is_return_at_end_clength 0
  (is_return_at_end_clength-1 nil 3704127090
   ("" (measure-induct+ "measure_stat(s1)" ("s1"))
    (("" (name-replace s1 "x!1")
      (("" (expand is_return_at_end? -2)
        (("" (lift-if)
          (("" (ground)
            (("1" (grind) nil nil)
             ("2" (inst -4 "car(finseq2list[cstat](bstats(s1)))")
              (("2" (split)
                (("1" (expand clength +) (("1" (grind) nil nil)) nil)
                 ("2" (propax) nil nil)
                 ("3" (use measure_stat_car) (("3" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("3" (expand clength +)
              (("3" (inst? :where -)
                (("3" (split)
                  (("1" (assert) nil nil) ("2" (propax) nil nil)
                   ("3" (use measure_stat_cdr) (("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (measure_stat_car formula-decl nil creduction nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (clength def-decl "nat" creduction nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (next_pc_no_overflow 0
  (next_pc_no_overflow-1 nil 3704126268
   ("" (measure-induct+ "measure_stat(s1)" ("s1"))
    (("" (skeep)
      (("" (name-replace s1 "x!1")
        (("" (expand next_pc +)
          (("" (lift-if)
            (("" (ground)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil)
               ("4" (grind)
                (("4" (use is_return_at_end_clength)
                  (("4" (grind) nil nil)) nil))
                nil)
               ("5" (grind) nil nil) ("6" (grind) nil nil)
               ("7" (grind) nil nil)
               ("8" (inst?)
                (("8" (split)
                  (("1" (expand clength +)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (grind) nil nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (grind) nil nil)
                   ("4" (expand is_return_at_end? -)
                    (("4" (ground)
                      (("4" (expand clength +)
                        (("4" (lemma is_return_at_end_clength)
                          (("4" (inst? :where -2)
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (use measure_stat_car) (("5" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("9" (inst?)
                (("9" (split)
                  (("1" (expand clength + 3)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (grind) nil nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand clength -)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (grind) nil nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (expand is_return?)
                      (("3" (expand extract_stat +)
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (expand is_return_at_end? -)
                    (("4" (ground)
                      (("4" (expand clength -) (("4" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("5" (use measure_stat_cdr) (("5" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("10" (hide -1)
                (("10" (expand is_return_at_end?)
                  (("10" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (is_return_at_end_clength formula-decl nil creduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (iffalse adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (iftrue adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (measure_stat_car formula-decl nil creduction nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (length def-decl "nat" list_props nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (next_pc def-decl "upto(clength(s1))" creduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (clength def-decl "nat" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (next_pc_overflow_TCC1 0
  (next_pc_overflow_TCC1-1 nil 3704819299 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (next_pc_overflow subtype "clength(s1) - 1"
    "{i | i < clength(s1)}")))
 (next_pc_overflow 0
  (next_pc_overflow-1 nil 3704819300
   ("" (measure-induct+ "measure_stat(s1)" ("s1"))
    (("1" (name-replace s1 "x!1")
      (("1" (expand next_pc +)
        (("1" (lift-if)
          (("1" (ground)
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil)
             ("6" (inst?)
              (("6" (split)
                (("1"
                  (case-replace
                   "clength(s1) = clength(car(finseq2list[cstat](bstats(s1))))")
                  (("1" (assert)
                    (("1"
                      (case "clength(car(finseq2list[cstat](bstats(s1)))) <= clength(s1)")
                      (("1" (assert) nil nil)
                       ("2" (expand clength + 2)
                        (("2" (lift-if)
                          (("2" (split)
                            (("1" (grind) nil nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil)
                 ("3" (use measure_stat_car) (("3" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("7" (inst?)
              (("7" (split)
                (("1" (assert)
                  (("1" (expand clength + 4)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (grind) nil nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (expand clength 2 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand clength -)
                  (("2" (lift-if)
                    (("2" (split)
                      (("1" (grind) nil nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand clength 3 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (use measure_stat_cdr) (("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (nth def-decl "T" list_props nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (measure_stat_car formula-decl nil creduction nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (iffalse adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (iftrue adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (next_pc def-decl "upto(clength(s1))" creduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (clength def-decl "nat" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (extract_stat_index 0
  (extract_stat_index-1 nil 3704141442
   ("" (measure-induct+ "measure_stat(s1)" ("s1"))
    (("" (skeep)
      (("" (name-replace s1 "x!1")
        (("" (expand extract_stat +)
          (("" (lift-if)
            (("" (ground)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil)
               ("4" (inst?)
                (("4" (split)
                  (("1" (assert)
                    (("1" (expand clength + 2)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (grind) nil nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (use measure_stat_car) (("3" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("5" (inst?)
                (("5" (split)
                  (("1" (expand clength + 4)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (grind) nil nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand clength -)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (grind) nil nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (use measure_stat_cdr) (("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dstat adt-accessor-decl "[(sdecl?) -> cstat]" creduction nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (iftrue adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (iffalse adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (measure_stat_car formula-decl nil creduction nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (next_pc_if_upto 0
  (next_pc_if_upto-1 nil 3704824008
   ("" (measure-induct+ "measure_stat(s1)" ("s1"))
    (("" (name-replace s1 "x!1")
      (("" (skeep)
        (("" (expand extract_stat -3)
          (("" (lift-if)
            (("" (ground)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (inst -4 "car(finseq2list[cstat](bstats(s1)))")
                (("5" (expand extract_stat +)
                  (("5" (inst -4 i)
                    (("5" (split)
                      (("1" (expand clength 3 2)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (grind) nil nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil) ("3" (propax) nil nil)
                       ("4" (use measure_stat_car)
                        (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (expand extract_stat +)
                (("6" (inst?)
                  (("6" (split)
                    (("1" (assert)
                      (("1" (expand clength 4 3)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (grind) nil nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand clength -3)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (grind) nil nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil)
                     ("4" (use measure_stat_cdr)
                      (("4" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (dstat adt-accessor-decl "[(sdecl?) -> cstat]" creduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (iffalse adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (measure_stat_car formula-decl nil creduction nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (iftrue adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (clength def-decl "nat" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (next_pc_if_no_overflow 0
  (next_pc_if_no_overflow-1 nil 3704139530
   ("" (measure-induct+ "measure_stat(s1)" ("s1"))
    (("" (skeep)
      (("" (name-replace s1 "x!1")
        (("" (expand extract_stat +)
          (("" (lift-if)
            (("" (ground)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil)
               ("4" (expand clength + 2)
                (("4" (assert)
                  (("4" (case "clength(iffalse(s1)) > 0")
                    (("1" (grind) nil nil)
                     ("2" (use is_return_at_end_clength)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("5" (grind) nil nil) ("6" (grind) nil nil)
               ("7" (inst?)
                (("7" (split)
                  (("1" (expand clength + 2)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand extract_stat -)
                    (("2" (propax) nil nil)) nil)
                   ("3" (propax) nil nil)
                   ("4" (expand is_return_at_end? -)
                    (("4" (ground)
                      (("4" (expand clength + 2)
                        (("4"
                          (case "1 +
       clength(iftrue(extract_stat(car(finseq2list[cstat](bstats(s1))))
                                  (i)`1))
       + i <= clength(car(finseq2list[cstat](bstats(s1))))")
                          (("1" (lemma "is_return_at_end_clength")
                            (("1" (inst? -1 :where -3)
                              (("1"
                                (split)
                                (("1" (assert) nil nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 5)
                            (("2" (hide -1 4)
                              (("2"
                                (typepred "extract_stat(s1)(i)")
                                (("2"
                                  (expand executable_stat?)
                                  (("2"
                                    (expand extract_stat -)
                                    (("2"
                                      (use extract_stat_index)
                                      (("2"
                                        (split)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace*)
                                            (("1"
                                              (expand clength -1 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (use measure_stat_car) (("5" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("8" (inst?)
                (("8" (split)
                  (("1" (expand clength + 3)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (grind) nil nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand extract_stat -)
                    (("2" (propax) nil nil)) nil)
                   ("3" (expand clength -)
                    (("3" (lift-if)
                      (("3" (split)
                        (("1" (grind) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("4" (expand is_return_at_end? -)
                    (("4" (ground) (("4" (grind) nil nil)) nil)) nil)
                   ("5" (use measure_stat_cdr) (("5" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("9" (expand extract_stat -4) (("9" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (is_return_at_end_clength formula-decl nil creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (iffalse adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (<= const-decl "bool" reals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (extract_stat_index formula-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (measure_stat_car formula-decl nil creduction nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (length def-decl "nat" list_props nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iftrue adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (stack_size_at_overflow 0
  (stack_size_at_overflow-1 nil 3704131089
   ("" (measure-induct+ "measure_stat(s1)" ("s1"))
    (("" (skeep)
      (("" (name-replace "s1" "x!1")
        (("" (expand stack_size_at +)
          (("" (lift-if)
            (("" (ground)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (inst?)
                (("5" (split)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)
                   ("3" (grind) nil nil)
                   ("4" (expand next_pc -)
                    (("4"
                      (typepred
                       "next_pc(car(finseq2list[cstat](bstats(s1))))(i)")
                      (("4"
                        (case "next_pc(car(finseq2list[cstat](bstats(s1))))(i) >= clength(car(finseq2list[cstat](bstats(s1))))")
                        (("1" (assert) nil nil)
                         ("2" (expand clength -5)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (use measure_stat_car) (("5" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("6" (inst?)
                (("6" (split -2)
                  (("1" (propax) nil nil)
                   ("2" (expand clength -)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (grind) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil)
                   ("4" (expand next_pc -)
                    (("4" (expand clength - 3)
                      (("4" (lift-if)
                        (("4" (split)
                          (("1" (grind) nil nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (use measure_stat_cdr) (("5" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (iftrue adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (iffalse adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (measure_stat_car formula-decl nil creduction nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (stack_size_at def-decl "nat" creduction nil)
    (next_pc def-decl "upto(clength(s1))" creduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (clength def-decl "nat" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (stack_size_at_next_pc 0
  (stack_size_at_next_pc-1 nil 3704130559
   ("" (measure-induct+ "measure_stat(s1)" ("s1"))
    (("" (skeep)
      (("" (name-replace "s1" "x!1")
        (("" (expand next_pc +)
          (("" (lift-if)
            (("" (ground)
              (("1" (grind) nil nil)
               ("2" (inst?)
                (("2" (split)
                  (("1" (expand stack_size_at +)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (assert) nil nil)
                         ("2" (flatten)
                          (("2" (rewrite stack_size_at_overflow)
                            (("1" (assert) nil nil)
                             ("2" (expand extract_stat +)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil)
                   ("3" (expand extract_stat +)
                    (("3" (expand stack_size_at +)
                      (("3" (lift-if)
                        (("3" (split)
                          (("1" (grind) nil nil)
                           ("2" (flatten)
                            (("2" (rewrite stack_size_at_overflow)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (grind) nil nil) ("5" (grind) nil nil))
                  nil))
                nil)
               ("3" (grind) nil nil)
               ("4" (replace -1)
                (("4" (expand stack_size_at +)
                  (("4" (lift-if)
                    (("4" (split)
                      (("1" (rewrite stack_size_at_zero) nil nil)
                       ("2" (flatten)
                        (("2" (case-replace "clength(iftrue(s1)) = 0")
                          (("1" (assert)
                            (("1" (rewrite stack_size_at_zero)
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (grind) nil nil) ("6" (grind) nil nil)
               ("7" (grind) nil nil)
               ("8" (inst?)
                (("8" (split)
                  (("1" (expand stack_size_at +)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (grind) nil nil)
                         ("2" (flatten)
                          (("2"
                            (case-replace
                             "next_pc(car(finseq2list[cstat](bstats(s1))))(i) = clength(car(finseq2list[cstat](bstats(s1))))")
                            (("1" (assert)
                              (("1"
                                (rewrite stack_size_at_zero)
                                (("1"
                                  (rewrite stack_size_at_overflow)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (expand clength -6)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand next_pc -1)
                                          (("2"
                                            (replace*)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (assert)
                    (("3"
                      (case-replace
                       "next_pc(car(finseq2list[cstat](bstats(s1))))(i) = clength(car(finseq2list[cstat](bstats(s1))))")
                      (("1" (expand stack_size_at +)
                        (("1" (rewrite stack_size_at_zero)
                          (("1" (rewrite stack_size_at_overflow 2)
                            (("1" (grind) nil nil)) nil)
                           ("2" (expand next_pc -5)
                            (("2" (expand clength -5)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("4" (expand extract_stat +)
                    (("4" (propax) nil nil)) nil)
                   ("5" (use measure_stat_car) (("5" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("9" (expand stack_size_at +)
                (("9" (inst?)
                  (("9" (split)
                    (("1" (propax) nil nil)
                     ("2" (expand clength -)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (grind) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand next_pc -)
                      (("3" (expand clength -3 3)
                        (("3" (lift-if -)
                          (("3" (split)
                            (("1" (grind) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand extract_stat +)
                      (("4" (propax) nil nil)) nil)
                     ("5" (use measure_stat_cdr)
                      (("5" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("10" (expand stack_size_at +) (("10" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (stack_size_at_overflow formula-decl nil creduction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dstat adt-accessor-decl "[(sdecl?) -> cstat]" creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_size_at_zero formula-decl nil creduction nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (iftrue adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (iffalse adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (measure_stat_car formula-decl nil creduction nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (stack_size_at def-decl "nat" creduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (next_pc def-decl "upto(clength(s1))" creduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (stack_size_at2_TCC1 0
  (stack_size_at2_TCC1-1 nil 3704823294 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (stack_size_at2 subtype "i" "below(clength(s1))")))
 (stack_size_at2_alt_TCC1 0
  (stack_size_at2_alt_TCC1-1 nil 3705156410
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (clength def-decl "nat" creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (stack_size_at2_alt subtype "i - 1" "upto(clength(s2))")))
 (stack_size_at2_alt_TCC2 0
  (stack_size_at2_alt_TCC2-1 nil 3705156410 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (stack_size_at2_alt subtype "i - 1" "below(clength(thenc))")))
 (stack_size_at2_alt_TCC3 0
  (stack_size_at2_alt_TCC3-1 nil 3705156410 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (stack_size_at2_alt subtype "i - 1 - clength(thenc)"
    "upto(clength(elsec))")))
 (stack_size_at2_alt_TCC4 0
  (stack_size_at2_alt_TCC5-1 nil 3705156410
   ("" (skeep* :preds? t)
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (replace -2)
        (("2" (expand clength -) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (clength def-decl "nat" creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (stack_size_at2_alt subtype
    "i - clength(car(finseq2list[cstat](stats)))"
    "upto(clength(sblock(list2finseq[cstat](cdr(finseq2list[cstat](stats))))))")))
 (stack_size_at2_alt 0
  (stack_size_at2_alt-1 nil 3705156410
   ("" (assert)
    (("" (skeep* :preds? t)
      (("" (case "sdecl?(s1)")
        (("1" (assert)
          (("1" (expand stack_size_at2) (("1" (grind) nil nil)) nil))
          nil)
         ("2" (case "sif?(s1)")
          (("1" (assert)
            (("1" (expand stack_size_at2) (("1" (grind) nil nil)) nil))
            nil)
           ("2" (case "sblock?(s1)")
            (("1" (assert)
              (("1" (expand stack_size_at2)
                (("1" (expand stack_size_at + 1)
                  (("1" (bash)
                    (("1" (bash)
                      (("1" (bash)
                        (("1" (expand clength -3)
                          (("1" (bash) nil nil)) nil)
                         ("2" (expand clength -3)
                          (("2" (bash) nil nil)) nil))
                        nil)
                       ("2" (bash)
                        (("2" (expand clength (-2 1))
                          (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (bash)
                        (("1" (expand clength (-2 1))
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand clength 1)
                          (("2" (bash)
                            (("2" (bash)
                              (("2"
                                (expand clength -2)
                                (("2" (bash) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (clength def-decl "nat" creduction nil)
    (stack_size_at def-decl "nat" creduction nil)
    (stack_size_at2 const-decl "nat" creduction nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil))
   shostak))
 (stack_size_at_next_pc_iftrue_TCC1 0
  (stack_size_at_next_pc_iftrue_TCC1-1 nil 3704139530
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (stack_size_at_next_pc_iftrue subtype "i" "below(clength(s1))")))
 (stack_size_at_next_pc_iftrue 0
  (stack_size_at_next_pc_iftrue-1 nil 3704811503
   ("" (measure-induct "measure_stat(s1)" ("s1"))
    (("1" (skeep*)
      (("1" (name-replace s1 x)
        (("1" (expand extract_stat -3)
          (("1" (lift-if)
            (("1" (ground)
              (("1" (expand stack_size_at +)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (rewrite stack_size_at_overflow)
                        (("1" (assert) nil nil)
                         ("2" (case-replace "i = clength(dstat(s1))")
                          (("1" (rewrite next_pc_overflow) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand stack_size_at +)
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (replace*)
                      (("1" (rewrite stack_size_at_zero) nil nil)) nil)
                     ("2" (case-replace "i = clength(iftrue(s1))")
                      (("1" (assert)
                        (("1" (rewrite stack_size_at_zero)
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand stack_size_at +)
                (("3" (lift-if)
                  (("3" (split)
                    (("1" (flatten)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (inst?) (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (case-replace "i = clength(iftrue(s1))")
                        (("1" (assert)
                          (("1" (rewrite stack_size_at_zero)
                            (("1" (rewrite stack_size_at_overflow)
                              (("1"
                                (rewrite next_pc_overflow)
                                nil
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (expand stack_size_at +)
                (("4" (inst?)
                  (("4" (split)
                    (("1" (inst?) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("5" (expand stack_size_at +)
                (("5" (lift-if)
                  (("5" (split)
                    (("1" (flatten)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (grind) nil nil)
                           ("2" (use measure_stat_car)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2"
                        (case-replace
                         "i = clength(car(finseq2list[cstat](bstats(s1)))) - 1")
                        (("1" (assert)
                          (("1" (rewrite stack_size_at_zero)
                            (("1" (rewrite stack_size_at_overflow)
                              (("1"
                                (rewrite next_pc_overflow)
                                nil
                                nil))
                              nil)
                             ("2" (expand clength -6 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split -6)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (expand stack_size_at +)
                (("6" (inst?)
                  (("6" (split)
                    (("1" (inst?)
                      (("1" (split)
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (expand clength -3)
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (use measure_stat_cdr)
                      (("2" (split)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (next_pc_overflow formula-decl nil creduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (stack_size_at_overflow formula-decl nil creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (dstat adt-accessor-decl "[(sdecl?) -> cstat]" creduction nil)
    (iffalse adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (stack_size_at_zero formula-decl nil creduction nil)
    (iftrue adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (measure_stat_car formula-decl nil creduction nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (stack_size_at def-decl "nat" creduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" creduction nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (clength def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (stack_size_at_next_pc_iffalse 0
  (stack_size_at_next_pc_iffalse-1 nil 3704819722
   ("" (measure-induct+ "measure_stat(s1)" ("s1"))
    (("" (name-replace s1 "x!1")
      (("" (skeep*)
        (("" (expand extract_stat -3)
          (("" (lift-if)
            (("" (ground)
              (("1" (expand stack_size_at +)
                (("1" (expand extract_stat (+ -6))
                  (("1" (inst?)
                    (("1" (split)
                      (("1" (assert)
                        (("1" (expand stack_size_at2 +)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma next_pc_if_upto)
                                  (("1"
                                    (inst -1 "i-1" "dstat(s1)")
                                    (("1"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil)
                       ("3" (assert)
                        (("3" (lemma next_pc_if_upto)
                          (("3" (inst -1 "i-1" "dstat(s1)")
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand stack_size_at +)
                (("2" (replace -2)
                  (("2" (assert)
                    (("2" (expand extract_stat +)
                      (("2" (assert)
                        (("2" (expand stack_size_at2 +)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1" (propax) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand stack_size_at +)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (rewrite stack_size_at_zero)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand stack_size_at +)
                (("3" (expand extract_stat +)
                  (("3" (assert)
                    (("3" (inst -4 "iftrue(s1)")
                      (("3" (inst?)
                        (("3" (split)
                          (("1" (assert)
                            (("1" (lemma next_pc_if_upto)
                              (("1"
                                (inst -1 "i-1" "iftrue(s1)")
                                (("1"
                                  (split)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand stack_size_at2 +)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand
                                               stack_size_at
                                               +
                                               1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (case-replace
                                                       "clength(iftrue(extract_stat(iftrue(s1))(i - 1)`1)) -
                     clength(iftrue(s1))
                     + i = 0")
                                                      (("1"
                                                        (rewrite
                                                         stack_size_at_zero)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (assert)
                            (("3" (lemma next_pc_if_upto)
                              (("3" (grind) nil nil)) nil))
                            nil)
                           ("4" (grind) nil nil) ("5" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (expand stack_size_at +)
                (("4" (expand extract_stat +)
                  (("4" (assert)
                    (("4" (inst -3 "iffalse(s1)")
                      (("4" (inst -3 "i-1-clength(iftrue(s1))")
                        (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (expand stack_size_at +)
                (("5" (expand extract_stat +)
                  (("5"
                    (inst -4 "car(finseq2list[cstat](bstats(s1)))" "i")
                    (("5" (split)
                      (("1" (lemma "next_pc_if_upto")
                        (("1"
                          (inst -1 "i"
                           "car(finseq2list[cstat](bstats(s1)))")
                          (("1" (split)
                            (("1"
                              (case "i + 1 +
       clength(iftrue(extract_stat(car(finseq2list[cstat](bstats(s1))))
                                  (i)`1))
       < clength(car(finseq2list[cstat](bstats(s1))))")
                              (("1"
                                (assert)
                                (("1"
                                  (expand stack_size_at2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand clength -1 2)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand stack_size_at 2 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand stack_size_at2)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split)
                                      (("1" (flatten) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand stack_size_at 2 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case-replace
                                               "1 +
                     clength(iftrue(extract_stat
                                    (car(finseq2list[cstat](bstats(s1))))
                                    (i)`1))
                     - clength(car(finseq2list[cstat](bstats(s1))))
                     + i = 0")
                                              (("1"
                                                (rewrite
                                                 stack_size_at_zero)
                                                (("1"
                                                  (expand clength 2 2)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil)
                       ("3" (lemma next_pc_if_upto)
                        (("3"
                          (inst -1 "i"
                           "car(finseq2list[cstat](bstats(s1)))")
                          (("3" (split)
                            (("1" (assert) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("4" (propax) nil nil)
                       ("5" (use measure_stat_car)
                        (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (expand stack_size_at +)
                (("6" (expand extract_stat +)
                  (("6"
                    (inst -3 "sblock(list2finseq[cstat]
                                (cdr(finseq2list[cstat](bstats(s1)))))")
                    (("6"
                      (inst -3
                       "i - clength(car(finseq2list[cstat](bstats(s1))))")
                      (("6" (split)
                        (("1" (assert)
                          (("1" (expand stack_size_at2)
                            (("1" (lift-if)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand clength 1 3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand clength -6)
                                                  (("1"
                                                    (typepred i)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand clength -1 3)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (typepred i)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand stack_size_at 2 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil)
                         ("3" (assert)
                          (("3" (expand clength -4 2)
                            (("3" (lift-if)
                              (("3"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (typepred i)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand extract_stat -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (expand clength -3)
                          (("4" (lift-if)
                            (("4" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (typepred i)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (use measure_stat_cdr)
                          (("5" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (next_pc_if_upto formula-decl nil creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (dstat adt-accessor-decl "[(sdecl?) -> cstat]" creduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (iffalse adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (stack_size_at_zero formula-decl nil creduction nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (measure_stat_car formula-decl nil creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (stack_size_at def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (stack_size_at2 const-decl "nat" creduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (iftrue adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (clength def-decl "nat" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (next_pc_decl_begin_no_overflow 0
  (next_pc_decl_begin_no_overflow-1 nil 3705154735
   ("" (induct s1 :name stat_induction)
    (("1" (skeep* :preds? t) (("1" (grind) nil nil)) nil)
     ("2" (skeep* :preds? t) (("2" (grind) nil nil)) nil)
     ("3" (grind) nil nil)
     ("4" (skeep* :preds? t)
      (("4" (expand clength +)
        (("4" (expand next_pc +)
          (("4" (rewrite finseq2list_list2finseq)
            (("4" (assert)
              (("4" (rewrite list2finseq_finseq2list)
                (("4"
                  (case "list2finseq[cstat](cons(s1_1, finseq2list[cstat](l)))`length = 0")
                  (("1" (grind) nil nil)
                   ("2" (assert)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (inst?)
                            (("1" (split)
                              (("1" (assert) nil nil)
                               ("2" (propax) nil nil)
                               ("3"
                                (assert)
                                (("3" (grind) nil nil))
                                nil)
                               ("4" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst? -3)
                            (("1" (split)
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand clength -3)
                                  (("2"
                                    (rewrite finseq2list_list2finseq)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite
                                         list2finseq_finseq2list)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand extract_stat (-4 -5))
                                (("3"
                                  (rewrite finseq2list_list2finseq)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (rewrite list2finseq_finseq2list)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (expand extract_stat (-4 -5))
                                (("4"
                                  (rewrite finseq2list_list2finseq)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (rewrite list2finseq_finseq2list)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (s1_1 skolem-const-decl "cstat" creduction nil)
    (i skolem-const-decl "nat" creduction nil)
    (nth def-decl "T" list_props nil)
    (list2finseq_finseq2list formula-decl nil list2finseq_extra nil)
    (finseq2list_list2finseq formula-decl nil list2finseq_extra nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (s1_1 skolem-const-decl "cstat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (i skolem-const-decl "nat" creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "nat" creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (stat_induction formula-decl nil creduction nil)
    (next_pc def-decl "upto(clength(s1))" creduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (clength def-decl "nat" creduction nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cstat type-decl nil creduction nil))
   shostak))
 (stack_size_at_next_pc_decl_begin 0
  (stack_size_at_next_pc_decl_begin-1 nil 3705150082
   ("" (induct s1 :name stat_induction)
    (("1" (skeep* :preds? t)
      (("1" (expand stack_size_at +)
        (("1" (case-replace "i = 0")
          (("1" (assert)
            (("1" (expand next_pc +)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (rewrite stack_size_at_zero)
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (case "i < 1 + clength(s1_1)")
              (("1" (assert)
                (("1" (expand next_pc +)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (inst?)
                          (("1" (split)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (assert) nil nil)
                             ("4" (assert) (("4" (grind) nil nil)) nil)
                             ("5" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (lemma next_pc_decl_begin_no_overflow)
                          (("2" (inst -1 "i-1" "s1_1")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep* :preds? t)
      (("2" (expand stack_size_at +)
        (("2" (case-replace "i = 0")
          (("1" (assert) (("1" (grind) nil nil)) nil)
           ("2" (case "i < 1 + clength(s1_1)")
            (("1" (assert)
              (("1" (case "next_pc(sif(v1, s1_1, s2))(i) = 0")
                (("1" (grind) nil nil)
                 ("2" (assert)
                  (("2"
                    (case "next_pc(sif(v1, s1_1, s2))(i) < 1 + clength(s1_1)")
                    (("1" (assert)
                      (("1" (expand next_pc 3)
                        (("1" (lift-if +)
                          (("1" (split)
                            (("1" (grind) nil nil)
                             ("2" (flatten)
                              (("2"
                                (inst?)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case "next_pc(sif(v1, s1_1, s2))(i) = 0")
                (("1" (grind) nil nil)
                 ("2" (assert)
                  (("2"
                    (case "next_pc(sif(v1, s1_1, s2))(i) < 1 + clength(s1_1)")
                    (("1" (grind) nil nil)
                     ("2" (assert)
                      (("2" (expand next_pc 5)
                        (("2" (inst -4 "-1 - clength(s1_1) + i")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep* :preds? t) (("3" (grind) nil nil)) nil)
     ("4" (skeep* :preds? t)
      (("4" (expand stack_size_at +)
        (("4" (rewrite finseq2list_list2finseq)
          (("4"
            (case "i < clength(car(cons(s1_1, finseq2list[cstat](l))))")
            (("1" (assert)
              (("1"
                (case "next_pc(sblock(list2finseq[cstat]
                            (cons(s1_1, finseq2list[cstat](l)))))
                (i)
          < clength(s1_1)")
                (("1" (assert)
                  (("1" (inst?)
                    (("1" (split)
                      (("1" (grind) nil nil) ("2" (propax) nil nil)
                       ("3" (grind) nil nil) ("4" (grind) nil nil)
                       ("5" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lemma next_pc_decl_begin_no_overflow)
                    (("2" (expand next_pc 1)
                      (("2" (rewrite list2finseq_finseq2list)
                        (("2" (rewrite finseq2list_list2finseq)
                          (("2" (assert)
                            (("2" (inst -1 "i" "s1_1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2"
                (case "next_pc(sblock(list2finseq[cstat]
                            (cons(s1_1, finseq2list[cstat](l)))))
                (i)
          < clength(s1_1)")
                (("1" (expand next_pc -1)
                  (("1" (assert)
                    (("1" (rewrite list2finseq_finseq2list)
                      (("1" (rewrite finseq2list_list2finseq)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (rewrite list2finseq_finseq2list)
                    (("2" (inst? -3)
                      (("2" (split)
                        (("1" (expand next_pc 3)
                          (("1" (rewrite finseq2list_list2finseq)
                            (("1" (assert)
                              (("1"
                                (rewrite list2finseq_finseq2list)
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand clength -3)
                          (("2" (hide-all-but (1 -3))
                            (("2" (rewrite finseq2list_list2finseq)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("2"
                                    (rewrite list2finseq_finseq2list)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but (1 -4 3))
                          (("3" (expand next_pc -)
                            (("3" (rewrite finseq2list_list2finseq)
                              (("3"
                                (assert)
                                (("3"
                                  (rewrite list2finseq_finseq2list)
                                  (("3"
                                    (expand clength -1 3)
                                    (("3"
                                      (lift-if)
                                      (("3"
                                        (split)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (rewrite
                                             finseq2list_list2finseq)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 list2finseq_finseq2list)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (expand extract_stat -)
                          (("4" (rewrite finseq2list_list2finseq)
                            (("4" (assert)
                              (("4"
                                (rewrite list2finseq_finseq2list)
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (expand extract_stat -)
                          (("5" (rewrite finseq2list_list2finseq)
                            (("5" (assert)
                              (("5"
                                (rewrite list2finseq_finseq2list)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (finseq2list_list2finseq formula-decl nil list2finseq_extra nil)
    (list2finseq_finseq2list formula-decl nil list2finseq_extra nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (nth def-decl "T" list_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (sif adt-constructor-decl "[[(cvar?), cstat, cstat] -> (sif?)]"
     creduction nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (stack_size_at_zero formula-decl nil creduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (next_pc_decl_begin_no_overflow formula-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (stat_induction formula-decl nil creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (next_pc def-decl "upto(clength(s1))" creduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cstat type-decl nil creduction nil))
   shostak))
 (stack_size_at_next_pc_decl_end 0
  (stack_size_at_next_pc_decl_end-1 nil 3705155661
   ("" (induct s1 :name stat_induction)
    (("1" (skeep* :preds? t)
      (("1" (case-replace "i = 0")
        (("1" (grind) nil nil)
         ("2" (expand stack_size_at +)
          (("2" (rewrite stack_size_at2_alt +)
            (("2" (assert)
              (("2" (case "next_pc(sdecl(tp1, s1_1))(i) = 0")
                (("1" (grind) nil nil)
                 ("2" (assert)
                  (("2" (expand clength 3 1)
                    (("2" (expand next_pc 3)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2"
                                (inst?)
                                (("2"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil)
                                   ("4" (grind) nil nil)
                                   ("5" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep* :preds? t)
      (("2" (expand stack_size_at +)
        (("2" (rewrite stack_size_at2_alt +)
          (("2" (case-replace "i = 0")
            (("1" (grind) nil nil)
             ("2" (assert)
              (("2" (case-replace "next_pc(sif(v1, s1_1, s2))(i) = 0")
                (("1" (grind) nil nil)
                 ("2" (assert)
                  (("2" (case "i < 1 + clength(s1_1)")
                    (("1" (assert)
                      (("1"
                        (case "next_pc(sif(v1, s1_1, s2))(i) < 1 + clength(s1_1)")
                        (("1" (assert)
                          (("1"
                            (case-replace
                             "stack_size_at(s1_1)(next_pc(sif(v1, s1_1, s2))(i) - 1) = stack_size_at2(s1_1)(next_pc(s1_1)(i - 1))")
                            (("1" (inst?) (("1" (grind) nil nil)) nil)
                             ("2" (expand next_pc 1 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand next_pc (1 4))
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand stack_size_at2 +)
                                        (("1"
                                          (inst? -5)
                                          (("1"
                                            (split)
                                            (("1" (grind) nil nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil)
                                             ("4" (grind) nil nil)
                                             ("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2"
                        (case "next_pc(sif(v1, s1_1, s2))(i) < 1 + clength(s1_1)")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (inst? -4) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep* :preds? t) (("3" (grind) nil nil)) nil)
     ("4" (skeep* :preds? t)
      (("4" (expand stack_size_at +)
        (("4" (rewrite stack_size_at2_alt +)
          (("4" (assert)
            (("4" (expand list2finseq 1 1)
              (("4" (expand length 1 1)
                (("4" (assert)
                  (("4" (case "1 + length(finseq2list[cstat](l)) = 0")
                    (("1" (grind) nil nil)
                     ("2" (assert)
                      (("2" (case "i < clength(s1_1)")
                        (("1" (assert)
                          (("1" (expand next_pc +)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand stack_size_at2 -1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (assert) nil nil)
                                         ("4" (grind) nil nil)
                                         ("5" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case-replace
                                       "next_pc(s1_1)(i) = clength(s1_1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (case-replace
                                             "stack_size_at2(sblock(l))(0) = 0")
                                            (("1"
                                              (split -5)
                                              (("1"
                                                (replace -1 :dir RL)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (expand
                                                     stack_size_at2
                                                     +)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3" (assert) nil nil)
                                               ("4" (grind) nil nil)
                                               ("5" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (expand stack_size_at2)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       stack_size_at_zero)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "next_pc(sblock(list2finseq[cstat]
                            (cons(s1_1, finseq2list[cstat](l)))))
                (i)
          < clength(s1_1)")
                            (("1" (expand next_pc -1)
                              (("1"
                                (assert)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (inst? -3)
                                (("2"
                                  (split)
                                  (("1"
                                    (expand next_pc 4)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand clength -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if -3)
                                          (("2"
                                            (split -3)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil)
                                   ("4"
                                    (assert)
                                    (("4"
                                      (expand extract_stat (-5 -6))
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (expand extract_stat (-5 -6))
                                    (("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (finseq2list_list2finseq formula-decl nil list2finseq_extra nil)
    (list2finseq_finseq2list formula-decl nil list2finseq_extra nil)
    (nth def-decl "T" list_props nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (stack_size_at_zero formula-decl nil creduction nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (sif adt-constructor-decl "[[(cvar?), cstat, cstat] -> (sif?)]"
     creduction nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (s1_1 skolem-const-decl "cstat" creduction nil)
    (i skolem-const-decl "nat" creduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (stack_size_at2_alt formula-decl nil creduction nil)
    (ctype type-decl nil creduction nil)
    (sdecl adt-constructor-decl "[[ctype, cstat] -> (sdecl?)]"
     creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stat_induction formula-decl nil creduction nil)
    (stack_size_at def-decl "nat" creduction nil)
    (stack_size_at2 const-decl "nat" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (next_pc def-decl "upto(clength(s1))" creduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cstat type-decl nil creduction nil))
   shostak))
 (stack_size_at_vars 0
  (stack_size_at_vars-1 nil 3705173495
   ("" (induct s1 :name stat_induction)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (skeep* :preds? t)
      (("4" (expand extract_stat +)
        (("4" (lift-if)
          (("4" (split)
            (("1" (flatten)
              (("1" (expand vars +)
                (("1" (inst 2 0)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (inst? -4)
                  (("2" (inst -4 j)
                    (("2" (split)
                      (("1" (expand vars (-1 3))
                        (("1" (skeep)
                          (("1" (inst 3 "j_1 + 1")
                            (("1" (expand list2finseq 3)
                              (("1"
                                (expand nth 3)
                                (("1"
                                  (rewrite finseq2list_nth)
                                  nil
                                  nil))
                                nil))
                              nil)
                             ("2" (expand list2finseq 1)
                              (("2"
                                (expand length 1)
                                (("2"
                                  (rewrite finseq2list_length)
                                  (("2"
                                    (typepred "j_1")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand stack_size_at -5)
                        (("2" (assert)
                          (("2" (expand extract_stat -5)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (expand clength -4)
                        (("3" (assert)
                          (("3" (lift-if)
                            (("3" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (grind) nil nil))
    nil)
   ((finseq2list_length formula-decl nil list2finseq_extra nil)
    (finseq2list_nth formula-decl nil list2finseq_extra nil)
    (j_1 skolem-const-decl "below(l`length)" creduction nil)
    (list2finseq_finseq2list formula-decl nil list2finseq_extra nil)
    (finseq2list_list2finseq formula-decl nil list2finseq_extra nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (s1_1 skolem-const-decl "cstat" creduction nil)
    (l skolem-const-decl "finseq[cstat]" creduction nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (i!1 skolem-const-decl "nat" creduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (i!1 skolem-const-decl "nat" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (stat_induction formula-decl nil creduction nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vars def-decl "bool" creduction nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (clength def-decl "nat" creduction nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cstat type-decl nil creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (cframe_vars 0
  (cframe_vars-1 nil 3705174538
   ("" (skeep* :preds? t)
    (("" (lemma stack_size_at_vars)
      ((""
        (inst -1 "cf`fpc"
         "j-stack_size_at(D`seq(cf`ffct)`body)(cf`fpc)"
         "D`seq(cf`ffct)`body")
        (("1" (assert)
          (("1" (typepred "D`seq(cf`ffct)`body")
            (("1" (inst?)
              (("1" (typepred "cf`fdepth") (("1" (grind) nil nil)) nil)
               ("2" (typepred "cf`fdepth") (("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "cf`fdepth") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((stack_size_at_vars formula-decl nil creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (j skolem-const-decl "nat" creduction nil)
    (cstat type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (stack_size_at def-decl "nat" creduction nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (> const-decl "bool" reals nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (D skolem-const-decl "finseq[Definition]" creduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (cf skolem-const-decl "cstack_frame(D)" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (cstate_vars_TCC1 0
  (cstate_vars_TCC1-1 nil 3705175433 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (cstate_vars subtype "cS`callstack`length - 1"
    "below[length(cS`callstack)]")))
 (cstate_vars 0
  (cstate_vars-1 nil 3705176959 ("" (postpone) nil nil) nil shostak))
 (cframe_next_pc_TCC1 0
  (cframe_next_pc_TCC1-1 nil 3704129060
   ("" (skeep* :preds? t)
    (("" (use next_pc_no_overflow)
      (("" (split)
        (("1" (propax) nil nil)
         ("2" (typepred "cf`fpc") (("2" (propax) nil nil)) nil)
         ("3" (propax) nil nil)
         ("4" (typepred "D`seq(cf`ffct)`body") (("4" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((next_pc_no_overflow formula-decl nil creduction nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (cframe_next_pc subtype "next_pc(D`seq(cf`ffct)`body)(cf`fpc)"
    "below(clength(D`seq(cf`ffct)`body))")))
 (cframe_next_pc_TCC2 0
  (cframe_next_pc_TCC2-1 nil 3704129060
   ("" (skeep* :preds? t)
    (("" (hide 4)
      (("" (rewrite stack_size_at_next_pc)
        (("1" (typepred "cf`fdepth")
          (("1" (split)
            (("1" (propax) nil nil) ("2" (flatten) nil nil)) nil))
          nil)
         ("2" (use next_pc_no_overflow)
          (("2" (split)
            (("1" (propax) nil nil)
             ("2" (typepred "cf`fpc") (("2" (propax) nil nil)) nil)
             ("3" (propax) nil nil)
             ("4" (typepred "D`seq(cf`ffct)`body")
              (("4" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((next_pc_no_overflow formula-decl nil creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (sdecl? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (stack_size_at_next_pc formula-decl nil creduction nil))
   nil
   (cframe_next_pc subtype "cf`fdepth"
    "{k: nat | k = D`seq(cf`ffct)`arity + stack_size_at(D`seq(cf`ffct)`body)(next_pc(D`seq(cf`ffct)`body)(cf`fpc)) OR (k <= D`seq(cf`ffct)`arity + stack_size_at(D`seq(cf`ffct)`body)(next_pc(D`seq(cf`ffct)`body)(cf`fpc)) AND is_return?(D`seq(cf`ffct)`body)(next_pc(D`seq(cf`ffct)`body)(cf`fpc)))}")))
 (pop_TCC1 0
  (pop_TCC1-1 nil 3704127090 ("" (subtype-tcc) nil nil) nil nil
   (pop subtype "S`length - 1" "nat")))
 (pop_TCC2 0
  (pop_TCC2-1 nil 3704127090 ("" (subtype-tcc) nil nil) nil nil
   (pop subtype "i" "below[S`length]")))
 (reduce_TCC1 0
  (reduce_TCC3-1 nil 3704127090 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (reduce subtype "cS`callstack`length - 1"
     "below[cS`callstack`length]")))
 (reduce_TCC2 0
  (reduce_TCC2-1 nil 3704127090 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (reduce subtype "lf`fpc" "below(clength(fbody))")))
 (reduce_TCC3 0
  (reduce_TCC4-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (use next_pc_no_overflow) (("" (grind) nil nil)) nil)) nil)
   ((next_pc_no_overflow formula-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (reduce subtype "next_pc(fbody)(lf`fpc)"
     "below(clength(cS`cdefs`seq(lf`ffct)`body))")))
 (reduce_TCC4 0
  (reduce_TCC1-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (hide 4)
      (("" (typepred "lf`fdepth")
        (("" (split)
          (("1" (replace -1)
            (("1" (assert)
              (("1" (use stack_size_at_next_pc_decl_begin)
                (("1" (split)
                  (("1" (grind) nil nil)
                   ("2" (use next_pc_decl_begin_no_overflow)
                    (("2" (grind) nil nil)) nil)
                   ("3" (use next_pc_decl_begin_no_overflow)
                    (("3" (grind) nil nil)) nil)
                   ("4" (grind) nil nil) ("5" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc_decl_begin_no_overflow formula-decl nil creduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (stack_size_at_next_pc_decl_begin formula-decl nil creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil))
   nil
   (reduce subtype "cS`callstack`length - 1"
     "below[length(cS`callstack)]")))
 (reduce_TCC5 0
  (reduce_TCC7-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (use next_pc_no_overflow)
      (("" (split)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (propax) nil nil))
        nil))
      nil))
    nil)
   ((next_pc_no_overflow formula-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (reduce subtype "next_pc(fbody)(lf`fpc)"
     "below(clength(cS`cdefs`seq(lf`ffct)`body))")))
 (reduce_TCC6 0
  (reduce_TCC8-1 nil 3704129060
   ("" (skeep* :preds? t)
    ((""
      (case-replace "lf`fdepth = cS`cdefs`seq(lf`ffct)`arity +
          stack_size_at(cS`cdefs`seq(lf`ffct)`body)(next_pc(fbody)(lf`fpc)) + 1")
      (("1" (assert) nil nil)
       ("2" (delete 5)
        (("2" (typepred "lf`fdepth")
          (("2" (split)
            (("1" (replace -1)
              (("1" (assert)
                (("1" (use stack_size_at_next_pc_decl_end)
                  (("1" (split)
                    (("1" (expand stack_size_at2)
                      (("1" (assert)
                        (("1"
                          (case "next_pc(fbody)(lf`fpc) < clength(fbody)")
                          (("1" (grind) nil nil)
                           ("2" (use next_pc_no_overflow)
                            (("2" (split)
                              (("1" (propax) nil nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil)
                               ("4" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil)
                     ("4" (grind) nil nil)
                     ("5" (typepred "extract_stat(fbody)(lf`fpc)")
                      (("5" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (use next_pc_no_overflow)
        (("3" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (next_pc def-decl "upto(clength(s1))" creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (stack_size_at_next_pc_decl_end formula-decl nil creduction nil)
    (executable_stat? const-decl "bool" creduction nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_size_at2 const-decl "nat" creduction nil)
    (next_pc_no_overflow formula-decl nil creduction nil))
   nil
   (reduce subtype "lf`fdepth - 1"
     "{k: nat | k = cS`cdefs`seq(lf`ffct)`arity + stack_size_at(cS`cdefs`seq(lf`ffct)`body)(next_pc(fbody)(lf`fpc)) OR (k <= cS`cdefs`seq(lf`ffct)`arity + stack_size_at(cS`cdefs`seq(lf`ffct)`body)(next_pc(fbody)(lf`fpc)) AND is_return?(cS`cdefs`seq(lf`ffct)`body)(next_pc(fbody)(lf`fpc)))}")))
 (reduce_TCC7 0
  (reduce_TCC8-1 nil 3704127090 ("" (subtype-tcc) nil nil) nil nil
   (reduce subtype "cS`stack" "{S: finseq[cvalue] | S`length > 0}")))
 (reduce_TCC8 0
  (reduce_TCC9-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(v1) < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (use cstate_vars)
        (("2" (simplify :let-reduce? t) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (cindex adt-accessor-decl "[(cvar?) -> nat]" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even? const-decl "bool" integers nil)
    (extra_size_at const-decl "nat" creduction nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cstate_vars formula-decl nil creduction nil))
   nil
   (reduce subtype "cS`stack`length - 1 - cindex(v1)"
     "below[cS`stack`length]")))
 (reduce_TCC9 0
  (reduce_TCC11-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (use next_pc_if_no_overflow) (("" (grind) nil nil)) nil)) nil)
   ((next_pc_if_no_overflow formula-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "lf`fpc + clength(cthen) + 1"
     "below(clength(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body))")))
 (reduce_TCC10 0
  (reduce_TCC13-1 nil 3704129060
   ("" (skeep* :preds? t)
    (("" (delete 5)
      ((""
        (typepred "cS`callstack`seq(cS`callstack`length - 1)`fdepth")
        (("1" (split)
          (("1" (rewrite -1)
            (("1" (assert)
              (("1" (use stack_size_at_next_pc_iffalse)
                (("1" (simplify :let-reduce? t)
                  (("1"
                    (case "1 + clength(iftrue(extract_stat(fbody)(lf`fpc)`1)) + lf`fpc <
       clength(fbody)")
                    (("1" (grind) nil nil)
                     ("2" (use next_pc_if_no_overflow)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc_if_no_overflow formula-decl nil creduction nil)
    (stack_size_at2 const-decl "nat" creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (iftrue adt-accessor-decl "[(sif?) -> cstat]" creduction nil)
    (sif? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (stack_size_at_next_pc_iffalse formula-decl nil creduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil))
   nil
   (reduce subtype "cS`callstack`seq(cS`callstack`length - 1)`fdepth"
     "{k: nat | k = cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`arity + stack_size_at(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)(1 + lf`fpc + clength(cthen)) OR (k <= cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`arity + stack_size_at(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)(1 + lf`fpc + clength(cthen)) AND is_return?(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)(1 + lf`fpc + clength(cthen)))}")))
 (reduce_TCC11 0
  (reduce_TCC13-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (use next_pc_if_no_overflow) (("" (grind) nil nil)) nil)) nil)
   ((next_pc_if_no_overflow formula-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "lf`fpc + 1"
     "below(clength(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body))")))
 (reduce_TCC12 0
  (reduce_TCC16-1 nil 3704129060
   ("" (skeep* :preds? t)
    (("" (delete 7)
      ((""
        (typepred "cS`callstack`seq(cS`callstack`length - 1)`fdepth")
        (("1" (split)
          (("1" (rewrite -1)
            (("1" (assert)
              (("1" (use stack_size_at_next_pc_iftrue)
                (("1" (case "lf`fpc + 1 < clength(fbody)")
                  (("1" (grind) nil nil)
                   ("2" (use next_pc_if_no_overflow)
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc_if_no_overflow formula-decl nil creduction nil)
    (stack_size_at_next_pc_iftrue formula-decl nil creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil))
   nil
   (reduce subtype "cS`callstack`seq(cS`callstack`length - 1)`fdepth"
     "{k: nat | k = cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`arity + stack_size_at(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)(1 + lf`fpc) OR (k <= cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`arity + stack_size_at(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)(1 + lf`fpc) AND is_return?(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)(1 + lf`fpc))}")))
 (reduce_TCC13 0
  (reduce_TCC16-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(v1) < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (use "cstate_vars")
        (("2" (split)
          (("1" (simplify :let-reduce? t)
            (("1" (split)
              (("1" (assert) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (cindex adt-accessor-decl "[(cvar?) -> nat]" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cstate_vars formula-decl nil creduction nil))
   nil
   (reduce subtype "cS`stack`length - 1 - cindex(v1)"
     "below[cS`stack`length]")))
 (reduce_TCC14 0
  (reduce_TCC19-1 nil 3704134859 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_return? const-decl "bool" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC15 0
  (reduce_TCC19-1 nil 3704127090 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (reduce subtype "x" "(cref?)")))
 (reduce_TCC16 0
  (reduce_TCC20-1 nil 3704127090 ("" (subtype-tcc) nil nil) nil nil
   (reduce subtype "cS`store"
     "Store(IF x = cnil THEN cS`domain ELSE remove(crefindex(x), cS`domain) ENDIF)")))
 (reduce_TCC17 0
  (reduce_TCC23-1 nil 3704134859 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_return? const-decl "bool" creduction nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC18 0
  (reduce_TCC23-1 nil 3704127090 ("" (subtype-tcc) nil nil)
   ((least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (add const-decl "(nonempty?)" sets nil))
   nil
   (reduce subtype "least_out(cS`domain)"
     "(add(least_out(cS`domain), cS`domain))")))
 (reduce_TCC19 0
  (reduce_TCC26-1 nil 3704134859 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_return? const-decl "bool" creduction nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC20 0
  (reduce_TCC26-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(args`seq(i)) + i < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (hide 4) (("2" (postpone) nil nil)) nil)
       ("3" (postpone) nil nil))
      nil))
    nil)
   nil nil
   (reduce subtype "cS`stack`length - 1 - i - cindex(args`seq(i))"
     "below[length(cS`stack)]")))
 (reduce_TCC21 0
  (reduce_TCC27-1 nil 3704127090 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (reduce subtype "cS" "{cS | cS`callstack`length > 0}")))
 (reduce_TCC22 0
  (reduce_TCC29-1 nil 3705167090
   ("" (skeep* :preds? t)
    (("" (replace -6 :dir RL)
      (("" (replace -7 :dir RL)
        (("" (expand is_fun_call_at +)
          (("" (flatten)
            (("" (replace* -8 -9 :dir RL)
              (("" (case "i < clength(s1)")
                (("1" (grind) nil nil)
                 ("2" (typepred "extract_stat(fbody)(lf`fpc)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_fun_call_at const-decl "bool" creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil))
   nil
   (reduce subtype "f"
     "{f: nat | is_fun_call_at(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)(cS`callstack`seq(cS`callstack`length - 1)`fpc, f)}")))
 (reduce_TCC23 0
  (reduce_TCC31-1 nil 3704134859
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((is_return? const-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC24 0
  (reduce_TCC31-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(cargs(e1)`seq(i)) < cS`stack`length")
      (("1" (case "cindex(cargs(e1)`seq(i)) + i < cS`stack`length")
        (("1" (grind) nil nil)
         ("2" (hide 4) (("2" (postpone) nil nil)) nil))
        nil)
       ("2" (postpone) nil nil) ("3" (postpone) nil nil))
      nil))
    nil)
   nil nil
   (reduce subtype "cS`stack`length - 1 - i - cindex(cargs(e1)`seq(i))"
     "below[length(cS`stack)]")))
 (reduce_TCC25 0
  (reduce_TCC32-1 nil 3704127090 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (reduce subtype "cS" "{cS | cS`callstack`length > 0}")))
 (reduce_TCC26 0
  (reduce_TCC34-1 nil 3705167090 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_fun_call_at const-decl "bool" creduction nil))
   nil
   (reduce subtype "cfun(e1)"
     "{f: nat | is_fun_call_at(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)(cS`callstack`seq(cS`callstack`length - 1)`fpc, f)}")))
 (reduce_TCC27 0
  (reduce_TCC36-1 nil 3704134859
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_return? const-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC28 0
  (reduce_TCC38-1 nil 3704134859
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((is_return? const-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC29 0
  (reduce_TCC38-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(v1) < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (use cstate_vars)
        (("2" (simplify :let-reduce? t) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (cindex adt-accessor-decl "[(cvar?) -> nat]" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (builtin_num const-decl "nat" creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars const-decl "bool" creduction nil)
    (vars const-decl "bool" creduction nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even? const-decl "bool" integers nil)
    (extra_size_at const-decl "nat" creduction nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cstate_vars formula-decl nil creduction nil))
   nil
   (reduce subtype "cS`stack`length - 1 - cindex(v1)"
     "below[cS`stack`length]")))
 (reduce_TCC30 0
  (reduce_TCC39-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(v2) < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (use cstate_vars)
        (("2" (simplify :let-reduce? t) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (cindex adt-accessor-decl "[(cvar?) -> nat]" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (builtin_num const-decl "nat" creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars const-decl "bool" creduction nil)
    (vars const-decl "bool" creduction nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even? const-decl "bool" integers nil)
    (extra_size_at const-decl "nat" creduction nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cstate_vars formula-decl nil creduction nil))
   nil
   (reduce subtype "cS`stack`length - 1 - cindex(v2)"
     "below[cS`stack`length]")))
 (reduce_TCC31 0
  (reduce_TCC42-1 nil 3704134859
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (builtin_num const-decl "nat" creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC32 0
  (reduce_TCC44-1 nil 3704134859
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lrvalue? const-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (is_return? const-decl "bool" creduction nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC33 0
  (reduce_TCC44-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "i1 < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (use cstate_vars)
        (("2" (simplify :let-reduce? t) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lrvalue? const-decl "bool" creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars const-decl "bool" creduction nil)
    (vars const-decl "bool" creduction nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even? const-decl "bool" integers nil)
    (extra_size_at const-decl "nat" creduction nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cstate_vars formula-decl nil creduction nil))
   nil
   (reduce subtype "cS`stack`length - 1 - i"
     "below[cS`stack`length]")))
 (reduce_TCC34 0
  (reduce_TCC45-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(v1) < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (use cstate_vars)
        (("2" (simplify :let-reduce? t) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (cindex adt-accessor-decl "[(cvar?) -> nat]" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lrvalue? const-decl "bool" creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars const-decl "bool" creduction nil)
    (vars const-decl "bool" creduction nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even? const-decl "bool" integers nil)
    (extra_size_at const-decl "nat" creduction nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cstate_vars formula-decl nil creduction nil))
   nil
   (reduce subtype "cS`stack`length - 1 - cindex(v1)"
     "below[cS`stack`length]")))
 (reduce_TCC35 0
  (reduce_TCC46-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(v2) < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (use cstate_vars)
        (("2" (simplify :let-reduce? t) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (cindex adt-accessor-decl "[(cvar?) -> nat]" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lrvalue? const-decl "bool" creduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars const-decl "bool" creduction nil)
    (vars const-decl "bool" creduction nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even? const-decl "bool" integers nil)
    (extra_size_at const-decl "nat" creduction nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cstate_vars formula-decl nil creduction nil))
   nil
   (reduce subtype "cS`stack`length - 1 - cindex(v2)"
     "below[cS`stack`length]")))
 (reduce_TCC36 0
  (reduce_TCC49-1 nil 3704134859
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lrvalue? const-decl "bool" creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC37 0
  (reduce_TCC49-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(v1) < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (use cstate_vars)
        (("2" (simplify :let-reduce? t)
          (("2" (split)
            (("1" (assert) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cstate_vars formula-decl nil creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (vars const-decl "bool" creduction nil)
    (vars const-decl "bool" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lrvalue? const-decl "bool" creduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cindex adt-accessor-decl "[(cvar?) -> nat]" creduction nil)
    (cstat type-decl nil creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (reduce subtype "cS`stack`length - 1 - cindex(v1)"
     "below[cS`stack`length]")))
 (reduce_TCC38 0
  (reduce_TCC52-1 nil 3704134859
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lrvalue? const-decl "bool" creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC39 0
  (reduce_TCC52-1 nil 3704127090 ("" (cases-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lvalue type-decl nil creduction nil)
    (lrvalue? const-decl "bool" creduction nil))
   nil
   (reduce cases "lr1"
     "lvalue: DATATYPE
 BEGIN
  cvar(cindex: nat): cvar?
  caccess(clhs: (cvar?), crhs: (cvar?)): caccess?
  cfield(cval: (cvar?), cfindex: nat): cfield?
  creturn: creturn?
 END lvalue")))
 (reduce_TCC40 0
  (reduce_TCC53-1 nil 3704127090 ("" (cases-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (reduce cases "e1"
     "cexpr: DATATYPE
 BEGIN
  elv(lval: (lrvalue?)): elv?
  econstant(cvalue: int): econstant?
  enil: enil?
  ecall(cfun: nat, cargs: finseq[(cvar?)]): ecall?
  ebuiltin(cbuiltin: below(builtin_num), cbv1: (cvar?), cbv2: (cvar?)): ebuiltin?
 END cexpr")))
 (reduce_TCC41 0
  (reduce_TCC56-1 nil 3704134859 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_return? const-decl "bool" creduction nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC42 0
  (reduce_TCC56-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "i1 < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (use cstate_vars)
        (("2" (simplify :let-reduce? t)
          (("2" (split)
            (("1" (assert) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cstate_vars formula-decl nil creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (vars const-decl "bool" creduction nil)
    (vars const-decl "bool" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (reduce subtype "cS`stack`length - 1 - i"
     "below[cS`stack`length]")))
 (reduce_TCC43 0
  (reduce_TCC57-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(v1) < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (use cstate_vars)
        (("2" (simplify :let-reduce? t)
          (("2" (split)
            (("1" (assert) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cstate_vars formula-decl nil creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (vars const-decl "bool" creduction nil)
    (vars const-decl "bool" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cindex adt-accessor-decl "[(cvar?) -> nat]" creduction nil)
    (cstat type-decl nil creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (reduce subtype "cS`stack`length - 1 - cindex(v1)"
     "below[cS`stack`length]")))
 (reduce_TCC44 0
  (reduce_TCC58-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(v2) < cS`stack`length")
      (("1" (grind) nil nil)
       ("2" (use cstate_vars)
        (("2" (simplify :let-reduce? t)
          (("2" (split)
            (("1" (assert) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cstate_vars formula-decl nil creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (vars const-decl "bool" creduction nil)
    (vars const-decl "bool" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cindex adt-accessor-decl "[(cvar?) -> nat]" creduction nil)
    (cstat type-decl nil creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (reduce subtype "cS`stack`length - 1 - cindex(v2)"
     "below[cS`stack`length]")))
 (reduce_TCC45 0
  (reduce_TCC61-1 nil 3704134859 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC46 0
  (reduce_TCC61-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (case "cindex(v1) < cS`stack`length")
      (("1" (assert) nil nil)
       ("2" (use cstate_vars)
        (("2" (simplify :let-reduce? t)
          (("2" (split)
            (("1" (assert) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cstate_vars formula-decl nil creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars const-decl "bool" creduction nil)
    (vars const-decl "bool" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cindex adt-accessor-decl "[(cvar?) -> nat]" creduction nil)
    (cstat type-decl nil creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (reduce subtype "cS`stack`length - 1 - cindex(v1)"
     "below[cS`stack`length]")))
 (reduce_TCC47 0
  (reduce_TCC64-1 nil 3704134859 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (reduce subtype "lf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC48 0
  (reduce_TCC82-1 nil 3704129060
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (flatten)
        (("" (hide 5)
          (("" (typepred "lf`fdepth")
            (("" (split 5)
              (("1" (grind) nil nil)
               ("2" (expand is_return?)
                (("2" (replace* -6 -7)
                  (("2" (replace -8 :dir RL)
                    (("2" (replace -9 :dir RL)
                      (("2" (split)
                        (("1" (grind) nil nil)
                         ("2" (case "ecall?(e1)")
                          (("1" (replace -13)
                            (("1" (expand clength)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred
                                   "extract_stat(cS`cdefs`seq
                        (cS`callstack`seq
                             (cS`callstack`length - 1)`ffct)`body)
                   (cS`callstack`seq(cS`callstack`length - 1)`fpc)")
                                  (("1"
                                    (case "i < clength(s1)")
                                    (("1"
                                      (hide-all-but (1 5 -1 -16))
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (case "i < clength(s1)")
                              (("1" (grind) nil nil)
                               ("2"
                                (typepred
                                 "extract_stat(cS`cdefs`seq
                        (cS`callstack`seq
                             (cS`callstack`length - 1)`ffct)`body)
                   (cS`callstack`seq(cS`callstack`length - 1)`fpc)")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cexpr type-decl nil creduction nil)
    (ecall? adt-recognizer-decl "[cexpr -> boolean]" creduction nil)
    (executable_stat? const-decl "bool" creduction nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil))
   nil
   (reduce subtype "lf`fdepth - 1"
     "{k: nat | k = cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`arity + stack_size_at(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)(cS`callstack`seq(cS`callstack`length - 1)`fpc) OR (k <= cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`arity + stack_size_at(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)(cS`callstack`seq(cS`callstack`length - 1)`fpc) AND is_return?(cS`cdefs`seq(cS`callstack`seq(cS`callstack`length - 1)`ffct)`body)(cS`callstack`seq(cS`callstack`length - 1)`fpc))}")))
 (reduce_TCC49 0
  (reduce_TCC69-1 nil 3704127090 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (reduce subtype "cS`callstack"
     "{S: finseq[cstack_frame(cS`cdefs)] | S`length > 0}")))
 (reduce_TCC50 0
  (reduce_TCC66-1 nil 3704127090 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pop const-decl "finseq[T]" creduction nil))
   nil (reduce subtype "nc`length - 1" "below[nc`length]")))
 (reduce_TCC51 0
  (reduce_TCC68-1 nil 3704134859
   ("" (skeep* :preds? t)
    (("" (typepred "cS`callstack")
      (("" (inst -1 "cS`callstack`length - 2")
        (("1" (replace -13)
          (("1" (replace -14)
            (("1" (expand pop)
              (("1" (hide-all-but (6 -1)) (("1" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pop const-decl "finseq[T]" creduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (cS skolem-const-decl "{cS | NOT cS`error}" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (reduce subtype "nlf"
     "{cf: cstack_frame(cS`cdefs) | NOT is_return?(cS`cdefs`seq(cf`ffct)`body)(cf`fpc) AND NOT sdecl?(extract_stat(cS`cdefs`seq(cf`ffct)`body)(cf`fpc)`1)}")))
 (reduce_TCC52 0
  (reduce_TCC69-1 nil 3704134859
   ("" (skeep* :preds? t)
    (("" (case "i!1 < nc`length - 1")
      (("1" (typepred "cS`callstack")
        (("1" (inst -1 "i!1")
          (("1" (simplify)
            (("1" (replace -15)
              (("1" (expand pop)
                (("1" (simplify)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (expand cframe_next_pc)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (propax) nil nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (clength def-decl "nat" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i!1 skolem-const-decl "{i | i < nc`length - 1}" creduction nil)
    (nc skolem-const-decl "finseq[cstack_frame(cS`cdefs)]" creduction
     nil)
    (cS skolem-const-decl "{cS | NOT cS`error}" creduction nil)
    (cframe_next_pc const-decl "cstack_frame(D)" creduction nil)
    (pop const-decl "finseq[T]" creduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (reduce subtype
           "nc WITH [`seq(nc`length - 1) := cframe_next_pc(cS`cdefs)(nlf)]"
     "{C: finseq[cstack_frame(cS`cdefs)] | FORALL (i: nat | i < C`length - 1): is_fun_call_at(cS`cdefs`seq(C`seq(i)`ffct)`body)(C`seq(i)`fpc, C`seq(1 + i)`ffct)}")))
 (reduce_TCC53 0
  (reduce_TCC71-1 nil 3705169570 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (reduce subtype "cS`callstack"
     "{S: finseq[cstack_frame(cS`cdefs)] | S`length > 0}")))
 (reduce_TCC54 0
  (reduce_TCC72-1 nil 3705169570 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at def-decl "nat" creduction nil)
    (<= const-decl "bool" reals nil)
    (is_return? const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pop const-decl "finseq[T]" creduction nil)
    (is_fun_call_at const-decl "bool" creduction nil))
   nil
   (reduce subtype "pop(cS`callstack)"
     "{C: finseq[cstack_frame(cS`cdefs)] | FORALL (i: nat | i < C`length - 1): is_fun_call_at(cS`cdefs`seq(C`seq(i)`ffct)`body)(C`seq(i)`fpc, C`seq(1 + i)`ffct)}")))
 (reduce_TCC55 0
  (reduce_TCC70-1 nil 3704127090
   ("" (skeep* :preds? t)
    (("" (typepred "extract_stat(fbody)(lf`fpc)")
      (("" (grind) nil nil)) nil))
    nil)
   ((cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" creduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (is_return_at_end? def-decl "bool" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (clength def-decl "nat" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cstat type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (reduce cases "s1"
     "cstat: DATATYPE
 BEGIN
  sassign(aval: lvalue, aexpr: cexpr): sassign?
  scall(sfun: nat, sargs: finseq[(cvar?)]): scall?
  sdecl(dtype: ctype, dstat: cstat): sdecl?
  sif(scond: (cvar?), iftrue: cstat, iffalse: cstat): sif?
  sblock(bstats: finseq[cstat]): sblock?
  smalloc(msize: nat): smalloc?
  sfree(fvar: (cvar?)): sfree?
 END cstat"))))

