(creduction
 (vars_TCC1 0
  (vars_TCC1-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil))
   nil))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil))
   nil))
 (vars_TCC3 0
  (vars_TCC3-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil))
   nil))
 (vars_TCC4 0
  (vars_TCC4-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil)
    (subterm adt-def-decl "boolean" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (length_cdr 0
  (length_cdr-1 nil 3703618864 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (nth_cdr_TCC1 0
  (nth_cdr_TCC1-1 nil 3703618864
   ("" (skeep*) (("" (rewrite length_cdr) (("" (grind) nil nil)) nil))
    nil)
   ((length_cdr formula-decl nil creduction nil)
    (T decl-formal-type nil creduction nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (nth_cdr 0
  (nth_cdr-1 nil 3703618930 ("" (grind) nil nil)
   ((nth def-decl "T" list_props nil)) shostak))
 (measure_stat_TCC1 0
  (measure_stat_TCC1-1 nil 3703617429 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil))
   nil))
 (measure_stat_TCC2 0
  (measure_stat_TCC2-1 nil 3703617429 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil))
   nil))
 (measure_stat_TCC3 0
  (measure_stat_TCC3-1 nil 3703617429
   ("" (skeep*)
    (("" (expand is_finite)
      (("" (inst 1 "stats`length" "lambda (j: below(stats`length)): j")
        (("" (expand injective?) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (measure_stat_TCC4 0
  (measure_stat_TCC4-1 nil 3703617429 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm adt-def-decl "boolean" creduction nil)
    (<< adt-def-decl "(strict_well_founded?[cstat])" creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cstat type-decl nil creduction nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (measure_stat_car_TCC1 0
  (measure_stat_car_TCC1-1 nil 3703617691
   ("" (skeep* :preds? t)
    (("" (expand finseq2list)
      (("" (expand finseq2list_rec) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((finseq2list const-decl "list[T]" list2finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil))
   nil))
 (measure_stat_car 0
  (measure_stat_car-1 nil 3703617691
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (expand measure_stat + 2)
        (("" (lemma sigma_add)
          (("" (inst -1 _ _ 0)
            (("" (inst? -1)
              (("1" (rewrite -1)
                (("1" (expand finseq2list)
                  (("1" (expand finseq2list_rec)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (expand is_finite)
                (("2"
                  (inst 1 "bstats(s1)`length"
                   "lambda (j: below(bstats(s1)`length)): j")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_add formula-decl nil finite_set_theorems nil)
    (s1 skolem-const-decl "cstat" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (cstat type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (empty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_stat def-decl "posnat" creduction nil))
   shostak))
 (measure_stat_cdr 0
  (measure_stat_cdr-1 nil 3703617862
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (expand measure_stat)
        (("" (expand list2finseq + (1 2))
          (("" (expand list2finseq)
            ((""
              (case-replace "(lambda j:
               IF j < length(cdr(finseq2list[cstat](bstats(s1))))
                 THEN measure_stat(nth(cdr(finseq2list[cstat](bstats(s1))),
                                       j))
               ELSE 0
               ENDIF) = (lambda j:
               IF j < bstats(s1)`length - 1
                 THEN measure_stat(bstats(s1)`seq(j+1))
               ELSE 0
               ENDIF)")
              (("1" (rewrite length_cdr)
                (("1" (rewrite finseq2list_length)
                  (("1" (delete -1)
                    (("1" (assert)
                      (("1" (lemma sigma_shift)
                        (("1"
                          (inst -1 "lambda j: j < bstats(s1)`length" _)
                          (("1" (inst?)
                            (("1" (rewrite -1)
                              (("1"
                                (case-replace
                                 "(lambda j:
                IF j < bstats(s1)`length - 1
                  THEN measure_stat(bstats(s1)`seq(1 + j))
                ELSE 0
                ENDIF) = lambda i:
                  IF 1 + i < bstats(s1)`length
                    THEN measure_stat(bstats(s1)`seq(1 + i))
                  ELSE 0
                  ENDIF")
                                (("1"
                                  (case-replace
                                   "(lambda j: j < bstats(s1)`length - 1) = lambda i: 1 + i < bstats(s1)`length")
                                  (("1"
                                    (assert)
                                    (("1" (postpone) nil nil))
                                    nil)
                                   ("2" (decompose-equality) nil nil))
                                  nil)
                                 ("2"
                                  (decompose-equality)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand is_finite)
                            (("2"
                              (inst 1 "bstats(s1)`length"
                               "lambda (j: below(bstats(s1)`length)): j")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (delete 2)
                (("2" (decompose-equality)
                  (("1" (lift-if)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (rewrite nth_cdr)
                          (("1" (rewrite finseq2list_nth)
                            (("1" (rewrite length_cdr)
                              (("1"
                                (rewrite finseq2list_length)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (rewrite length_cdr)
                              (("1"
                                (rewrite finseq2list_length)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (rewrite length_cdr)
                          (("1" (rewrite finseq2list_length)
                            (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete 2) (("2" (grind) nil nil)) nil)
                   ("3" (delete 2) (("3" (grind) nil nil)) nil)
                   ("4" (grind) nil nil))
                  nil))
                nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil)
    (cstat type-decl nil creduction nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (finseq2list_length formula-decl nil list2finseq_extra nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (s1 skolem-const-decl "cstat" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (sigma_shift formula-decl nil finite_set_theorems nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr formula-decl nil creduction nil)
    (nth_cdr formula-decl nil creduction nil)
    (finseq2list_nth formula-decl nil list2finseq_extra nil)
    (measure_stat def-decl "posnat" creduction nil))
   shostak))
 (clength_TCC1 0
  (clength_TCC1-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (measure_stat def-decl "posnat" creduction nil))
   nil))
 (clength_TCC2 0
  (clength_TCC2-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (measure_stat def-decl "posnat" creduction nil))
   nil))
 (clength_TCC3 0
  (clength_TCC3-1 nil 3703602385
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (measure_stat def-decl "posnat" creduction nil))
   nil))
 (clength_TCC4 0
  (clength_TCC4-1 nil 3703602385 ("" (termination-tcc) nil nil)
   ((finseq2list_rec def-decl "list[T]" list2finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq2list const-decl "list[T]" list2finseq nil))
   nil))
 (clength_TCC5 0
  (clength_TCC5-1 nil 3703602385
   ("" (skeep*)
    (("" (lemma measure_stat_car)
      (("" (inst -1 s1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((measure_stat_car formula-decl nil creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (measure_stat def-decl "posnat" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cstat type-decl nil creduction nil))
   nil))
 (clength_TCC6 0
  (clength_TCC6-1 nil 3703617429
   ("" (skeep*)
    (("" (lemma measure_stat_cdr)
      (("" (inst -1 s1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((measure_stat_cdr formula-decl nil creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (measure_stat def-decl "posnat" creduction nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cstat type-decl nil creduction nil))
   nil))
 (stack_size_at_TCC1 0
  (stack_size_at_TCC1-1 nil 3703854481 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (stack_size_at_TCC2 0
  (stack_size_at_TCC2-1 nil 3703854481 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (stack_size_at_TCC3 0
  (stack_size_at_TCC3-1 nil 3703854481 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (stack_size_at_TCC4 0
  (stack_size_at_TCC4-1 nil 3703854481 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq2list const-decl "list[T]" list2finseq nil))
   nil))
 (stack_size_at_TCC5 0
  (stack_size_at_TCC5-1 nil 3703854481
   ("" (skeep* :preds? t)
    (("" (lemma measure_stat_car)
      (("" (inst -1 s1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((measure_stat_car formula-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (measure_stat def-decl "posnat" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cstat type-decl nil creduction nil))
   nil))
 (stack_size_at_TCC6 0
  (stack_size_at_TCC6-1 nil 3703854481
   ("" (skeep* :preds? t)
    (("" (lemma measure_stat_cdr)
      (("" (inst -1 s1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((measure_stat_cdr formula-decl nil creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (clength def-decl "nat" creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (measure_stat def-decl "posnat" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cstat type-decl nil creduction nil))
   nil))
 (stack_size_at_TCC7 0
  (stack_size_at_TCC7-1 nil 3703854481
   ("" (skeep* :preds? t)
    (("" (replace -2)
      (("" (expand clength -)
        (("" (lift-if -)
          (("" (split -)
            (("1" (grind) nil nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (clength def-decl "nat" creduction nil))
   nil))
 (stack_size_at_zero_TCC1 0
  (stack_size_at_zero_TCC1-1 nil 3703874317 ("" (subtype-tcc) nil nil)
   nil nil))
 (stack_size_at_zero 0
  (stack_size_at_zero-1 nil 3703874318
   ("" (measure-induct+ "measure_stat(s1)" ("s1"))
    (("" (expand stack_size_at +)
      (("" (lift-if)
        (("" (ground)
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil)
               ("2" (lemma measure_stat_car)
                (("2" (inst -1 "x!1")
                  (("2" (typepred "x!1") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst?)
            (("1" (split)
              (("1"
                (case-replace
                 "clength(car(finseq2list[cstat](bstats(x!1)))) = 0")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
               ("2" (lemma measure_stat_cdr)
                (("2" (inst -1 "x!1")
                  (("2" (typepred "x!1") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "x!1")
              (("2" (expand clength -)
                (("2" (lift-if -) (("2" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (measure_stat_car formula-decl nil creduction nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (bstats adt-accessor-decl "[(sblock?) -> finseq[cstat]]" creduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (measure_stat_cdr formula-decl nil creduction nil)
    (x!1 skolem-const-decl "{s1 | clength(s1) > 0}" creduction nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (stack_size_at def-decl "nat" creduction nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (clength def-decl "nat" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cstat type-decl nil creduction nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (extract_stat_TCC1 0
  (extract_stat_TCC1-1 nil 3703876546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (executable_stat? const-decl "bool" creduction nil))
   nil))
 (extract_stat_TCC2 0
  (extract_stat_TCC2-1 nil 3703876546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (extract_stat_TCC3 0
  (extract_stat_TCC3-1 nil 3703876546
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (clength def-decl "nat" creduction nil)
    (executable_stat? const-decl "bool" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (extract_stat_TCC4 0
  (extract_stat_TCC4-1 nil 3703876546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (executable_stat? const-decl "bool" creduction nil))
   nil))
 (extract_stat_TCC5 0
  (extract_stat_TCC5-1 nil 3703876546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (extract_stat_TCC6 0
  (extract_stat_TCC6-1 nil 3703876546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (extract_stat_TCC7 0
  (extract_stat_TCC7-1 nil 3703876546
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (clength def-decl "nat" creduction nil)
    (executable_stat? const-decl "bool" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (extract_stat_TCC8 0
  (extract_stat_TCC8-1 nil 3703876546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (is_fun_call_at_TCC1 0
  (is_fun_call_at_TCC1-1 nil 3703956313 ("" (subtype-tcc) nil nil) nil
   nil))
 (Definition_TCC1 0
  (Definition_TCC1-1 nil 3703956313 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (cstate_TCC1 0
  (cstate_TCC1-1 nil 3703872785 ("" (subtype-tcc) nil nil) nil nil))
 (next_pc_TCC1 0
  (next_pc_TCC1-1 nil 3703872785 ("" (subtype-tcc) nil nil) nil nil))
 (next_pc_TCC2 0
  (next_pc_TCC2-1 nil 3703872785 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (next_pc_TCC3 0
  (next_pc_TCC3-1 nil 3703872785
   ("" (skeep* :preds? t)
    (("" (typepred "v(s2)(i-1)")
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (clength def-decl "nat" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cstat type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (next_pc_TCC4 0
  (next_pc_TCC4-1 nil 3703872785 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (next_pc_TCC5 0
  (next_pc_TCC5-1 nil 3703872785 ("" (subtype-tcc) nil nil) nil nil))
 (next_pc_TCC6 0
  (next_pc_TCC6-1 nil 3703872785 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (next_pc_TCC7 0
  (next_pc_TCC7-1 nil 3703872785
   ("" (skeep* :preds? t)
    (("" (typepred "v(thenc)(i-1)")
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (clength def-decl "nat" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cstat type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (next_pc_TCC8 0
  (next_pc_TCC8-1 nil 3703872785
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (clength def-decl "nat" creduction nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   nil))
 (next_pc_TCC9 0
  (next_pc_TCC9-1 nil 3703872785 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (next_pc_TCC10 0
  (next_pc_TCC10-1 nil 3703872785
   ("" (skeep* :preds? t)
    (("" (typepred "v(elsec)(i - 1 - clength(thenc))")
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (clength def-decl "nat" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cstat type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (next_pc_TCC11 0
  (next_pc_TCC11-1 nil 3703872785 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (lvalue type-decl nil creduction nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (next_pc_TCC12 0
  (next_pc_TCC12-1 nil 3703872785
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (clength def-decl "nat" creduction nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (next_pc_TCC13 0
  (next_pc_TCC13-1 nil 3703872785
   ("" (skeep* :preds? t)
    (("" (lemma measure_stat_car)
      (("" (inst -1 s1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((measure_stat_car formula-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (measure_stat def-decl "posnat" creduction nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cstat type-decl nil creduction nil))
   nil))
 (next_pc_TCC14 0
  (next_pc_TCC14-1 nil 3703872785
   ("" (skeep* :preds? t)
    (("" (typepred "v(car[cstat](finseq2list[cstat](stats)))(i)")
      (("" (replace -4)
        (("" (expand clength +)
          (("" (lift-if)
            (("" (split)
              (("1" (grind) nil nil)
               ("2" (assert)
                (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (clength def-decl "nat" creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cstat type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (next_pc_TCC15 0
  (next_pc_TCC15-1 nil 3703872785 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cstat type-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq2list const-decl "list[T]" list2finseq nil))
   nil))
 (next_pc_TCC16 0
  (next_pc_TCC16-1 nil 3703872785
   ("" (skeep* :preds? t)
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (replace -2)
        (("2" (expand clength -1)
          (("2" (lift-if -1)
            (("2" (split -1)
              (("1" (grind) nil nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (clength def-decl "nat" creduction nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (next_pc_TCC17 0
  (next_pc_TCC17-1 nil 3703872785
   ("" (skeep* :preds? t)
    (("" (lemma measure_stat_cdr)
      (("" (inst -1 s1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((measure_stat_cdr formula-decl nil creduction nil)
    (clength def-decl "nat" creduction nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (measure_stat def-decl "posnat" creduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cstat type-decl nil creduction nil))
   nil))
 (next_pc_TCC18 0
  (next_pc_TCC18-1 nil 3703872785
   ("" (skeep* :preds? t)
    (("" (replace -2)
      (("" (expand clength 3 3)
        ((""
          (typepred
           "v(sblock(list2finseq[cstat](cdr[cstat](finseq2list[cstat](stats)))))
       (i - clength(car[cstat](finseq2list[cstat](stats))))")
          (("1" (lift-if)
            (("1" (split)
              (("1" (grind) nil nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (list type-decl nil list_adt nil)
    (sblock adt-constructor-decl "[finseq[cstat] -> (sblock?)]"
     creduction nil)
    (sblock? adt-recognizer-decl "[cstat -> boolean]" creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_stat def-decl "posnat" creduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cstat type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (clength def-decl "nat" creduction nil))
   nil))
 (next_pc_TCC19 0
  (next_pc_TCC19-1 nil 3703872785
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (reduce_TCC1 0
  (reduce_TCC1-1 nil 3703956390 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" creduction nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (lift type-decl nil lift_adt nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (reduce_TCC2 0
  (reduce_TCC2-1 nil 3703956390 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" creduction nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (lift type-decl nil lift_adt nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (reduce_TCC3 0
  (reduce_TCC3-1 nil 3703956390 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" creduction nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (lift type-decl nil lift_adt nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (reduce_TCC4 0
  (reduce_TCC4-1 nil 3703956390 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" creduction nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (lift type-decl nil lift_adt nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (reduce_TCC5 0
  (reduce_TCC5-1 nil 3703956390 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cstat type-decl nil creduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" creduction nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (clength def-decl "nat" creduction nil)
    (is_return? const-decl "bool" creduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" creduction nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil creduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvalue type-decl nil creduction nil)
    (lift type-decl nil lift_adt nil)
    (Stack type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (cstate type-eq-decl nil creduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cvar? adt-recognizer-decl "[lvalue -> boolean]" creduction nil)
    (lvalue type-decl nil creduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (reduce_TCC6 0
  (reduce_TCC6-1 nil 3703956390
   ("" (skeep* :preds? t)
    (("" (typepred "extract_stat(fbody)(lf`fpc)")
      (("" (grind) nil nil)) nil))
    nil)
   ((cstate type-eq-decl nil creduction nil)
    (Store type-eq-decl nil creduction nil)
    (Stack type-eq-decl nil creduction nil)
    (lift type-decl nil lift_adt nil)
    (cvalue type-decl nil creduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" creduction nil)
    (cstack_frame type-eq-decl nil creduction nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil creduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (is_return? const-decl "bool" creduction nil)
    (> const-decl "bool" reals nil)
    (vars def-decl "bool" creduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (extract_stat def-decl
     "{s2, j | j < clength(s2) AND executable_stat?(s2, j)}" creduction
     nil)
    (executable_stat? const-decl "bool" creduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (clength def-decl "nat" creduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cstat type-decl nil creduction nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil)))

