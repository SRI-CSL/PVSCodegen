typed_reduction_props: THEORY
  BEGIN

    IMPORTING IExpression, IL, finite_set_theorems, finseq_theorems, reduction, typeinfo, typeinfo_adt, preprocess, rreduction, reduction_props, typed_reduction, typed_rreduction

    A, B, C: VAR IExpression
    tA, tB, tC: VAR typeinfo
    K, K1, K2: VAR IContext
    tK, tK1, tK2: VAR typeinfo_ctx

    
%    a, b, c: VAR (atom?)
    u, v, w: VAR (value?)
    x, y, z: VAR (variable?)
    i, j, k, hole_type: VAR nat
    F, X: VAR finite_set[nat]
    S : VAR finseq[(value?)]
    L : VAR list[(variable?)]

    dom: VAR finite_set[nat]
    
    Store(dom): TYPE = [(dom) -> finseq[(domainValue?(dom))]]

    Definition: TYPE = [# arity: nat, body: {A |  pure?(A) AND (FORALL i: vars(A)(i) = (i < arity)) AND unmark(A) = A} #]

    tdef: TYPE = [# return_type: nat, args_type: finseq[nat], body_type: typeinfo #]

    Defs: TYPE = finseq[Definition]

    D: VAR Defs
    tD: VAR finseq[tdef]

    stypes, stypes2: VAR finseq[nat]
    dom_types, dom_types2: VAR [nat -> nat]
    def_types, def_types2: VAR finseq[tdef]

    tS, tS1, tS2: VAR typed_state
    trS, trS1, trS2: VAR typed_rstate

    translate: VAR [nat -> nat]

    % Note how we don't require that the domain types match.
    % It is simpler that way, as we never require this invariant for the proof,
    % and it would be annoying, especially with updateReduce
    state_matches(tS, trS)(translate): boolean =
      state_matches(tS`state, trS`state)(translate) AND
      tS`redex_type = trS`redex_type AND
      tS`context_type = trS`context_type AND
      tS`stack_types = trS`stack_types AND
      tS`def_types = trS`def_types

    state_matches?(tS, trS): boolean =
      EXISTS (translate): state_matches(tS, trS)(translate)

    typed_reduce_n(D)(n: nat, (trS | defs_well_typed(D, trS`def_types))) : RECURSIVE typed_rstate =
      IF n = 0 OR trS`state`error THEN
        trS
      ELSE
        typed_reduce_n(D)(n - 1, typed_reduce(D)(trS))
      ENDIF
    MEASURE n

    typed_reduce_n_state: LEMMA
      FORALL (n: nat, (trS | defs_well_typed(D, trS`def_types))):
        typed_reduce_n(D)(n, trS)`state = rreduce_n(D)(n, trS`state)

    types_matches(tS, trS): boolean =
      tS`redex_type = trS`redex_type AND
      tS`context_type = trS`context_type AND
      tS`stack_types = trS`stack_types AND
      tS`def_types = trS`def_types

    build_redex_match_type: LEMMA
      contextPure?(A) AND contextPure?(B) AND
      translate_refs(translate)(unmark(A)) = B AND NOT release?(buildRedex(A)`2) AND
      popDepth(A) <= stypes`length AND
        (FORALL i: cvars(A)(i) IMPLIES i < stypes`length) AND
      popDepth(B) <= stypes2`length AND
        (FORALL i: cvars(B)(i) IMPLIES i < stypes2`length) AND
      is_well_typed(A, tA, stypes, dom_types, def_types) AND
      is_well_typed(B, tA, stypes2, dom_types2, def_types2)
      IMPLIES
        buildRedexType(A, tA) = buildRedexType(B, tA)

    translate_refs_e_pure: LEMMA
      pure?(translate_refs(translate)(A)) = pure?(A)

    unmark_e_pure: LEMMA
      pure?(unmark(A)) = pure?(A)

    make_redex_types_match: LEMMA
      NOT value?(tS`state`redex) AND NOT value?(trS`state`redex) AND
      tS`state`context = hole AND trS`state`context = hole AND
      NOT releaseRedex?(make_redex_typed(trS)`state`redex) AND
      state_matches?(tS, trS) IMPLIES
        types_matches(make_redex_typed(tS), make_redex_typed(trS))

    bisimulation_lemma: THEOREM
      NOT tS`state`error AND
      NOT trS`state`error AND
        defs_well_typed(D, tS`def_types) AND
        state_matches?(typed_to_topstate(tS), typed_to_topstate(trS)) IMPLIES
          state_matches?(typed_reduce(D)(tS),
            typed_reduce_n(D)(top_releases_ct(trS`state`redex) + 1, trS))

    iastate_matches(trS1, trS2): bool =
      iareduction.state_matches?(trS1`state, trS2`state) AND
      typeinfo_fill(trS1`context_type, trS1`redex_type) =
        typeinfo_fill(trS2`context_type, trS2`redex_type) AND
      trS1`stack_types = trS2`stack_types AND
      trS1`def_types = trS2`def_types

    iapply_nstacktypes_iterm((k: nat), stypes,
                  (args_type: list[nat] | k <= 2 * length(args_type)),
                  tA) :
       RECURSIVE [finseq[nat], typeinfo] =
       IF k = 0 THEN
         (stypes, letApply_type(length(args_type), args_type, tA))
       ELSIF k = 1 THEN
         (stypes,
           lett(car(args_type), leaft(car(args_type)),
             letApply_type(length(args_type) - 1, cdr(args_type), tA)))
       ELSE
           LET (nstypes, ntA) =
             iapply_nstacktypes_iterm(k-2,add(car(args_type),stypes),cdr(args_type),tA)
           IN
           (nstypes, popt(ntA))
       ENDIF
     MEASURE k

    same_shape(K, tK): RECURSIVE bool =
      CASES K OF
        hole: tK = holet,
        letc(K1, A): letct?(tK) AND same_shape(K1, lcrhs(tK)),
        popc(K1): popct?(tK) AND same_shape(K1, pctbody(tK))
      ENDCASES
    MEASURE K BY <<

    apply_iterm_match(D)(A, tA, K, tK, tD, dom, (S | every(domainValue?(dom))(S)),
        (L | FORALL i: in_varlist(L)(i) IMPLIES i < S`length),
        (k: upto(2 * length(L))), trS, (str: Store(dom)), (cnt:[(dom)->nat]),
        (stypes | stypes`length = S`length),
        (args_types : list[nat] | length(args_types) = length(L))) : bool =
      apply_iterm_match(D)(A,K,dom,S,L,k,trS`state,str,cnt) AND
      LET (stypes2, tB) = iapply_nstacktypes_iterm(k, stypes, args_types, tA) IN
      trS`stack_types = stypes2 AND
        typeinfo_fill(trS`context_type, trS`redex_type) = typeinfo_fill(tK, tB) AND
        trS`def_types = tD AND
        same_shape(K, tK)

    composet(tK1, tK2): RECURSIVE typeinfo_ctx =
      CASES tK1 OF
        holet: tK2,
        letct(n, tK, tB): letct(n, composet(tK, tK2), tB),
        popct(tK): popct(composet(tK, tK2))
      ENDCASES
    MEASURE tK1 BY <<

    composition_typeinfo: LEMMA
      typeinfo_fill(composet(tK1, tK2), tA) = typeinfo_fill(tK1, typeinfo_fill(tK2, tA))

    compose_same_shape: LEMMA
      same_shape(K1, tK1) AND same_shape(K2, tK2) IMPLIES
        same_shape(compose(K1, K2), composet(tK1, tK2))

    buildRedexType_fill: LEMMA
      same_shape(K, tK) AND redex?(A) IMPLIES
        buildRedexType(fill(K, A), typeinfo_fill(tK, tA)) = (tK, tA)

    applyReduce_match_rec: LEMMA
      FORALL (k, (A: (pure?)), K, dom, (S | every(domainValue?(dom))(S)),
        (L | k < 2 * length(L) AND (FORALL i: in_varlist(L)(i) IMPLIES i < S`length)
                               AND (FORALL i: i < length(L) IMPLIES vars(A)(i))),
        (trS | NOT trS`state`error AND defs_well_typed(D, trS`def_types)), tA, tK, tD,
        (str: Store(dom)), (cnt:[(dom)->nat]),
        (stypes | stypes`length = S`length),
        (args_types: list[nat] | length(args_types) = length(L))):
          apply_iterm_match(D)(A,tA,K,tK,tD,dom,S,L,k,trS,str,cnt,stypes,args_types) IMPLIES
            apply_iterm_match(D)(A,tA,K,tK,tD,dom,S,L,k+1,typed_reduce(D)(trS),str,cnt,stypes,args_types)

    is_well_typed_same_shape: LEMMA
      FORALL (K: (cpure?), tK, (stypes | popDepth(K) <= stypes`length AND
        FORALL i: cvars(K)(i) IMPLIES i < stypes`length), dom_types, def_types, (hole_type: nat)):
          is_well_typed_ctx(K, tK, stypes, dom_types, def_types, hole_type) IMPLIES same_shape(K, tK)

    applyReduce_match_init: LEMMA
      applyRedex?(trS`state`redex) AND NOT trS`state`error AND
      defs_well_typed(D, trS`def_types) AND
      fun(trS`state`redex) < D`length AND
      length(args(trS`state`redex)) = D`seq(fun(trS`state`redex))`arity IMPLIES
        apply_iterm_match(D)(mark(emptyset)(D`seq(fun(trS`state`redex))`body),
          trS`def_types`seq(fun(trS`state`redex))`body_type,
          trS`state`context, trS`context_type, trS`def_types,
          trS`state`domain, trS`state`stack, args(trS`state`redex), 0,
          typed_reduce(D)(trS), trS`state`store, trS`state`count,
          trS`stack_types, trS`def_types`seq(fun(trS`state`redex))`args_type)

    iapply_nstacktypes_iterm_end: LEMMA
      FORALL ((arity: nat), stypes, (args_type: list[nat] | length(args_type) = arity), tA):
        iapply_nstacktypes_iterm(2 * arity, stypes, args_type, tA)`1 = stypes o args_type AND
        iapply_nstacktypes_iterm(2 * arity, stypes, args_type, tA)`2 = npopts(arity, tA)

    typed_reduce_n_err: LEMMA
      FORALL (i: nat, (trS | defs_well_typed(D, trS`def_types))):
        trS`state`error IMPLIES typed_reduce_n(D)(i, trS) = trS

    typed_reduce_n_def_types: LEMMA
      FORALL (i: nat, (trS | defs_well_typed(D, trS`def_types))):
        typed_reduce_n(D)(i, trS)`def_types = trS`def_types

    typed_reduce_n_compose: LEMMA
      FORALL (i,j: nat, (trS | defs_well_typed(D, trS`def_types))):
        typed_reduce_n(D)(i, typed_reduce_n(D)(j, trS)) = typed_reduce_n(D)(i + j, trS)

    applyReduce_match_lemma: LEMMA
      applyRedex?(trS`state`redex) AND NOT trS`state`error AND
      defs_well_typed(D, trS`def_types) AND
      fun(trS`state`redex) < D`length AND
      length(args(trS`state`redex)) = D`seq(fun(trS`state`redex))`arity IMPLIES
      FORALL (k: upto(2 * length(args(trS`state`redex)))):
        apply_iterm_match(D)(mark(emptyset)(D`seq(fun(trS`state`redex))`body),
          trS`def_types`seq(fun(trS`state`redex))`body_type,
          trS`state`context, trS`context_type, trS`def_types,
          trS`state`domain, trS`state`stack, args(trS`state`redex), k,
          typed_reduce_n(D)(k + 1, trS), trS`state`store, trS`state`count,
          trS`stack_types, trS`def_types`seq(fun(trS`state`redex))`args_type)

    applyReduce_match: LEMMA
      NOT trS`state`error AND NOT value?(typed_to_topstate(trS)`state`redex) AND
        applyRedex?(make_redex_typed(typed_to_topstate(trS))`state`redex) AND
        defs_well_typed(D, trS`def_types) IMPLIES
          EXISTS (n: posnat):
            iastate_matches(typed_reduce_n(D)(n, trS), typed_iareduce(D)(trS))

    bisimulation_lemma_i: THEOREM
      NOT trS1`state`error AND NOT trS2`state`error AND
      defs_well_typed(D, trS1`def_types) AND
      iastate_matches(trS1, trS2) IMPLIES
        EXISTS (n: posnat):
          iastate_matches(typed_reduce_n(D)(n, trS1), typed_iareduce(D)(trS2))


  END typed_reduction_props
