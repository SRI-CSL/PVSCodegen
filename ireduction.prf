(ireduction
 (pop_TCC1 0
  (pop_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (pop subtype "S`length - 1" "nat")))
 (pop_TCC2 0
  (pop_TCC2-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (pop subtype "i" "below[S`length]")))
 (length_cdr 0
  (length_cdr-1 nil 3706640548
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (nth_cdr_TCC1 0
  (nth_cdr_TCC1-1 nil 3706640491
   ("" (skeep* :preds? t)
    (("" (rewrite length_cdr) (("" (grind) nil nil)) nil)) nil)
   ((length_cdr formula-decl nil ireduction nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil (nth_cdr subtype "i + 1" "below[length[T](l)]")))
 (nth_cdr 0
  (nth_cdr-1 nil 3706640573 ("" (grind) nil nil)
   ((nth def-decl "T" list_props nil)) shostak))
 (endi_TCC1 0
  (endi_TCC1-1 nil 3706646648 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil (endi subtype "S`length - 1 - i" "below[S`length]")))
 (vars_TCC1 0
  (vars_TCC1-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (vars termination "vars(s2)" "nil")))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (vars termination "vars(s1)" "nil")))
 (vars_TCC3 0
  (vars_TCC3-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (vars termination "vars(s2)" "nil")))
 (vars_TCC4 0
  (vars_TCC4-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (vars termination "vars(s1)" "nil")))
 (vars_TCC5 0
  (vars_TCC5-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (vars termination "vars(s2)" "nil")))
 (slength_TCC1 0
  (slength_TCC1-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (slength termination "slength(s1)" "nil")))
 (slength_TCC2 0
  (slength_TCC2-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (slength termination "slength(s2)" "nil")))
 (slength_TCC3 0
  (slength_TCC3-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (slength termination "slength(s2)" "nil")))
 (stack_size_at_TCC1 0
  (stack_size_at_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (stack_size_at subtype "i - 1" "upto(slength(s1))")))
 (stack_size_at_TCC2 0
  (stack_size_at_TCC2-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (stack_size_at subtype "i - 1 - slength(s1)" "upto(slength(s2))")))
 (stack_size_at_TCC3 0
  (stack_size_at_TCC3-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (stack_size_at subtype "i - slength(s1)" "upto(slength(s2))")))
 (stack_size_at_TCC4 0
  (stack_size_at_TCC4-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (stack_size_at subtype "i - 1" "upto(slength(s2))")))
 (stack_size_at_zero_TCC1 0
  (stack_size_at_zero_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (stack_size_at_zero subtype "0" "upto(slength(s))")))
 (stack_size_at_zero 0
  (stack_size_at_zero-1 nil 3706640596
   ("" (induct-and-simplify s) nil nil)
   ((slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (istat_induction formula-decl nil ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (stack_size_at_end_TCC1 0
  (stack_size_at_end_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   nil nil
   (stack_size_at_end subtype "slength(s)" "upto(slength(s))")))
 (stack_size_at_end 0
  (stack_size_at_end-1 nil 3706640606
   ("" (induct-and-simplify s) nil nil)
   ((istat type-decl nil ireduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (istat_induction formula-decl nil ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (extract_stat_TCC1 0
  (extract_stat_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (extract_stat subtype "j" "upto(slength(s1))")))
 (extract_stat_TCC2 0
  (extract_stat_TCC2-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (executable_stat? const-decl "bool" ireduction nil))
   nil
   (extract_stat subtype "(s, i)"
    "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}")))
 (extract_stat_TCC3 0
  (extract_stat_TCC3-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (extract_stat subtype "i - 1" "below(slength(s2))")))
 (extract_stat_TCC4 0
  (extract_stat_TCC4-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (executable_stat? const-decl "bool" ireduction nil))
   nil
   (extract_stat subtype "(s, i)"
    "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}")))
 (extract_stat_TCC5 0
  (extract_stat_TCC5-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (executable_stat? const-decl "bool" ireduction nil))
   nil
   (extract_stat subtype "(s, i)"
    "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}")))
 (extract_stat_TCC6 0
  (extract_stat_TCC6-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (extract_stat subtype "i - 1" "below(slength(s1))")))
 (extract_stat_TCC7 0
  (extract_stat_TCC7-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (extract_stat subtype "i - 1 - slength(s1)" "below(slength(s2))")))
 (extract_stat_TCC8 0
  (extract_stat_TCC8-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (extract_stat subtype "i - slength(s1)" "below(slength(s2))")))
 (extract_stat_TCC9 0
  (extract_stat_TCC9-1 nil 3706640491
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (expand executable_stat?)
        (("" (grind)
          (("" (expand slength)
            (("" (lift-if) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (slength def-decl "posnat" ireduction nil)
    (executable_stat? const-decl "bool" ireduction nil))
   nil
   (extract_stat subtype "(s, i)"
    "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}")))
 (fdepth_sum_TCC1 0
  (fdepth_sum_TCC1-1 nil 3706640491
   ("" (use below_finite) (("" (grind) nil nil)) nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below_finite formula-decl nil finite_set_theorems nil))
   nil
   (fdepth_sum subtype "(LAMBDA i: i < C`length)" "finite_set[nat]")))
 (fdepth_sum_eq_TCC1 0
  (fdepth_sum_eq_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (fdepth_sum_eq subtype "i" "below[C2`length]")))
 (fdepth_sum_eq 0
  (fdepth_sum_eq-1 nil 3706640794
   ("" (skeep* :preds? t)
    (("" (expand fdepth_sum)
      (("" (replace -1)
        (("" (use sigma_eq)
          (("1" (split) (("1" (propax) nil nil) ("2" (grind) nil nil))
            nil)
           ("2" (grind) nil nil) ("3" (use below_finite) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((fdepth_sum const-decl "nat" ireduction nil)
    (sigma_eq formula-decl nil finite_set_theorems nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below_finite formula-decl nil finite_set_theorems nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (fdepth_sum_pop_TCC1 0
  (fdepth_sum_pop_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (fdepth_sum_pop subtype "C`length - 1" "below[C`length]")))
 (fdepth_sum_pop 0
  (fdepth_sum_pop-1 nil 3706640921
   ("" (skeep* :preds? t)
    (("" (expand fdepth_sum)
      (("" (expand pop)
        (("" (lemma sigma_add)
          (("" (inst?)
            (("1" (inst -1 "C`length - 1")
              (("1" (split)
                (("1" (rewrite -1)
                  (("1" (assert)
                    (("1"
                      (case-replace
                       "remove(C`length - 1, LAMBDA i: i < C`length) = LAMBDA i: i < C`length - 1")
                      (("1" (rewrite sigma_eq)
                        (("1" (grind) nil nil)
                         ("2" (lemma below_finite)
                          (("2" (inst?) nil nil)) nil))
                        nil)
                       ("2" (grind-with-ext) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (use below_finite) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fdepth_sum const-decl "nat" ireduction nil)
    (sigma_add formula-decl nil finite_set_theorems nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove const-decl "set" sets nil)
    (below_finite formula-decl nil finite_set_theorems nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_eq formula-decl nil finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (istate_TCC1 0
  (istate_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (istate subtype "i" "below[C`length]")))
 (istate_TCC2 0
  (istate_TCC2-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (istate subtype "i + 1" "below[C`length]")))
 (next_pc_TCC1 0
  (next_pc_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (next_pc subtype "1" "upto(slength(s))")))
 (next_pc_TCC2 0
  (next_pc_TCC2-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (next_pc subtype "1 + next_pc(s2, i - 1)" "upto(slength(s))")))
 (next_pc_TCC3 0
  (next_pc_TCC3-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (next_pc subtype "next_pc(s1, i)" "upto(slength(s))")))
 (next_pc_TCC4 0
  (next_pc_TCC4-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (next_pc subtype "slength(s1) + next_pc(s2, i - slength(s1))"
    "upto(slength(s))")))
 (next_pc_TCC5 0
  (next_pc_TCC5-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (next_pc subtype "1" "upto(slength(s))")))
 (next_pc_TCC6 0
  (next_pc_TCC6-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (next_pc subtype "1 + next_pc(s1, i - 1)" "upto(slength(s))")))
 (next_pc_TCC7 0
  (next_pc_TCC7-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (next_pc subtype
    "1 + slength(s1) + next_pc(s2, i - 1 - slength(s1))"
    "upto(slength(s))")))
 (next_pc_TCC8 0
  (next_pc_TCC8-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (next_pc subtype "i + 1" "upto(slength(s))")))
 (extract_stat_index 0
  (extract_stat_index-1 nil 3706640841
   ("" (induct s1)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (istat_induction formula-decl nil ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (istat type-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (state_extract_stat_TCC1 0
  (state_extract_stat_TCC1-1 nil 3706647132 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (state_extract_stat subtype "0" "below(iS`callstack`length)")))
 (state_extract_stat_TCC2 0
  (state_extract_stat_TCC2-1 nil 3706647132 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (state_extract_stat subtype "(iskip, 0)"
    "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}")))
 (state_extract_stat_TCC3 0
  (state_extract_stat_TCC3-1 nil 3706647132
   ("" (skeep* :preds? t)
    (("" (typepred "endi(iS`callstack, 0)`fpc") (("" (grind) nil nil))
      nil))
    nil)
   ((endi const-decl "T" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (state_extract_stat subtype "endi(iS`callstack, 0)`fpc"
    "below(slength(iS`defs`seq(endi(iS`callstack, 0)`ffct)`body))")))
 (stack_size_at_next_pc_decl_begin 0
  (stack_size_at_next_pc_decl_begin-1 nil 3706885299
   ("" (induct s)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep* :preds? t)
      (("3" (expand stack_size_at +)
        (("3" (expand next_pc +)
          (("3" (lift-if)
            (("3" (split)
              (("1" (grind) nil nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (split)
                        (("1" (flatten) (("1" (grind) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (lift-if +)
                            (("2" (split +)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case-replace
                                   "next_pc(iif2_var, i - 1) = slength(iif2_var)")
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (lift-if +)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (case-replace
                                 "i = 1 + slength(iif2_var)")
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand next_pc +)
        (("5" (expand stack_size_at +)
          (("5" (lift-if +)
            (("5" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten)
                          (("1"
                            (case-replace "i = slength(iblock1_var)")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   ((stack_size_at_end formula-decl nil ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (istat_induction formula-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (idecl? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (stack_size_at_next_pc_decl_end 0
  (stack_size_at_next_pc_decl_end-1 nil 3706883793
   ("" (induct s)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand next_pc +)
        (("2" (expand stack_size_at +)
          (("2" (lift-if +)
            (("2" (split +)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (split +)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (lift-if +)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep* :preds? t)
      (("3" (expand next_pc +)
        (("3" (expand stack_size_at +)
          (("3" (lift-if +)
            (("3" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (split +)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (split +)
                          (("1" (flatten)
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma stack_size_at_end)
                                    (("2"
                                      (inst -1 "iif3_var")
                                      (("2"
                                        (case-replace
                                         "stack_size_at(iif2_var, i - 1) = 1")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (inst? -5)
                                          (("2"
                                            (split)
                                            (("1"
                                              (case-replace
                                               "next_pc(iif2_var, i - 1) = slength(iif2_var)")
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil)
                                             ("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (lift-if +)
                          (("2" (split)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if +)
                                  (("2"
                                    (split)
                                    (("1"
                                      (grind)
                                      (("1"
                                        (lemma stack_size_at_end)
                                        (("1"
                                          (inst -1 "iif2_var")
                                          (("1"
                                            (lemma stack_size_at_zero)
                                            (("1"
                                              (inst -1 "iif3_var")
                                              (("1"
                                                (case-replace
                                                 "i = slength(iif2_var) + 1")
                                                (("1" (assert) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand next_pc +)
        (("5" (expand stack_size_at +)
          (("5" (lift-if +)
            (("5" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (grind)
                            (("1"
                              (case-replace "i = slength(iblock1_var)")
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (stack_size_at_end formula-decl nil ireduction nil)
    (istat_induction formula-decl nil ireduction nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (idecl? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (next_pc_if_no_overflow 0
  (next_pc_if_no_overflow-1 nil 3706886685
   ("" (induct s)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand extract_stat +)
        (("2" (lift-if)
          (("2" (split)
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (split)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep* :preds? t)
      (("3" (expand extract_stat +)
        (("3" (lift-if)
          (("3" (split)
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (split)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (inst -4 "-1 - slength(iif2_var) + i")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand extract_stat +)
        (("5" (lift-if)
          (("5" (split)
            (("1" (flatten)
              (("1" (inst -3 i) (("1" (grind) nil nil)) nil)) nil)
             ("2" (flatten)
              (("2" (inst -3 "i - slength(iblock1_var)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (istat_induction formula-decl nil ireduction nil)
    (iftrue adt-accessor-decl "[(iif?) -> istat]" ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iif? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (istat type-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (stack_size_at_next_pc_iftrue_TCC1 0
  (stack_size_at_next_pc_iftrue_TCC1-1 nil 3706887026
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (stack_size_at_next_pc_iftrue subtype "i + 1" "upto(slength(s))")))
 (stack_size_at_next_pc_iftrue 0
  (stack_size_at_next_pc_iftrue-1 nil 3706887026
   ("" (induct s)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand stack_size_at +)
        (("2" (lift-if)
          (("2" (split)
            (("1" (flatten)
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (grind) nil nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep* :preds? t)
      (("3" (expand stack_size_at +)
        (("3" (lift-if)
          (("3" (split)
            (("1" (flatten)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (case-replace "i = 1 + slength(iif2_var)")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand stack_size_at +)
        (("5" (lift-if)
          (("5" (split)
            (("1" (flatten)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (grind) nil nil)
                   ("2" (flatten)
                    (("2" (case-replace "i = slength(iblock1_var)")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (case-replace "i = slength(iblock1_var)")
                        (("1" (inst -5 0) (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (stack_size_at_end formula-decl nil ireduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (istat_induction formula-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (iif? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (stack_size_at_next_pc_iffalse_TCC1 0
  (stack_size_at_next_pc_iffalse_TCC1-1 nil 3706887026
   ("" (skeep*)
    (("" (use next_pc_if_no_overflow) (("" (grind) nil nil)) nil)) nil)
   ((next_pc_if_no_overflow formula-decl nil ireduction nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (stack_size_at_next_pc_iffalse subtype
    "i + 1 + slength(iftrue(extract_stat(s, i)`1))"
    "upto(slength(s))")))
 (stack_size_at_next_pc_iffalse 0
  (stack_size_at_next_pc_iffalse-1 nil 3706890470
   ("" (induct s)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand extract_stat +)
        (("2" (lift-if)
          (("2" (split)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand stack_size_at +)
                    (("1" (assert)
                      (("1" (assert)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (inst -5 "i-1")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (lemma extract_stat_index)
                                (("2"
                                  (inst? :where +)
                                  (("2"
                                    (typepred
                                     "extract_stat(idecl2_var, i - 1)")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep* :preds? t)
      (("3" (expand extract_stat +)
        (("3" (lift-if)
          (("3" (split)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (inst -4 "i - 1")
                    (("1" (expand stack_size_at +)
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (lemma extract_stat_index)
                                  (("2"
                                    (inst? :where +)
                                    (("2"
                                      (typepred
                                       "extract_stat(iif2_var, i - 1)")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand stack_size_at +)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (lift-if)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (case-replace
                                 "i = 1 + slength(iif2_var)")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst -4 "i-1-slength(iif2_var)")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand extract_stat +)
        (("5" (lift-if)
          (("5" (split)
            (("1" (flatten)
              (("1" (expand stack_size_at +)
                (("1" (inst -3 i)
                  (("1" (split -)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (grind) nil nil)
                           ("2" (flatten)
                            (("2" (lemma extract_stat_index)
                              (("2"
                                (inst? :where +)
                                (("2"
                                  (typepred
                                   "extract_stat(iblock1_var, i)")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand stack_size_at +)
                (("2" (assert)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten)
                          (("1"
                            (case-replace "i = slength(iblock1_var)")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst -3 "i-slength(iblock1_var)")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil)
     ("8" (skeep* :preds? t)
      (("8" (lemma next_pc_if_no_overflow)
        (("8" (inst -1 i s) (("8" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (iftrue adt-accessor-decl "[(iif?) -> istat]" ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iif? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (istat_induction formula-decl nil ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (extract_stat_index formula-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_size_at_end formula-decl nil ireduction nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (next_pc_if_no_overflow formula-decl nil ireduction nil))
   shostak))
 (stack_size_at_vars 0
  (stack_size_at_vars-1 nil 3706892155
   ("" (induct s)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep* :preds? t)
      (("3" (expand extract_stat +)
        (("3" (lift-if)
          (("3" (split)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (inst -4 "i-1" "j")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
                 ("2" (inst -5 "i-slength(iif2_var)-1" "j")
                  (("1" (grind)
                    (("1" (case-replace "i = 1+slength(iif2_var)")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand extract_stat +)
        (("5" (lift-if)
          (("5" (split)
            (("1" (grind) nil nil)
             ("2" (case-replace "i = slength(iblock1_var)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (stack_size_at_end formula-decl nil ireduction nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vars const-decl "bool" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (istat_induction formula-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vars def-decl "bool" ireduction nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (idecl? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (frame_vars 0
  (frame_vars-1 nil 3706892563
   ("" (skeep* :preds? t)
    (("" (lemma stack_size_at_vars)
      ((""
        (inst -1 "cf`fpc"
         "j-stack_size_at(D`seq(cf`ffct)`body, cf`fpc)"
         "D`seq(cf`ffct)`body")
        (("1" (assert)
          (("1" (typepred "cf`fdepth")
            (("1" (typepred "D`seq(cf`ffct)`body")
              (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (typepred "cf`fdepth") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((stack_size_at_vars formula-decl nil ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (istat type-decl nil ireduction nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil) nil
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (stack_frame type-eq-decl nil ireduction nil) nil
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (istate_vars 0
  (istate_vars-1 nil 3706893232
   ("" (skeep* :preds? t)
    (("" (lemma frame_vars)
      (("" (inst -1 "iS`defs" "j" "endi(iS`callstack, 0)")
        (("1" (split)
          (("1" (expand endi)
            (("1" (typepred "iS`stack")
              (("1" (rewrite -1)
                (("1" (rewrite fdepth_sum_pop) (("1" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand returnRedex?)
            (("2" (typepred "endi(iS`callstack, 0)`fpc")
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
            nil)
           ("3" (expand pushRedex?)
            (("3" (expand popRedex?)
              (("3" (expand state_extract_stat)
                (("3" (expand returnRedex?)
                  (("3" (assert)
                    (("3" (replace 1)
                      (("3"
                        (typepred
                         "extract_stat(iS`defs`seq(endi(iS`callstack, 0)`ffct)`body,
                    endi(iS`callstack, 0)`fpc)")
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (grind) nil nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((frame_vars formula-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (endi const-decl "T" ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (iS skolem-const-decl "istate" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (pushReduce_TCC1 0
  (pushReduce_TCC1-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (pushReduce subtype "iS`callstack`length - 1"
    "below[iS`callstack`length]")))
 (pushReduce_TCC2 0
  (pushReduce_TCC2-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (pushReduce subtype "lf`fpc" "below(slength(fbody))")))
 (pushReduce_TCC3 0
  (pushReduce_TCC3-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (pushReduce subtype "next_pc(fbody, lf`fpc)"
    "upto(slength(iS`defs`seq(lf`ffct)`body))")))
 (pushReduce_TCC4 0
  (pushReduce_TCC4-1 nil 3706883292
   ("" (skeep* :preds? t)
    (("" (typepred "lf`fdepth")
      (("" (rewrite -1)
        (("" (assert)
          (("" (lemma stack_size_at_next_pc_decl_begin)
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pushRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (stack_size_at_next_pc_decl_begin formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (pushReduce subtype "lf`fdepth + 1"
    "{k: nat | k = 1 + iS`defs`seq(lf`ffct)`arity + stack_size_at(iS`defs`seq(lf`ffct)`body, next_pc(fbody, lf`fpc))}")))
 (pushReduce_TCC5 0
  (pushReduce_TCC5-1 nil 3706883292
   ("" (skeep* :preds? t)
    (("" (expand add)
      (("" (rewrite fdepth_sum_pop)
        (("1" (expand pop)
          (("1" (typepred "iS`stack")
            (("1" (rewrite -1)
              (("1" (rewrite fdepth_sum_pop)
                (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (typepred "lf`fdepth")
            (("2" (rewrite -1)
              (("2" (use stack_size_at_next_pc_decl_begin)
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (delete 2) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((add const-decl "finseq[T]" more_finseq nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (stack_size_at_next_pc_decl_begin formula-decl nil ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (pushReduce subtype "more_finseq[ivalue].add(vundef, iS`stack)"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fdepth := 1 + lf`fdepth, `fpc := next_pc(fbody, lf`fpc)]])}")))
 (popReduce_TCC1 0
  (popReduce_TCC1-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "iS`callstack`length - 1"
    "below[iS`callstack`length]")))
 (popReduce_TCC2 0
  (popReduce_TCC2-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (popRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (popReduce subtype "lf`fpc" "below(slength(fbody))")))
 (popReduce_TCC3 0
  (popReduce_TCC3-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (popRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "next_pc(fbody, lf`fpc)"
    "upto(slength(iS`defs`seq(lf`ffct)`body))")))
 (popReduce_TCC4 0
  (popReduce_TCC4-1 nil 3706883292
   ("" (skeep* :preds? t)
    (("" (typepred "lf`fdepth")
      (("" (rewrite -1)
        (("" (assert)
          (("" (use stack_size_at_next_pc_decl_end)
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((popRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (stack_size_at_next_pc_decl_end formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "lf`fdepth - 1"
    "{k: nat | k = 1 + iS`defs`seq(lf`ffct)`arity + stack_size_at(iS`defs`seq(lf`ffct)`body, next_pc(fbody, lf`fpc))}")))
 (popReduce_TCC5 0
  (popReduce_TCC5-1 nil 3706883292
   ("" (skeep* :preds? t)
    (("" (typepred "iS`stack") (("" (grind) nil nil)) nil)) nil)
   ((popRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "iS`stack"
    "{S: finseq[ivalue] | S`length > 0}")))
 (popReduce_TCC6 0
  (popReduce_TCC6-1 nil 3706883292
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (expand pop)
        (("1" (typepred "iS`stack")
          (("1" (rewrite -1)
            (("1" (rewrite fdepth_sum_pop)
              (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "lf`fdepth")
          (("2" (rewrite -1)
            (("2" (assert)
              (("2" (use stack_size_at_next_pc_decl_end)
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (popRedex? const-decl "bool" ireduction nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (stack_size_at_next_pc_decl_end formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "pop(iS`stack)"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fdepth := lf`fdepth - 1, `fpc := next_pc(fbody, lf`fpc)]])}")))
 (ifReduce_TCC1 0
  (ifReduce_TCC1-1 nil 3706886185 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (ifReduce subtype "lf`fpc" "below(slength(fbody))")))
 (ifReduce_TCC2 0
  (ifReduce_TCC2-1 nil 3706886185
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (ifReduce subtype "s" "(iif?)")))
 (ifReduce_TCC3 0
  (ifReduce_TCC3-1 nil 3706886185
   ("" (skeep* :preds? t)
    (("" (use istate_vars)
      (("" (split)
        (("1" (propax) nil nil) ("2" (propax) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil) ("6" (grind) nil nil))
        nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (popRedex? const-decl "bool" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (ifReduce subtype "j" "below(iS`stack`length)")))
 (ifReduce_TCC4 0
  (ifReduce_TCC4-1 nil 3706886185 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "iS`callstack`length - 1"
    "below[iS`callstack`length]")))
 (ifReduce_TCC5 0
  (ifReduce_TCC5-1 nil 3706886185
   ("" (skeep* :preds? t)
    (("" (use next_pc_if_no_overflow) (("" (grind) nil nil)) nil)) nil)
   ((next_pc_if_no_overflow formula-decl nil ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "lf`fpc + 1 + slength(iftrue(s))"
    "upto(slength(iS`defs`seq(lf`ffct)`body))")))
 (ifReduce_TCC6 0
  (ifReduce_TCC6-1 nil 3706886185
   ("" (skeep* :preds? t)
    (("" (typepred "lf`fdepth")
      (("" (rewrite -1)
        (("" (assert)
          (("" (use stack_size_at_next_pc_iffalse)
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ifRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (stack_size_at_next_pc_iffalse formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "lf`fdepth"
    "{k: nat | k = 1 + iS`defs`seq(lf`ffct)`arity + stack_size_at(iS`defs`seq(lf`ffct)`body, 1 + lf`fpc + slength(iftrue(s)))}")))
 (ifReduce_TCC7 0
  (ifReduce_TCC7-1 nil 3706886185
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (typepred "iS`stack")
        (("1" (rewrite -1)
          (("1" (rewrite fdepth_sum_pop)
            (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "lf`fdepth")
          (("2" (rewrite -1)
            (("2" (assert)
              (("2" (use stack_size_at_next_pc_iffalse)
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (use next_pc_if_no_overflow) (("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (next_pc_if_no_overflow formula-decl nil ireduction nil)
    (stack_size_at_next_pc_iffalse formula-decl nil ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (iftrue adt-accessor-decl "[(iif?) -> istat]" ireduction nil)
    (iif? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ifReduce subtype "iS`stack"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fpc := 1 + lf`fpc + slength(iftrue(s))]])}")))
 (ifReduce_TCC8 0
  (ifReduce_TCC8-1 nil 3706886185 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "iS`callstack`length - 1"
    "below[iS`callstack`length]")))
 (ifReduce_TCC9 0
  (ifReduce_TCC9-1 nil 3706886185 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (ifReduce subtype "lf`fpc + 1"
    "upto(slength(iS`defs`seq(lf`ffct)`body))")))
 (ifReduce_TCC10 0
  (ifReduce_TCC10-1 nil 3706886185
   ("" (skeep* :preds? t)
    (("" (typepred "lf`fdepth")
      (("" (rewrite -1)
        (("" (assert)
          (("" (use stack_size_at_next_pc_iftrue)
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (stack_size_at_next_pc_iftrue formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ifRedex? const-decl "bool" ireduction nil))
   nil
   (ifReduce subtype "lf`fdepth"
    "{k: nat | k = 1 + iS`defs`seq(lf`ffct)`arity + stack_size_at(iS`defs`seq(lf`ffct)`body, 1 + lf`fpc)}")))
 (ifReduce_TCC11 0
  (ifReduce_TCC11-1 nil 3706886185
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (typepred "iS`stack")
        (("1" (rewrite -1)
          (("1" (rewrite fdepth_sum_pop)
            (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (hide 4)
        (("2" (typepred "lf`fdepth")
          (("2" (rewrite -1)
            (("2" (assert)
              (("2" (use stack_size_at_next_pc_iftrue)
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 4)
        (("3" (use next_pc_if_no_overflow) (("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (next_pc_if_no_overflow formula-decl nil ireduction nil)
    (stack_size_at_next_pc_iftrue formula-decl nil ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ifReduce subtype "iS`stack"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fpc := 1 + lf`fpc]])}")))
 (reduce_TCC1 0
  (reduce_TCC1-1 nil 3706880775 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (reduce subtype "iS" "{iS | iS`callstack`length > 0}")))
 (reduce_TCC2 0
  (reduce_TCC2-1 nil 3706880775 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND pushRedex?(iS)}")))
 (reduce_TCC3 0
  (reduce_TCC3-1 nil 3706880775 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND popRedex?(iS)}")))
 (reduce_TCC4 0
  (reduce_TCC4-1 nil 3706880775 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND ifRedex?(iS)}")))
 (reduce_TCC5 0
  (reduce_TCC5-1 nil 3706880775 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND returnRedex?(iS)}")))
 (reduce_TCC6 0
  (reduce_TCC6-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND releaseRedex?(iS)}")))
 (reduce_TCC7 0
  (reduce_TCC7-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND variableRedex?(iS)}")))
 (reduce_TCC8 0
  (reduce_TCC8-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND valueRedex?(iS)}")))
 (reduce_TCC9 0
  (reduce_TCC9-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND applicationRedex?(iS)}")))
 (reduce_TCC10 0
  (reduce_TCC10-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND lookupRedex?(iS)}")))
 (reduce_TCC11 0
  (reduce_TCC11-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND updateRedex?(iS)}")))
 (reduce_TCC12 0
  (reduce_TCC12-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (newintRedex? const-decl "bool" ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND newintRedex?(iS)}")))
 (reduce_TCC13 0
  (reduce_TCC13-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (newrefRedex? const-decl "bool" ireduction nil)
    (newintRedex? const-decl "bool" ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND newrefRedex?(iS)}"))))

