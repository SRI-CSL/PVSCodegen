(ireduction
 (pop_TCC1 0
  (pop_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (pop subtype "S`length - 1" "nat")))
 (pop_TCC2 0
  (pop_TCC2-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (pop subtype "i" "below[S`length]")))
 (length_positive 0
  (length_positive-1 nil 3706966124 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)) shostak))
 (length_cdr 0
  (length_cdr-1 nil 3706640548
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (nth_cdr_TCC1 0
  (nth_cdr_TCC1-1 nil 3706640491
   ("" (skeep* :preds? t)
    (("" (rewrite length_cdr) (("" (grind) nil nil)) nil)) nil)
   ((length_cdr formula-decl nil ireduction nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil (nth_cdr subtype "i + 1" "below[length[T](l)]")))
 (nth_cdr 0
  (nth_cdr-1 nil 3706640573 ("" (grind) nil nil)
   ((nth def-decl "T" list_props nil)) shostak))
 (endi_TCC1 0
  (endi_TCC1-1 nil 3706646648 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil (endi subtype "S`length - 1 - i" "below[S`length]")))
 (vars_TCC1 0
  (vars_TCC1-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (vars termination "vars(s2)" "nil")))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (vars termination "vars(s1)" "nil")))
 (vars_TCC3 0
  (vars_TCC3-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (vars termination "vars(s2)" "nil")))
 (vars_TCC4 0
  (vars_TCC4-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (vars termination "vars(s1)" "nil")))
 (vars_TCC5 0
  (vars_TCC5-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (vars termination "vars(s2)" "nil")))
 (slength_TCC1 0
  (slength_TCC1-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (slength termination "slength(s1)" "nil")))
 (slength_TCC2 0
  (slength_TCC2-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (slength termination "slength(s2)" "nil")))
 (slength_TCC3 0
  (slength_TCC3-1 nil 3706640491 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[istat])" ireduction nil))
   nil (slength termination "slength(s2)" "nil")))
 (stack_size_at_TCC1 0
  (stack_size_at_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (stack_size_at subtype "i - 1" "upto(slength(s1))")))
 (stack_size_at_TCC2 0
  (stack_size_at_TCC2-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (stack_size_at subtype "i - 1 - slength(s1)" "upto(slength(s2))")))
 (stack_size_at_TCC3 0
  (stack_size_at_TCC3-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (stack_size_at subtype "i - slength(s1)" "upto(slength(s2))")))
 (stack_size_at_TCC4 0
  (stack_size_at_TCC4-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (stack_size_at subtype "i - 1" "upto(slength(s2))")))
 (stack_size_at_zero_TCC1 0
  (stack_size_at_zero_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (stack_size_at_zero subtype "0" "upto(slength(s))")))
 (stack_size_at_zero 0
  (stack_size_at_zero-1 nil 3706640596
   ("" (induct-and-simplify s) nil nil)
   ((slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (istat_induction formula-decl nil ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (stack_size_at_end_TCC1 0
  (stack_size_at_end_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   nil nil
   (stack_size_at_end subtype "slength(s)" "upto(slength(s))")))
 (stack_size_at_end 0
  (stack_size_at_end-1 nil 3706640606
   ("" (induct-and-simplify s) nil nil)
   ((istat type-decl nil ireduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (istat_induction formula-decl nil ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (extract_stat_TCC1 0
  (extract_stat_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (extract_stat subtype "j" "upto(slength(s1))")))
 (extract_stat_TCC2 0
  (extract_stat_TCC2-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (executable_stat? const-decl "bool" ireduction nil))
   nil
   (extract_stat subtype "(s, i)"
    "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}")))
 (extract_stat_TCC3 0
  (extract_stat_TCC3-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (extract_stat subtype "i - 1" "below(slength(s2))")))
 (extract_stat_TCC4 0
  (extract_stat_TCC4-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (executable_stat? const-decl "bool" ireduction nil))
   nil
   (extract_stat subtype "(s, i)"
    "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}")))
 (extract_stat_TCC5 0
  (extract_stat_TCC5-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (executable_stat? const-decl "bool" ireduction nil))
   nil
   (extract_stat subtype "(s, i)"
    "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}")))
 (extract_stat_TCC6 0
  (extract_stat_TCC6-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (extract_stat subtype "i - 1" "below(slength(s1))")))
 (extract_stat_TCC7 0
  (extract_stat_TCC7-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (extract_stat subtype "i - 1 - slength(s1)" "below(slength(s2))")))
 (extract_stat_TCC8 0
  (extract_stat_TCC8-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (extract_stat subtype "i - slength(s1)" "below(slength(s2))")))
 (extract_stat_TCC9 0
  (extract_stat_TCC9-1 nil 3706640491
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (expand executable_stat?)
        (("" (grind)
          (("" (expand slength)
            (("" (lift-if) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (slength def-decl "posnat" ireduction nil)
    (executable_stat? const-decl "bool" ireduction nil))
   nil
   (extract_stat subtype "(s, i)"
    "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}")))
 (fdepth_sum_TCC1 0
  (fdepth_sum_TCC1-1 nil 3706640491
   ("" (use below_finite) (("" (grind) nil nil)) nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below_finite formula-decl nil finite_set_theorems nil))
   nil
   (fdepth_sum subtype "(LAMBDA i: i < C`length)" "finite_set[nat]")))
 (fdepth_sum_eq_TCC1 0
  (fdepth_sum_eq_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (fdepth_sum_eq subtype "i" "below[C2`length]")))
 (fdepth_sum_eq 0
  (fdepth_sum_eq-1 nil 3706640794
   ("" (skeep* :preds? t)
    (("" (expand fdepth_sum)
      (("" (replace -1)
        (("" (use sigma_eq)
          (("1" (split) (("1" (propax) nil nil) ("2" (grind) nil nil))
            nil)
           ("2" (grind) nil nil) ("3" (use below_finite) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((fdepth_sum const-decl "nat" ireduction nil)
    (sigma_eq formula-decl nil finite_set_theorems nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below_finite formula-decl nil finite_set_theorems nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (fdepth_sum_pop_TCC1 0
  (fdepth_sum_pop_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (fdepth_sum_pop subtype "C`length - 1" "below[C`length]")))
 (fdepth_sum_pop 0
  (fdepth_sum_pop-1 nil 3706640921
   ("" (skeep* :preds? t)
    (("" (expand fdepth_sum)
      (("" (expand pop)
        (("" (lemma sigma_add)
          (("" (inst?)
            (("1" (inst -1 "C`length - 1")
              (("1" (split)
                (("1" (rewrite -1)
                  (("1" (assert)
                    (("1"
                      (case-replace
                       "remove(C`length - 1, LAMBDA i: i < C`length) = LAMBDA i: i < C`length - 1")
                      (("1" (rewrite sigma_eq)
                        (("1" (grind) nil nil)
                         ("2" (lemma below_finite)
                          (("2" (inst?) nil nil)) nil))
                        nil)
                       ("2" (grind-with-ext) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (use below_finite) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fdepth_sum const-decl "nat" ireduction nil)
    (sigma_add formula-decl nil finite_set_theorems nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove const-decl "set" sets nil)
    (below_finite formula-decl nil finite_set_theorems nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_eq formula-decl nil finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (istate_TCC1 0
  (istate_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (istate subtype "i" "below[C`length]")))
 (istate_TCC2 0
  (istate_TCC2-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (istate subtype "i + 1" "below[C`length]")))
 (next_pc_TCC1 0
  (next_pc_TCC1-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (next_pc subtype "1" "upto(slength(s))")))
 (next_pc_TCC2 0
  (next_pc_TCC2-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (next_pc subtype "1 + next_pc(s2, i - 1)" "upto(slength(s))")))
 (next_pc_TCC3 0
  (next_pc_TCC3-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (next_pc subtype "next_pc(s1, i)" "upto(slength(s))")))
 (next_pc_TCC4 0
  (next_pc_TCC4-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (next_pc subtype "slength(s1) + next_pc(s2, i - slength(s1))"
    "upto(slength(s))")))
 (next_pc_TCC5 0
  (next_pc_TCC5-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (next_pc subtype "1" "upto(slength(s))")))
 (next_pc_TCC6 0
  (next_pc_TCC6-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (next_pc subtype "1 + next_pc(s1, i - 1)" "upto(slength(s))")))
 (next_pc_TCC7 0
  (next_pc_TCC7-1 nil 3706640491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (next_pc subtype
    "1 + slength(s1) + next_pc(s2, i - 1 - slength(s1))"
    "upto(slength(s))")))
 (next_pc_TCC8 0
  (next_pc_TCC8-1 nil 3706640491 ("" (subtype-tcc) nil nil) nil nil
   (next_pc subtype "i + 1" "upto(slength(s))")))
 (extract_stat_index 0
  (extract_stat_index-1 nil 3706640841
   ("" (induct s1)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (istat_induction formula-decl nil ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (istat type-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (state_extract_stat_TCC1 0
  (state_extract_stat_TCC1-1 nil 3706647132 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (state_extract_stat subtype "0" "below(iS`callstack`length)")))
 (state_extract_stat_TCC2 0
  (state_extract_stat_TCC2-1 nil 3706647132 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (state_extract_stat subtype "(iskip, 0)"
    "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}")))
 (state_extract_stat_TCC3 0
  (state_extract_stat_TCC3-1 nil 3706647132
   ("" (skeep* :preds? t)
    (("" (typepred "endi(iS`callstack, 0)`fpc") (("" (grind) nil nil))
      nil))
    nil)
   ((endi const-decl "T" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (state_extract_stat subtype "endi(iS`callstack, 0)`fpc"
    "below(slength(iS`defs`seq(endi(iS`callstack, 0)`ffct)`body))")))
 (stack_size_at_next_pc 0
  (stack_size_at_next_pc-1 nil 3706899271
   ("" (induct s)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep* :preds? t)
      (("3" (expand next_pc +)
        (("3" (lift-if)
          (("3" (split)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (split)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2"
                        (case-replace
                         "next_pc(iif2_var, i - 1) = slength(iif2_var)")
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst -4 "i-1-slength(iif2_var)")
                    (("1" (expand stack_size_at +)
                      (("1" (assert)
                        (("1" (assert)
                          (("1"
                            (case-replace "i = 1 + slength(iif2_var)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand next_pc +)
        (("5" (lift-if)
          (("5" (split)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (case-replace "i = slength(iblock1_var)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_size_at_end formula-decl nil ireduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (istat_induction formula-decl nil ireduction nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (idecl? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil))
   shostak))
 (stack_size_at_next_pc_decl_begin 0
  (stack_size_at_next_pc_decl_begin-1 nil 3706885299
   ("" (induct s)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep* :preds? t)
      (("3" (expand stack_size_at +)
        (("3" (expand next_pc +)
          (("3" (lift-if)
            (("3" (split)
              (("1" (grind) nil nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (split)
                        (("1" (flatten) (("1" (grind) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (lift-if +)
                            (("2" (split +)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case-replace
                                   "next_pc(iif2_var, i - 1) = slength(iif2_var)")
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (lift-if +)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (case-replace
                                 "i = 1 + slength(iif2_var)")
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand next_pc +)
        (("5" (expand stack_size_at +)
          (("5" (lift-if +)
            (("5" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten)
                          (("1"
                            (case-replace "i = slength(iblock1_var)")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   ((stack_size_at_end formula-decl nil ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (istat_induction formula-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (idecl? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (stack_size_at_next_pc_decl_end 0
  (stack_size_at_next_pc_decl_end-1 nil 3706883793
   ("" (induct s)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand next_pc +)
        (("2" (expand stack_size_at +)
          (("2" (lift-if +)
            (("2" (split +)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (split +)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (lift-if +)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep* :preds? t)
      (("3" (expand next_pc +)
        (("3" (expand stack_size_at +)
          (("3" (lift-if +)
            (("3" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (split +)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (split +)
                          (("1" (flatten)
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma stack_size_at_end)
                                    (("2"
                                      (inst -1 "iif3_var")
                                      (("2"
                                        (case-replace
                                         "stack_size_at(iif2_var, i - 1) = 1")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (inst? -5)
                                          (("2"
                                            (split)
                                            (("1"
                                              (case-replace
                                               "next_pc(iif2_var, i - 1) = slength(iif2_var)")
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil)
                                             ("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (lift-if +)
                          (("2" (split)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if +)
                                  (("2"
                                    (split)
                                    (("1"
                                      (grind)
                                      (("1"
                                        (lemma stack_size_at_end)
                                        (("1"
                                          (inst -1 "iif2_var")
                                          (("1"
                                            (lemma stack_size_at_zero)
                                            (("1"
                                              (inst -1 "iif3_var")
                                              (("1"
                                                (case-replace
                                                 "i = slength(iif2_var) + 1")
                                                (("1" (assert) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand next_pc +)
        (("5" (expand stack_size_at +)
          (("5" (lift-if +)
            (("5" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (grind)
                            (("1"
                              (case-replace "i = slength(iblock1_var)")
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (stack_size_at_end formula-decl nil ireduction nil)
    (istat_induction formula-decl nil ireduction nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (idecl? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (next_pc_if_no_overflow 0
  (next_pc_if_no_overflow-1 nil 3706886685
   ("" (induct s)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand extract_stat +)
        (("2" (lift-if)
          (("2" (split)
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (split)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep* :preds? t)
      (("3" (expand extract_stat +)
        (("3" (lift-if)
          (("3" (split)
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (split)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (inst -4 "-1 - slength(iif2_var) + i")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand extract_stat +)
        (("5" (lift-if)
          (("5" (split)
            (("1" (flatten)
              (("1" (inst -3 i) (("1" (grind) nil nil)) nil)) nil)
             ("2" (flatten)
              (("2" (inst -3 "i - slength(iblock1_var)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (istat_induction formula-decl nil ireduction nil)
    (iftrue adt-accessor-decl "[(iif?) -> istat]" ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (iif? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (istat type-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (stack_size_at_next_pc_iftrue_TCC1 0
  (stack_size_at_next_pc_iftrue_TCC1-1 nil 3706887026
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (stack_size_at_next_pc_iftrue subtype "i + 1" "upto(slength(s))")))
 (stack_size_at_next_pc_iftrue 0
  (stack_size_at_next_pc_iftrue-1 nil 3706887026
   ("" (induct s)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand stack_size_at +)
        (("2" (lift-if)
          (("2" (split)
            (("1" (flatten)
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (grind) nil nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep* :preds? t)
      (("3" (expand stack_size_at +)
        (("3" (lift-if)
          (("3" (split)
            (("1" (flatten)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (case-replace "i = 1 + slength(iif2_var)")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand stack_size_at +)
        (("5" (lift-if)
          (("5" (split)
            (("1" (flatten)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (grind) nil nil)
                   ("2" (flatten)
                    (("2" (case-replace "i = slength(iblock1_var)")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (case-replace "i = slength(iblock1_var)")
                        (("1" (inst -5 0) (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (stack_size_at_end formula-decl nil ireduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (istat_induction formula-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (iif? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (stack_size_at_next_pc_iffalse_TCC1 0
  (stack_size_at_next_pc_iffalse_TCC1-1 nil 3706887026
   ("" (skeep*)
    (("" (use next_pc_if_no_overflow) (("" (grind) nil nil)) nil)) nil)
   ((next_pc_if_no_overflow formula-decl nil ireduction nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (stack_size_at_next_pc_iffalse subtype
    "i + 1 + slength(iftrue(extract_stat(s, i)`1))"
    "upto(slength(s))")))
 (stack_size_at_next_pc_iffalse 0
  (stack_size_at_next_pc_iffalse-1 nil 3706890470
   ("" (induct s)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand extract_stat +)
        (("2" (lift-if)
          (("2" (split)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand stack_size_at +)
                    (("1" (assert)
                      (("1" (assert)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (inst -5 "i-1")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (lemma extract_stat_index)
                                (("2"
                                  (inst? :where +)
                                  (("2"
                                    (typepred
                                     "extract_stat(idecl2_var, i - 1)")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep* :preds? t)
      (("3" (expand extract_stat +)
        (("3" (lift-if)
          (("3" (split)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (inst -4 "i - 1")
                    (("1" (expand stack_size_at +)
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (lemma extract_stat_index)
                                  (("2"
                                    (inst? :where +)
                                    (("2"
                                      (typepred
                                       "extract_stat(iif2_var, i - 1)")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand stack_size_at +)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (lift-if)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (case-replace
                                 "i = 1 + slength(iif2_var)")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst -4 "i-1-slength(iif2_var)")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand extract_stat +)
        (("5" (lift-if)
          (("5" (split)
            (("1" (flatten)
              (("1" (expand stack_size_at +)
                (("1" (inst -3 i)
                  (("1" (split -)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (grind) nil nil)
                           ("2" (flatten)
                            (("2" (lemma extract_stat_index)
                              (("2"
                                (inst? :where +)
                                (("2"
                                  (typepred
                                   "extract_stat(iblock1_var, i)")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand stack_size_at +)
                (("2" (assert)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten)
                          (("1"
                            (case-replace "i = slength(iblock1_var)")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst -3 "i-slength(iblock1_var)")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil)
     ("8" (skeep* :preds? t)
      (("8" (lemma next_pc_if_no_overflow)
        (("8" (inst -1 i s) (("8" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((next_pc_if_no_overflow formula-decl nil ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (stack_size_at_end formula-decl nil ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (extract_stat_index formula-decl nil ireduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (istat_induction formula-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (iif? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (iftrue adt-accessor-decl "[(iif?) -> istat]" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (stack_size_at_vars 0
  (stack_size_at_vars-1 nil 3706892155
   ("" (induct s)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep* :preds? t)
      (("3" (expand extract_stat +)
        (("3" (lift-if)
          (("3" (split)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (inst -4 "i-1" "j")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
                 ("2" (inst -5 "i-slength(iif2_var)-1" "j")
                  (("1" (grind)
                    (("1" (case-replace "i = 1+slength(iif2_var)")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand extract_stat +)
        (("5" (lift-if)
          (("5" (split)
            (("1" (grind) nil nil)
             ("2" (case-replace "i = slength(iblock1_var)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (stack_size_at_end formula-decl nil ireduction nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vars const-decl "bool" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (istat_induction formula-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vars def-decl "bool" ireduction nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (idecl? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (frame_vars 0
  (frame_vars-1 nil 3706892563
   ("" (skeep* :preds? t)
    (("" (lemma stack_size_at_vars)
      ((""
        (inst -1 "cf`fpc"
         "j-stack_size_at(D`seq(cf`ffct)`body, cf`fpc)"
         "D`seq(cf`ffct)`body")
        (("1" (assert)
          (("1" (typepred "cf`fdepth")
            (("1" (typepred "D`seq(cf`ffct)`body")
              (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (typepred "cf`fdepth") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((stack_size_at_vars formula-decl nil ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (istate_vars 0
  (istate_vars-1 nil 3706893232
   ("" (skeep* :preds? t)
    (("" (lemma frame_vars)
      (("" (inst -1 "iS`defs" "j" "endi(iS`callstack, 0)")
        (("1" (split)
          (("1" (expand endi)
            (("1" (typepred "iS`stack")
              (("1" (rewrite -1)
                (("1" (rewrite fdepth_sum_pop) (("1" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand returnRedex?)
            (("2" (typepred "endi(iS`callstack, 0)`fpc")
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
            nil)
           ("3" (expand pushRedex?)
            (("3" (expand popRedex?)
              (("3" (expand state_extract_stat)
                (("3" (expand returnRedex?)
                  (("3" (assert)
                    (("3" (replace 1)
                      (("3"
                        (typepred
                         "extract_stat(iS`defs`seq(endi(iS`callstack, 0)`ffct)`body,
                    endi(iS`callstack, 0)`fpc)")
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (grind) nil nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((frame_vars formula-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (extract_stat def-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (pushReduce_TCC1 0
  (pushReduce_TCC1-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (pushReduce subtype "iS`callstack`length - 1"
    "below[iS`callstack`length]")))
 (pushReduce_TCC2 0
  (pushReduce_TCC2-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (pushReduce subtype "lf`fpc" "below(slength(fbody))")))
 (pushReduce_TCC3 0
  (pushReduce_TCC3-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (pushReduce subtype "next_pc(fbody, lf`fpc)"
    "upto(slength(iS`defs`seq(lf`ffct)`body))")))
 (pushReduce_TCC4 0
  (pushReduce_TCC4-1 nil 3706883292
   ("" (skeep* :preds? t)
    (("" (typepred "lf`fdepth")
      (("" (split)
        (("1" (rewrite -1)
          (("1" (assert)
            (("1" (lemma stack_size_at_next_pc_decl_begin)
              (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((pushRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (stack_size_at_next_pc_decl_begin formula-decl nil ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (pushReduce subtype "lf`fdepth + 1"
    "{k: nat | k = 1 + iS`defs`seq(lf`ffct)`arity + stack_size_at(iS`defs`seq(lf`ffct)`body, next_pc(fbody, lf`fpc))}")))
 (pushReduce_TCC5 0
  (pushReduce_TCC5-2 nil 3706895287
   ("" (skeep* :preds? t)
    (("" (expand add)
      (("" (rewrite fdepth_sum_pop)
        (("1" (expand pop)
          (("1" (typepred "iS`stack")
            (("1" (rewrite -1)
              (("1" (rewrite fdepth_sum_pop)
                (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (typepred "lf`fdepth")
            (("2" (split -1)
              (("1" (rewrite -1)
                (("1" (use stack_size_at_next_pc_decl_begin)
                  (("1" (grind) nil nil)) nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil)
         ("3" (delete 2) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((add const-decl "finseq[T]" more_finseq nil)
    (stack_size_at_next_pc_decl_begin formula-decl nil ireduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (pushReduce subtype "more_finseq[ivalue].add(vundef, iS`stack)"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fdepth := 1 + lf`fdepth, `fpc := next_pc(fbody, lf`fpc)]])}"))
  (pushReduce_TCC5-1 nil 3706883292
   ("" (skeep* :preds? t)
    (("" (expand add)
      (("" (rewrite fdepth_sum_pop)
        (("1" (expand pop)
          (("1" (typepred "iS`stack")
            (("1" (rewrite -1)
              (("1" (rewrite fdepth_sum_pop)
                (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (typepred "lf`fdepth")
            (("2" (rewrite -1)
              (("2" (use stack_size_at_next_pc_decl_begin)
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (delete 2) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((add const-decl "finseq[T]" more_finseq nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (stack_size_at_next_pc_decl_begin formula-decl nil ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (pushReduce subtype "more_finseq[ivalue].add(vundef, iS`stack)"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fdepth := 1 + lf`fdepth, `fpc := next_pc(fbody, lf`fpc)]])}")))
 (popReduce_TCC1 0
  (popReduce_TCC1-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "iS`callstack`length - 1"
    "below[iS`callstack`length]")))
 (popReduce_TCC2 0
  (popReduce_TCC2-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (popReduce subtype "lf`fpc" "below(slength(fbody))")))
 (popReduce_TCC3 0
  (popReduce_TCC3-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "next_pc(fbody, lf`fpc)"
    "upto(slength(iS`defs`seq(lf`ffct)`body))")))
 (popReduce_TCC4 0
  (popReduce_TCC4-2 nil 3706895321
   ("" (skeep* :preds? t)
    (("" (typepred "lf`fdepth")
      (("" (split)
        (("1" (rewrite -1)
          (("1" (assert)
            (("1" (use stack_size_at_next_pc_decl_end)
              (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((popRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (stack_size_at_next_pc_decl_end formula-decl nil ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "lf`fdepth - 1"
    "{k: nat | k = 1 + iS`defs`seq(lf`ffct)`arity + stack_size_at(iS`defs`seq(lf`ffct)`body, next_pc(fbody, lf`fpc)) OR (next_pc(fbody, lf`fpc) = slength(iS`defs`seq(lf`ffct)`body) AND k >= 1)}"))
  (popReduce_TCC4-1 nil 3706883292
   ("" (skeep* :preds? t)
    (("" (typepred "lf`fdepth")
      (("" (rewrite -1)
        (("" (assert)
          (("" (use stack_size_at_next_pc_decl_end)
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((popRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (stack_size_at_next_pc_decl_end formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "lf`fdepth - 1"
    "{k: nat | k = 1 + iS`defs`seq(lf`ffct)`arity + stack_size_at(iS`defs`seq(lf`ffct)`body, next_pc(fbody, lf`fpc))}")))
 (popReduce_TCC5 0
  (popReduce_TCC5-1 nil 3706883292
   ("" (skeep* :preds? t)
    (("" (typepred "iS`stack") (("" (grind) nil nil)) nil)) nil)
   ((popRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "iS`stack"
    "{S: finseq[ivalue] | S`length > 0}")))
 (popReduce_TCC6 0
  (popReduce_TCC6-2 nil 3706895352
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (expand pop)
        (("1" (typepred "iS`stack")
          (("1" (rewrite -1)
            (("1" (rewrite fdepth_sum_pop)
              (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "lf`fdepth")
          (("2" (split -1)
            (("1" (rewrite -1)
              (("1" (assert)
                (("1" (use stack_size_at_next_pc_decl_end)
                  (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (stack_size_at_next_pc_decl_end formula-decl nil ireduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "pop(iS`stack)"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fdepth := lf`fdepth - 1, `fpc := next_pc(fbody, lf`fpc)]])}"))
  (popReduce_TCC6-1 nil 3706883292
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (expand pop)
        (("1" (typepred "iS`stack")
          (("1" (rewrite -1)
            (("1" (rewrite fdepth_sum_pop)
              (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "lf`fdepth")
          (("2" (rewrite -1)
            (("2" (assert)
              (("2" (use stack_size_at_next_pc_decl_end)
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (popRedex? const-decl "bool" ireduction nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (stack_size_at_next_pc_decl_end formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (popReduce subtype "pop(iS`stack)"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fdepth := lf`fdepth - 1, `fpc := next_pc(fbody, lf`fpc)]])}")))
 (ifReduce_TCC1 0
  (ifReduce_TCC1-1 nil 3706886185 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (ifReduce subtype "lf`fpc" "below(slength(fbody))")))
 (ifReduce_TCC2 0
  (ifReduce_TCC8-1 nil 3706886185 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "iS`callstack`length - 1"
    "below[iS`callstack`length]")))
 (ifReduce_TCC3 0
  (ifReduce_TCC9-1 nil 3706886185 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (ifReduce subtype "lf`fpc + 1"
    "upto(slength(iS`defs`seq(lf`ffct)`body))")))
 (ifReduce_TCC4 0
  (ifReduce_TCC10-1 nil 3706894981
   ("" (skeep* :preds? t)
    (("" (delete 4)
      (("" (typepred "lf`fdepth")
        (("" (split -1)
          (("1" (rewrite -1)
            (("1" (assert)
              (("1" (use stack_size_at_next_pc_iftrue)
                (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (stack_size_at_next_pc_iftrue formula-decl nil ireduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "lf`fdepth"
    "{k: nat | k = 1 + iS`defs`seq(lf`ffct)`arity + stack_size_at(iS`defs`seq(lf`ffct)`body, 1 + lf`fpc) OR (1 + lf`fpc = slength(iS`defs`seq(lf`ffct)`body) AND k >= 1)}")))
 (ifReduce_TCC5 0
  (ifReduce_TCC11-2 nil 3706895534
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (typepred "iS`stack")
        (("1" (rewrite -1)
          (("1" (rewrite fdepth_sum_pop)
            (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (hide 4)
        (("2" (typepred "lf`fdepth")
          (("2" (split -1)
            (("1" (rewrite -1)
              (("1" (assert)
                (("1" (use stack_size_at_next_pc_iftrue)
                  (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3" (hide 4)
        (("3" (use next_pc_if_no_overflow) (("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (stack_size_at_next_pc_iftrue formula-decl nil ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (next_pc_if_no_overflow formula-decl nil ireduction nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "iS`stack"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fpc := 1 + lf`fpc]])}"))
  (ifReduce_TCC11-1 nil 3706886185
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (typepred "iS`stack")
        (("1" (rewrite -1)
          (("1" (rewrite fdepth_sum_pop)
            (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (hide 4)
        (("2" (typepred "lf`fdepth")
          (("2" (rewrite -1)
            (("2" (assert)
              (("2" (use stack_size_at_next_pc_iftrue)
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 4)
        (("3" (use next_pc_if_no_overflow) (("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (next_pc_if_no_overflow formula-decl nil ireduction nil)
    (stack_size_at_next_pc_iftrue formula-decl nil ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ifReduce subtype "iS`stack"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fpc := 1 + lf`fpc]])}")))
 (ifReduce_TCC6 0
  (ifReduce_TCC2-1 nil 3706886185
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (ifReduce subtype "s" "(iif?)")))
 (ifReduce_TCC7 0
  (ifReduce_TCC3-1 nil 3706886185
   ("" (skeep* :preds? t)
    (("" (use istate_vars)
      (("" (split)
        (("1" (propax) nil nil) ("2" (propax) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil) ("6" (grind) nil nil))
        nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (popRedex? const-decl "bool" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (ifReduce subtype "j" "below(iS`stack`length)")))
 (ifReduce_TCC8 0
  (ifReduce_TCC4-1 nil 3706886185 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "iS`callstack`length - 1"
    "below[iS`callstack`length]")))
 (ifReduce_TCC9 0
  (ifReduce_TCC5-1 nil 3706886185
   ("" (skeep* :preds? t)
    (("" (use next_pc_if_no_overflow) (("" (grind) nil nil)) nil)) nil)
   ((next_pc_if_no_overflow formula-decl nil ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "lf`fpc + 1 + slength(iftrue(s))"
    "upto(slength(iS`defs`seq(lf`ffct)`body))")))
 (ifReduce_TCC10 0
  (ifReduce_TCC6-2 nil 3706895388
   ("" (skeep* :preds? t)
    (("" (typepred "lf`fdepth")
      (("" (split -1)
        (("1" (rewrite -1)
          (("1" (assert)
            (("1" (use stack_size_at_next_pc_iffalse)
              (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((ifRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (stack_size_at_next_pc_iffalse formula-decl nil ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "lf`fdepth"
    "{k: nat | k = 1 + iS`defs`seq(lf`ffct)`arity + stack_size_at(iS`defs`seq(lf`ffct)`body, 1 + lf`fpc + slength(iftrue(s))) OR (1 + lf`fpc + slength(iftrue(s)) = slength(iS`defs`seq(lf`ffct)`body) AND k >= 1)}"))
  (ifReduce_TCC6-1 nil 3706886185
   ("" (skeep* :preds? t)
    (("" (typepred "lf`fdepth")
      (("" (rewrite -1)
        (("" (assert)
          (("" (use stack_size_at_next_pc_iffalse)
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ifRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (stack_size_at_next_pc_iffalse formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "lf`fdepth"
    "{k: nat | k = 1 + iS`defs`seq(lf`ffct)`arity + stack_size_at(iS`defs`seq(lf`ffct)`body, 1 + lf`fpc + slength(iftrue(s)))}")))
 (ifReduce_TCC11 0
  (ifReduce_TCC7-2 nil 3706895416
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (typepred "iS`stack")
        (("1" (rewrite -1)
          (("1" (rewrite fdepth_sum_pop)
            (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "lf`fdepth")
          (("2" (split -1)
            (("1" (rewrite -1)
              (("1" (assert)
                (("1" (use stack_size_at_next_pc_iffalse)
                  (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (use next_pc_if_no_overflow) (("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (iif? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (iftrue adt-accessor-decl "[(iif?) -> istat]" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (stack_size_at_next_pc_iffalse formula-decl nil ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (next_pc_if_no_overflow formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ifReduce subtype "iS`stack"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fpc := 1 + lf`fpc + slength(iftrue(s))]])}"))
  (ifReduce_TCC7-1 nil 3706886185
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (typepred "iS`stack")
        (("1" (rewrite -1)
          (("1" (rewrite fdepth_sum_pop)
            (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "lf`fdepth")
          (("2" (rewrite -1)
            (("2" (assert)
              (("2" (use stack_size_at_next_pc_iffalse)
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (use next_pc_if_no_overflow) (("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (next_pc_if_no_overflow formula-decl nil ireduction nil)
    (stack_size_at_next_pc_iffalse formula-decl nil ireduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (iftrue adt-accessor-decl "[(iif?) -> istat]" ireduction nil)
    (iif? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ifReduce subtype "iS`stack"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fpc := 1 + lf`fpc + slength(iftrue(s))]])}")))
 (returnReduce_TCC1 0
  (returnReduce_TCC1-1 nil 3706896287 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "iS`callstack`length - 1"
    "below[iS`callstack`length]")))
 (returnReduce_TCC2 0
  (returnReduce_TCC9-1 nil 3706896287 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (returnReduce subtype "nc`length - 1" "below[nc`length]")))
 (returnReduce_TCC3 0
  (returnReduce_TCC17-1 nil 3706897594
   ("" (skeep* :preds? t)
    (("" (lemma istate_vars)
      (("" (inst -1 niS "cvar")
        (("" (typepred "iS`callstack")
          (("" (inst -1 "iS`callstack`length -2")
            (("1" (split)
              (("1" (assert) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil) ("6" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "niS`stack`length - 1 - cvar"
    "below[niS`stack`length]")))
 (returnReduce_TCC4 0
  (returnReduce_TCC19-1 nil 3706897594
   ("" (skeep* :preds? t)
    (("" (case-replace "niS`defs = iS`defs")
      (("1" (rewrite fdepth_sum_pop)
        (("1" (assert)
          (("1" (typepred "niS`stack")
            (("1" (rewrite -1)
              (("1" (rewrite fdepth_sum_pop)
                (("1" (case-replace "niS`callstack = nc")
                  (("1" (expand pop)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil)
         ("3" (flatten)
          (("3" (typepred "nf`fdepth")
            (("3" (rewrite -1)
              (("1" (assert)
                (("1" (use stack_size_at_next_pc)
                  (("1" (typepred "iS`callstack")
                    (("1" (inst -1 "iS`callstack`length-2")
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "iS`callstack")
                (("2" (inst -1 "iS`callstack`length-2")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (grind) nil nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype
    "niS`stack WITH [`seq(niS`stack`length - 1 - cvar) := endi(iS`stack, 0)]"
    "{S: Stack | S`length = 1 + fdepth_sum(niS`defs)(nc WITH [`seq(nc`length - 1) := nf WITH [`fpc := next_pc(cbody, nf`fpc)]])}")))
 (returnReduce_TCC5 0
  (returnReduce_TCC13-1 nil 3706897594 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (returnReduce subtype "nf`ffct" "below(niS`defs`length)")))
 (returnReduce_TCC6 0
  (returnReduce_TCC14-1 nil 3706897594 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "next_pc(cbody, nf`fpc)"
    "upto(slength(niS`defs`seq(nf`ffct)`body))")))
 (returnReduce_TCC7 0
  (returnReduce_TCC15-1 nil 3706897594
   ("" (skeep* :preds? t)
    (("" (hide 3)
      (("" (typepred "nf`fdepth")
        (("" (split)
          (("1" (rewrite -1)
            (("1" (assert)
              (("1" (use stack_size_at_next_pc)
                (("1" (split)
                  (("1" (grind) nil nil)
                   ("2" (typepred "iS`callstack")
                    (("2" (inst -1 "iS`callstack`length - 2")
                      (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (typepred "iS`callstack")
                    (("3" (inst -1 "iS`callstack`length - 2")
                      (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "iS`callstack")
            (("2" (inst -1 "iS`callstack`length - 2")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "nf`fdepth"
    "{k: nat | k = 1 + niS`defs`seq(nf`ffct)`arity + stack_size_at(niS`defs`seq(nf`ffct)`body, next_pc(cbody, nf`fpc)) OR (next_pc(cbody, nf`fpc) = slength(niS`defs`seq(nf`ffct)`body) AND k >= 1)}")))
 (returnReduce_TCC8 0
  (returnReduce_TCC16-1 nil 3706897594
   ("" (skeep* :preds? t)
    (("" (split)
      (("1" (skeep* :preds? t)
        (("1" (split)
          (("1" (case-replace "x1 = nc`length - 1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("2" (grind) nil nil)
           ("3" (flatten)
            (("3" (case-replace "x1 = nc`length - 1")
              (("1" (assert)
                (("1" (typepred "nf`fdepth")
                  (("1" (rewrite -1)
                    (("1" (hide 2)
                      (("1" (use stack_size_at_next_pc)
                        (("1" (typepred "iS`callstack")
                          (("1" (inst -1 "iS`callstack`length-2")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "iS`callstack")
                      (("2" (inst -1 "iS`callstack`length-2")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (typepred "niS`callstack`seq(x1)`fdepth")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep* :preds? t)
        (("2" (case-replace "i = nc`length - 2")
          (("1" (assert)
            (("1" (typepred "niS`callstack")
              (("1" (inst -1 "niS`callstack`length - 2")
                (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (typepred "niS`callstack")
              (("2" (inst -1 i) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype
    "nc WITH [`seq(nc`length - 1) := nf WITH [`fpc := next_pc(cbody, nf`fpc)]]"
    "{C: finseq[stack_frame(niS`defs)] | FORALL (i: nat | i < C`length - 1): is_fun_call_at(niS`defs`seq(C`seq(i)`ffct)`body, C`seq(i)`fpc, C`seq(1 + i)`ffct)}")))
 (returnReduce_TCC9 0
  (returnReduce_TCC15-1 nil 3706896287
   ("" (skeep* :preds? t)
    (("" (typepred "iS`stack") (("" (grind) nil nil)) nil)) nil)
   ((returnRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (returnReduce subtype "0" "below(iS`stack`length)")))
 (returnReduce_TCC10 0
  (returnReduce_TCC2-1 nil 3706896287 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "lf`fdepth - 1"
    "{k: nat | k = 1 + iS`defs`seq(lf`ffct)`arity + stack_size_at(iS`defs`seq(lf`ffct)`body, lf`fpc) OR (lf`fpc = slength(iS`defs`seq(lf`ffct)`body) AND k >= 1)}")))
 (returnReduce_TCC11 0
  (returnReduce_TCC3-1 nil 3706896287
   ("" (skeep* :preds? t)
    (("" (typepred "iS`stack") (("" (grind) nil nil)) nil)) nil)
   ((returnRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "iS`stack"
    "{S: finseq[ivalue] | S`length > 0}")))
 (returnReduce_TCC12 0
  (returnReduce_TCC4-1 nil 3706896287
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (expand pop)
        (("1" (typepred "iS`stack")
          (("1" (rewrite -1)
            (("1" (rewrite fdepth_sum_pop)
              (("1" (expand pop) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "pop(iS`stack)"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1) := lf WITH [`fdepth := lf`fdepth - 1]])}")))
 (returnReduce_TCC13 0
  (returnReduce_TCC17-1 nil 3706896287 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "iS`callstack"
    "{S: finseq[stack_frame(iS`defs)] | S`length > 0}")))
 (returnReduce_TCC14 0
  (returnReduce_TCC18-1 nil 3706896287 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "pop(iS`callstack)"
    "{C: finseq[stack_frame(iS`defs)] | FORALL (i: nat | i < C`length - 1): is_fun_call_at(iS`defs`seq(C`seq(i)`ffct)`body, C`seq(i)`fpc, C`seq(1 + i)`ffct)}")))
 (returnReduce_TCC15 0
  (returnReduce_TCC19-1 nil 3706896287
   ("" (skeep*) (("" (typepred "iS`stack") (("" (grind) nil nil)) nil))
    nil)
   ((returnRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (endi const-decl "T" ireduction nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "iS`stack"
    "{S: finseq[ivalue] | S`length > 0}")))
 (returnReduce_TCC16 0
  (returnReduce_TCC22-1 nil 3706896287
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (typepred "iS`stack")
        (("" (rewrite fdepth_sum_pop)
          ((""
            (typepred
             "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (endi const-decl "T" ireduction nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype
    "pop(iS`stack) WITH [`seq(0) := iS`stack`seq(1)]"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(pop(iS`callstack))}")))
 (returnReduce_TCC17 0
  (returnReduce_TCC7-1 nil 3706896287
   ("" (skeep* :preds? t)
    (("" (typepred "iS`callstack")
      (("" (inst -1 "iS`callstack`length - 2")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((returnRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (returnReduce subtype "nf`fpc" "below(slength(cbody))")))
 (returnReduce_TCC18 0
  (returnReduce_TCC20-1 nil 3706896287
   ("" (skeep* :preds? t)
    (("" (typepred "iS`stack")
      (("" (rewrite fdepth_sum_pop)
        ((""
          (typepred "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((returnRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (endi const-decl "T" ireduction nil)
    (stack_size_at_end formula-decl nil ireduction nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (returnReduce subtype "0" "below[pop(iS`stack)`length]")))
 (returnReduce_TCC19 0
  (returnReduce_TCC8-1 nil 3706896287
   ("" (skeep* :preds? t)
    (("" (typepred "iS`callstack")
      (("" (inst -1 "iS`callstack`length - 2")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((returnRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "extract_stat(cbody, nf`fpc)`1"
    "(iassign?)")))
 (returnReduce_TCC20 0
  (returnReduce_TCC5-1 nil 3706896287 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "iS`callstack"
    "{S: finseq[stack_frame(iS`defs)] | S`length > 0}")))
 (returnReduce_TCC21 0
  (returnReduce_TCC10-1 nil 3706896287
   ("" (skeep* :preds? t)
    (("" (typepred "iS`callstack")
      (("" (inst -1 i) (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((returnRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "next_pc(cbody, nf`fpc)"
    "upto(slength(iS`defs`seq(nf`ffct)`body))")))
 (returnReduce_TCC22 0
  (returnReduce_TCC13-1 nil 3706896287
   ("" (skeep* :preds? t)
    (("" (typepred "iS`stack") (("" (grind) nil nil)) nil)) nil)
   ((returnRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "iS`stack"
    "{S: finseq[ivalue] | S`length > 0}")))
 (returnReduce_TCC23 0
  (returnReduce_TCC6-1 nil 3706896287 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (returnReduce subtype "0" "below(nc`length)")))
 (returnReduce_TCC24 0
  (returnReduce_TCC21-1 nil 3706896287
   ("" (skeep* :preds? t)
    (("" (typepred "iS`stack")
      (("" (rewrite fdepth_sum_pop)
        ((""
          (typepred "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((returnRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (endi const-decl "T" ireduction nil)
    (stack_size_at_end formula-decl nil ireduction nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (returnReduce subtype "1" "below[iS`stack`length]")))
 (returnReduce_TCC25 0
  (returnReduce_TCC8-1 nil 3706897594
   ("" (skeep* :preds? t)
    (("" (expand pop +)
      (("" (typepred "iS`stack")
        (("" (rewrite -1)
          (("" (rewrite fdepth_sum_pop)
            ((""
              (case-replace
               " iS`callstack`seq(iS`callstack`length - 1)`fdepth = 1")
              (("1" (grind) nil nil)
               ("2"
                (typepred
                 "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
                (("2" (split)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pop const-decl "finseq[T]" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (endi const-decl "T" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (returnReduce subtype "pop(iS`stack)"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(nc)}")))
 (skipReduce_TCC1 0
  (skipReduce_TCC1-1 nil 3707142439 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (skipReduce subtype "iS`callstack`length - 1"
    "below[iS`callstack`length]")))
 (skipReduce_TCC2 0
  (skipReduce_TCC2-1 nil 3707142439 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (skipReduce subtype "endi(iS`callstack, 0)`fpc"
    "below(slength(iS`defs`seq(endi(iS`callstack, 0)`ffct)`body))")))
 (skipReduce_TCC3 0
  (skipReduce_TCC3-1 nil 3707142439 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (skipReduce subtype
    "next_pc(iS`defs`seq(endi(iS`callstack, 0)`ffct)`body, endi(iS`callstack, 0)`fpc)"
    "upto(slength(iS`defs`seq(iS`callstack`seq(iS`callstack`length - 1)`ffct)`body))")))
 (skipReduce_TCC4 0
  (skipReduce_TCC4-1 nil 3707142439
   ("" (skeep* :preds? t)
    (("" (hide 2)
      (("" (use stack_size_at_next_pc)
        (("" (split)
          (("1"
            (typepred
             "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
            (("1" (rewrite -1)
              (("1" (grind) nil nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (skipReduce subtype
    "iS`callstack`seq(iS`callstack`length - 1)`fdepth"
    "{k: nat | k = 1 + iS`defs`seq(iS`callstack`seq(iS`callstack`length - 1)`ffct)`arity + stack_size_at(iS`defs`seq(iS`callstack`seq(iS`callstack`length - 1)`ffct)`body, next_pc(iS`defs`seq(endi(iS`callstack, 0)`ffct)`body, endi(iS`callstack, 0)`fpc)) OR (next_pc(iS`defs`seq(endi(iS`callstack, 0)`ffct)`body, endi(iS`callstack, 0)`fpc) = slength(iS`defs`seq(iS`callstack`seq(iS`callstack`length - 1)`ffct)`body) AND k >= 1)}")))
 (skipReduce_TCC5 0
  (skipReduce_TCC5-1 nil 3707142439
   ("" (skeep* :preds? t)
    (("" (typepred "iS`callstack")
      (("" (inst -1 i)
        (("" (lift-if)
          (("" (lift-if)
            (("" (assert) (("" (lift-if) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((skipRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (skipReduce subtype
    "iS`callstack WITH [`seq(iS`callstack`length - 1)`fpc := next_pc(iS`defs`seq(endi(iS`callstack, 0)`ffct)`body, endi(iS`callstack, 0)`fpc)]"
    "{C: finseq[stack_frame(iS`defs)] | FORALL (i: nat | i < C`length - 1): is_fun_call_at(iS`defs`seq(C`seq(i)`ffct)`body, C`seq(i)`fpc, C`seq(1 + i)`ffct)}")))
 (skipReduce_TCC6 0
  (skipReduce_TCC6-1 nil 3707142439
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (typepred "iS`stack")
        (("1" (rewrite -1)
          (("1" (rewrite fdepth_sum_pop)
            (("1" (expand pop) (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (flatten)
          (("2" (hide 2)
            (("2"
              (typepred
               "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
              (("2" (rewrite -1)
                (("1" (use stack_size_at_next_pc)
                  (("1" (grind) nil nil)) nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3"
        (typepred "next_pc(iS`defs`seq(endi(iS`callstack, 0)`ffct)`body,
              endi(iS`callstack, 0)`fpc)")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (skipReduce subtype "iS`stack"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(iS`callstack WITH [`seq(iS`callstack`length - 1)`fpc := next_pc(iS`defs`seq(endi(iS`callstack, 0)`ffct)`body, endi(iS`callstack, 0)`fpc)])}")))
 (countStore_update 0
  (countStore_update-1 nil 3709383700
   ("" (skeep* :preds? t)
    (("" (expand countStore)
      ((""
        (case "(LAMBDA (r_1: nat):
              IF dom(r_1)
                THEN count(vref?, str WITH [(r)`seq(i) := vnil](r_1))
              ELSE 0
              ENDIF) = (LAMBDA (r_1: nat):
              IF dom(r_1)
                THEN count(vref?, str(r_1))
              ELSE 0
              ENDIF) WITH [(r) := count(vref?, str(r) WITH [`seq(i) := vnil])]")
        (("1" (lemma sigma_with)
          (("1" (inst? :where -2)
            (("1" (inst -1 dom)
              (("1" (split -1)
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (rewrite count_update)
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil)
                 ("3" (expand member) (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (decompose-equality)
            (("2" (case-replace "x!1 = r")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((countStore const-decl "nat" ireduction nil)
    (sigma_with formula-decl nil finite_set_theorems nil)
    (member const-decl "bool" sets nil)
    (count_update formula-decl nil finseq_theorems nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (count const-decl "nat" finseq_theorems nil)
    (vref? adt-recognizer-decl "[ivalue -> boolean]" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (vnil? adt-recognizer-decl "[ivalue -> boolean]" ireduction nil)
    (vnil adt-constructor-decl "(vnil?)" ireduction nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (lex2_def 0
  (lex2_def-1 nil 3709385249 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< def-decl "bool" ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lex2 const-decl "ordinal" lex2 nil))
   shostak))
 (idecref_TCC1 0
  (idecref_TCC1-1 nil 3709383662 ("" (subtype-tcc) nil nil)
   ((countStore const-decl "nat" ireduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil))
   nil (idecref subtype "ireduction.s" "(ireduction.iS2`domain)")))
 (idecref_TCC2 0
  (idecref_TCC2-1 nil 3709383662 ("" (subtype-tcc) nil nil)
   ((countStore const-decl "nat" ireduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (idecref subtype "ireduction.iS"
    "{iS2 | booleans.AND(reals.<=(ireduction.countStore(ireduction.iS2`domain, ireduction.iS2`store), ireduction.countStore(ireduction.iS`domain, ireduction.iS`store)), booleans.AND(ireduction.iS2`domain = ireduction.iS`domain, (FORALL (s: (ireduction.iS`domain)): ireduction.iS2`store(s)`length = ireduction.iS`store(s)`length)))}")))
 (idecref_TCC3 0
  (idecref_TCC3-1 nil 3709383662 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (idecref subtype "(number_fields.-)(ireduction.i, 1)"
    "below[iS`store(r)`length]")))
 (idecref_TCC4 0
  (idecref_TCC4-1 nil 3709383662 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (idecref subtype
    "ireduction.iS`store(ireduction.vrefindex(ireduction.v))`length"
    "naturalnumbers.upto(ireduction.iS`store WITH [(ireduction.r)`seq((number_fields.-)(ireduction.i, 1)) := ireduction.vnil](ireduction.vrefindex(ireduction.v))`length)")))
 (idecref_TCC5 0
  (idecref_TCC5-1 nil 3709383662
   ("" (skeep* :preds? t)
    ((""
      (typepred
       "countStore(iS`domain, iS`store WITH [(r)`seq(i - 1) := vnil])")
      (("1" (rewrite countStore_update) (("1" (grind) nil nil)) nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((countStore_update formula-decl nil ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< def-decl "bool" ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (count const-decl "nat" finseq_theorems nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (ivalue type-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Store type-eq-decl nil ireduction nil)
    (countStore const-decl "nat" ireduction nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (vnil? adt-recognizer-decl "[ivalue -> boolean]" ireduction nil)
    (vnil adt-constructor-decl "(vnil?)" ireduction nil))
   nil
   (idecref termination
    "ireduction.idecref(ireduction.iS WITH [`store(ireduction.r)`seq((number_fields.-)(ireduction.i, 1)) := ireduction.vnil, `count(ireduction.vrefindex(ireduction.v)) := ireduction.iS`count(ireduction.vrefindex(ireduction.v))], ireduction.vrefindex(ireduction.v), ireduction.iS`store(ireduction.vrefindex(ireduction.v))`length)"
    "nil")))
 (idecref_TCC6 0
  (idecref_TCC6-1 nil 3709383662
   ("" (skeep* :preds? t)
    (("" (case-replace "newS`domain = iS`domain")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil (idecref subtype "ireduction.r" "(ireduction.newS`domain)")))
 (idecref_TCC7 0
  (idecref_TCC7-1 nil 3709383662
   ("" (skeep* :preds? t)
    (("" (case-replace "newS`domain = iS`domain")
      (("1" (case-replace "newS`store(r)`length = iS`store(r)`length")
        (("1" (assert) nil nil)
         ("2" (lift-if)
          (("2" (split)
            (("1" (assert)
              (("1" (flatten)
                (("1" (assert)
                  (("1"
                    (typepred "v1(iS
            WITH [`store(r)`seq(i - 1) := vnil,
                  `count(vrefindex(v)) := iS`count(vrefindex(v))],
          vrefindex(v), iS`store(vrefindex(v))`length)")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)
                     ("2" (assert)
                      (("2" (lift-if) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (lift-if)
          (("3" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (lift-if)
        (("2" (split)
          (("1" (assert)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vrefindex adt-accessor-decl "[(vref?) -> nat]" ireduction nil)
    (vref? adt-recognizer-decl "[ivalue -> boolean]" ireduction nil)
    (vnil adt-constructor-decl "(vnil?)" ireduction nil)
    (vnil? adt-recognizer-decl "[ivalue -> boolean]" ireduction nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (countStore const-decl "nat" ireduction nil)
    (is_finite const-decl "bool" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (idecref subtype "(number_fields.-)(ireduction.i, 1)"
    "naturalnumbers.upto(ireduction.newS`store(ireduction.r)`length)")))
 (idecref_TCC8 0
  (idecref_TCC8-1 nil 3709383662
   ("" (skeep* :preds? t)
    (("" (lift-if)
      ((""
        (case "countStore(newS`domain, newS`store) <= countStore(iS`domain, iS`store)")
        (("1" (assert) (("1" (grind) nil nil)) nil)
         ("2" (split)
          (("1" (flatten)
            (("1" (assert)
              (("1"
                (typepred "v1(iS
            WITH [`store(r)`seq(i - 1) := vnil,
                  `count(vrefindex(v)) := iS`count(vrefindex(v))],
          vrefindex(v), iS`store(vrefindex(v))`length)")
                (("1" (assert)
                  (("1" (replace -6 :dir RL)
                    (("1" (rewrite countStore_update)
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (lift-if) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (istate type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (countStore const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ivalue type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< def-decl "bool" ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (count const-decl "nat" finseq_theorems nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (vrefindex adt-accessor-decl "[(vref?) -> nat]" ireduction nil)
    (vref? adt-recognizer-decl "[ivalue -> boolean]" ireduction nil)
    (vnil adt-constructor-decl "(vnil?)" ireduction nil)
    (vnil? adt-recognizer-decl "[ivalue -> boolean]" ireduction nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (countStore_update formula-decl nil ireduction nil))
   nil
   (idecref termination
    "ireduction.idecref(ireduction.newS, ireduction.r, (number_fields.-)(ireduction.i, 1))"
    "nil")))
 (idecref_TCC9 0
  (idecref_TCC9-1 nil 3709383662
   ("" (skeep* :preds? t)
    (("" (lift-if)
      (("" (split)
        (("1" (flatten)
          (("1"
            (typepred "v1(iS
            WITH [`store(r)`seq(i - 1) := vnil,
                  `count(vrefindex(v)) := iS`count(vrefindex(v))],
          vrefindex(v), iS`store(vrefindex(v))`length)")
            (("1" (replace -6 :dir RL)
              (("1" (typepred "v1(newS, r, i - 1)")
                (("1" (assert)
                  (("1" (split)
                    (("1" (rewrite countStore_update)
                      (("1" (assert) nil nil)) nil)
                     ("2" (skeep)
                      (("2" (inst?)
                        (("2" (inst?)
                          (("2" (lift-if) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite countStore_update)
                  (("2" (hide 3)
                    (("2" (hide-all-but (-1 +))
                      (("2" (rewrite lex2_def) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (typepred "v1(newS, r, i - 1)")
            (("1" (grind) nil nil)
             ("2" (hide 4)
              (("2" (replace -1) (("2" (rewrite lex2_def) nil nil))
                nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (vrefindex adt-accessor-decl "[(vref?) -> nat]" ireduction nil)
    (vref? adt-recognizer-decl "[ivalue -> boolean]" ireduction nil)
    (vnil adt-constructor-decl "(vnil?)" ireduction nil)
    (vnil? adt-recognizer-decl "[ivalue -> boolean]" ireduction nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (istate type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (countStore const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ivalue type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (countStore_update formula-decl nil ireduction nil)
    (lex2_def formula-decl nil ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count const-decl "nat" finseq_theorems nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil
   (idecref subtype
    "ireduction.idecref(ireduction.newS, ireduction.r, (number_fields.-)(ireduction.i, 1))"
    "{iS2 | booleans.AND(reals.<=(ireduction.countStore(ireduction.iS2`domain, ireduction.iS2`store), ireduction.countStore(ireduction.iS`domain, ireduction.iS`store)), booleans.AND(ireduction.iS2`domain = ireduction.iS`domain, (FORALL (s: (ireduction.iS`domain)): ireduction.iS2`store(s)`length = ireduction.iS`store(s)`length)))}")))
 (idecref_TCC10 0
  (idecref_TCC10-1 nil 3709383662 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (idecref subtype "(number_fields.-)(ireduction.i, 1)"
    "below[iS`store(r)`length]")))
 (idecref_TCC11 0
  (idecref_TCC11-1 nil 3709383662 ("" (subtype-tcc) nil nil)
   ((countStore const-decl "nat" ireduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (idecref subtype "ireduction.iS"
    "{iS2 | booleans.AND(reals.<=(ireduction.countStore(ireduction.iS2`domain, ireduction.iS2`store), ireduction.countStore(ireduction.iS`domain, ireduction.iS`store)), booleans.AND(ireduction.iS2`domain = ireduction.iS`domain, (FORALL (s: (ireduction.iS`domain)): ireduction.iS2`store(s)`length = ireduction.iS`store(s)`length)))}")))
 (releaseReduce_TCC1 0
  (releaseReduce_TCC1-1 nil 3709385821 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (releaseReduce subtype "ireduction.lf`fpc"
    "naturalnumbers.below(ireduction.slength(ireduction.fbody))")))
 (releaseReduce_TCC2 0
  (releaseReduce_TCC2-1 nil 3709385821
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (releaseReduce subtype "ireduction.s" "(ireduction.irelease?)")))
 (releaseReduce_TCC3 0
  (releaseReduce_TCC3-1 nil 3709385821
   ("" (skeep* :preds? t)
    (("" (use istate_vars)
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil) ("6" (grind) nil nil))
        nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (rvar adt-accessor-decl "[(irelease?) -> (ivar?)]" ireduction nil)
    (irelease? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (popRedex? const-decl "bool" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (releaseReduce subtype
    "ireduction.vindex(ireduction.rvar(ireduction.s))"
    "naturalnumbers.below(ireduction.iS`stack`length)")))
 (releaseReduce_TCC4 0
  (releaseReduce_TCC4-1 nil 3709385821 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (domainValue? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil))
   nil
   (releaseReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (releaseReduce_TCC5 0
  (releaseReduce_TCC5-1 nil 3709385821 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (domainValue? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (releaseReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (releaseReduce_TCC6 0
  (releaseReduce_TCC6-1 nil 3709385821
   ("" (skeep* :preds? t)
    (("" (expand get_frame_body)
      (("" (replace -3)
        (("" (expand endi)
          (("" (lemma stack_size_at_next_pc)
            (("" (inst?)
              (("" (split)
                (("1"
                  (typepred
                   "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
                  (("1" (split -1)
                    (("1" (assert) nil nil) ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (releaseReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (releaseReduce_TCC7 0
  (releaseReduce_TCC7-1 nil 3709385821 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (releaseReduce subtype "ireduction.vrefindex(ireduction.value)"
    "(ireduction.iS`domain)")))
 (releaseReduce_TCC8 0
  (releaseReduce_TCC8-1 nil 3709385821
   ("" (skeep* :preds? t)
    (("" (lemma istate_vars)
      (("" (inst -1 iS "vindex(rvar(s))")
        (("" (split)
          (("1" (assert) nil nil) ("2" (propax) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil) ("6" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (rvar adt-accessor-decl "[(irelease?) -> (ivar?)]" ireduction nil)
    (irelease? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (releaseReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.rvar(ireduction.s)))"
    "below[iS`stack`length]")))
 (releaseReduce_TCC9 0
  (releaseReduce_TCC9-1 nil 3709385821 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (domainValue? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil))
   nil
   (releaseReduce subtype
    "ireduction.iS`store(ireduction.vrefindex(ireduction.value))`length"
    "naturalnumbers.upto(ireduction.iS`store(ireduction.vrefindex(ireduction.value))`length)")))
 (releaseReduce_TCC10 0
  (releaseReduce_TCC10-1 nil 3709385821 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (domainValue? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil))
   nil
   (releaseReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (releaseReduce_TCC11 0
  (releaseReduce_TCC11-1 nil 3709385821 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (domainValue? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (releaseReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (releaseReduce_TCC12 0
  (releaseReduce_TCC12-1 nil 3709385821
   ("" (skeep* :preds? t)
    (("" (typepred "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
      (("" (use stack_size_at_next_pc)
        (("" (split -1)
          (("1" (expand* get_frame_body endi)
            (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((releaseRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (domainValue? const-decl "bool" ireduction nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (releaseReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (releaseReduce_TCC13 0
  (releaseReduce_TCC13-1 nil 3709385821
   ("" (skeep* :preds? t)
    (("" (rewrite fdepth_sum_pop)
      (("1" (typepred "iS`stack")
        (("1" (rewrite fdepth_sum_pop)
          (("1" (expand pop) (("1" (propax) nil nil)) nil)) nil))
        nil)
       ("2" (use stack_size_at_next_pc)
        (("2" (split -1)
          (("1"
            (typepred
             "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
            (("1" (expand* get_frame_body endi)
              (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil))
          nil))
        nil)
       ("3" (grind) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (domainValue? const-decl "bool" ireduction nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (releaseReduce subtype "ireduction.iS`stack"
    "{S: ireduction.Stack | S`length = (number_fields.+)(1, ireduction.fdepth_sum(ireduction.iS`defs)(ireduction.iS`callstack WITH [`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fpc := ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)]))}")))
 (variableReduce_TCC1 0
  (variableReduce_TCC1-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype "ireduction.lf`fpc"
    "naturalnumbers.below(ireduction.slength(ireduction.fbody))")))
 (variableReduce_TCC2 0
  (variableReduce_TCC2-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype "ireduction.s" "(ireduction.iassign?)")))
 (variableReduce_TCC3 0
  (variableReduce_TCC3-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype "ireduction.aexpr(ireduction.s)"
    "(ireduction.ivar?)")))
 (variableReduce_TCC4 0
  (variableReduce_TCC4-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "ireduction.vindex(ireduction.aexpr(ireduction.s))"
    "naturalnumbers.below(ireduction.iS`stack`length)")))
 (variableReduce_TCC5 0
  (variableReduce_TCC5-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (variableReduce_TCC6 0
  (variableReduce_TCC6-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (variableReduce_TCC7 0
  (variableReduce_TCC7-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (variableReduce_TCC8 0
  (variableReduce_TCC8-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))"
    "below[iS`stack`length]")))
 (variableReduce_TCC9 0
  (variableReduce_TCC9-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.aexpr(ireduction.s)))"
    "below[iS`stack`length]")))
 (variableReduce_TCC10 0
  (variableReduce_TCC10-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (variableReduce_TCC11 0
  (variableReduce_TCC11-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (variableReduce_TCC12 0
  (variableReduce_TCC12-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (variableReduce_TCC13 0
  (variableReduce_TCC13-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype "ireduction.vrefindex(ireduction.value)"
    "(ireduction.iS`domain)")))
 (variableReduce_TCC14 0
  (variableReduce_TCC14-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))"
    "below[iS`stack`length]")))
 (variableReduce_TCC15 0
  (variableReduce_TCC15-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (variableReduce_TCC16 0
  (variableReduce_TCC16-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (variableReduce_TCC17 0
  (variableReduce_TCC17-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (variableReduce_TCC18 0
  (variableReduce_TCC18-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil
   nil
   (variableReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))"
    "below[iS`stack`length]")))
 (valueReduce_TCC1 0
  (valueReduce_TCC1-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil nil
   (valueReduce subtype "ireduction.lf`fpc"
    "naturalnumbers.below(ireduction.slength(ireduction.fbody))")))
 (valueReduce_TCC2 0
  (valueReduce_TCC2-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil nil
   (valueReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (valueReduce_TCC3 0
  (valueReduce_TCC3-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil nil
   (valueReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (valueReduce_TCC4 0
  (valueReduce_TCC4-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil nil
   (valueReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (valueReduce_TCC5 0
  (valueReduce_TCC5-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil nil
   (valueReduce subtype "ireduction.s" "(ireduction.iassign?)")))
 (valueReduce_TCC6 0
  (valueReduce_TCC6-1 nil 3709383662 ("" (subtype-tcc) nil nil) nil nil
   (valueReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))"
    "below[iS`stack`length]")))
 (iapply_nstack_TCC1 0
  (iapply_nstack_TCC1-1 nil 3706965297 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (iexpr type-decl nil ireduction nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (in_varlist const-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (endi const-decl "T" ireduction nil))
   nil
   (iapply_nstack subtype "(S, cnt)"
    "{S1, ((ncnt: [(dom) -> int])) | S1`length = arity + S`length}")))
 (iapply_nstack_TCC2 0
  (iapply_nstack_TCC3-1 nil 3706965297 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil (iapply_nstack subtype "x" "(ivar?)")))
 (iapply_nstack_TCC3 0
  (iapply_nstack_TCC4-1 nil 3706965297 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (iapply_nstack subtype "x WITH [`vindex := vindex(x) + 1]"
    "(ivar?)")))
 (iapply_nstack_TCC4 0
  (iapply_nstack_TCC5-1 nil 3706966964
   ("" (skeep* :preds? t)
    (("" (split)
      (("1" (rewrite map_length)
        (("1" (rewrite length_cdr) (("1" (grind) nil nil)) nil)) nil)
       ("2" (skeep)
        (("2" (inst -6 "i-1")
          (("1" (split)
            (("1" (grind) nil nil)
             ("2" (expand in_varlist)
              (("2" (rewrite some_map)
                (("2" (expand o)
                  (("2" (rewrite some_nth)
                    (("2" (rewrite some_nth)
                      (("2" (skeep)
                        (("2" (inst 1 "i_1+1")
                          (("1" (grind) nil nil)
                           ("2" (typepred i_1)
                            (("2" (rewrite length_cdr)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((length_cdr formula-decl nil ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (iexpr type-decl nil ireduction nil)
    (endi const-decl "T" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (domainValue? const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (in_varlist const-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (map_length formula-decl nil more_map_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (O const-decl "T3" function_props nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (some_nth formula-decl nil finseq_theorems nil)
    (some_map formula-decl nil finseq_theorems nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (iapply_nstack subtype
    "list_adt_map[(ivar?), (ivar?)].map(LAMBDA x: x WITH [`vindex := vindex(x) + 1])(list_adt[(ivar?)].cdr(args))"
    "{L | list_props[(ivar?)].length(L) = list_props[(ivar?)].length(args) - 1 AND FORALL i: in_varlist(L)(i) IMPLIES i < 1 + S`length}")))
 (iapply_nstack_TCC5 0
  (iapply_nstack_TCC6-1 nil 3706965297
   ("" (skeep* :preds? t)
    (("" (split)
      (("1" (inst -8 "vindex(car(args))")
        (("1" (split)
          (("1" (grind) nil nil)
           ("2" (expand in_varlist)
            (("2" (rewrite some_nth)
              (("2" (inst 1 0)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand in_varlist) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (some_nth formula-decl nil finseq_theorems nil)
    (nth def-decl "T" list_props nil)
    (endi const-decl "T" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (domainValue? const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (in_varlist const-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (iapply_nstack subtype
    "S`length - 1 - vindex(list_adt[(ivar?)].car(args))"
    "below[S`length]")))
 (iapply_nstack_TCC6 0
  (iapply_nstack_TCC7-1 nil 3706965297
   ("" (skeep* :preds? t)
    (("" (case "domainValue?(dom)(u)")
      (("1" (grind) nil nil)
       ("2" (inst -8 "vindex(car(args))")
        (("2" (split)
          (("1" (grind) nil nil)
           ("2" (expand in_varlist)
            (("2" (rewrite some_nth)
              (("2" (inst 1 0)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((domainValue? const-decl "bool" ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (endi const-decl "T" ireduction nil)
    (in_varlist const-decl "bool" ireduction nil)
    (injective? const-decl "bool" functions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (some_nth formula-decl nil finseq_theorems nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil))
   nil (iapply_nstack subtype "vrefindex(u)" "(dom)")))
 (iapply_nstack_TCC7 0
  (iapply_nstack_TCC8-1 nil 3706965297 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (endi const-decl "T" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (domainValue? const-decl "bool" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (in_varlist const-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (iexpr type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (iapply_nstack subtype "arity - 1" "nat")))
 (iapply_nstack_TCC8 0
  (iapply_nstack_TCC9-1 nil 3706966964
   ("" (skeep* :preds? t)
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (split)
          (("1" (grind) nil nil)
           ("2" (case "i = 0")
            (("1" (expand in_varlist)
              (("1" (replace -12)
                (("1" (rewrite some_map)
                  (("1" (rewrite some_nth) (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -9 "i-1")
              (("1" (split)
                (("1" (grind) nil nil)
                 ("2" (expand in_varlist)
                  (("2" (replace -10)
                    (("2" (rewrite some_map)
                      (("2" (rewrite some_nth)
                        (("2" (rewrite some_nth)
                          (("2" (skeep :preds? t)
                            (("2" (inst 1 "i_1+1")
                              (("1" (grind) nil nil)
                               ("2"
                                (rewrite length_cdr)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (in_varlist const-decl "bool" ireduction nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (endi const-decl "T" ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (length_cdr formula-decl nil ireduction nil)
    (TRUE const-decl "bool" booleans nil)
    (some_map formula-decl nil finseq_theorems nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (some_nth formula-decl nil finseq_theorems nil)
    (O const-decl "T3" function_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil
   (iapply_nstack subtype "nstack"
    "{S | finseq_theorems[ivalue].every(domainValue?(dom))(S)}")))
 (iapply_nstack_TCC9 0
  (iapply_nstack_TCC11-1 nil 3706967306 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (injective? const-decl "bool" functions nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (endi const-decl "T" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (domainValue? const-decl "bool" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (in_varlist const-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (iexpr type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (iapply_nstack subtype
    "iapply_nstack(arity - 1, dom, nstack, nargs, ncnt)"
    "{S1, ((ncnt: [(dom) -> int])) | S1`length = arity + S`length}")))
 (iapply_nstack_TCC10 0
  (iapply_nstack_TCC10-1 nil 3706966331 ("" (termination-tcc) nil nil)
   ((add const-decl "finseq[T]" more_finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (iapply_nstack termination
    "iapply_nstack(arity - 1, dom, nstack, nargs, ncnt)" "nil")))
 (iapply_nstack_TCC11 0
  (iapply_nstack_TCC12-1 nil 3706965297 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (iexpr type-decl nil ireduction nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (in_varlist const-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (endi const-decl "T" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil))
   nil (iapply_nstack subtype "args" "(cons?[(ivar?)])")))
 (iapply_nstack_TCC12 0
  (iapply_nstack_TCC13-1 nil 3706965297
   ("" (skeep* :preds? t)
    (("" (inst -5 "vindex(car(args))")
      (("1" (split)
        (("1" (grind) nil nil)
         ("2" (expand in_varlist)
          (("2" (rewrite some_nth)
            (("1" (inst 1 0)
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((endi const-decl "T" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (domainValue? const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (in_varlist const-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (iexpr type-decl nil ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (some_nth formula-decl nil finseq_theorems nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil))
   nil
   (iapply_nstack subtype
    "S`length - 1 - vindex(list_adt[(ivar?)].car(args))"
    "below[S`length]")))
 (iapply_nstack_TCC13 0
  (iapply_nstack_TCC2-1 nil 3706965297 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (iexpr type-decl nil ireduction nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (in_varlist const-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (endi const-decl "T" ireduction nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (iapply_nstack subtype "args" "(cons?[(ivar?)])")))
 (applicationReduce_TCC1 0
  (applicationReduce_TCC1-1 nil 3706965297 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (applicationReduce subtype "s" "(iassign?)")))
 (applicationReduce_TCC2 0
  (applicationReduce_TCC4-1 nil 3706968128
   ("" (skeep* :preds? t)
    (("" (use istate_vars)
      (("" (split)
        (("1" (propax) nil nil) ("2" (propax) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil)
         ("6" (replace -6 :dir RL)
          (("6" (assert)
            (("6" (case "iassign?(s)")
              (("1" (assert)
                (("1" (expand vars)
                  (("1" (case "icall?(aexpr(s))")
                    (("1" (assert)
                      (("1" (expand vars +)
                        (("1" (rewrite some_nth)
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (iargs adt-accessor-decl "[(icall?) -> list[(ivar?)]]" ireduction
     nil)
    (PRED type-eq-decl nil defined_types nil)
    (icall? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (some_nth formula-decl nil finseq_theorems nil)
    (vars const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (applicationReduce subtype
    "vindex(list_props[iexpr].nth(iargs(aexpr(s)), i))"
    "below(iS`stack`length)")))
 (applicationReduce_TCC3 0
  (applicationReduce_TCC4-1 nil 3706965297 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (applicationReduce subtype "x" "(ivar?)")))
 (applicationReduce_TCC4 0
  (applicationReduce_TCC5-1 nil 3706965297 ("" (subtype-tcc) nil nil)
   ((endi const-decl "T" ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (applicationReduce subtype "x WITH [`vindex := vindex(x) + 1]"
    "(ivar?)")))
 (applicationReduce_TCC5 0
  (applicationReduce_TCC7-1 nil 3706968128
   ("" (skeep* :preds? t)
    (("" (split)
      (("1" (rewrite map_length) nil nil)
       ("2" (skeep)
        (("2" (expand in_varlist)
          (("2" (rewrite some_map)
            (("2" (expand o)
              (("2" (rewrite some_nth)
                (("2" (skeep)
                  (("2" (inst -6 "i_1")
                    (("2" (split)
                      (("1" (expand add)
                        (("1" (replace -1 :dir RL)
                          (("1" (assert)
                            (("1" (lemma istate_vars)
                              (("1"
                                (inst
                                 -1
                                 iS
                                 "vindex(nth(iargs(aexpr(s)), i_1))")
                                (("1"
                                  (split)
                                  (("1" (assert) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (grind) nil nil)
                                   ("4" (grind) nil nil)
                                   ("5" (grind) nil nil)
                                   ("6"
                                    (case "iassign?(s)")
                                    (("1"
                                      (case "icall?(aexpr(s))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand vars)
                                          (("1"
                                            (expand vars)
                                            (("1"
                                              (rewrite some_nth)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst 2 "i_1")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand endi)
                        (("2" (expand add)
                          (("2" (replace -1 :dir RL)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (iexpr type-decl nil ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (istat type-decl nil ireduction nil)
    (iargs adt-accessor-decl "[(icall?) -> list[(ivar?)]]" ireduction
     nil)
    (icall? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (map_length formula-decl nil more_map_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (in_varlist const-decl "bool" ireduction nil)
    (O const-decl "T3" function_props nil)
    (istate_vars formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (executable_stat? const-decl "bool" ireduction nil)
    (vars const-decl "bool" ireduction nil)
    (nth def-decl "T" list_props nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (some_nth formula-decl nil finseq_theorems nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (some_map formula-decl nil finseq_theorems nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (applicationReduce subtype
    "list_adt_map[(ivar?), (ivar?)].map(LAMBDA x: x WITH [`vindex := vindex(x) + 1])(iargs(aexpr(s)))"
    "{args: list[(ivar?)] | list_props[(ivar?)].length(args) = list_props[iexpr].length(iargs(aexpr(s))) AND FORALL i: in_varlist(args)(i) IMPLIES i < more_finseq[ivalue].add(vundef, iS`stack)`length AND domainValue?(iS`domain)(endi(more_finseq[ivalue].add(vundef, iS`stack), i))}")))
 (applicationReduce_TCC6 0
  (applicationReduce_TCC7-1 nil 3706965297
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (simplify)
        (("" (case-replace "x1 = iS`callstack`length")
          (("1" (expand add) (("1" (grind) nil nil)) nil)
           ("2" (expand add)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (typepred "iS`callstack`seq(x1)`ffct")
                  (("2" (typepred "iS`callstack`seq(x1)`fpc")
                    (("2" (typepred "iS`callstack`seq(x1)`fdepth")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (seq type-eq-decl nil more_finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (iexpr type-decl nil ireduction nil)
    (icall? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (ifun adt-accessor-decl "[(icall?) -> nat]" ireduction nil)
    (istat type-decl nil ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iargs adt-accessor-decl "[(icall?) -> list[(ivar?)]]" ireduction
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (Definition type-eq-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (applicationReduce subtype
    "more_finseq[[# fdepth: nonneg_int, ffct: nat, fpc: nat #]].add((# ffct := ifun(aexpr(s)), fpc := 0, fdepth := 1 + list_props[iexpr].length(iargs(aexpr(s))) #), iS`callstack)"
    "finseq[stack_frame(iS`defs)]")))
 (applicationReduce_TCC7 0
  (applicationReduce_TCC8-1 nil 3706965297
   ("" (skeep* :preds? t)
    (("" (split)
      (("1" (skeep* :preds? t)
        (("1" (case-replace "x1 = iS`callstack`length")
          (("1" (expand add) (("1" (grind) nil nil)) nil)
           ("2" (expand add)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (typepred "iS`callstack`seq(x1)`fpc")
                  (("2" (typepred "iS`callstack`seq(x1)`ffct")
                    (("2" (typepred "iS`callstack`seq(x1)`fdepth")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep :preds? t)
        (("2" (case-replace "i = iS`callstack`length - 1")
          (("1" (expand add)
            (("1" (expand is_fun_call_at)
              (("1" (split)
                (("1"
                  (typepred
                   "iS`callstack`seq(iS`callstack`length - 1)`fpc")
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil)
                 ("4" (grind) nil nil))
                nil))
              nil))
            nil)
           ("2" (expand add)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (typepred "iS`callstack")
                  (("2" (inst -1 i) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (seq type-eq-decl nil more_finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (iexpr type-decl nil ireduction nil)
    (icall? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (ifun adt-accessor-decl "[(icall?) -> nat]" ireduction nil)
    (istat type-decl nil ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iargs adt-accessor-decl "[(icall?) -> list[(ivar?)]]" ireduction
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (Definition type-eq-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_size_at_zero formula-decl nil ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (domainValue? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (applicationReduce subtype
    "more_finseq[[# fdepth: nonneg_int, ffct: nat, fpc: nat #]].add((# ffct := ifun(aexpr(s)), fpc := 0, fdepth := 1 + list_props[iexpr].length(iargs(aexpr(s))) #), iS`callstack)"
    "{C: finseq[stack_frame(iS`defs)] | FORALL (i: nat | i < C`length - 1): is_fun_call_at(iS`defs`seq(C`seq(i)`ffct)`body, C`seq(i)`fpc, C`seq(1 + i)`ffct)}")))
 (applicationReduce_TCC8 0
  (applicationReduce_TCC9-1 nil 3706965297
   ("" (skeep* :preds? t)
    (("" (lemma fdepth_sum_pop)
      (("" (inst? -1)
        ((""
          (inst -1 "add[[# fdepth: nonneg_int, ffct: nat, fpc: nat #]]
                       ((# ffct := ifun(aexpr(s)),
                           fpc := 0,
                           fdepth := 1 + length[iexpr](iargs(aexpr(s))) #),
                        iS`callstack)")
          (("" (rewrite -1)
            (("1" (expand add)
              (("1" (expand pop)
                (("1"
                  (typepred
                   "iapply_nstack(length(iargs(aexpr(s))), iS`domain,
                     iS`stack
                       WITH [`length := 1 + iS`stack`length,
                             `seq(iS`stack`length) := vundef],
                     map(LAMBDA x: x WITH [`vindex := 1 + vindex(x)])
                        (iargs(aexpr(s))),
                     iS`count)")
                  (("1" (typepred "iS`stack")
                    (("1"
                      (case-replace "(# length := iS`callstack`length,
                      seq
                        := LAMBDA (i: below(iS`callstack`length)):
                             iS`callstack`seq(i) #) = iS`callstack")
                      (("1" (grind) nil nil)
                       ("2" (decompose-equality)
                        (("2" (decompose-equality) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fdepth_sum_pop formula-decl nil ireduction nil)
    (seq type-eq-decl nil more_finseq nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (iexpr type-decl nil ireduction nil)
    (icall? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (ifun adt-accessor-decl "[(icall?) -> nat]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iargs adt-accessor-decl "[(icall?) -> list[(ivar?)]]" ireduction
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (vundef adt-constructor-decl "(vundef?)" ireduction nil)
    (vundef? adt-recognizer-decl "[ivalue -> boolean]" ireduction nil)
    (iapply_nstack def-decl
     "{S1, ((ncnt: [(dom) -> int])) | S1`length = S`length + arity}"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (in_varlist const-decl "bool" ireduction nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (applicationReduce subtype "nstack"
    "{S: Stack | S`length = 1 + fdepth_sum(iS`defs)(more_finseq[[# fdepth: nonneg_int, ffct: nat, fpc: nat #]].add((# ffct := ifun(aexpr(s)), fpc := 0, fdepth := 1 + list_props[iexpr].length(iargs(aexpr(s))) #), iS`callstack))}")))
 (applicationReduce_TCC9 0
  (applicationReduce_TCC2-1 nil 3706965297 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (applicationReduce subtype "aexpr(s)" "(icall?)")))
 (applicationReduce_TCC10 0
  (applicationReduce_TCC3-1 nil 3706965297
   ("" (skeep* :preds? t)
    (("" (typepred "iargs(aexpr(s))")
      (("" (rewrite every_nth) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (istat type-decl nil ireduction nil)
    (iargs adt-accessor-decl "[(icall?) -> list[(ivar?)]]" ireduction
     nil)
    (icall? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (iexpr type-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (every_nth formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (applicationReduce subtype "vindex(x)" "below(iS`stack`length)")))
 (lookupReduce_TCC1 0
  (lookupReduce_TCC1-1 nil 3709507090 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (lookupReduce subtype "ireduction.lf`fpc"
    "naturalnumbers.below(ireduction.slength(ireduction.fbody))")))
 (lookupReduce_TCC2 0
  (lookupReduce_TCC2-1 nil 3709507090 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (lookupReduce subtype "ireduction.s" "(ireduction.iassign?)")))
 (lookupReduce_TCC3 0
  (lookupReduce_TCC3-1 nil 3709507090 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype "ireduction.aexpr(ireduction.s)"
    "(ireduction.ilookup?)")))
 (lookupReduce_TCC4 0
  (lookupReduce_TCC4-1 nil 3709507090
   ("" (skeep* :preds? t)
    (("" (use istate_vars) (("" (grind) nil nil)) nil)) nil)
   ((istate_vars formula-decl nil ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (iaval adt-accessor-decl "[(ilookup?) -> (ivar?)]" ireduction nil)
    (ilookup? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vars const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype
    "ireduction.vindex(ireduction.iaval(ireduction.aexpr(ireduction.s)))"
    "naturalnumbers.below(ireduction.iS`stack`length)")))
 (lookupReduce_TCC5 0
  (lookupReduce_TCC5-1 nil 3709507090
   ("" (skeep* :preds? t)
    (("" (use istate_vars) (("" (grind) nil nil)) nil)) nil)
   ((istate_vars formula-decl nil ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (ipos adt-accessor-decl "[(ilookup?) -> (ivar?)]" ireduction nil)
    (ilookup? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vars const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype
    "ireduction.vindex(ireduction.ipos(ireduction.aexpr(ireduction.s)))"
    "naturalnumbers.below(ireduction.iS`stack`length)")))
 (lookupReduce_TCC6 0
  (lookupReduce_TCC6-1 nil 3709507090 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (lookupReduce subtype "ireduction.vvalue(ireduction.pos)"
    "below[iS`store(vrefindex(aval))`length]")))
 (lookupReduce_TCC7 0
  (lookupReduce_TCC7-1 nil 3709507090
   ("" (skeep* :preds? t) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (lookupReduce_TCC8 0
  (lookupReduce_TCC8-1 nil 3709507090
   ("" (skeep* :preds? t) (("" (assert) (("" (grind) nil nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (lookupReduce_TCC9 0
  (lookupReduce_TCC9-1 nil 3709507090
   ("" (skeep* :preds? t)
    (("" (hide 2)
      (("" (expand get_frame_body)
        (("" (expand endi)
          (("" (replace -3 :dir RL)
            (("" (rewrite stack_size_at_next_pc)
              (("1"
                (typepred
                 "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
                (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (lookupReduce_TCC10 0
  (lookupReduce_TCC10-1 nil 3709507090 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (lookupReduce subtype "ireduction.vrefindex(ireduction.value)"
    "(ireduction.iS`domain)")))
 (lookupReduce_TCC11 0
  (lookupReduce_TCC11-1 nil 3709507090
   ("" (skeep* :preds? t)
    (("" (lemma istate_vars)
      (("" (inst -1 iS "vindex(avar(s))")
        (("" (split -1)
          (("1" (assert) nil nil) ("2" (propax) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil) ("6" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (vars const-decl "bool" ireduction nil)
    (avar adt-accessor-decl "[(iassign?) -> (ivar?)]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))"
    "below[iS`stack`length]")))
 (lookupReduce_TCC12 0
  (lookupReduce_TCC12-1 nil 3709507090 ("" (grind) nil nil)
   ((endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (lookupReduce_TCC13 0
  (lookupReduce_TCC13-1 nil 3709507090 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (lookupReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (lookupReduce_TCC14 0
  (lookupReduce_TCC14-1 nil 3709507090
   ("" (skeep* :preds? t)
    (("" (hide 3)
      (("" (expand get_frame_body)
        (("" (expand endi)
          (("" (replace -3 :dir RL)
            (("" (rewrite stack_size_at_next_pc)
              (("1"
                (typepred
                 "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
                (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (lookupReduce_TCC15 0
  (lookupReduce_TCC15-1 nil 3709507090
   ("" (skeep* :preds? t)
    (("" (lemma istate_vars)
      (("" (inst -1 iS "vindex(avar(s))")
        (("" (split -1)
          (("1" (grind) nil nil) ("2" (propax) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil) ("6" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (vars const-decl "bool" ireduction nil)
    (avar adt-accessor-decl "[(iassign?) -> (ivar?)]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))"
    "below[iS`stack`length]")))
 (lookupReduce_TCC16 0
  (lookupReduce_TCC16-1 nil 3709507090
   ("" (skeep* :preds? t)
    (("" (replace -16 +) (("" (assert) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype "ireduction.vrefindex(ireduction.aval)"
    "(ireduction.niS`domain)")))
 (lookupReduce_TCC17 0
  (lookupReduce_TCC17-1 nil 3709507090
   ("" (skeep* :preds? t)
    (("" (replace -16 +)
      (("" (assert)
        (("" (assert)
          (("" (lemma istate_vars)
            (("" (inst -1 iS "vindex(iaval(aexpr(s)))")
              (("" (split -1)
                (("1" (grind) nil nil) ("2" (propax) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil) ("6" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ilookup? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iaval adt-accessor-decl "[(ilookup?) -> (ivar?)]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (vars const-decl "bool" ireduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (istate_vars formula-decl nil ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.iaval(ireduction.aexpr(ireduction.s))))"
    "below[niS`stack`length]")))
 (lookupReduce_TCC18 0
  (lookupReduce_TCC18-1 nil 3709507090
   ("" (skeep* :preds? t)
    (("" (replace -16) (("" (assert) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lookupReduce subtype
    "ireduction.iS`store(ireduction.vrefindex(ireduction.aval))`length"
    "naturalnumbers.upto(ireduction.niS`store(ireduction.vrefindex(ireduction.aval))`length)")))
 (maybe_clear_stack_at_TCC1 0
  (maybe_clear_stack_at_TCC1-1 nil 3709576478
   ("" (subtype-tcc) nil nil) nil nil
   (maybe_clear_stack_at subtype "ireduction.vindex(ireduction.x)"
    "naturalnumbers.below(ireduction.S`length)")))
 (maybe_clear_stack_at_TCC2 0
  (maybe_clear_stack_at_TCC2-1 nil 3709576478
   ("" (subtype-tcc) nil nil) nil nil
   (maybe_clear_stack_at subtype
    "(number_fields.-)((number_fields.-)(ireduction.S`length, ireduction.vindex(ireduction.x)), 1)"
    "below[S`length]")))
 (update_store_TCC1 0
  (update_store_TCC1-1 nil 3709576478 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (domainValue? const-decl "bool" ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Store type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ivalue type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (update_store subtype "ireduction.vrefindex(ireduction.v)"
    "(ireduction.dom)")))
 (updateReduce_TCC1 0
  (updateReduce_TCC1-1 nil 3709576478 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (updateReduce subtype "ireduction.lf`fpc"
    "naturalnumbers.below(ireduction.slength(ireduction.fbody))")))
 (updateReduce_TCC2 0
  (updateReduce_TCC2-1 nil 3709576478 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (updateReduce subtype "ireduction.s" "(ireduction.iassign?)")))
 (updateReduce_TCC3 0
  (updateReduce_TCC3-1 nil 3709576478 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (updateReduce subtype "ireduction.aexpr(ireduction.s)"
    "(ireduction.iupdate?)")))
 (updateReduce_TCC4 0
  (updateReduce_TCC4-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (use istate_vars) (("" (grind) nil nil)) nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (vars const-decl "bool" ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (iupdate? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (itarget adt-accessor-decl "[(iupdate?) -> (ivar?)]" ireduction
     nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (istate_vars formula-decl nil ireduction nil))
   nil
   (updateReduce subtype
    "ireduction.vindex(ireduction.itarget(ireduction.aexpr(ireduction.s)))"
    "naturalnumbers.below(ireduction.iS`stack`length)")))
 (updateReduce_TCC5 0
  (updateReduce_TCC5-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (use istate_vars) (("" (grind) nil nil)) nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (vars const-decl "bool" ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (iupdate? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (ilhs adt-accessor-decl "[(iupdate?) -> (ivar?)]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (istate_vars formula-decl nil ireduction nil))
   nil
   (updateReduce subtype
    "ireduction.vindex(ireduction.ilhs(ireduction.aexpr(ireduction.s)))"
    "naturalnumbers.below(ireduction.iS`stack`length)")))
 (updateReduce_TCC6 0
  (updateReduce_TCC6-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (use istate_vars) (("" (grind) nil nil)) nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (vars const-decl "bool" ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (iupdate? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (irhs adt-accessor-decl "[(iupdate?) -> (ivar?)]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (istate_vars formula-decl nil ireduction nil))
   nil
   (updateReduce subtype
    "ireduction.vindex(ireduction.irhs(ireduction.aexpr(ireduction.s)))"
    "naturalnumbers.below(ireduction.iS`stack`length)")))
 (updateReduce_TCC7 0
  (updateReduce_TCC7-1 nil 3709576478 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (add const-decl "(nonempty?)" sets nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil))
   nil
   (updateReduce subtype "ireduction.newref"
    "(sets[naturalnumbers.nat].add(ireduction.newref, ireduction.iS`domain))")))
 (updateReduce_TCC8 0
  (updateReduce_TCC8-1 nil 3709576478 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (updateReduce subtype "ireduction.nstore"
    "ireduction.Store(sets[naturalnumbers.nat].add(ireduction.newref, ireduction.iS`domain))")))
 (updateReduce_TCC9 0
  (updateReduce_TCC17-1 nil 3709576478 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (updateReduce subtype "ireduction.vvalue(ireduction.lval)"
    "below[iS`store(vrefindex(aval))`length]")))
 (updateReduce_TCC10 0
  (updateReduce_TCC11-1 nil 3709576478 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (updateReduce subtype "ireduction.rval"
    "(ireduction.domainValue?(sets[naturalnumbers.nat].add(ireduction.newref, ireduction.iS`domain)))")))
 (updateReduce_TCC11 0
  (updateReduce_TCC12-1 nil 3709576478 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (update_store const-decl "[Store(dom), [(dom) -> int]]" ireduction
     nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (domainValue? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (endi const-decl "T" ireduction nil))
   nil
   (updateReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (updateReduce_TCC12 0
  (updateReduce_TCC13-1 nil 3709576478 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (update_store const-decl "[Store(dom), [(dom) -> int]]" ireduction
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (updateReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (updateReduce_TCC13 0
  (updateReduce_TCC14-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (hide 3)
      (("" (expand get_frame_body)
        (("" (expand endi)
          (("" (replace -3 :dir RL)
            (("" (rewrite stack_size_at_next_pc)
              (("1"
                (typepred
                 "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
                (("1" (split -1)
                  (("1" (assert) nil nil) ("2" (grind) nil nil)) nil))
                nil)
               ("2" (grind) nil nil)
               ("3" (hide-all-but (-1 -2 -3 -4 -5))
                (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (updateReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (updateReduce_TCC14 0
  (updateReduce_TCC15-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (lemma istate_vars)
      (("" (inst -1 iS "vindex(avar(s))")
        (("" (split -1)
          (("1" (expand maybe_clear_stack_at)
            (("1" (assert)
              (("1" (assert)
                (("1" (replace*)
                  (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil)
           ("3" (hide-all-but (-1 -3)) (("3" (grind) nil nil)) nil)
           ("4" (hide-all-but (-1 -3)) (("4" (grind) nil nil)) nil)
           ("5" (hide-all-but (-1 -3)) (("5" (grind) nil nil)) nil)
           ("6" (hide-all-but (-1 -2 -3 -4 -5 1))
            (("6" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (vars const-decl "bool" ireduction nil)
    (avar adt-accessor-decl "[(iassign?) -> (ivar?)]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (updateReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))"
    "below[nnstack`length]")))
 (updateReduce_TCC15 0
  (updateReduce_TCC16-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (rewrite fdepth_sum_pop)
        (("1" (typepred "iS`stack")
          (("1" (rewrite fdepth_sum_pop)
            (("1" (case-replace "nnstack`length = iS`stack`length")
              (("1" (expand pop) (("1" (propax) nil nil)) nil)
               ("2" (replace*)
                (("2" (assert)
                  (("2" (assert)
                    (("2" (expand maybe_clear_stack_at)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand get_frame_body)
            (("2" (expand endi)
              (("2" (replace -3 :dir RL)
                (("2" (rewrite stack_size_at_next_pc)
                  (("1"
                    (typepred
                     "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
                    (("1" (split -1)
                      (("1" (assert) nil nil)
                       ("2" (hide-all-but (-1 -2 -3 -4 -5))
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 -2 -3 -4 -5 1))
                    (("2" (grind) nil nil)) nil)
                   ("3" (hide-all-but (-1 -2 -3 -4 -5))
                    (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand get_frame_body)
          (("3" (expand endi)
            (("3" (replace -3 :dir RL) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (updateReduce subtype
    "ireduction.nnstack WITH [`seq((number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))) := ireduction.vref(ireduction.newref)]"
    "{S: ireduction.Stack | S`length = (number_fields.+)(1, ireduction.fdepth_sum(ireduction.iS`defs)(ireduction.iS`callstack WITH [`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fpc := ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)]))}")))
 (updateReduce_TCC16 0
  (updateReduce_TCC10-1 nil 3709576478 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (updateReduce subtype "ireduction.vvalue(ireduction.aval)"
    "naturalnumbers.below(ireduction.nstore(ireduction.newref)`length)")))
 (updateReduce_TCC17 0
  (updateReduce_TCC18-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (lemma istate_vars)
      (("" (inst -1 "iS" "vindex(itarget(aexpr(s)))")
        (("" (split -1)
          (("1" (expand maybe_clear_stack_at)
            (("1" (replace*)
              (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (propax) nil nil)
           ("3" (hide-all-but (-1 -3)) (("3" (grind) nil nil)) nil)
           ("4" (hide-all-but (-1 -3)) (("4" (grind) nil nil)) nil)
           ("5" (hide-all-but (-1 -3)) (("5" (grind) nil nil)) nil)
           ("6" (hide-all-but (1 -1 -2 -3 -4 -5))
            (("6" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (vars const-decl "bool" ireduction nil)
    (aexpr adt-accessor-decl "[(iassign?) -> iexpr]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (itarget adt-accessor-decl "[(iupdate?) -> (ivar?)]" ireduction
     nil)
    (iupdate? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (updateReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.itarget(ireduction.aexpr(ireduction.s))))"
    "below[nstack`length]")))
 (updateReduce_TCC18 0
  (updateReduce_TCC19-1 nil 3709576478 ("" (grind) nil nil)
   ((endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (update_store const-decl "[Store(dom), [(dom) -> int]]" ireduction
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (updateReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (updateReduce_TCC19 0
  (updateReduce_TCC20-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (expand get_frame_body)
      (("" (expand endi)
        (("" (replace -3 :dir RL) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (updateReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (updateReduce_TCC20 0
  (updateReduce_TCC21-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (expand get_frame_body)
      (("" (expand endi)
        (("" (replace -3 :dir RL)
          (("" (rewrite stack_size_at_next_pc)
            (("1"
              (typepred
               "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
              (("1" (split -1)
                (("1" (assert) nil nil)
                 ("2" (hide-all-but (-1 -2 -3 -4 -5))
                  (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 -2 -3 -4 -5 1))
              (("2" (grind) nil nil)) nil)
             ("3" (hide-all-but (-1 -2 -3 -4 -5))
              (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (endi const-decl "T" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (updateReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (updateReduce_TCC21 0
  (updateReduce_TCC22-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (lemma istate_vars)
      (("" (inst -1 iS "vindex(avar(s))")
        (("" (split -1)
          (("1" (expand maybe_clear_stack_at)
            (("1" (replace*)
              (("1" (assert)
                (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (propax) nil nil)
           ("3" (hide-all-but (-1 -3)) (("3" (grind) nil nil)) nil)
           ("4" (hide-all-but (-1 -3)) (("4" (grind) nil nil)) nil)
           ("5" (hide-all-but (-1 -3)) (("5" (grind) nil nil)) nil)
           ("6" (hide-all-but (-1 -2 -3 -4 -5 1))
            (("6" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (vars const-decl "bool" ireduction nil)
    (avar adt-accessor-decl "[(iassign?) -> (ivar?)]" ireduction nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (istat type-decl nil ireduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (updateReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))"
    "below[nnstack`length]")))
 (updateReduce_TCC22 0
  (updateReduce_TCC23-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (case-replace "nnstack`length = iS`stack`length")
        (("1" (rewrite fdepth_sum_pop)
          (("1" (typepred "iS`stack")
            (("1" (rewrite fdepth_sum_pop)
              (("1" (expand pop) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (expand get_frame_body)
              (("2" (expand endi)
                (("2" (replace -4 :dir RL)
                  (("2" (rewrite stack_size_at_next_pc)
                    (("1"
                      (typepred
                       "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
                      (("1" (split -1)
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but (-1 -2 -3 -4 -5))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -2 -3 -4 -5 1))
                      (("2" (grind) nil nil)) nil)
                     ("3" (hide-all-but (-1 -2 -3 -4 -5))
                      (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand get_frame_body)
            (("3" (expand endi)
              (("3" (replace -4 :dir RL) (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (replace*)
          (("2" (expand maybe_clear_stack_at)
            (("2" (assert) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (next_pc def-decl "upto(slength(s))" ireduction nil)
    (fdepth_sum_pop formula-decl nil ireduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pop const-decl "finseq[T]" ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (endi const-decl "T" ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (istat type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (updateReduce subtype
    "ireduction.nnstack WITH [`seq((number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))) := ireduction.aval]"
    "{S: ireduction.Stack | S`length = (number_fields.+)(1, ireduction.fdepth_sum(ireduction.iS`defs)(ireduction.iS`callstack WITH [`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fpc := ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)]))}")))
 (updateReduce_TCC23 0
  (updateReduce_TCC24-1 nil 3709576478
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (update_store const-decl "[Store(dom), [(dom) -> int]]" ireduction
     nil)
    (maybe_clear_stack_at const-decl "[Stack, [(dom) -> int]]"
     ireduction nil)
    (domainValue? const-decl "bool" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (updateReduce subtype "ireduction.vrefindex(ireduction.oldvalue)"
    "(ireduction.niS`domain)")))
 (updateReduce_TCC24 0
  (updateReduce_TCC25-1 nil 3709576478
   ("" (skeep* :preds? t)
    (("" (replace -24)
      (("" (assert)
        (("" (replace -21)
          (("" (expand update_store)
            (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((update_store const-decl "[Store(dom), [(dom) -> int]]" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (updateReduce subtype
    "ireduction.iS`store(ireduction.vrefindex(ireduction.oldvalue))`length"
    "naturalnumbers.upto(ireduction.niS`store(ireduction.vrefindex(ireduction.oldvalue))`length)")))
 (newintReduce_TCC1 0
  (newintReduce_TCC1-1 nil 3709490816
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (newintRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (newintReduce subtype "ireduction.lf`fpc"
    "naturalnumbers.below(ireduction.slength(ireduction.fbody))")))
 (newintReduce_TCC2 0
  (newintReduce_TCC2-1 nil 3709490816
   ("" (skeep* :preds? t) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (newintReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (newintReduce_TCC3 0
  (newintReduce_TCC3-1 nil 3709490816
   ("" (skeep* :preds? t) (("" (assert) (("" (grind) nil nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (newintRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (newintReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (newintReduce_TCC4 0
  (newintReduce_TCC4-1 nil 3709490816
   ("" (skeep* :preds? t)
    (("" (expand get_frame_body)
      (("" (expand endi)
        (("" (replace -3 :dir RL)
          (("" (rewrite stack_size_at_next_pc)
            (("1"
              (typepred
               "iS`callstack`seq(iS`callstack`length - 1)`fdepth")
              (("1" (split -1)
                (("1" (assert) nil nil) ("2" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (next_pc_pos rec-application-judgement "posnat" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (newintRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (istat type-decl nil ireduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (stack_size_at_next_pc formula-decl nil ireduction nil)
    (endi const-decl "T" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (newintReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (newintReduce_TCC5 0
  (newintReduce_TCC5-1 nil 3709490816 ("" (grind) nil nil)
   ((endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (add const-decl "(nonempty?)" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (newintReduce subtype "ireduction.r"
    "(sets[naturalnumbers.nat].add(ireduction.r, ireduction.iS`domain))")))
 (newintReduce_TCC6 0
  (newintReduce_TCC6-1 nil 3709490816 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (newintRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (newintReduce subtype "ireduction.s" "(ireduction.iassign?)")))
 (newintReduce_TCC7 0
  (newintReduce_TCC7-1 nil 3709490816
   ("" (skeep* :preds? t)
    (("" (lemma istate_vars)
      (("" (inst -1 iS "vindex(avar(s))")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((istate_vars formula-decl nil ireduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (endi const-decl "T" ireduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (popRedex? const-decl "bool" ireduction nil)
    (vars const-decl "bool" ireduction nil)
    (avar adt-accessor-decl "[(iassign?) -> (ivar?)]" ireduction nil)
    (vindex adt-accessor-decl "[(ivar?) -> nat]" ireduction nil)
    (ivar? adt-recognizer-decl "[iexpr -> boolean]" ireduction nil)
    (iexpr type-decl nil ireduction nil)
    (newintRedex? const-decl "bool" ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (ivalue type-decl nil ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (slength def-decl "posnat" ireduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Definition type-eq-decl nil ireduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" ireduction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (iassign? adt-recognizer-decl "[istat -> boolean]" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (newintReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))"
    "below[iS`stack`length]")))
 (newintReduce_TCC8 0
  (newintReduce_TCC8-1 nil 3709490816 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (newintRedex? const-decl "bool" ireduction nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (endi const-decl "T" ireduction nil)
    (get_frame_body const-decl "[stack_frame(iS`defs), istat]"
     ireduction nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (newintReduce subtype "ireduction.aexpr(ireduction.s)"
    "{x: ireduction.iexpr | booleans.OR(ireduction.inewint?(x), ireduction.inewref?(x))}")))
 (newrefReduce_TCC1 0
  (newrefReduce_TCC1-1 nil 3709507090 ("" (subtype-tcc) nil nil) nil
   nil
   (newrefReduce subtype "ireduction.lf`fpc"
    "naturalnumbers.below(ireduction.slength(ireduction.fbody))")))
 (newrefReduce_TCC2 0
  (newrefReduce_TCC2-1 nil 3709507090 ("" (subtype-tcc) nil nil) nil
   nil
   (newrefReduce subtype
    "(number_fields.-)(ireduction.iS`callstack`length, 1)"
    "below[iS`callstack`length]")))
 (newrefReduce_TCC3 0
  (newrefReduce_TCC3-1 nil 3709507090 ("" (subtype-tcc) nil nil) nil
   nil
   (newrefReduce subtype
    "ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc)"
    "naturalnumbers.upto(ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body))")))
 (newrefReduce_TCC4 0
  (newrefReduce_TCC4-1 nil 3709507090 ("" (subtype-tcc) nil nil) nil
   nil
   (newrefReduce subtype
    "ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`fdepth"
    "{k: naturalnumbers.nat | booleans.OR(k = (number_fields.+)((number_fields.+)(1, ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`arity), ireduction.stack_size_at(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body, ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc))), (booleans.AND(ireduction.next_pc(ireduction.fbody, ireduction.lf`fpc) = ireduction.slength(ireduction.iS`defs`seq(ireduction.iS`callstack`seq((number_fields.-)(ireduction.iS`callstack`length, 1))`ffct)`body), reals.>=(k, 1))))}")))
 (newrefReduce_TCC5 0
  (newrefReduce_TCC5-1 nil 3709507090 ("" (subtype-tcc) nil nil) nil
   nil
   (newrefReduce subtype "ireduction.r"
    "(sets[naturalnumbers.nat].add(ireduction.r, ireduction.iS`domain))")))
 (newrefReduce_TCC6 0
  (newrefReduce_TCC6-1 nil 3709507090 ("" (subtype-tcc) nil nil) nil
   nil (newrefReduce subtype "ireduction.s" "(ireduction.iassign?)")))
 (newrefReduce_TCC7 0
  (newrefReduce_TCC7-1 nil 3709507090 ("" (subtype-tcc) nil nil) nil
   nil
   (newrefReduce subtype
    "(number_fields.-)((number_fields.-)(ireduction.iS`stack`length, 1), ireduction.vindex(ireduction.avar(ireduction.s)))"
    "below[iS`stack`length]")))
 (newrefReduce_TCC8 0
  (newrefReduce_TCC8-1 nil 3709507090 ("" (subtype-tcc) nil nil) nil
   nil
   (newrefReduce subtype "ireduction.aexpr(ireduction.s)"
    "{x: ireduction.iexpr | booleans.OR(ireduction.inewint?(x), ireduction.inewref?(x))}")))
 (reduce_TCC1 0
  (reduce_TCC1-1 nil 3706880775 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (reduce subtype "iS" "{iS | iS`callstack`length > 0}")))
 (reduce_TCC2 0
  (reduce_TCC6-1 nil 3707142439 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND skipRedex?(iS)}")))
 (reduce_TCC3 0
  (reduce_TCC6-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND releaseRedex?(iS)}")))
 (reduce_TCC4 0
  (reduce_TCC7-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND variableRedex?(iS)}")))
 (reduce_TCC5 0
  (reduce_TCC8-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND valueRedex?(iS)}")))
 (reduce_TCC6 0
  (reduce_TCC9-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND applicationRedex?(iS)}")))
 (reduce_TCC7 0
  (reduce_TCC10-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND lookupRedex?(iS)}")))
 (reduce_TCC8 0
  (reduce_TCC11-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND updateRedex?(iS)}")))
 (reduce_TCC9 0
  (reduce_TCC12-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (newintRedex? const-decl "bool" ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND newintRedex?(iS)}")))
 (reduce_TCC10 0
  (reduce_TCC13-1 nil 3706883292 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (newrefRedex? const-decl "bool" ireduction nil)
    (newintRedex? const-decl "bool" ireduction nil)
    (updateRedex? const-decl "bool" ireduction nil)
    (lookupRedex? const-decl "bool" ireduction nil)
    (applicationRedex? const-decl "bool" ireduction nil)
    (valueRedex? const-decl "bool" ireduction nil)
    (variableRedex? const-decl "bool" ireduction nil)
    (releaseRedex? const-decl "bool" ireduction nil)
    (skipRedex? const-decl "bool" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND newrefRedex?(iS)}")))
 (reduce_TCC11 0
  (reduce_TCC2-1 nil 3706880775 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND pushRedex?(iS)}")))
 (reduce_TCC12 0
  (reduce_TCC3-1 nil 3706880775 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND popRedex?(iS)}")))
 (reduce_TCC13 0
  (reduce_TCC4-1 nil 3706880775 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (endi const-decl "T" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND ifRedex?(iS)}")))
 (reduce_TCC14 0
  (reduce_TCC5-1 nil 3706880775 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (istat type-decl nil ireduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vars def-decl "bool" ireduction nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Definition type-eq-decl nil ireduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slength def-decl "posnat" ireduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (stack_size_at def-decl "nat" ireduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stack_frame type-eq-decl nil ireduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_fun_call_at const-decl "bool" ireduction nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ivalue type-decl nil ireduction nil)
    (Stack type-eq-decl nil ireduction nil)
    (fdepth_sum const-decl "nat" ireduction nil)
    (Store type-eq-decl nil ireduction nil)
    (istate type-eq-decl nil ireduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_extract_stat const-decl
     "{s1, j | j < slength(s1) AND executable_stat?(s1, j)}" ireduction
     nil)
    (endi const-decl "T" ireduction nil)
    (returnRedex? const-decl "bool" ireduction nil)
    (ifRedex? const-decl "bool" ireduction nil)
    (popRedex? const-decl "bool" ireduction nil)
    (pushRedex? const-decl "bool" ireduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (reduce subtype "iS"
     "{iS | iS`callstack`length > 0 AND returnRedex?(iS)}"))))

