(finseq_theorems
 (every_append 0
  (every_append-1 nil 3650212009
   ("" (skeep)
    (("" (expand "every")
      (("" (iff)
        (("" (ground)
          (("1" (lazy-grind) nil nil)
           ("2" (skeep)
            (("2" (inst - "i + length(S1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil)
           ("3" (skeep)
            (("3" (inst - "i")
              (("1" (grind :if-match nil)
                (("1" (inst - "i - S1`length") nil nil)) nil)
               ("2" (inst - "i - S1`length")
                (("1" (grind) nil nil)
                 ("2" (typepred "i") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every const-decl "bool" finseq_theorems nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (S1 skolem-const-decl "finseq[T]" finseq_theorems nil)
    (i!1 skolem-const-decl "below(S1`length)" finseq_theorems nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (S2 skolem-const-decl "finseq[T]" finseq_theorems nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_theorems nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (O const-decl "finseq" finite_sequences nil)
    (i skolem-const-decl "below(S2`length)" finseq_theorems nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (i skolem-const-decl "below((S1 o S2)`length)" finseq_theorems nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (every_map 0
  (every_map-1 nil 3650212793 ("" (induct-and-simplify "L") nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T2 decl-formal-type nil finseq_theorems nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (T formal-type-decl nil finseq_theorems nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (count_TCC1 0
  (count_TCC1-1 nil 3650472537 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (count termination
          "finseq_theorems.count(finseq_theorems.P, finseq_theorems.L1)"
     "nil")))
 (count_TCC2 0
  (count_TCC2-1 nil 3650472537 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (count termination
          "finseq_theorems.count(finseq_theorems.P, finseq_theorems.L1)"
     "nil")))
 (count_append 0
  (count_append-1 nil 3676393535
   ("" (induct-and-simplify "L1") nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (count def-decl "nat" finseq_theorems nil)
    (append def-decl "list[T]" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil finseq_theorems nil)
    (list_induction formula-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (head_TCC1 0
  (head_TCC1-1 nil 3676433703 ("" (subtype-tcc) nil nil) nil nil
   (head subtype "(number_fields.-)(finseq_theorems.nS`length, 1)"
    "below[nS`length]")))
 (head_compose_TCC1 0
  (head_compose_TCC1-1 nil 3676435597 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (nonempty_fs type-eq-decl nil finseq_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (head_compose subtype
    "finite_sequences[finseq_theorems.T].o(finseq_theorems.S, finseq_theorems.nS)"
    "nonempty_fs")))
 (head_compose 0
  (head_compose-1 nil 3676435599 ("" (grind) nil nil)
   ((O const-decl "finseq" finite_sequences nil)
    (head const-decl "T" finseq_theorems nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (tail_TCC1 0
  (tail_TCC1-1 nil 3676433703 ("" (subtype-tcc) nil nil) nil nil
   (tail subtype "(number_fields.-)(finseq_theorems.nS`length, 1)"
    "nat")))
 (tail_TCC2 0
  (tail_TCC2-1 nil 3676433703 ("" (subtype-tcc) nil nil) nil nil
   (tail subtype "finseq_theorems.i" "below[nS`length]")))
 (tail_compose 0
  (tail_compose-1 nil 3676435630 ("" (grind) nil nil)
   ((O const-decl "finseq" finite_sequences nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (lsplit_TCC1 0
  (lsplit_TCC1-1 nil 3685184527 ("" (subtype-tcc) nil nil) nil nil
   (lsplit subtype "finseq_theorems.j" "below[length(S)]")))
 (rsplit_TCC1 0
  (rsplit_TCC1-1 nil 3685184527 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (rsplit subtype "finseq_theorems.newlen" "nat")))
 (rsplit_TCC2 0
  (rsplit_TCC2-1 nil 3685184527 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (rsplit subtype
    "(number_fields.+)(finseq_theorems.i, finseq_theorems.j)"
    "below[length(S)]")))
 (recompose 0
  (recompose-1 nil 3685184529 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (lsplit const-decl "finseq[T]" finseq_theorems nil)
    (rsplit const-decl "finseq[T]" finseq_theorems nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (finseqtolist_TCC1 0
  (finseqtolist_TCC1-1 nil 3676433703 ("" (subtype-tcc) nil nil)
   ((tail const-decl "finseq[T]" finseq_theorems nil)) nil
   (finseqtolist termination
    "finseq_theorems.finseqtolist(finseq_theorems.tail(finseq_theorems.S))"
    "nil")))
 (head_add_TCC1 0
  (head_add_TCC1-1 nil 3684415061 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add const-decl "finseq[T]" more_finseq nil))
   nil
   (head_add subtype
    "more_finseq[finseq_theorems.T].add(finseq_theorems.x, finseq_theorems.S)"
    "nonempty_fs")))
 (head_add 0
  (head_add-1 nil 3684415063 ("" (grind) nil nil)
   ((add const-decl "finseq[T]" more_finseq nil)
    (head const-decl "T" finseq_theorems nil))
   shostak))
 (tail_add 0
  (tail_add-1 nil 3684415069
   ("" (grind)
    (("" (apply-extensionality)
      (("" (hide 2) (("" (apply-extensionality) nil nil)) nil)) nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (add const-decl "finseq[T]" more_finseq nil))
   shostak))
 (add_head_tail 0
  (add_head_tail-1 nil 3684267115
   ("" (grind)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (apply-extensionality)
          (("1" (extensionality "[below(nS!1`length - 1) -> T]")
            (("1" (extensionality "[below(nS!1`length) -> T]")
              (("1" (inst?)
                (("1" (ground)
                  (("1" (hide 2) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nS!1 skolem-const-decl "nonempty_fs" finseq_theorems nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (nonempty_fs type-eq-decl nil finseq_theorems nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (head const-decl "T" finseq_theorems nil))
   shostak))
 (head_update_TCC1 0
  (head_update_TCC1-1 nil 3684270767 ("" (subtype-tcc) nil nil) nil nil
   (head_update subtype
    "finseq_theorems.nS WITH [`seq(finseq_theorems.i) := finseq_theorems.x]"
    "nonempty_fs")))
 (head_update 0
  (head_update-1 nil 3684270769 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (nonempty_fs type-eq-decl nil finseq_theorems nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (head const-decl "T" finseq_theorems nil))
   shostak))
 (tail_update_TCC1 0
  (tail_update_TCC1-1 nil 3684270841 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (nonempty_fs type-eq-decl nil finseq_theorems nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tail const-decl "finseq[T]" finseq_theorems nil))
   nil
   (tail_update subtype "finseq_theorems.i" "below[tail(nS)`length]")))
 (tail_update 0
  (tail_update-1 nil 3684270843
   ("" (grind)
    (("" (apply-extensionality 2 :hide? t)
      (("" (apply-extensionality 1 :hide? t) (("" (grind) nil nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (nonempty_fs type-eq-decl nil finseq_theorems nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (tail const-decl "finseq[T]" finseq_theorems nil))
   shostak))
 (count_decompose 0
  (count_decompose-1 nil 3684271101 ("" (grind) nil nil)
   ((head const-decl "T" finseq_theorems nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (count def-decl "nat" finseq_theorems nil)
    (count const-decl "nat" finseq_theorems nil))
   shostak))
 (count_add 0
  (count_add-1 nil 3684272897
   ("" (skeep)
    (("" (rewrite "count_decompose")
      (("1" (rewrite "head_add")
        (("1" (lift-if)
          (("1" (ground)
            (("1" (rewrite "tail_add") nil nil)
             ("2" (rewrite "tail_add") nil nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_decompose formula-decl nil finseq_theorems nil)
    (T formal-type-decl nil finseq_theorems nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nonempty_fs type-eq-decl nil finseq_theorems nil)
    (seq type-eq-decl nil more_finseq nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (tail_add formula-decl nil finseq_theorems nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (head_add formula-decl nil finseq_theorems nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (finseq_induct 0
  (finseq_induct-1 nil 3684271527
   ("" (skeep*)
    (("" (case "FORALL l, S:  length(S) = l IMPLIES Q(S)")
      (("1" (inst - "S`length" "S") nil nil)
       ("2" (induct "l")
        (("1" (skeep)
          (("1" (case-replace "S!1 = empty_seq")
            (("1" (hide-all-but (-1 1))
              (("1" (grind-with-ext) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep*)
          (("2" (inst - "tail(S!1)")
            (("1" (inst - "head(S!1)" "tail(S!1)")
              (("1" (rewrite "add_head_tail") (("1" (grind) nil nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_theorems nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (head const-decl "T" finseq_theorems nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add_head_tail formula-decl nil finseq_theorems nil)
    (nonempty_fs type-eq-decl nil finseq_theorems nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (S!1 skolem-const-decl "finseq[T]" finseq_theorems nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (epsilon const-decl "T" epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (nat_induction formula-decl nil naturalnumbers nil))
   shostak))
 (count_update 0
  (count_update-1 nil 3684263738
   ("" (induct "S" 1 "finseq_induct")
    (("1" (lazy-grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep*)
      (("3" (rewrite "count_decompose")
        (("3" (lift-if)
          (("3" (ground)
            (("1" (rewrite "tail_update")
              (("1" (rewrite "tail_add")
                (("1" (rewrite "count_add")
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (expand "add" +)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (inst?)
                        (("1" (grind) nil nil)
                         ("2" (hide 3)
                          (("2" (typepred "i") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "count_add")
              (("2" (rewrite "head_update")
                (("2" (rewrite "tail_update")
                  (("2" (lift-if)
                    (("2" (ground)
                      (("1" (rewrite "tail_add")
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (rewrite "tail_add")
                        (("2" (rewrite "head_add")
                          (("2" (inst?)
                            (("1" (grind) nil nil)
                             ("2" (typepred "i")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((head_add formula-decl nil finseq_theorems nil)
    (head_update formula-decl nil finseq_theorems nil)
    (tail_update formula-decl nil finseq_theorems nil)
    (count_add formula-decl nil finseq_theorems nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(add(x_1, S_1)`length)" finseq_theorems
       nil)
    (S_1 skolem-const-decl "finseq[T]" finseq_theorems nil)
    (x_1 skolem-const-decl "T" finseq_theorems nil)
    (tail_add formula-decl nil finseq_theorems nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (count_decompose formula-decl nil finseq_theorems nil)
    (> const-decl "bool" reals nil)
    (nonempty_fs type-eq-decl nil finseq_theorems nil)
    (seq type-eq-decl nil more_finseq nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (count def-decl "nat" finseq_theorems nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (head const-decl "T" finseq_theorems nil)
    (finseq_induct formula-decl nil finseq_theorems nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (count const-decl "nat" finseq_theorems nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_theorems nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (finseqtolist_append 0
  (finseqtolist_append-1 nil 3676433718
   ("" (induct "l")
    (("1" (grind)
      (("1"
        (case "(# length := S1!1`length + S2!1`length,
                                                 seq
                                                   := lambda (n: below[S1!1`length + S2!1`length]):
                             S1!1`seq(n) #) = S1!1")
        (("1" (assert) nil nil)
         ("2" (hide 2)
          (("2" (apply-extensionality :hide? t)
            (("2" (apply-extensionality :hide? t) nil nil)) nil))
          nil)
         ("3" (grind) nil nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (rewrite "finseqtolist" +)
        (("2" (lift-if)
          (("2" (ground)
            (("1" (inst - "S1" "tail(S2)")
              (("1" (ground)
                (("1" (expand "finseqtolist" 1 2)
                  (("1" (ground)
                    (("1" (rewrite "append" +)
                      (("1" (rewrite "head_compose")
                        (("1" (rewrite "tail_compose")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tail const-decl "finseq[T]" finseq_theorems nil)
    (nonempty_fs type-eq-decl nil finseq_theorems nil)
    (> const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (head const-decl "T" finseq_theorems nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (tail_compose formula-decl nil finseq_theorems nil)
    (head_compose formula-decl nil finseq_theorems nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_theorems nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (count_compose 0
  (count_compose-1 nil 3676394124
   ("" (skeep)
    (("" (rewrite "count")
      (("" (use "finseqtolist_append" :subst ("l" "S2`length"))
        (("" (replace -1 :hide? t)
          (("" (rewrite "count_append") (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((count const-decl "nat" finseq_theorems nil)
    (T formal-type-decl nil finseq_theorems nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (count_append formula-decl nil finseq_theorems nil)
    (list type-decl nil list_adt nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseqtolist_append formula-decl nil finseq_theorems nil))
   shostak))
 (count_elem 0
  (count_elem-1 nil 3685184863
   ("" (skeep*)
    (("" (lemma "recompose")
      (("" (inst - "S" "i + 1")
        (("" (replace -1 :dir RL :hide? t)
          (("" (rewrite "count_compose") (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((recompose formula-decl nil finseq_theorems nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (O const-decl "finseq" finite_sequences nil)
    (head const-decl "T" finseq_theorems nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (count def-decl "nat" finseq_theorems nil)
    (count const-decl "nat" finseq_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rsplit const-decl "finseq[T]" finseq_theorems nil)
    (lsplit const-decl "finseq[T]" finseq_theorems nil)
    (count_compose formula-decl nil finseq_theorems nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_theorems nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (count_none 0
  (count_none-1 nil 3699022212
   ("" (induct "S" :name "finseq_induct")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (rewrite count_add)
        (("2" (ground)
          (("1" (inst -2 P)
            (("1" (ground)
              (("1" (rewrite -2)
                (("1" (lift-if)
                  (("1" (ground)
                    (("1" (inst -3 "S_1`length")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep*)
                (("2" (inst -2 "i")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst -2 P)
            (("2" (skeep*)
              (("2" (ground)
                (("1" (case "i < S_1`length")
                  (("1" (inst -2 i) (("1" (grind) nil nil)) nil)
                   ("2" (lift-if)
                    (("2" (ground)
                      (("2" (grind)
                        (("1" (typepred "i") (("1" (grind) nil nil))
                          nil)
                         ("2" (typepred "i") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lift-if) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((S_1 skolem-const-decl "finseq[T]" finseq_theorems nil)
    (seq type-eq-decl nil more_finseq nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (x skolem-const-decl "T" finseq_theorems nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(S_1`length)" finseq_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (head const-decl "T" finseq_theorems nil)
    (i skolem-const-decl "below(add(x, S_1)`length)" finseq_theorems
       nil)
    (list type-decl nil list_adt nil)
    (P skolem-const-decl "[T -> bool]" finseq_theorems nil)
    (count_add formula-decl nil finseq_theorems nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (count def-decl "nat" finseq_theorems nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_induct formula-decl nil finseq_theorems nil)
    (count const-decl "nat" finseq_theorems nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil finseq_theorems nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (count_none_zero 0
  (count_none_zero-1 nil 3699028758
   ("" (use count_none) (("" (grind) nil nil)) nil)
   ((count const-decl "nat" finseq_theorems nil)
    (T formal-type-decl nil finseq_theorems nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_none formula-decl nil finseq_theorems nil))
   shostak))
 (locate_TCC1 0
  (locate_TCC1-1 nil 3652987445
   ("" (skeep)
    (("" (typepred "L") (("" (skeep) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil finseq_theorems nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (locate subtype
    "(number_fields.-)((number_fields.-)(list_props[finseq_theorems.T].length(finseq_theorems.L), finseq_theorems.i), 1)"
    "below[length[T](L)]")))
 (locate_TCC2 0
  (locate_TCC2-1 nil 3652987445 ("" (skeep) (("" (grind) nil nil)) nil)
   ((nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (locate subtype
    "list_props[finseq_theorems.T].length(finseq_theorems.L1)"
    "{i: naturalnumbers.below(list_props[finseq_theorems.T].length(finseq_theorems.L)) | finseq_theorems.P(list_props[finseq_theorems.T].nth(finseq_theorems.L, (number_fields.-)((number_fields.-)(list_props[finseq_theorems.T].length(finseq_theorems.L), 1), i)))}")))
 (locate_TCC3 0
  (locate_TCC3-1 nil 3652987445 ("" (lazy-grind) nil nil)
   ((member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil finseq_theorems nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (locate subtype "finseq_theorems.L1"
    "{L | EXISTS (a: (finseq_theorems.P)): list_props[finseq_theorems.T].member(a, finseq_theorems.L)}")))
 (locate_TCC4 0
  (locate_TCC4-1 nil 3652992407 ("" (lazy-grind) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil finseq_theorems nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (locate subtype
    "finseq_theorems.locate(finseq_theorems.P, finseq_theorems.L1)"
    "{i: naturalnumbers.below(list_props[finseq_theorems.T].length(finseq_theorems.L)) | finseq_theorems.P(list_props[finseq_theorems.T].nth(finseq_theorems.L, (number_fields.-)((number_fields.-)(list_props[finseq_theorems.T].length(finseq_theorems.L), 1), i)))}")))
 (locate_TCC5 0
  (locate_TCC5-1 nil 3652992407 ("" (lazy-grind) nil nil)
   ((member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil finseq_theorems nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (locate subtype "0"
    "{i: naturalnumbers.below(list_props[finseq_theorems.T].length(finseq_theorems.L)) | finseq_theorems.P(list_props[finseq_theorems.T].nth(finseq_theorems.L, (number_fields.-)((number_fields.-)(list_props[finseq_theorems.T].length(finseq_theorems.L), 1), i)))}")))
 (some_nth 0
  (some_nth-1 nil 3655165213
   ("" (induct "L")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "some" +)
        (("2" (ground)
          (("1" (inst + 0)
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
           ("2" (inst?)
            (("2" (ground)
              (("2" (skeep)
                (("2" (inst + "i + 1")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (inst?)
            (("3" (ground)
              (("3" (skeep)
                (("3" (case "i > 0")
                  (("1" (lazy-grind) nil nil) ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons2_var skolem-const-decl "list[T]" finseq_theorems nil)
    (cons1_var skolem-const-decl "T" finseq_theorems nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(cons2_var))" finseq_theorems
       nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil finseq_theorems nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (some adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (member_nth 0
  (member_nth-1 nil 3655616196
   ("" (induct "L")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "nth" +)
        (("2" (lift-if) (("2" (lazy-grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil finseq_theorems nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (some_map 0
  (some_map-1 nil 3699197959
   ("" (induct L) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil finseq_theorems nil)
    (O const-decl "T3" function_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (some adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T2 decl-formal-type nil finseq_theorems nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak)))

