(IExpression)
(intermediateLanguage
 (fill_TCC1 0
  (fill_TCC1-1 nil 3645177900 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[IContext])"
     intermediateLanguage nil))
   nil))
 (fill_TCC2 0
  (fill_TCC2-1 nil 3645177900 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[IContext])"
     intermediateLanguage nil))
   nil))
 (context_lemma 0
  (context_lemma-1 nil 3645177902
   ("" (induct "A")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3"
        (inst + "hole"
         "application(application1_var, application2_var)")
        (("3" (grind) nil nil)) nil))
      nil)
     ("4" (skeep)
      (("4" (ground)
        (("1" (inst + "hole" "letexpr(letexpr1_var, letexpr2_var)")
          (("1" (grind) nil nil)) nil)
         ("2" (skeep)
          (("2" (inst + "hole" "letexpr(letexpr1_var, letexpr2_var)")
            (("2" (grind) nil nil)) nil))
          nil)
         ("3" (skeep)
          (("3" (inst + "letc(K, letexpr2_var)" "B")
            (("3" (grind) nil nil)) nil))
          nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (inst + "letc(K!1, letexpr2_var)" "B!1")
              (("4" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (inst + "hole" "ift(ift1_var, ift2_var, ift3_var)")
        (("5" (grind) nil nil)) nil))
      nil)
     ("6" (skeep*)
      (("6"
        (inst + "hole" "update(update1_var, update2_var, update3_var)")
        (("6" (grind) nil nil)) nil))
      nil)
     ("7" (skeep*)
      (("7" (inst + "hole" "lookup(lookup1_var, lookup2_var)")
        (("7" (grind) nil nil)) nil))
      nil)
     ("8" (skeep)
      (("8" (inst + "hole" "newint(newint1_var)")
        (("8" (grind) nil nil)) nil))
      nil)
     ("9" (skeep)
      (("9" (inst + "hole" "newref(newref1_var)")
        (("9" (grind) nil nil)) nil))
      nil)
     ("10" (skeep)
      (("10" (ground)
        (("1" (inst + "hole" "pop(pop1_var)") (("1" (grind) nil nil))
          nil)
         ("2" (skeep)
          (("2" (inst + "popc(K)" "B") (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("11" (skeep)
      (("11" (inst + "hole" "ref(ref1_var)") (("11" (grind) nil nil))
        nil))
      nil))
    nil)
   ((ref adt-constructor-decl "[nat -> (ref?)]" IExpression_adt nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (popc? adt-recognizer-decl "[IContext -> boolean]"
     intermediateLanguage nil)
    (popc adt-constructor-decl "[IContext -> (popc?)]"
          intermediateLanguage nil)
    (pop adt-constructor-decl "[IExpression -> (pop?)]" IExpression_adt
         nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (newref adt-constructor-decl "[nat -> (newref?)]" IExpression_adt
     nil)
    (newref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (newint adt-constructor-decl "[nat -> (newint?)]" IExpression_adt
     nil)
    (newint? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (lookup adt-constructor-decl
            "[[(variable?), (variable?)] -> (lookup?)]" IExpression_adt
            nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (update adt-constructor-decl
     "[[(variable?), (variable?), (variable?)] -> (update?)]"
     IExpression_adt nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (ift adt-constructor-decl
     "[[(variable?), IExpression, IExpression] -> (ift?)]"
     IExpression_adt nil)
    (letc? adt-recognizer-decl "[IContext -> boolean]"
     intermediateLanguage nil)
    (letc adt-constructor-decl "[[IContext, IExpression] -> (letc?)]"
     intermediateLanguage nil)
    (letexpr adt-constructor-decl
     "[[IExpression, IExpression] -> (letexpr?)]" IExpression_adt nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (application adt-constructor-decl
     "[[nat, list[(variable?)]] -> (application?)]" IExpression_adt
     nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (hole adt-constructor-decl "(hole?)" intermediateLanguage nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]"
     intermediateLanguage nil)
    (popRedex? const-decl "bool" intermediateLanguage nil)
    (newrefRedex? const-decl "bool" intermediateLanguage nil)
    (newintRedex? const-decl "bool" intermediateLanguage nil)
    (lookupRedex? const-decl "bool" intermediateLanguage nil)
    (updateRedex? const-decl "bool" intermediateLanguage nil)
    (iftRedex? const-decl "bool" intermediateLanguage nil)
    (applyRedex? const-decl "bool" intermediateLanguage nil)
    (letRedex? const-decl "bool" intermediateLanguage nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (redex? const-decl "bool" intermediateLanguage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil intermediateLanguage nil)
    (atom? const-decl "bool" intermediateLanguage nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil))
   shostak))
 (buildContext_TCC1 0
  (buildContext_TCC1-1 nil 3645328217
   ("" (skosimp*)
    (("" (expand "fill" +)
      (("" (typepred "v!1(B!1)") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((fill def-decl "IExpression" intermediateLanguage nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IContext type-decl nil intermediateLanguage nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (buildContext_TCC2 0
  (buildContext_TCC2-1 nil 3645328217 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (buildContext_TCC3 0
  (buildContext_TCC3-1 nil 3645328217
   ("" (skosimp*)
    (("" (expand "fill" +)
      (("" (typepred "v!1(B!1)") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((fill def-decl "IExpression" intermediateLanguage nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IContext type-decl nil intermediateLanguage nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (buildContext_TCC4 0
  (buildContext_TCC4-1 nil 3645328217 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (buildContext_TCC5 0
  (buildContext_TCC5-1 nil 3645328217 ("" (grind) nil nil)
   ((fill def-decl "IExpression" intermediateLanguage nil)) nil))
 (context_composition 0
  (context_composition-1 nil 3645324754
   ("" (induct-and-simplify "K1") nil nil)
   ((IContext type-decl nil intermediateLanguage nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (compose def-decl "IContext" intermediateLanguage nil)
    (IContext_induction formula-decl nil intermediateLanguage nil))
   shostak))
 (pure?_TCC1 0
  (pure?_TCC1-1 nil 3645328217 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (pure?_TCC2 0
  (pure?_TCC2-1 nil 3645328217 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (pure?_TCC3 0
  (pure?_TCC3-1 nil 3645328217 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (pure_contextPure 0
  (pure_contextPure-1 nil 3645472996
   ("" (induct-and-simplify "A") nil nil)
   ((IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (IExpression_induction formula-decl nil IExpression_adt nil))
   shostak))
 (buildcontextPure_TCC1 0
  (buildcontextPure_TCC1-1 nil 3645473221
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" intermediateLanguage nil))
   nil))
 (buildcontextPure_TCC2 0
  (buildcontextPure_TCC2-1 nil 3645473221
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (pure? def-decl "bool" intermediateLanguage nil))
   nil))
 (buildcontextPure_TCC3 0
  (buildcontextPure_TCC3-1 nil 3645473221
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" intermediateLanguage nil))
   nil))
 (buildcontextPure_TCC4 0
  (buildcontextPure_TCC4-1 nil 3645473221
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (pure? def-decl "bool" intermediateLanguage nil))
   nil))
 (buildcontextPure_TCC5 0
  (buildcontextPure_TCC5-1 nil 3645473221
   ("" (recursive-judgement-tcc) nil nil)
   ((pure? def-decl "bool" intermediateLanguage nil)) nil))
 (contextPurefill 0
  (contextPurefill-1 nil 3645477567
   ("" (induct-and-simplify "K") nil nil)
   ((IContext type-decl nil intermediateLanguage nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext_induction formula-decl nil intermediateLanguage nil))
   shostak))
 (pureLetRedex?_TCC1 0
  (pureLetRedex?_TCC1-1 nil 3645472989 ("" (subtype-tcc) nil nil)
   ((value? const-decl "bool" intermediateLanguage nil)
    (atom? const-decl "bool" intermediateLanguage nil)
    (letRedex? const-decl "bool" intermediateLanguage nil))
   nil))
 (pureIftRedex?_TCC1 0
  (pureIftRedex?_TCC1-1 nil 3645472989 ("" (subtype-tcc) nil nil)
   ((iftRedex? const-decl "bool" intermediateLanguage nil)) nil))
 (refs_TCC1 0
  (refs_TCC1-1 nil 3645594035
   ("" (typepred "IExpression_adt.<<")
    (("" (expand "strict_well_founded?")
      (("" (expand "strict_order?")
        (("" (ground)
          (("" (hide -1 -2)
            (("" (grind :if-match nil)
              (("" (inst - "p!1")
                (("" (ground)
                  (("1" (skosimp*)
                    (("1" (inst + "y!2")
                      (("1" (skeep)
                        (("1" (inst?)
                          (("1" (typepred "x_1")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (typepred "y!2") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst + "y!1") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (well_founded? const-decl "bool" orders nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (p!1 skolem-const-decl "pred[(contextPure?)]" intermediateLanguage
     nil)
    (y!2 skolem-const-decl
     "(extend[IExpression, (contextPure?), bool, FALSE](p!1))"
     intermediateLanguage nil)
    (x_1 skolem-const-decl "(p!1)" intermediateLanguage nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (strict_order? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (refs_TCC2 0
  (refs_TCC2-1 nil 3645594035 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (refs_TCC3 0
  (refs_TCC3-1 nil 3645594035
   ("" (skeep :preds? t) (("" (grind) nil nil)) nil)
   ((contextPure? def-decl "bool" intermediateLanguage nil)) nil))
 (refs_TCC4 0
  (refs_TCC4-1 nil 3645594035 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (refs_TCC5 0
  (refs_TCC5-1 nil 3645594035 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (refs_TCC6 0
  (refs_TCC6-1 nil 3645594035 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (refs_TCC7 0
  (refs_TCC7-1 nil 3645594035 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (pure_refs_TCC1 0
  (pure_refs_TCC1-1 nil 3645614580
   ("" (skeep) (("" (rewrite "pure_contextPure") nil nil)) nil)
   ((pure_contextPure formula-decl nil intermediateLanguage nil)
    (IExpression type-decl nil IExpression_adt nil))
   nil))
 (pure_refs 0
  (pure_refs-1 nil 3645614582
   ("" (induct-and-simplify "A")
    (("" (rewrite "pure_contextPure") nil nil)) nil)
   ((pure_contextPure formula-decl nil intermediateLanguage nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (refs def-decl "bool" intermediateLanguage nil)
    (IExpression_induction formula-decl nil IExpression_adt nil))
   shostak))
 (refs_fill_TCC1 0
  (refs_fill_TCC1-1 nil 3645614695
   ("" (skeep)
    (("" (rewrite "contextPurefill") (("" (ground) nil nil)) nil)) nil)
   ((contextPurefill formula-decl nil intermediateLanguage nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IContext type-decl nil intermediateLanguage nil))
   nil))
 (refs_fill 0
  (refs_fill-1 nil 3645614697
   ("" (induct-and-simplify "K")
    (("1" (apply-extensionality) nil nil)
     ("2" (apply-extensionality) nil nil)
     ("3" (rewrite "contextPurefill") nil nil))
    nil)
   ((contextPurefill formula-decl nil intermediateLanguage nil)
    (pop adt-constructor-decl "[IExpression -> (pop?)]" IExpression_adt
         nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (letexpr adt-constructor-decl
     "[[IExpression, IExpression] -> (letexpr?)]" IExpression_adt nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IContext type-decl nil intermediateLanguage nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (refs def-decl "bool" intermediateLanguage nil)
    (IContext_induction formula-decl nil intermediateLanguage nil))
   shostak))
 (refcount_TCC1 0
  (refcount_TCC1-1 nil 3645594035 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil))
   nil))
 (refcount_TCC2 0
  (refcount_TCC2-1 nil 3645594035 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (push_TCC1 0
  (push_TCC1-1 nil 3645226267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (Stack type-eq-decl nil intermediateLanguage nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (push_TCC2 0
  (push_TCC2-1 nil 3645226267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pop_TCC1 0
  (pop_TCC1-1 nil 3645226267 ("" (subtype-tcc) nil nil) nil nil))
 (pop_TCC2 0
  (pop_TCC2-1 nil 3645226267 ("" (subtype-tcc) nil nil) nil nil))
 (get_TCC1 0
  (get_TCC1-1 nil 3645245227 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (Stack type-eq-decl nil intermediateLanguage nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (popDepth_TCC1 0
  (popDepth_TCC1-1 nil 3645226267 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (popdepth_fill 0
  (popdepth_fill-1 nil 3645226269
   ("" (induct-and-simplify "K") nil nil)
   ((IContext type-decl nil intermediateLanguage nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IContext_induction formula-decl nil intermediateLanguage nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (purePopDepth 0
  (purePopDepth-1 nil 3645515794 ("" (induct-and-simplify "A") nil nil)
   ((IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (vars_TCC1 0
  (vars_TCC1-1 nil 3645245227 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3645245227 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (vars_TCC3 0
  (vars_TCC3-1 nil 3645245227 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (vars_TCC4 0
  (vars_TCC4-1 nil 3645245227 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (vars_TCC5 0
  (vars_TCC5-1 nil 3645245227 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (vars_TCC6 0
  (vars_TCC6-1 nil 3645245227 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil))
 (vars_decompose 0
  (vars_decompose-1 nil 3645245511
   ("" (induct-and-simplify "K") nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (IContext type-decl nil intermediateLanguage nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IContext_induction formula-decl nil intermediateLanguage nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (letReduce_TCC1 0
  (letReduce_TCC1-1 nil 3645245508 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IContext type-decl nil intermediateLanguage nil)
    (pure? def-decl "bool" intermediateLanguage nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pureLetRedex? const-decl "bool" intermediateLanguage nil)
    (Store type-eq-decl nil intermediateLanguage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" intermediateLanguage nil)
    (vars def-decl "bool" intermediateLanguage nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (Stack type-eq-decl nil intermediateLanguage nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (popDepth def-decl "nat" intermediateLanguage nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (domainValue? const-decl "bool" intermediateLanguage nil)
    (estate type-eq-decl nil intermediateLanguage nil)
    (goodstate type-eq-decl nil intermediateLanguage nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (letRedex? const-decl "bool" intermediateLanguage nil)
    (atom? const-decl "bool" intermediateLanguage nil))
   nil))
 (letReduce_TCC2 0
  (letReduce_TCC2-1 nil 3645245508
   ("" (skosimp*)
    (("" (rewrite "contextPurefill")
      (("1" (typepred "A!1")
        (("1" (expand "contextPure?" +)
          (("1" (ground)
            (("1" (grind)
              (("1" (rewrite "pure_contextPure") nil nil)
               ("2" (rewrite "pure_contextPure") nil nil)
               ("3" (rewrite "pure_contextPure") nil nil)
               ("4" (rewrite "pure_contextPure") nil nil))
              nil)
             ("2" (skeep)
              (("2" (rewrite "refs_fill")
                (("1" (typepred "gS!1`expr")
                  (("1" (typepred "gS!1")
                    (("1" (replace -)
                      (("1" (hide -1)
                        (("1" (inst?)
                          (("1" (ground)
                            (("1" (rewrite "refs_fill")
                              (("1"
                                (expand "pureLetRedex?")
                                (("1"
                                  (ground)
                                  (("1"
                                    (use "pure_refs")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (expand "refs" -)
                                          (("1"
                                            (use "pure_refs")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "contextPurefill")
                  (("2" (expand "pureLetRedex?")
                    (("2" (ground)
                      (("2" (expand "contextPure?" +)
                        (("2" (rewrite "pure_contextPure") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "pureLetRedex?")
              (("3" (ground)
                (("3" (skeep)
                  (("3" (rewrite "vars_decompose")
                    (("3" (ground)
                      (("1" (typepred "K!1")
                        (("1" (typepred "gS!1")
                          (("1" (typepred "gS!1`expr")
                            (("1" (inst?)
                              (("1"
                                (inst - "i")
                                (("1"
                                  (replace -3 :hide? t)
                                  (("1"
                                    (rewrite "vars_decompose")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "gS!1`expr")
                        (("2" (hide -1 -2)
                          (("2" (typepred "gS!1")
                            (("2" (replace - :hide? t)
                              (("2"
                                (inst - "i")
                                (("2"
                                  (rewrite "vars_decompose")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "A!1")
        (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((contextPurefill formula-decl nil intermediateLanguage nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (pop adt-constructor-decl "[IExpression -> (pop?)]" IExpression_adt
         nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (body adt-accessor-decl "[(letexpr?) -> IExpression]"
          IExpression_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pureLetRedex? const-decl "bool" intermediateLanguage nil)
    (IContext type-decl nil intermediateLanguage nil)
    (pure? def-decl "bool" intermediateLanguage nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (vars_decompose formula-decl nil intermediateLanguage nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (goodstate type-eq-decl nil intermediateLanguage nil)
    (estate type-eq-decl nil intermediateLanguage nil)
    (domainValue? const-decl "bool" intermediateLanguage nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (popDepth def-decl "nat" intermediateLanguage nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Stack type-eq-decl nil intermediateLanguage nil)
    (below type-eq-decl nil nat_types nil)
    (vars def-decl "bool" intermediateLanguage nil)
    (refs def-decl "bool" intermediateLanguage nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Store type-eq-decl nil intermediateLanguage nil)
    (pure_refs formula-decl nil intermediateLanguage nil)
    (refs_fill formula-decl nil intermediateLanguage nil)
    (letRedex? const-decl "bool" intermediateLanguage nil)
    (atom? const-decl "bool" intermediateLanguage nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (pure_contextPure formula-decl nil intermediateLanguage nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (letReduce_TCC3 0
  (letReduce_TCC3-1 nil 3645245508
   ("" (skosimp*)
    (("" (typepred "gS!1`stack")
      (("" (typepred "gS!1`expr")
        (("" (typepred "gS!1")
          (("" (replace - :hide? t)
            (("" (rewrite "popdepth_fill")
              (("" (typepred "A!1")
                (("" (hide -3)
                  (("" (inst - "index(letrhs(A!1)) - popDepth(K!1)")
                    (("1" (rewrite "vars_decompose")
                      (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pureLetRedex? const-decl "bool" intermediateLanguage nil)
    (pure? def-decl "bool" intermediateLanguage nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (IContext type-decl nil intermediateLanguage nil)
    (goodstate type-eq-decl nil intermediateLanguage nil)
    (estate type-eq-decl nil intermediateLanguage nil)
    (domainValue? const-decl "bool" intermediateLanguage nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Stack type-eq-decl nil intermediateLanguage nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (below type-eq-decl nil nat_types nil)
    (vars def-decl "bool" intermediateLanguage nil)
    (refs def-decl "bool" intermediateLanguage nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Store type-eq-decl nil intermediateLanguage nil)
    (popDepth def-decl "nat" intermediateLanguage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (IExpression type-decl nil IExpression_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (popdepth_fill formula-decl nil intermediateLanguage nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (vars_decompose formula-decl nil intermediateLanguage nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (atom? const-decl "bool" intermediateLanguage nil)
    (letRedex? const-decl "bool" intermediateLanguage nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (K!1 skolem-const-decl "{K | pure?(K)}" intermediateLanguage nil)
    (popDepth def-decl "nat" intermediateLanguage nil)
    (A!1 skolem-const-decl "(pureLetRedex?)" intermediateLanguage nil)
    (letrhs adt-accessor-decl "[(letexpr?) -> IExpression]"
     IExpression_adt nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (letReduce_TCC4 0
  (letReduce_TCC4-1 nil 3645245508
   ("" (skosimp*) (("" (typepred "A!1") (("" (grind) nil nil)) nil))
    nil)
   ((pureLetRedex? const-decl "bool" intermediateLanguage nil)
    (IExpression type-decl nil IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (letRedex? const-decl "bool" intermediateLanguage nil)
    (atom? const-decl "bool" intermediateLanguage nil)
    (value? const-decl "bool" intermediateLanguage nil))
   nil))
 (letReduce_TCC5 0
  (letReduce_TCC5-1 nil 3645477565
   ("" (skosimp*)
    (("" (ground)
      (("1" (typepred "gS!1`stack")
        (("1" (rewrite "popdepth_fill")
          (("1" (typepred "gS!1")
            (("1" (replace - :hide? t)
              (("1" (rewrite "popdepth_fill")
                (("1" (rewrite "popDepth" +)
                  (("1" (typepred "A!1")
                    (("1" (expand "pureLetRedex?")
                      (("1" (ground)
                        (("1" (forward-chain "purePopDepth")
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (typepred "i!1")
          (("2" (lift-if)
            (("2" (ground)
              (("1" (expand "push")
                (("1" (ground)
                  (("1" (typepred "gS!1`stack")
                    (("1" (expand "get")
                      (("1" (inst?)
                        (("1" (typepred "A!1")
                          (("1" (typepred "gS!1`expr")
                            (("1" (hide -1 -2)
                              (("1"
                                (typepred "gS!1")
                                (("1"
                                  (replace - :hide? t)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -
                                       "index(letrhs(A!1)) - gS!1`stack`length")
                                      (("1"
                                        (rewrite "vars_decompose")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (rewrite "popdepth_fill")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "gS!1`stack") (("2" (inst?) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "gS!1`stack")
                (("2" (grind)
                  (("2" (typepred "gS!1`expr")
                    (("2" (typepred "gS!1")
                      (("2" (replace - :hide? t)
                        (("2" (inst?)
                          (("2" (rewrite "refs_fill")
                            (("2" (ground)
                              (("2"
                                (typepred "A!1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((body adt-accessor-decl "[(letexpr?) -> IExpression]"
          IExpression_adt nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (pop adt-constructor-decl "[IExpression -> (pop?)]" IExpression_adt
         nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (popdepth_fill formula-decl nil intermediateLanguage nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (purePopDepth formula-decl nil intermediateLanguage nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (push const-decl "Stack" intermediateLanguage nil)
    (get const-decl "(value?)" intermediateLanguage nil)
    (letRedex? const-decl "bool" intermediateLanguage nil)
    (atom? const-decl "bool" intermediateLanguage nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IExpression type-decl nil IExpression_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (popDepth def-decl "nat" intermediateLanguage nil)
    (Store type-eq-decl nil intermediateLanguage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" intermediateLanguage nil)
    (vars def-decl "bool" intermediateLanguage nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (Stack type-eq-decl nil intermediateLanguage nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (domainValue? const-decl "bool" intermediateLanguage nil)
    (estate type-eq-decl nil intermediateLanguage nil)
    (goodstate type-eq-decl nil intermediateLanguage nil)
    (IContext type-decl nil intermediateLanguage nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (pure? def-decl "bool" intermediateLanguage nil)
    (pureLetRedex? const-decl "bool" intermediateLanguage nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (letrhs adt-accessor-decl "[(letexpr?) -> IExpression]"
     IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (vars_decompose formula-decl nil intermediateLanguage nil)
    (gS!1 skolem-const-decl "{gS | gS`expr = fill(K!1, A!1)}"
     intermediateLanguage nil)
    (A!1 skolem-const-decl "(pureLetRedex?)" intermediateLanguage nil)
    (K!1 skolem-const-decl "{K | pure?(K)}" intermediateLanguage nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (refs_fill formula-decl nil intermediateLanguage nil))
   nil))
 (updateReduce_TCC1 0
  (updateReduce_TCC1-1 nil 3645791010 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IContext type-decl nil intermediateLanguage nil)
    (pure? def-decl "bool" intermediateLanguage nil)
    (IExpression type-decl nil IExpression_adt nil)
    (updateRedex? const-decl "bool" intermediateLanguage nil)
    (Store type-eq-decl nil intermediateLanguage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" intermediateLanguage nil)
    (vars def-decl "bool" intermediateLanguage nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (Stack type-eq-decl nil intermediateLanguage nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (popDepth def-decl "nat" intermediateLanguage nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (domainValue? const-decl "bool" intermediateLanguage nil)
    (estate type-eq-decl nil intermediateLanguage nil)
    (goodstate type-eq-decl nil intermediateLanguage nil)
    (fill def-decl "IExpression" intermediateLanguage nil))
   nil))
 (updateReduce_TCC2 0
  (updateReduce_TCC2-1 nil 3645791010
   ("" (skeep* :preds? t)
    (("" (replace -6 :hide? t)
      (("" (hide -2)
        (("" (inst - "index(target(A)) - stack`length")
          (("1" (replace -8 :hide? t)
            (("1" (rewrite "vars_decompose")
              (("1" (hide -5)
                (("1" (rewrite "popdepth_fill") (("1" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (stack skolem-const-decl "{S: Stack |
   popDepth(gS`expr) = S`length AND
    (FORALL (i: below(S`length)): domainValue?(gS`store`domain)(S`seq(i)))}"
     intermediateLanguage nil)
    (gS skolem-const-decl "{gS | gS`expr = fill(K, A)}"
     intermediateLanguage nil)
    (K skolem-const-decl "{K | pure?(K)}" intermediateLanguage nil)
    (pure? def-decl "bool" intermediateLanguage nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (IContext type-decl nil intermediateLanguage nil)
    (goodstate type-eq-decl nil intermediateLanguage nil)
    (estate type-eq-decl nil intermediateLanguage nil)
    (domainValue? const-decl "bool" intermediateLanguage nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "bool" intermediateLanguage nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (refs def-decl "bool" intermediateLanguage nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (Store type-eq-decl nil intermediateLanguage nil)
    (popDepth def-decl "nat" intermediateLanguage nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Stack type-eq-decl nil intermediateLanguage nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (below type-eq-decl nil nat_types nil)
    (A skolem-const-decl "(updateRedex?)" intermediateLanguage nil)
    (updateRedex? const-decl "bool" intermediateLanguage nil)
    (target adt-accessor-decl "[(update?) -> (variable?)]"
            IExpression_adt nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vars_decompose formula-decl nil intermediateLanguage nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (popdepth_fill formula-decl nil intermediateLanguage nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (updateReduce_TCC3 0
  (updateReduce_TCC3-1 nil 3645791010
   ("" (skeep* :preds? t)
    (("" (hide -3)
      (("" (replace -6)
        (("" (replace -11)
          (("" (inst - "index(lhs(A)) - stack`length")
            (("1" (rewrite "vars_decompose")
              (("1" (rewrite "popdepth_fill") (("1" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_decompose formula-decl nil intermediateLanguage nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (get const-decl "(value?)" intermediateLanguage nil)
    (popdepth_fill formula-decl nil intermediateLanguage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (lhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (updateRedex? const-decl "bool" intermediateLanguage nil)
    (A skolem-const-decl "(updateRedex?)" intermediateLanguage nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (Stack type-eq-decl nil intermediateLanguage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (popDepth def-decl "nat" intermediateLanguage nil)
    (Store type-eq-decl nil intermediateLanguage nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" intermediateLanguage nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars def-decl "bool" intermediateLanguage nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (domainValue? const-decl "bool" intermediateLanguage nil)
    (estate type-eq-decl nil intermediateLanguage nil)
    (goodstate type-eq-decl nil intermediateLanguage nil)
    (IContext type-decl nil intermediateLanguage nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (pure? def-decl "bool" intermediateLanguage nil)
    (K skolem-const-decl "{K | pure?(K)}" intermediateLanguage nil)
    (gS skolem-const-decl "{gS | gS`expr = fill(K, A)}"
     intermediateLanguage nil)
    (stack skolem-const-decl "{S: Stack |
   popDepth(gS`expr) = S`length AND
    (FORALL (i: below(S`length)): domainValue?(gS`store`domain)(S`seq(i)))}"
     intermediateLanguage nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (updateReduce_TCC4 0
  (updateReduce_TCC4-1 nil 3645791010
   ("" (skeep* :preds? t)
    (("" (hide -3 -4 10)
      (("" (replace -6 :hide? t)
        (("" (replace -10 :hide? t)
          (("" (inst - "index(rhs(A)) - stack`length")
            (("1" (rewrite "vars_decompose")
              (("1" (rewrite "popdepth_fill") (("1" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_decompose formula-decl nil intermediateLanguage nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (get const-decl "(value?)" intermediateLanguage nil)
    (popdepth_fill formula-decl nil intermediateLanguage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (rhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (updateRedex? const-decl "bool" intermediateLanguage nil)
    (A skolem-const-decl "(updateRedex?)" intermediateLanguage nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" intermediateLanguage nil)
    (Stack type-eq-decl nil intermediateLanguage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (popDepth def-decl "nat" intermediateLanguage nil)
    (Store type-eq-decl nil intermediateLanguage nil)
    (contextPure? def-decl "bool" intermediateLanguage nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" intermediateLanguage nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars def-decl "bool" intermediateLanguage nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (domainValue? const-decl "bool" intermediateLanguage nil)
    (estate type-eq-decl nil intermediateLanguage nil)
    (goodstate type-eq-decl nil intermediateLanguage nil)
    (IContext type-decl nil intermediateLanguage nil)
    (fill def-decl "IExpression" intermediateLanguage nil)
    (pure? def-decl "bool" intermediateLanguage nil)
    (K skolem-const-decl "{K | pure?(K)}" intermediateLanguage nil)
    (gS skolem-const-decl "{gS | gS`expr = fill(K, A)}"
     intermediateLanguage nil)
    (stack skolem-const-decl "{S: Stack |
   popDepth(gS`expr) = S`length AND
    (FORALL (i: below(S`length)): domainValue?(gS`store`domain)(S`seq(i)))}"
     intermediateLanguage nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (updateReduce_TCC5 0
  (updateReduce_TCC5-1 nil 3645791010 ("" (subtype-tcc) nil nil) nil
   nil))
 (updateReduce_TCC6 0
  (updateReduce_TCC6-1 nil 3645791010 ("" (subtype-tcc) nil nil)
   ((get const-decl "(value?)" intermediateLanguage nil)
    (add const-decl "(nonempty?)" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (updateReduce_TCC7 0
  (updateReduce_TCC7-1 nil 3645791010
   ("" (skeep* :preds? t)
    (("" (inst - "refindex(aval)")
      (("" (assert)
        (("" (replace -14)
          (("" (replace -9)
            (("" (rewrite "refs_fill")
              (("" (hide-all-but (-8 2 4 -11 -15))
                (("" (grind :if-match nil)
                  (("" (inst?)
                    (("1" (ground) nil nil) ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get const-decl "(value?)" intermediateLanguage nil)
    (add const-decl "(nonempty?)" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (updateReduce_TCC8 0
  (updateReduce_TCC8-1 nil 3645791010 ("" (subtype-tcc) nil nil) nil
   nil))
 (updateReduce_TCC9 0
  (updateReduce_TCC9-1 nil 3645791010 ("" (subtype-tcc) nil nil) nil
   nil))
 (updateReduce_TCC10 0
  (updateReduce_TCC10-1 nil 3645791010 ("" (subtype-tcc) nil nil) nil
   nil))
 (updateReduce_TCC11 0
  (updateReduce_TCC11-1 nil 3645791010 ("" (subtype-tcc) nil nil) nil
   nil)))

