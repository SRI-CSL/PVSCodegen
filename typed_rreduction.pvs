typed_rreduction: THEORY
  BEGIN

    IMPORTING IExpression, IL, finite_set_theorems, finseq_theorems, reduction, preprocess, rreduction, typeinfo, typeinfo_adt, typed_reduction, reduction_props, list2finseq_extra, iareduction

    A, B, C: VAR IExpression
    tA, tB, tC: VAR typeinfo
    K, K1, K2: VAR IContext
    tK, tK1, tK2: VAR typeinfo_ctx

    
    u, v, w: VAR (value?)
    x, y, z: VAR (variable?)
    i, j, k, hole_type: VAR nat
    F, X: VAR finite_set[nat]

    S, S1, S2: VAR Stack
    nS: VAR neStack

    dom: VAR finite_set[nat]
    
    Store(dom): TYPE = [(dom) -> finseq[(domainValue?(dom))]]

    Definition: TYPE = [# arity: nat, body: {A |  pure?(A) AND (FORALL i: vars(A)(i) = (i < arity)) AND unmark(A) = A} #]

    tdef: TYPE = [# return_type: nat, args_type: finseq[nat], body_type: typeinfo #]

    Defs: TYPE = finseq[Definition]

    defs_subtype: JUDGEMENT
      Defs SUBTYPE_OF rreduction.Defs

    D: VAR Defs

    stypes, stypes2: VAR finseq[nat]
    dom_types, dom_types2: VAR [nat -> nat]
    def_types: VAR finseq[tdef]

    typed_rstate: TYPE = [#
      state: {rS: rstate | noDanglingRefs?(rS) AND
                           allReleaseMarked?(rS`redex) AND
                           armc?(rS`context)},
      dom_types: {dom_types |
        FORALL (r: (state`domain)):
          FORALL (j: below(state`store(r)`length)):
            value_of_type(state`store(r)`seq(j), dom_types(r), dom_types)
      },
      stack_types: {stypes |
        stypes`length = state`stack`length AND
        FORALL (i: below(stypes`length)):
          value_of_type(state`stack`seq(i), stypes`seq(i), dom_types)
      },
      def_types: finseq[tdef],
      redex_type: {tA | is_well_typed(state`redex, tA, stack_types, dom_types, def_types)},
      context_type: {tK |
        is_well_typed_ctx(state`context, tK, popn(stack_types, popDepth(state`redex)),
                          dom_types, def_types, expr_type(redex_type)) }
    #]

    tS, tS1, tS2: VAR typed_rstate
    
    is_well_typed_letApply: LEMMA
      FORALL (arity: nat, (args: list[(variable?)] | length(args) = arity),
                          (args_type: list[nat] | length(args_type) = arity)):
        pure?(A) AND
        (FORALL i: cvars(A)(i) IMPLIES i < stypes`length + arity) AND
        (FORALL i: in_varlist(args)(i) IMPLIES i < stypes`length) AND
        (FORALL (i: below(arity)): is_well_typed(nth(args, i), leaft(nth(args_type, i)), stypes, dom_types, def_types)) AND
        is_well_typed(A, tA, stypes o args_type, (LAMBDA i: 0), def_types)
        IMPLIES
        is_well_typed(rreduction.letApply(arity, args, A),
                      letApply_type(arity, args_type, tA),
                      stypes, dom_types, def_types)

    typed_to_topstate(tS): typed_rstate =
      tS WITH [`state := to_topstate(tS`state),
               `redex_type := typeinfo_fill(tS`context_type, tS`redex_type),
               `context_type := holet]

    make_redex_typed(tS | tS`state`context = hole AND NOT value?(tS`state`redex)): typed_rstate =
      LET (tK, tA) = buildRedexType(tS`state`redex, tS`redex_type) IN
      tS WITH [`state := make_redex(tS`state),
               `redex_type := tA,
               `context_type := tK]

    set_new_type(tS, i) : typed_rstate =
      tS WITH [`dom_types(least_out(tS`state`domain)) := i]

    stack_still_typed: LEMMA
      FORALL (S, S1):
        stypes`length = S`length AND
        S`length = S1`length AND
        (FORALL (i: below(stypes`length)):
          value_of_type(S`seq(i), stypes`seq(i), dom_types)) AND
        (FORALL (i: below(S`length)): S`seq(i) = S1`seq(i) OR (ref?(S`seq(i)) AND S1`seq(i) = nil)) IMPLIES
          stypes`length = S1`length AND
          (FORALL (i: below(stypes`length)):
            value_of_type(S1`seq(i), stypes`seq(i), dom_types))

    is_well_typed_release_set: LEMMA
      FORALL (A : (contextPure?), tA, (stypes | popDepth(A) <= stypes`length AND FORALL i: cvars(A)(i) IMPLIES i < stypes`length), dom_types, def_types, X):
        (FORALL (x: (X)): x + popDepth(A) < stypes`length) IMPLIES
          is_well_typed(release_set(A, X), tA, stypes, dom_types, def_types) =
            is_well_typed(A, tA, stypes, dom_types, def_types)

    is_well_typed_mark: LEMMA
      FORALL (A, tA, (stypes | popDepth(A) <= stypes`length AND FORALL i: cvars(A)(i) IMPLIES i < stypes`length), dom_types, def_types, X):
        contextPure?(A) IMPLIES
          is_well_typed(A, tA, stypes, dom_types, def_types) =
            is_well_typed(mark(X)(A), tA, stypes, dom_types, def_types)

    is_well_typed_unmark: LEMMA
      FORALL (A, tA, (stypes | popDepth(A) <= stypes`length AND FORALL i: cvars(A)(i) IMPLIES i < stypes`length), dom_types, def_types):
        contextPure?(A) IMPLIES
          is_well_typed(A, tA, stypes, dom_types, def_types) =
            is_well_typed(unmark(A), tA, stypes, dom_types, def_types)

    decref_new_values: LEMMA
      FORALL (rS: (noDanglingRefs?), r: (rS`domain), i: upto(rS`store(r)`length)):
        FORALL (s: (rS`domain), j: below(rS`store(s)`length)):
          decref(rS, r, i)`store(s)`seq(j) = rS`store(s)`seq(j) OR
            (ref?(rS`store(s)`seq(j)) AND decref(rS, r, i)`store(s)`seq(j) = nil)

    updateReduce_new_stack: LEMMA
      FORALL (rS : rstate | NOT rS`error AND noDanglingRefs?(rS) AND updateRedex?(rS`redex)):
        updateReduce(D)(rS)`stack`length = rS`stack`length AND
        FORALL (i: below(rS`stack`length)):
          updateReduce(D)(rS)`stack`seq(i) = rS`stack`seq(i) OR
          (ref?(rS`stack`seq(i)) AND updateReduce(D)(rS)`stack`seq(i) = nil)

    decref1_preserves_domain: LEMMA
      FORALL (rS : rstate, (r: (rS`domain)), (i: upto(rS`store(r)`length))):
        decref1(rS, r, i)`domain = rS`domain

    AUTO_REWRITE+ decref1_preserves_domain

    decref1_preserves_store_length: LEMMA
      FORALL (rS : rstate, (r: (rS`domain)), (i: upto(rS`store(r)`length))):
        FORALL (s: (rS`domain)):
          decref1(rS, r, i)`store(s)`length = rS`store(s)`length

    AUTO_REWRITE+ decref1_preserves_store_length

    value_maybe_freed(u, v): boolean =
      u = v OR (ref?(u) AND v = nil)

    value_maybe_freed2(u, v, w): boolean =
      value_maybe_freed(u, w) OR value_maybe_freed(v, w)

    value_maybe_freed_type: LEMMA
      value_of_type(u, i, dom_types) AND value_maybe_freed(u, v) IMPLIES
        value_of_type(v, i, dom_types)

    decref1_preserves_store: LEMMA
      FORALL (rS : rstate, (r: (rS`domain)), (i: upto(rS`store(r)`length)),
        (s: (rS`domain)), (j: below(rS`store(s)`length)), (u: (value?))):
          value_maybe_freed(u, rS`store(s)`seq(j)) IMPLIES
            value_maybe_freed(u, decref1(rS, r, i)`store(s)`seq(j))
          %value_maybe_freed(u, decref1(rS, r, i)`store(s)`seq(j)) =
          %  (value_maybe_freed(u, rS`store(s)`seq(j)) OR
          %    (ref?(u) AND decref1(rS, r, i)`store(s)`seq(j) = nil))

    AUTO_REWRITE+ decref1_preserves_store

    decref1_preserves_store2: LEMMA
      FORALL (rS : rstate, (r: (rS`domain)), (i: upto(rS`store(r)`length)),
        (s: (rS`domain)), (j: below(rS`store(s)`length)), (u, v: (value?))):
          value_maybe_freed2(u, v, rS`store(s)`seq(j)) IMPLIES
            value_maybe_freed2(u, v, decref1(rS, r, i)`store(s)`seq(j))
          %value_maybe_freed(u, decref1(rS, r, i)`store(s)`seq(j)) =
          %  (value_maybe_freed(u, rS`store(s)`seq(j)) OR
          %    (ref?(u) AND decref1(rS, r, i)`store(s)`seq(j) = nil))

    AUTO_REWRITE+ decref1_preserves_store2

    releaseReduce_new_store: LEMMA
      FORALL (rS : rstate | NOT rS`error AND noDanglingRefs?(rS) AND pureReleaseRedex?(rS`redex)):
        FORALL (r : (releaseReduce(D)(rS)`domain)):
          rS`domain(r) AND
          releaseReduce(D)(rS)`store(r)`length = rS`store(r)`length AND
          (FORALL (j: below(releaseReduce(D)(rS)`store(r)`length)):
            value_maybe_freed(rS`store(r)`seq(j), releaseReduce(D)(rS)`store(r)`seq(j)))

    updateReduce_new_store: LEMMA
      FORALL (rS : rstate | NOT rS`error AND noDanglingRefs?(rS) AND updateRedex?(rS`redex)):
        FORALL (r : (updateReduce(D)(rS)`domain)):
          (r = least_out(rS`domain) AND
           ref?(get(rS`stack)(target(rS`redex))) AND
           updateReduce(D)(rS)`store(r)`length = rS`store(refindex(get(rS`stack)(target(rS`redex))))`length AND
           (FORALL (j: below(updateReduce(D)(rS)`store(r)`length)):
             value_maybe_freed2(
               rS`store(refindex(get(rS`stack)(target(rS`redex))))`seq(j),
               get(rS`stack)(rhs(rS`redex)),
               updateReduce(D)(rS)`store(r)`seq(j)))
            OR
          (rS`domain(r) AND
           updateReduce(D)(rS)`store(r)`length = rS`store(r)`length AND
           (FORALL (j: below(updateReduce(D)(rS)`store(r)`length)):
             value_maybe_freed2(
                rS`store(r)`seq(j),
                IF ref?(get(rS`stack)(target(rS`redex))) AND
                    r = refindex(get(rS`stack)(target(rS`redex))) THEN
                  get(rS`stack)(rhs(rS`redex))
                ELSE
                  rS`store(r)`seq(j)
                ENDIF,
                updateReduce(D)(rS)`store(r)`seq(j)))))

    updateReduce_redex: LEMMA
      FORALL (rS : rstate | NOT rS`error AND noDanglingRefs?(rS) AND updateRedex?(rS`redex)):
        updateReduce(D)(rS)`redex = ref(least_out(rS`domain)) OR
          updateReduce(D)(rS)`redex = get(rS`stack)(target(rS`redex)) OR
          updateReduce(D)(rS)`redex = rS`redex

    updateReduce_context: LEMMA
      FORALL (rS : rstate | NOT rS`error AND noDanglingRefs?(rS) AND updateRedex?(rS`redex)):
        updateReduce(D)(rS)`context = rS`context

    typed_reduce(D)(tS | NOT tS`state`error AND defs_well_typed(D, tS`def_types)) : typed_rstate =
      LET t = typed_to_topstate(tS) IN
      IF value?(t`state`redex) THEN
        t
      ELSE
        LET nS = make_redex_typed(t) IN
        IF variable?(nS`state`redex) THEN
          nS WITH [`state := variableReduce(D)(nS`state)]
        ELSIF pureLetRedex?(nS`state`redex) THEN
          nS WITH [`state := letReduce(D)(nS`state),
                   `stack_types := add(lettype(nS`redex_type), nS`stack_types),
                   `redex_type := popt(lbody(nS`redex_type))]
        ELSIF applyRedex?(nS`state`redex) THEN
          nS WITH [`state := applyReduce(D)(nS`state),
                   `redex_type := letApply_type(length(tS`def_types`seq(fun(nS`state`redex))`args_type), tS`def_types`seq(fun(nS`state`redex))`args_type, tS`def_types`seq(fun(nS`state`redex))`body_type)]
        ELSIF pureIftRedex?(nS`state`redex) THEN
          nS WITH [`state := ifReduce(D)(nS`state),
                   `redex_type :=
                     IF get(nS`state`stack)(condition(nS`state`redex)) = constant(0) THEN
                       telse(nS`redex_type)
                     ELSE
                       tthen(nS`redex_type)
                     ENDIF
                  ]
        ELSIF updateRedex?(nS`state`redex) THEN
          nS WITH [`state := updateReduce(D)(nS`state),
                   `dom_types := nS`dom_types WITH [(least_out(nS`state`domain)) |-> leaftype(nS`redex_type) - 1]]
        ELSIF lookupRedex?(nS`state`redex) THEN
          nS WITH [`state := lookupReduce(D)(nS`state)]
        ELSIF newintRedex?(nS`state`redex) THEN
          nS WITH [`state := newintReduce(D)(nS`state),
                   `dom_types := nS`dom_types WITH [(least_out(nS`state`domain)) |-> leaftype(nS`redex_type) - 1]]
        ELSIF newrefRedex?(nS`state`redex) THEN
          nS WITH [`state := newrefReduce(D)(nS`state),
                   `dom_types := nS`dom_types WITH [(least_out(nS`state`domain)) |-> leaftype(nS`redex_type) - 1]]
        ELSIF popRedex?(nS`state`redex) THEN
          nS WITH [`state := popReduce(D)(nS`state),
                   `stack_types := tail(nS`stack_types),
                   `redex_type := ptbody(nS`redex_type)]
        ELSE
          nS WITH [`state := releaseReduce(D)(nS`state)]
        ENDIF
      ENDIF

    typed_reduce_defs: LEMMA
      FORALL (tS | NOT tS`state`error AND defs_well_typed(D, tS`def_types)):
        typed_reduce(D)(tS)`def_types = tS`def_types

    typed_reduce_state: LEMMA
      FORALL (tS | NOT tS`state`error AND defs_well_typed(D, tS`def_types)):
        typed_reduce(D)(tS)`state = reduce(D)(tS`state)

    reduce_stack_length: LEMMA
      FORALL (grS : (noDanglingRefs?) | NOT grS`error):
        grS`stack`length - popDepth(grS`redex) - popDepth(grS`context) =
          reduce(D)(grS)`stack`length - popDepth(reduce(D)(grS)`redex) - popDepth(reduce(D)(grS)`context)

    npopts(n: nat, tA): RECURSIVE typeinfo =
      IF n = 0 THEN tA ELSE popt(npopts(n - 1, tA)) ENDIF
    MEASURE n

    npopts_expr_type: LEMMA
      expr_type(npopts(k, tA)) = expr_type(tA)

    npops_is_well_typed: LEMMA
      FORALL (A: (contextPure?), tA, (stypes | k + popDepth(A) <= stypes`length AND FORALL i: cvars(A)(i) IMPLIES i < stypes`length), dom_types, def_types):
        is_well_typed(npops(k, A), npopts(k, tA), stypes, dom_types, def_types) =
          is_well_typed(A, tA, stypes, dom_types, def_types)

    iapply_nstack_types((arity: nat), stypes,
      (args: list[(variable?)] | length(args) = arity AND
        FORALL i: in_varlist(args)(i) IMPLIES i < stypes`length)):
    RECURSIVE {stypes2 | stypes2`length = stypes`length + arity} =
      IF arity = 0 THEN
        stypes
      ELSE
        iapply_nstack_types(arity-1,
          add(stypes`seq(stypes`length-1-index(car(args))),stypes),
          map(LAMBDA y: y WITH [`index := index(y)+1])(cdr(args)))
      ENDIF
    MEASURE arity

    npops_arm: LEMMA
      allReleaseMarked?(npops(k, A)) = allReleaseMarked?(A)

    iapplyReduce_arm: LEMMA
      FORALL (grS: rstate | NOT grS`error):
        applyRedex?(grS`redex) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)
          IMPLIES allReleaseMarked?(iapplyReduce(D)(grS)`redex) AND armc?(iapplyReduce(D)(grS)`context)

    typed_iareduce(D)(tS | NOT tS`state`error AND defs_well_typed(D, tS`def_types)) : typed_rstate =
      LET t = typed_to_topstate(tS) IN
      IF value?(t`state`redex) THEN
        t
      ELSE
        LET nS = make_redex_typed(t) IN
        IF variable?(nS`state`redex) THEN
          nS WITH [`state := variableReduce(D)(nS`state)]
        ELSIF pureLetRedex?(nS`state`redex) THEN
          nS WITH [`state := letReduce(D)(nS`state),
                   `stack_types := add(lettype(nS`redex_type), nS`stack_types),
                   `redex_type := popt(lbody(nS`redex_type))]
        ELSIF applyRedex?(nS`state`redex) THEN
          nS WITH [`state := iapplyReduce(D)(nS`state),
                   `redex_type :=
                      npopts(length(args(nS`state`redex)),
                        tS`def_types`seq(fun(nS`state`redex))`body_type),
                   `stack_types :=
                      nS`stack_types o tS`def_types`seq(fun(nS`state`redex))`args_type]
        ELSIF pureIftRedex?(nS`state`redex) THEN
          nS WITH [`state := ifReduce(D)(nS`state),
                   `redex_type :=
                     IF get(nS`state`stack)(condition(nS`state`redex)) = constant(0) THEN
                       telse(nS`redex_type)
                     ELSE
                       tthen(nS`redex_type)
                     ENDIF
                  ]
        ELSIF updateRedex?(nS`state`redex) THEN
          nS WITH [`state := updateReduce(D)(nS`state),
                   `dom_types := nS`dom_types WITH [(least_out(nS`state`domain)) |-> leaftype(nS`redex_type) - 1]]
        ELSIF lookupRedex?(nS`state`redex) THEN
          nS WITH [`state := lookupReduce(D)(nS`state)]
        ELSIF newintRedex?(nS`state`redex) THEN
          nS WITH [`state := newintReduce(D)(nS`state),
                   `dom_types := nS`dom_types WITH [(least_out(nS`state`domain)) |-> leaftype(nS`redex_type) - 1]]
        ELSIF newrefRedex?(nS`state`redex) THEN
          nS WITH [`state := newrefReduce(D)(nS`state),
                   `dom_types := nS`dom_types WITH [(least_out(nS`state`domain)) |-> leaftype(nS`redex_type) - 1]]
        ELSIF popRedex?(nS`state`redex) THEN
          nS WITH [`state := popReduce(D)(nS`state),
                   `stack_types := tail(nS`stack_types),
                   `redex_type := ptbody(nS`redex_type)]
        ELSE
          nS WITH [`state := releaseReduce(D)(nS`state)]
        ENDIF
      ENDIF


  END typed_rreduction
