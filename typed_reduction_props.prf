(typed_reduction_props
 (typed_reduce_n_TCC1 0
  (typed_reduce_n_TCC1-1 nil 3703351555 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (typed_reduce_n subtype "typed_rreduction.i"
    "below[typed_rreduction.state`stack`length]")))
 (typed_reduce_n_TCC2 0
  (typed_reduce_n_TCC2-1 nil 3703351555
   ("" (skeep* :preds? t)
    (("" (typepred "state`redex")
      (("" (split)
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (inst -3 "i-popDepth(state`redex)")
            (("1" (rewrite cvars_vars) (("1" (grind) nil nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((armc? def-decl "bool" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (refs def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cvars_vars formula-decl nil preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (state skolem-const-decl "{rS: rstate |
   noDanglingRefs?(rS) AND
    allReleaseMarked?(rS`redex) AND armc?(rS`context)}"
     typed_reduction_props nil)
    (i skolem-const-decl "nat" typed_reduction_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (typed_reduce_n subtype "typed_rreduction.stack_types"
    "{stypes | IL.popDepth(typed_rreduction.state`redex) <= typed_reduction.stypes`length AND FORALL i: preprocess.cvars(typed_rreduction.state`redex)(typed_reduction.i) IMPLIES typed_reduction.i < typed_reduction.stypes`length}")))
 (typed_reduce_n_TCC3 0
  (typed_reduce_n_TCC3-1 nil 3703351555
   ("" (skeep* :preds? t)
    (("" (typepred "state`redex") (("" (grind) nil nil)) nil)) nil)
   ((armc? def-decl "bool" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (refs def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (typed_reduce_n subtype "IL.popDepth(typed_rreduction.state`redex)"
    "upto(typed_rreduction.stack_types`length)")))
 (typed_reduce_n_TCC4 0
  (typed_reduce_n_TCC4-1 nil 3703351555
   ("" (skeep* :preds? t)
    (("" (typepred "state`redex")
      (("" (split)
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (inst -4 "i-popDepth(state`context)")
            (("1" (rewrite cvars_vars_ctx)
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((armc? def-decl "bool" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (refs def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cvars_vars_ctx formula-decl nil preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (state skolem-const-decl "{rS: rstate |
   noDanglingRefs?(rS) AND
    allReleaseMarked?(rS`redex) AND armc?(rS`context)}"
     typed_reduction_props nil)
    (i skolem-const-decl "nat" typed_reduction_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (typed_reduce_n subtype
    "typed_reduction.popn(typed_rreduction.stack_types, IL.popDepth(typed_rreduction.state`redex))"
    "{stypes | IL.popDepth(typed_rreduction.state`context) <= typed_reduction.stypes`length AND FORALL i: preprocess.cvars(typed_rreduction.state`context)(typed_reduction.i) IMPLIES typed_reduction.i < typed_reduction.stypes`length}")))
 (typed_reduce_n_TCC5 0
  (typed_reduce_n_TCC5-1 nil 3703351555 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (refs def-decl "bool" IL nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (typed_reduce_n subtype "n - 1" "nat")))
 (typed_reduce_n_TCC6 0
  (typed_reduce_n_TCC6-1 nil 3703351555 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (refs def-decl "bool" IL nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil))
   nil
   (typed_reduce_n subtype "trS"
    "{tS | NOT typed_rreduction.tS`state`error AND typed_reduction.defs_well_typed(D, typed_rreduction.tS`def_types)}")))
 (typed_reduce_n_TCC7 0
  (typed_reduce_n_TCC7-1 nil 3703351555
   ("" (skeep* :preds? t) (("" (rewrite typed_reduce_defs) nil nil))
    nil)
   ((typed_reduce_defs formula-decl nil typed_rreduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil typed_rreduction nil)
    (Defs type-eq-decl nil typed_rreduction nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (typed_reduce_n subtype "typed_rreduction.typed_reduce(D)(trS)"
    "{trS | typed_reduction.defs_well_typed(D, trS`def_types)}")))
 (typed_reduce_n_TCC8 0
  (typed_reduce_n_TCC8-1 nil 3703351555 ("" (termination-tcc) nil nil)
   nil nil
   (typed_reduce_n termination
    "typed_reduce_n(D)(n - 1, typed_rreduction.typed_reduce(D)(trS))"
    "nil")))
 (typed_reduce_n_state_TCC1 0
  (typed_reduce_n_state_TCC1-1 nil 3706632797
   ("" (skeep* :preds? t)
    (("" (typepred "D`seq(x1)`body")
      (("" (assert)
        (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Defs type-eq-decl nil typed_reduction_props nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pure? def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (unmark_pure rec-application-judgement "(pure?)" preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (typed_reduce_n_state subtype "D" "Defs")))
 (typed_reduce_n_state 0
  (typed_reduce_n_state-1 nil 3703356460
   ("" (induct n)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand typed_reduce_n +)
        (("2" (expand rreduce_n +)
          (("2" (lift-if)
            (("2" (split)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (rewrite -3)
                  (("2" (rewrite typed_reduce_state) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (typepred "D`seq(x1)`body")
          (("3" (assert)
            (("3" (skeep) (("3" (inst?) (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (armc? def-decl "bool" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (typed_reduce_n def-decl "typed_rstate" typed_reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (rreduce_n def-decl "rstate" reduction_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (reduce_ndr application-judgement "(noDanglingRefs?)" rreduction
     nil)
    (typed_reduce_state formula-decl nil typed_rreduction nil)
    (Definition type-eq-decl nil typed_rreduction nil)
    (Defs type-eq-decl nil typed_rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (typed_reduce const-decl "typed_rstate" typed_rreduction nil)
    (unmark_pure rec-application-judgement "(pure?)" preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (build_redex_match_type_TCC1 0
  (build_redex_match_type_TCC1-1 nil 3703437223
   ("" (subtype-tcc) nil nil) nil nil
   (build_redex_match_type subtype "stypes"
    "{stypes | IL.popDepth(A) <= typed_reduction.stypes`length AND FORALL i: preprocess.cvars(A)(typed_reduction.i) IMPLIES typed_reduction.i < typed_reduction.stypes`length}")))
 (build_redex_match_type_TCC2 0
  (build_redex_match_type_TCC2-1 nil 3703437223
   ("" (subtype-tcc) nil nil) nil nil
   (build_redex_match_type subtype "stypes2"
    "{stypes | IL.popDepth(B) <= typed_reduction.stypes`length AND FORALL i: preprocess.cvars(B)(typed_reduction.i) IMPLIES typed_reduction.i < typed_reduction.stypes`length}")))
 (build_redex_match_type 0
  (build_redex_match_type-2 nil 3706363138
   ("" (induct A)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand unmark -5)
        (("5" (expand translate_refs -5)
          (("5" (case "letexpr?(B)")
            (("1" (assert)
              (("1" (expand buildRedexType +)
                (("1" (expand is_well_typed (-11 -12))
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (case "value?(letexpr1_var)")
                        (("1" (case "value?(letrhs(B))")
                          (("1" (assert) nil nil)
                           ("2" (replace -7 :dir RL)
                            (("2" (simplify)
                              (("2"
                                (use translate_refs_value)
                                (("2" (use unmark_value) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "value?(letrhs(B))")
                          (("1" (replace -7 :dir RL)
                            (("1" (simplify)
                              (("1"
                                (hide-all-but (1 2 -1))
                                (("1"
                                  (generalize
                                   letexpr1_var
                                   letexpr1_var)
                                  (("1"
                                    (induct-and-simplify letexpr1_var)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (inst -2 "letrhs(B)" def_types def_types2
                               dom_types dom_types2 _ _ "lrhs(tA)"
                               translate)
                              (("2"
                                (inst? -2)
                                (("2"
                                  (inst? -2)
                                  (("2"
                                    (split -2)
                                    (("1"
                                      (replace -1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil)
                                     ("4"
                                      (decompose-equality -5)
                                      nil
                                      nil)
                                     ("5" (grind) nil nil)
                                     ("6" (grind) nil nil)
                                     ("7" (grind) nil nil)
                                     ("8" (grind) nil nil)
                                     ("9" (grind) nil nil)
                                     ("10" (propax) nil nil)
                                     ("11" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)
     ("9" (grind) nil nil) ("10" (grind) nil nil)
     ("11" (skeep* :preds? t)
      (("11" (expand unmark -4)
        (("11" (expand translate_refs -4)
          (("11" (case "pop?(B)")
            (("1" (assert)
              (("1" (expand is_well_typed (-10 -11))
                (("1" (flatten)
                  (("1" (expand buildRedexType +)
                    (("1" (assert)
                      (("1" (case "value?(pop1_var)")
                        (("1" (case "value?(pbody(B))")
                          (("1" (assert) nil nil)
                           ("2" (decompose-equality -6)
                            (("2" (replace -1 :dir RL)
                              (("2"
                                (use translate_refs_value)
                                (("2" (use unmark_value) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "value?(pbody(B))")
                          (("1" (decompose-equality -6)
                            (("1" (replace -1 :dir RL)
                              (("1"
                                (expand buildRedex 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but (1 2 -2))
                                    (("1"
                                      (generalize pop1_var pop1_var)
                                      (("1"
                                        (induct-and-simplify pop1_var)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (inst -2 "pbody(B)" _ _ _ _ _ _
                               "ptbody(tA)" _)
                              (("2"
                                (inst?)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (split -2)
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil)
                                       ("4"
                                        (decompose-equality -4)
                                        nil
                                        nil)
                                       ("5"
                                        (expand buildRedex +)
                                        (("5" (propax) nil nil))
                                        nil)
                                       ("6" (grind) nil nil)
                                       ("7" (grind) nil nil)
                                       ("8" (grind) nil nil)
                                       ("9" (grind) nil nil)
                                       ("10" (propax) nil nil)
                                       ("11" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil)
     ("14" (delete 2) (("14" (grind) nil nil)) nil)
     ("15" (delete 2) (("15" (grind) nil nil)) nil))
    nil)
   ((ptbody adt-accessor-decl "[(popt?) -> typeinfo]" typeinfo_adt nil)
    (popt? adt-recognizer-decl "[typeinfo -> boolean]" typeinfo_adt
     nil)
    (pbody adt-accessor-decl "[(pop?) -> IExpression]" IExpression_adt
     nil)
    (pop1_var skolem-const-decl "IExpression" typed_reduction_props
     nil)
    (pop adt-constructor-decl "[IExpression -> (pop?)]" IExpression_adt
         nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add const-decl "(nonempty?)" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (letexpr adt-constructor-decl
     "[[IExpression, IExpression] -> (letexpr?)]" IExpression_adt nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (lrhs adt-accessor-decl "[(lett?) -> typeinfo]" typeinfo_adt nil)
    (lett? adt-recognizer-decl "[typeinfo -> boolean]" typeinfo_adt
     nil)
    (union const-decl "set" sets nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (drop const-decl "finite_set[nat]" IL nil)
    (member const-decl "bool" sets nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (body adt-accessor-decl "[(letexpr?) -> IExpression]"
          IExpression_adt nil)
    (letrhs adt-accessor-decl "[(letexpr?) -> IExpression]"
     IExpression_adt nil)
    (unmark_value judgement-tcc nil preprocess nil)
    (letexpr1_var skolem-const-decl "IExpression" typed_reduction_props
     nil)
    (translate_refs_value judgement-tcc nil reduction_props nil)
    (value? const-decl "bool" IL nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (in_varlist const-decl "finite_set[nat]" IL nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (emptyset const-decl "set" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (singleton const-decl "(singleton?)" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (buildRedexType def-decl "{tK, tB | typeinfo_fill(tK, tB) = tA}"
     typed_reduction nil)
    (typeinfo_fill def-decl "typeinfo" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_reduction_props nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (IExpression type-decl nil IExpression_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (popDepth def-decl "nat" IL nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IContext type-decl nil IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fill def-decl "IExpression" IL nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil))
   nil)
  (build_redex_match_type-1 nil 3703437224
   ("" (induct A)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand unmark -5)
        (("5" (expand translate_refs -5)
          (("5" (case "letexpr?(B)")
            (("1" (assert)
              (("1" (expand buildRedexType +)
                (("1" (expand is_well_typed (-11 -12))
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (case "atom?(letexpr1_var)")
                        (("1" (case "atom?(letrhs(B))")
                          (("1" (assert) nil nil)
                           ("2" (replace -7 :dir RL)
                            (("2" (simplify)
                              (("2"
                                (use translate_refs_atom)
                                (("2" (use unmark_atom) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "atom?(letrhs(B))")
                          (("1" (replace -7 :dir RL)
                            (("1" (simplify)
                              (("1"
                                (hide-all-but (1 2 -1))
                                (("1"
                                  (generalize
                                   letexpr1_var
                                   letexpr1_var)
                                  (("1"
                                    (induct-and-simplify letexpr1_var)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (inst -2 "letrhs(B)" def_types def_types2
                               dom_types dom_types2 _ _ "lrhs(tA)"
                               translate)
                              (("2"
                                (inst? -2)
                                (("2"
                                  (inst? -2)
                                  (("2"
                                    (split -2)
                                    (("1"
                                      (replace -1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil)
                                     ("4"
                                      (decompose-equality -5)
                                      nil
                                      nil)
                                     ("5" (grind) nil nil)
                                     ("6" (grind) nil nil)
                                     ("7" (grind) nil nil)
                                     ("8" (grind) nil nil)
                                     ("9" (grind) nil nil)
                                     ("10" (propax) nil nil)
                                     ("11" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)
     ("9" (grind) nil nil) ("10" (grind) nil nil)
     ("11" (skeep* :preds? t)
      (("11" (expand unmark -4)
        (("11" (expand translate_refs -4)
          (("11" (case "pop?(B)")
            (("1" (assert)
              (("1" (expand is_well_typed (-10 -11))
                (("1" (flatten)
                  (("1" (expand buildRedexType +)
                    (("1" (assert)
                      (("1" (case "atom?(pop1_var)")
                        (("1" (case "atom?(pbody(B))")
                          (("1" (assert) nil nil)
                           ("2" (decompose-equality -6)
                            (("2" (replace -1 :dir RL)
                              (("2"
                                (use translate_refs_atom)
                                (("2" (use unmark_atom) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "atom?(pbody(B))")
                          (("1" (decompose-equality -6)
                            (("1" (replace -1 :dir RL)
                              (("1"
                                (expand buildRedex 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but (1 2 -2))
                                    (("1"
                                      (generalize pop1_var pop1_var)
                                      (("1"
                                        (induct-and-simplify pop1_var)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (inst -2 "pbody(B)" _ _ _ _ _ _
                               "ptbody(tA)" _)
                              (("2"
                                (inst?)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (split -2)
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil)
                                       ("4"
                                        (decompose-equality -4)
                                        nil
                                        nil)
                                       ("5"
                                        (expand buildRedex +)
                                        (("5" (propax) nil nil))
                                        nil)
                                       ("6" (grind) nil nil)
                                       ("7" (grind) nil nil)
                                       ("8" (grind) nil nil)
                                       ("9" (grind) nil nil)
                                       ("10" (propax) nil nil)
                                       ("11" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil)
     ("14" (delete 2) (("14" (grind) nil nil)) nil)
     ("15" (delete 2) (("15" (grind) nil nil)) nil))
    nil)
   ((ptbody adt-accessor-decl "[(popt?) -> typeinfo]" typeinfo_adt nil)
    (popt? adt-recognizer-decl "[typeinfo -> boolean]" typeinfo_adt
     nil)
    (pbody adt-accessor-decl "[(pop?) -> IExpression]" IExpression_adt
     nil)
    (pop adt-constructor-decl "[IExpression -> (pop?)]" IExpression_adt
         nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add const-decl "(nonempty?)" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (letexpr adt-constructor-decl
     "[[IExpression, IExpression] -> (letexpr?)]" IExpression_adt nil)
    (value? const-decl "bool" IL nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (lrhs adt-accessor-decl "[(lett?) -> typeinfo]" typeinfo_adt nil)
    (lett? adt-recognizer-decl "[typeinfo -> boolean]" typeinfo_adt
     nil)
    (union const-decl "set" sets nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (drop const-decl "finite_set[nat]" IL nil)
    (member const-decl "bool" sets nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (body adt-accessor-decl "[(letexpr?) -> IExpression]"
          IExpression_adt nil)
    (letrhs adt-accessor-decl "[(letexpr?) -> IExpression]"
     IExpression_adt nil)
    (unmark_atom judgement-tcc nil preprocess nil)
    (translate_refs_atom judgement-tcc nil reduction_props nil)
    (atom? const-decl "bool" IL nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (in_varlist const-decl "finite_set[nat]" IL nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (emptyset const-decl "set" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (buildRedexType def-decl "{tK, tB | typeinfo_fill(tK, tB) = tA}"
     typed_reduction nil)
    (typeinfo_fill def-decl "typeinfo" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_reduction_props nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (IExpression type-decl nil IExpression_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IContext type-decl nil IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fill def-decl "IExpression" IL nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil))
   shostak))
 (translate_refs_e_pure 0
  (translate_refs_e_pure-1 nil 3703512447
   ("" (induct A)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (pure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil))
   shostak))
 (unmark_e_pure 0
  (unmark_e_pure-1 nil 3703512485 ("" (induct-and-simplify A) nil nil)
   ((IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pure? def-decl "bool" IL nil)
    (unmark def-decl "IExpression" preprocess nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil))
   shostak))
 (make_redex_types_match_TCC1 0
  (make_redex_types_match_TCC1-1 nil 3703435269
   ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (value? const-decl "bool" IL nil))
   nil
   (make_redex_types_match subtype "trS"
    "{tS | typed_rreduction.tS`state`context = IL.hole AND NOT IL.value?(typed_rreduction.tS`state`redex)}")))
 (make_redex_types_match_TCC2 0
  (make_redex_types_match_TCC2-1 nil 3703435269
   ("" (subtype-tcc) nil nil)
   ((value? const-decl "bool" IL nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (make_redex_typed const-decl "typed_rstate" typed_rreduction nil)
    (releaseRedex? const-decl "bool" IL nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" typed_reduction_props nil)
    (state_matches? const-decl "boolean" typed_reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (make_redex_types_match subtype "tS"
    "{tS | typed_reduction.tS`state`context = IL.hole AND NOT IL.value?(typed_reduction.tS`state`redex)}")))
 (make_redex_types_match 0
  (make_redex_types_match-1 nil 3703435270
   ("" (skeep :preds? t)
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (expand state_matches)
          (("" (expand make_redex_typed)
            (("" (flatten)
              (("" (expand types_matches)
                (("" (assert)
                  (("" (lemma build_redex_match_type)
                    ((""
                      (inst -1 "trS`state`redex" "tS`state`redex" _ _ _
                       _ _ _ _ _)
                      (("" (inst?)
                        ((""
                          (inst -1 "trS`def_types" "tS`def_types"
                           "trS`dom_types" "tS`dom_types"
                           "trS`stack_types" "tS`stack_types"
                           "translate")
                          (("" (split -1)
                            (("1" (replace -1)
                              (("1" (replace*) nil nil)) nil)
                             ("2" (typepred "trS`state`redex")
                              (("2" (propax) nil nil)) nil)
                             ("3" (typepred "tS`state`redex")
                              (("3" (propax) nil nil)) nil)
                             ("4" (expand state_matches)
                              (("4" (flatten) nil nil)) nil)
                             ("5" (expand make_redex)
                              (("5"
                                (expand releaseRedex?)
                                (("5" (propax) nil nil))
                                nil))
                              nil)
                             ("6" (typepred "trS`stack_types")
                              (("6"
                                (typepred "trS`state`redex")
                                (("6" (grind) nil nil))
                                nil))
                              nil)
                             ("7" (typepred "trS`stack_types")
                              (("7"
                                (typepred "trS`state`redex")
                                (("7"
                                  (skeep)
                                  (("7"
                                    (inst
                                     -2
                                     "i-popDepth(trS`state`redex)")
                                    (("1"
                                      (rewrite cvars_vars)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("8" (typepred "tS`stack_types")
                              (("8"
                                (typepred "tS`state`redex")
                                (("8" (grind) nil nil))
                                nil))
                              nil)
                             ("9" (typepred "tS`stack_types")
                              (("9"
                                (typepred "tS`state`redex")
                                (("9"
                                  (skeep)
                                  (("9"
                                    (inst
                                     -2
                                     "i-popDepth(tS`state`redex)")
                                    (("1"
                                      (rewrite cvars_vars)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("10" (typepred "trS`redex_type")
                              (("10" (propax) nil nil)) nil)
                             ("11" (typepred "tS`redex_type")
                              (("11" (replace*) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" typed_reduction_props nil)
    (state_matches const-decl "boolean" typed_reduction_props nil)
    (IExpression type-decl nil IExpression_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (estate type-eq-decl nil reduction nil)
    (typed_state type-eq-decl nil typed_reduction nil)
    (tdef type-eq-decl nil typed_reduction_props nil)
    (tS skolem-const-decl "typed_state" typed_reduction_props nil)
    (i skolem-const-decl "nat" typed_reduction_props nil)
    (cvars_vars formula-decl nil preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (trS skolem-const-decl "typed_rstate" typed_reduction_props nil)
    (i skolem-const-decl "nat" typed_reduction_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (releaseRedex? const-decl "bool" IL nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (build_redex_match_type formula-decl nil typed_reduction_props nil)
    (types_matches const-decl "boolean" typed_reduction_props nil)
    (make_redex_typed const-decl "typed_rstate" typed_rreduction nil)
    (make_redex_typed const-decl "typed_state" typed_reduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (bisimulation_lemma_TCC1 0
  (bisimulation_lemma_TCC1-1 nil 3703351555 ("" (subtype-tcc) nil nil)
   ((defs_well_typed const-decl "boolean" typed_reduction nil)
    (to_topstate const-decl "topstate" reduction nil)
    (typed_to_topstate const-decl "typed_state" typed_reduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (typed_to_topstate const-decl "typed_rstate" typed_rreduction nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" typed_reduction_props nil)
    (state_matches? const-decl "boolean" typed_reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (bisimulation_lemma subtype "tS"
    "{tS | NOT typed_reduction.tS`state`error AND typed_reduction.defs_well_typed(D, typed_reduction.tS`def_types)}")))
 (bisimulation_lemma_TCC2 0
  (bisimulation_lemma_TCC2-1 nil 3703351555 ("" (subtype-tcc) nil nil)
   ((defs_well_typed const-decl "boolean" typed_reduction nil)
    (to_topstate const-decl "topstate" reduction nil)
    (typed_to_topstate const-decl "typed_state" typed_reduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (typed_to_topstate const-decl "typed_rstate" typed_rreduction nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" typed_reduction_props nil)
    (state_matches? const-decl "boolean" typed_reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (bisimulation_lemma subtype "trS"
    "{trS | typed_reduction.defs_well_typed(D, trS`def_types)}")))
 (bisimulation_lemma 0
  (bisimulation_lemma-12 "" 3706362168
   ("" (measure-induct+ "top_releases_ct(trS`state`redex)" ("trS"))
    (("1" (label hrec -1)
      (("1" (with-labels (skeep* +) ((err1 err2 dwt stm obj)))
        (("1" (name-replace rS "x!1")
          (("1" (case-replace "top_releases_ct(rS`state`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand typed_reduce_n +)
                (("1" (assert)
                  (("1" (expand typed_reduce_n)
                    (("1" (expand state_matches?)
                      (("1" (skeep)
                        (("1" (expand state_matches)
                          (("1" (rewrite typed_reduce_state)
                            (("1"
                              (case "exists (translate):
                                                                    state_matches(reduce(D)(tS`state), typed_reduce(D)(rS)`state)
                                                                                 (translate)")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst + "translate!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "types_matches(typed_reduce(D)(tS), typed_reduce(D)(rS))")
                                      (("1"
                                        (expand types_matches)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (label obj 1)
                                          (("2"
                                            (case
                                             "types_matches(typed_to_topstate(tS), typed_to_topstate(rS))")
                                            (("1"
                                              (delete -6 -7 -8 -9)
                                              (("1"
                                                (case
                                                 "value?(typed_to_topstate(tS)`state`redex)")
                                                (("1"
                                                  (case
                                                   "value?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (delete -4)
                                                      (("1"
                                                        (expand
                                                         typed_reduce)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete -3)
                                                    (("2"
                                                      (expand
                                                       state_matches)
                                                      (("2"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (case
                                                             "value?(unmark(typed_to_topstate(rS)`state`redex))")
                                                            (("1"
                                                              (case
                                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                                              (("1"
                                                                (hide-all-but
                                                                 (1
                                                                  -1
                                                                  -2))
                                                                (("1"
                                                                  (expand
                                                                   typed_to_topstate)
                                                                  (("1"
                                                                    (name-replace
                                                                     A
                                                                     "to_topstate(rS`state)`redex")
                                                                    (("1"
                                                                      (generalize
                                                                       A
                                                                       A
                                                                       IExpression)
                                                                      (("1"
                                                                        (induct-and-simplify
                                                                         A)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 to_topstate)
                                                                (("2"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (name-replace
                                                               A
                                                               "unmark(typed_to_topstate(rS)`state`redex)")
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -1))
                                                                (("2"
                                                                  (generalize
                                                                   A
                                                                   A
                                                                   "IExpression")
                                                                  (("2"
                                                                    (induct-and-simplify
                                                                     A)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "value?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (delete -3)
                                                    (("1"
                                                      (expand
                                                       state_matches)
                                                      (("1"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("1"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (rewrite
                                                             translate_refs_value)
                                                            (("1"
                                                              (rewrite
                                                               unmark_value)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "state_matches?(make_redex_typed(typed_to_topstate(tS))`state, make_redex_typed(typed_to_topstate(rS))`state)")
                                                    (("1"
                                                      (case
                                                       "types_matches(make_redex_typed(typed_to_topstate(tS)), make_redex_typed(typed_to_topstate(rS)))")
                                                      (("1"
                                                        (delete -4)
                                                        (("1"
                                                          (expand
                                                           typed_reduce)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               state_matches?)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   state_matches
                                                                   -2)
                                                                  (("1"
                                                                    (with-labels
                                                                     (flatten)
                                                                     ((err
                                                                       trr
                                                                       unm
                                                                       stam
                                                                       stom)))
                                                                    (("1"
                                                                      (with-labels
                                                                       (case
                                                                        "NOT releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                                                       ((rel)))
                                                                      (("1"
                                                                        (expand
                                                                         "releaseRedex?"
                                                                         rel)
                                                                        (("1"
                                                                          (case
                                                                           "variable?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                                                          (("1"
                                                                            (case
                                                                             "variable?(make_redex_typed(typed_to_topstate(tS))`state`redex)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 types_matches)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (delete
                                                                               obj)
                                                                              (("2"
                                                                                (use
                                                                                 variable_match)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "variable?(make_redex_typed(typed_to_topstate(tS))`state`redex)")
                                                                            (("1"
                                                                              (delete
                                                                               obj)
                                                                              (("1"
                                                                                (replace
                                                                                 trr
                                                                                 :dir
                                                                                 RL)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    -1
                                                                                    rel))
                                                                                  (("1"
                                                                                    (expand*
                                                                                     make_redex_typed
                                                                                     make_redex)
                                                                                    (("1"
                                                                                      (generalize
                                                                                       "typed_to_topstate(rS)`state`redex"
                                                                                       "A"
                                                                                       "IExpression")
                                                                                      (("1"
                                                                                        (induct
                                                                                         A)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("4"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("5"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("6"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("7"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("8"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("9"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("10"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("11"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("12"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("13"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "pureLetRedex?(make_redex_typed
                                                                                                                                                                  (typed_to_topstate(rS))`state`redex)")
                                                                              (("1"
                                                                                (case
                                                                                 "pureLetRedex?(make_redex_typed
                                                                                                                                                                            (typed_to_topstate(tS))`state`redex)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     types_matches)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace*)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (replace
                                                                                     trr
                                                                                     :dir
                                                                                     RL)
                                                                                    (("2"
                                                                                      (expand
                                                                                       pureLetRedex?)
                                                                                      (("2"
                                                                                        (expand
                                                                                         letRedex?)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (split
                                                                                             +)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand*
                                                                                                 unmark
                                                                                                 translate_refs
                                                                                                 +)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand*
                                                                                                 unmark
                                                                                                 translate_refs
                                                                                                 +)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   translate_refs_value)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     unmark_value)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (expand*
                                                                                                 unmark
                                                                                                 translate_refs
                                                                                                 +)
                                                                                                (("3"
                                                                                                  (use
                                                                                                   translate_refs_pure)
                                                                                                  (("3"
                                                                                                    (use
                                                                                                     unmark_pure)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "pureLetRedex?(make_redex_typed
                                                                                                                                                                            (typed_to_topstate(tS))`state`redex)")
                                                                                (("1"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("1"
                                                                                    (replace
                                                                                     trr
                                                                                     :dir
                                                                                     RL)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (1
                                                                                        -1
                                                                                        rel))
                                                                                      (("1"
                                                                                        (expand*
                                                                                         make_redex_typed
                                                                                         make_redex)
                                                                                        (("1"
                                                                                          (generalize
                                                                                           "typed_to_topstate(rS)`state`redex"
                                                                                           "A"
                                                                                           "IExpression")
                                                                                          (("1"
                                                                                            (induct
                                                                                             A)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("4"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("5"
                                                                                              (skeep*
                                                                                               :preds?
                                                                                               t)
                                                                                              (("5"
                                                                                                (expand
                                                                                                 buildRedex
                                                                                                 (-3
                                                                                                  1
                                                                                                  2))
                                                                                                (("5"
                                                                                                  (case
                                                                                                   "value?(letexpr1_var)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (delete
                                                                                                       -2
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         pureLetRedex?)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           letRedex?)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand*
                                                                                                               unmark
                                                                                                               translate_refs)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 translate_refs_e_pure)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   unmark_e_pure)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("6"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("7"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("8"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("9"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("10"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("11"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("12"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("13"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                     (rS))`state`redex)")
                                                                                  (("1"
                                                                                    (case
                                                                                     "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                               (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         types_matches)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "rS`def_types = tS`def_types")
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "fun(make_redex_typed(typed_to_topstate
                                                   (tS))`state`redex) = fun(make_redex_typed(typed_to_topstate
                                                   (rS))`state`redex)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   trr
                                                                                                   :dir
                                                                                                   RL)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     applyRedex?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   obj)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     trr
                                                                                                     1
                                                                                                     :dir
                                                                                                     RL)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       applyRedex?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           unmark
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             translate_refs
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand*
                                                                                                 make_redex_typed
                                                                                                 typed_to_topstate)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("4"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("2"
                                                                                        (replace
                                                                                         trr
                                                                                         :dir
                                                                                         RL)
                                                                                        (("2"
                                                                                          (expand
                                                                                           applyRedex?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand*
                                                                                               (unmark
                                                                                                translate_refs)
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                               (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("1"
                                                                                        (replace
                                                                                         trr
                                                                                         :dir
                                                                                         RL)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (1
                                                                                            -1
                                                                                            rel))
                                                                                          (("1"
                                                                                            (generalize
                                                                                             "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                             A
                                                                                             "IExpression")
                                                                                            (("1"
                                                                                              (induct-and-simplify
                                                                                               A)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                         (rS))`state`redex)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             types_matches)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace*)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   ift_condtion_match)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "make_redex_typed(typed_to_topstate(tS))`state"
                                                                                                     "make_redex_typed(typed_to_topstate(rS))`state")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       -1)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand*
                                                                                                       make_redex_typed
                                                                                                       typed_to_topstate
                                                                                                       make_redex
                                                                                                       to_topstate)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand*
                                                                                                       make_redex_typed
                                                                                                       typed_to_topstate
                                                                                                       make_redex_e
                                                                                                       to_topstate)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("2"
                                                                                            (replace
                                                                                             trr
                                                                                             :dir
                                                                                             RL)
                                                                                            (("2"
                                                                                              (expand*
                                                                                               pureIftRedex?
                                                                                               iftRedex?)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand*
                                                                                                       (unmark
                                                                                                        translate_refs)
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       unmark
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         translate_refs
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           translate_refs_pure)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             unmark_pure)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       unmark
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         translate_refs
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (use
                                                                                                           translate_refs_pure)
                                                                                                          (("3"
                                                                                                            (use
                                                                                                             unmark_pure)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("1"
                                                                                            (replace
                                                                                             trr
                                                                                             :dir
                                                                                             RL)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                -1
                                                                                                rel))
                                                                                              (("1"
                                                                                                (generalize
                                                                                                 "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                 A
                                                                                                 "IExpression")
                                                                                                (("1"
                                                                                                  (induct
                                                                                                   A)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("5"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("6"
                                                                                                    (skeep*)
                                                                                                    (("6"
                                                                                                      (delete
                                                                                                       -1
                                                                                                       -2
                                                                                                       -3)
                                                                                                      (("6"
                                                                                                        (expand
                                                                                                         pureIftRedex?)
                                                                                                        (("6"
                                                                                                          (expand
                                                                                                           iftRedex?)
                                                                                                          (("6"
                                                                                                            (flatten)
                                                                                                            (("6"
                                                                                                              (expand*
                                                                                                               unmark
                                                                                                               translate_refs)
                                                                                                              (("6"
                                                                                                                (assert)
                                                                                                                (("6"
                                                                                                                  (rewrite
                                                                                                                   translate_refs_e_pure)
                                                                                                                  (("6"
                                                                                                                    (rewrite
                                                                                                                     unmark_e_pure)
                                                                                                                    (("6"
                                                                                                                      (rewrite
                                                                                                                       translate_refs_e_pure)
                                                                                                                      (("6"
                                                                                                                        (rewrite
                                                                                                                         unmark_e_pure)
                                                                                                                        (("6"
                                                                                                                          (split)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("7"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("8"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("9"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("10"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("11"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("12"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("13"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                         (rS))`state`redex)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 types_matches)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 trr
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   updateRedex?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       unmark
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         translate_refs
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 trr
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    -1
                                                                                                    rel))
                                                                                                  (("1"
                                                                                                    (generalize
                                                                                                     "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                     A
                                                                                                     "IExpression")
                                                                                                    (("1"
                                                                                                      (induct-and-simplify
                                                                                                       A)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                        (rS))`state`redex)")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                  (tS))`state`redex)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     types_matches)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     trr
                                                                                                     :dir
                                                                                                     RL)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       lookupRedex?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           unmark
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             translate_refs
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                  (tS))`state`redex)")
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     trr
                                                                                                     :dir
                                                                                                     RL)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (1
                                                                                                        -1
                                                                                                        rel))
                                                                                                      (("1"
                                                                                                        (generalize
                                                                                                         "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                         A
                                                                                                         "IExpression")
                                                                                                        (("1"
                                                                                                          (induct-and-simplify
                                                                                                           A)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                            (rS))`state`redex)")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                      (tS))`state`redex)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         types_matches)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (delete
                                                                                                       obj)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         trr
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           newintRedex?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               unmark
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 translate_refs
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (case
                                                                                                     "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                      (tS))`state`redex)")
                                                                                                    (("1"
                                                                                                      (delete
                                                                                                       obj)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         trr
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (1
                                                                                                            -1
                                                                                                            rel))
                                                                                                          (("1"
                                                                                                            (generalize
                                                                                                             "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                             A
                                                                                                             "IExpression")
                                                                                                            (("1"
                                                                                                              (induct-and-simplify
                                                                                                               A)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                (rS))`state`redex)")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             types_matches)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (delete
                                                                                                           obj)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             trr
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               newrefRedex?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   unmark
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     translate_refs
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (case
                                                                                                         "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                        (("1"
                                                                                                          (delete
                                                                                                           obj)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             trr
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (1
                                                                                                                -1
                                                                                                                rel))
                                                                                                              (("1"
                                                                                                                (generalize
                                                                                                                 "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                                 A
                                                                                                                 "IExpression")
                                                                                                                (("1"
                                                                                                                  (induct-and-simplify
                                                                                                                   A)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                                    (rS))`state`redex)")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 types_matches)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (replace*)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (delete
                                                                                                               obj)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 trr
                                                                                                                 :dir
                                                                                                                 RL)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   popRedex?)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           unmark
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             translate_refs
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           unmark
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             translate_refs
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (use
                                                                                                                               translate_refs_value)
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 unmark_value)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (case
                                                                                                             "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                                            (("1"
                                                                                                              (delete
                                                                                                               obj)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 trr
                                                                                                                 :dir
                                                                                                                 RL)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (1
                                                                                                                    -1
                                                                                                                    rel))
                                                                                                                  (("1"
                                                                                                                    (expand*
                                                                                                                     make_redex_typed
                                                                                                                     make_redex)
                                                                                                                    (("1"
                                                                                                                      (generalize
                                                                                                                       "typed_to_topstate(rS)`state`redex"
                                                                                                                       "A"
                                                                                                                       "IExpression")
                                                                                                                      (("1"
                                                                                                                        (induct
                                                                                                                         A)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("4"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("5"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("6"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("7"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("8"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("9"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("10"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("11"
                                                                                                                          (skeep*)
                                                                                                                          (("11"
                                                                                                                            (expand
                                                                                                                             buildRedex
                                                                                                                             (-2
                                                                                                                              1
                                                                                                                              2))
                                                                                                                            (("11"
                                                                                                                              (case
                                                                                                                               "value?(pop1_var)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("12"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("13"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 make_redex_typed)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "make_redex(typed_to_topstate(rS)`state)")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     pureRedex?)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("5"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("6"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("7"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("8"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("9"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("10"
                                                                                                                        (expand
                                                                                                                         types_matches)
                                                                                                                        (("10"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (expand
                                                                           make_redex_typed
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             make_redex
                                                                             -1)
                                                                            (("2"
                                                                              (rewrite
                                                                               top_releases_build_redex
                                                                               :dir
                                                                               RL)
                                                                              (("2"
                                                                                (expand*
                                                                                 typed_to_topstate
                                                                                 to_topstate)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   top_releases_ct_fill)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         make_redex_types_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (expand*
                                                             typed_to_topstate
                                                             to_topstate)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (expand*
                                                             typed_to_topstate
                                                             to_topstate)
                                                            nil
                                                            nil)
                                                           ("6"
                                                            (expand
                                                             make_redex_typed
                                                             -1)
                                                            (("6"
                                                              (expand
                                                               make_redex
                                                               -1)
                                                              (("6"
                                                                (rewrite
                                                                 top_releases_build_redex
                                                                 :dir
                                                                 RL)
                                                                (("6"
                                                                  (expand
                                                                   typed_to_topstate
                                                                   -1)
                                                                  (("6"
                                                                    (expand
                                                                     to_topstate
                                                                     -1)
                                                                    (("6"
                                                                      (rewrite
                                                                       top_releases_ct_fill)
                                                                      (("6"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("7"
                                                            (expand
                                                             state_matches?)
                                                            (("7"
                                                              (inst
                                                               1
                                                               translate)
                                                              (("7"
                                                                (expand
                                                                 state_matches)
                                                                (("7"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand*
                                                       make_redex_typed
                                                       typed_to_topstate)
                                                      (("2"
                                                        (use
                                                         make_redex_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (expand
                                                             make_redex)
                                                            (("4"
                                                              (rewrite
                                                               top_releases_build_redex
                                                               :dir
                                                               RL)
                                                              (("4"
                                                                (expand
                                                                 to_topstate)
                                                                (("4"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (expand
                                                             state_matches?)
                                                            (("5"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand types_matches)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (delete obj)
                                  (("2"
                                    (case
                                     "state_matches?(reduce(D)(tS`state), typed_reduce(D)(rS)`state)")
                                    (("1"
                                      (expand state_matches?)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (delete 2)
                                      (("2"
                                        (use bisimulation_lemma)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (rewrite
                                             typed_reduce_state)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand rreduce_n)
                                                (("1"
                                                  (expand rreduce_n)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "rS`state")
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (typepred "rS`state")
                                            (("3" (propax) nil nil))
                                            nil)
                                           ("4"
                                            (typepred "rS`state")
                                            (("4" (propax) nil nil))
                                            nil)
                                           ("5"
                                            (expand state_matches?)
                                            (("5"
                                              (inst?)
                                              (("5"
                                                (expand
                                                 typed_to_topstate)
                                                (("5"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (typepred "D`seq(x1)`body")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand typed_to_topstate)
                                      (("3" (replace*) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3"
                                  (expand typed_to_topstate)
                                  (("3" (replace*) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst hrec "typed_reduce(D)(rS)")
              (("1" (inst?)
                (("1" (split hrec)
                  (("1" (rewrite typed_reduce_state)
                    (("1" (rewrite top_releases_reduce)
                      (("1" (expand typed_reduce_n +)
                        (("1" (assert) nil nil)) nil)
                       ("2" (skeep)
                        (("2" (typepred "D`seq(x1)`body")
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (rewrite typed_reduce_state)
                    (("3" (rewrite top_release_reduce)
                      (("1" (expand releaseReduce)
                        (("1" (expand* decref make_redex)
                          (("1" (split hrec)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (typepred "D`seq(x1)`body")
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (propax) nil nil)
                   ("5" (expand state_matches?)
                    (("5" (skeep)
                      (("5" (inst?)
                        (("5" (delete obj)
                          (("5" (expand state_matches)
                            (("5" (expand typed_to_topstate hrec)
                              (("5"
                                (rewrite typed_reduce_state)
                                (("1"
                                  (rewrite top_release_reduce)
                                  (("1"
                                    (use releaseReduce_reduce_match)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((sstam rtm ctm sttm dtm)))
                                          (("1"
                                            (case
                                             "NOT value?(typed_to_topstate(rS)`state`redex)")
                                            (("1"
                                              (case
                                               "releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                              (("1"
                                                (expand releaseRedex?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     typed_reduce)
                                                    (("1"
                                                      (expand*
                                                       pureLetRedex?
                                                       letRedex?
                                                       applyRedex?
                                                       pureIftRedex?
                                                       iftRedex?
                                                       updateRedex?
                                                       lookupRedex?
                                                       newintRedex?
                                                       newrefRedex?
                                                       popRedex?)
                                                      (("1"
                                                        (split hrec)
                                                        (("1"
                                                          (expand
                                                           make_redex_typed)
                                                          (("1"
                                                            (typepred
                                                             "buildRedexType(typed_to_topstate(rS)`state`redex,
                                                                                                                                        typed_to_topstate(rS)`redex_type)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 typed_to_topstate)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 make_redex_typed
                                                 +)
                                                (("2"
                                                  (expand make_redex +)
                                                  (("2"
                                                    (lemma
                                                     top_releases_build_redex)
                                                    (("2"
                                                      (inst? :where 1)
                                                      (("2"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (delete hrec)
                                                          (("2"
                                                            (expand
                                                             typed_to_topstate
                                                             +)
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (split)
                                                (("1"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                              (("1"
                                                (expand to_topstate)
                                                (("1"
                                                  (rewrite
                                                   top_releases_ct_fill)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 typed_to_topstate)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "rS`state")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (typepred "rS`state")
                                        (("3" (propax) nil nil))
                                        nil)
                                       ("4"
                                        (typepred "rS`state")
                                        (("4" (propax) nil nil))
                                        nil)
                                       ("5"
                                        (flatten)
                                        (("5"
                                          (expand typed_to_topstate)
                                          (("5" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (delete hrec)
                                        (("6"
                                          (delete stm)
                                          (("6" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (typepred "D`seq(x1)`body")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (typepred "D`seq(x1)`body")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand typed_to_topstate)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (rewrite typed_reduce_state)
                    (("6" (rewrite top_releases_reduce)
                      (("1" (assert) nil nil)
                       ("2" (skeep)
                        (("2" (typepred "D`seq(x1)`body")
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (propax) nil nil)
                 ("2" (expand state_matches? -)
                  (("2" (skeep)
                    (("2" (expand* state_matches typed_to_topstate)
                      (("2" (flatten) (("2" (replace*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (delete 4 -4)
      (("2" (expand state_matches?)
        (("2" (skeep)
          (("2" (expand* state_matches typed_to_topstate)
            (("2" (flatten) (("2" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (delete 4)
      (("3" (expand state_matches?)
        (("3" (skeep)
          (("3" (expand* state_matches typed_to_topstate)
            (("3" (flatten) (("3" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (typed_to_topstate const-decl "typed_rstate" typed_rreduction nil)
    (typed_to_topstate const-decl "typed_state" typed_reduction nil)
    (state_matches? const-decl "boolean" typed_reduction_props nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (typed_state type-eq-decl nil typed_reduction nil)
    (estate type-eq-decl nil reduction nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (pure? def-decl "bool" IL nil)
    (typed_reduce const-decl "typed_state" typed_reduction nil)
    (typed_reduce_n def-decl "typed_rstate" typed_reduction_props nil)
    (typed_reduce_state formula-decl nil typed_reduction nil)
    (bisimulation_lemma formula-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (D skolem-const-decl "Defs" typed_reduction_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (typed_reduce_state formula-decl nil typed_rreduction nil)
    (reduce_ndr application-judgement "(noDanglingRefs?)" rreduction
     nil)
    (rreduce_n def-decl "rstate" reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unmark_pure rec-application-judgement "(pure?)" preprocess nil)
    (top_releases_ct_fill formula-decl nil reduction_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (to_topstate_dangling application-judgement "(noDanglingRefs?)"
     rreduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (make_redex_typed const-decl "typed_state" typed_reduction nil)
    (make_redex_typed const-decl "typed_rstate" typed_rreduction nil)
    (make_redex_types_match formula-decl nil typed_reduction_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (top_releases_build_redex formula-decl nil reduction_props nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (fill def-decl "IExpression" IL nil)
    (translate_refs_e_pure formula-decl nil typed_reduction_props nil)
    (unmark_e_pure formula-decl nil typed_reduction_props nil)
    (pureRedex? const-decl "bool" IL nil)
    (pbody adt-accessor-decl "[(pop?) -> IExpression]" IExpression_adt
     nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (popRedex? const-decl "bool" IL nil)
    (newrefRedex? const-decl "bool" IL nil)
    (newintRedex? const-decl "bool" IL nil)
    (lookupRedex? const-decl "bool" IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (ift_condtion_match formula-decl nil reduction_props nil)
    (thenexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (elseexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (iftRedex? const-decl "bool" IL nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (fun adt-accessor-decl "[(application?) -> nat]" IExpression_adt
         nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (applyRedex? const-decl "bool" IL nil)
    (letRedex? const-decl "bool" IL nil)
    (unmark def-decl "IContext" preprocess nil)
    (letrhs adt-accessor-decl "[(letexpr?) -> IExpression]"
     IExpression_adt nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (body adt-accessor-decl "[(letexpr?) -> IExpression]"
          IExpression_adt nil)
    (translate_refs_pure recursive-judgement-axiom nil reduction_props
     nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (variable_match formula-decl nil reduction_props nil)
    (tS skolem-const-decl "typed_state" typed_reduction_props nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (rS skolem-const-decl "typed_rstate" typed_reduction_props nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (to_topstate const-decl "topstate" reduction nil)
    (make_redex_e const-decl "{eS | pureRedex?(eS`redex)}" reduction
     nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (releaseRedex? const-decl "bool" IL nil)
    (make_redex_match formula-decl nil reduction_props nil)
    (topstate type-eq-decl nil reduction nil)
    (translate_refs_value judgement-tcc nil reduction_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_value judgement-tcc nil preprocess nil)
    (types_matches const-decl "boolean" typed_reduction_props nil)
    (typed_reduce const-decl "typed_rstate" typed_rreduction nil)
    (Defs type-eq-decl nil typed_rreduction nil)
    (Definition type-eq-decl nil typed_rreduction nil)
    (reduce const-decl "estate" reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (Defs type-eq-decl nil reduction nil)
    (Definition type-eq-decl nil reduction nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" typed_reduction_props nil)
    (releaseReduce_reduce_match formula-decl nil reduction_props nil)
    (typeinfo_fill def-decl "typeinfo" typed_reduction nil)
    (buildRedexType def-decl "{tK, tB | typeinfo_fill(tK, tB) = tA}"
     typed_reduction nil)
    (releaseReduce const-decl "rstate" rreduction nil)
    (decref1_preserves_error formula-decl nil reduction_props nil)
    (decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (top_release_reduce formula-decl nil reduction_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (top_releases_reduce formula-decl nil reduction_props nil))
   shostak)
  (bisimulation_lemma-11 "" 3706361472
   ("" (measure-induct+ "top_releases_ct(trS`state`redex)" ("trS"))
    (("1" (label hrec -1)
      (("1" (with-labels (skeep* +) ((err1 err2 dwt stm obj)))
        (("1" (name-replace rS "x!1")
          (("1" (case-replace "top_releases_ct(rS`state`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand typed_reduce_n +)
                (("1" (assert)
                  (("1" (expand typed_reduce_n)
                    (("1" (expand state_matches?)
                      (("1" (skeep)
                        (("1" (expand state_matches)
                          (("1" (rewrite typed_reduce_state)
                            (("1"
                              (case "exists (translate):
                                                                    state_matches(reduce(D)(tS`state), typed_reduce(D)(rS)`state)
                                                                                 (translate)")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst + "translate!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "types_matches(typed_reduce(D)(tS), typed_reduce(D)(rS))")
                                      (("1"
                                        (expand types_matches)
                                        (("1" (propax) nil)))
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (label obj 1)
                                          (("2"
                                            (case
                                             "types_matches(typed_to_topstate(tS), typed_to_topstate(rS))")
                                            (("1"
                                              (delete -6 -7 -8 -9)
                                              (("1"
                                                (case
                                                 "value?(typed_to_topstate(tS)`state`redex)")
                                                (("1"
                                                  (case
                                                   "value?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (delete -4)
                                                      (("1"
                                                        (expand
                                                         typed_reduce)
                                                        (("1"
                                                          (propax)
                                                          nil)))))))
                                                   ("2"
                                                    (delete -3)
                                                    (("2"
                                                      (expand
                                                       state_matches)
                                                      (("2"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (case
                                                             "value?(unmark(typed_to_topstate(rS)`state`redex))")
                                                            (("1"
                                                              (case
                                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                                              (("1"
                                                                (hide-all-but
                                                                 (1
                                                                  -1
                                                                  -2))
                                                                (("1"
                                                                  (expand
                                                                   typed_to_topstate)
                                                                  (("1"
                                                                    (generalize
                                                                     "to_topstate(rS`state)`redex"
                                                                     A
                                                                     "IExpression")
                                                                    (("1"
                                                                      (induct-and-simplify
                                                                       A)
                                                                      nil)))))))
                                                               ("2"
                                                                (expand
                                                                 to_topstate)
                                                                (("2"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  nil)))))
                                                             ("2"
                                                              (name-replace
                                                               A
                                                               "unmark(typed_to_topstate(rS)`state`redex)")
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -1))
                                                                (("2"
                                                                  (generalize
                                                                   A
                                                                   A
                                                                   "IExpression")
                                                                  (("2"
                                                                    (induct-and-simplify
                                                                     A)
                                                                    nil)))))))))))))))))))
                                                 ("2"
                                                  (case
                                                   "value?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (delete -3)
                                                    (("1"
                                                      (expand
                                                       state_matches)
                                                      (("1"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("1"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (rewrite
                                                             translate_refs_value)
                                                            (("1"
                                                              (rewrite
                                                               unmark_value)
                                                              nil)))))))))))
                                                   ("2"
                                                    (case
                                                     "state_matches?(make_redex_typed(typed_to_topstate(tS))`state, make_redex_typed(typed_to_topstate(rS))`state)")
                                                    (("1"
                                                      (case
                                                       "types_matches(make_redex_typed(typed_to_topstate(tS)), make_redex_typed(typed_to_topstate(rS)))")
                                                      (("1"
                                                        (delete -4)
                                                        (("1"
                                                          (expand
                                                           typed_reduce)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               state_matches?)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   state_matches
                                                                   -2)
                                                                  (("1"
                                                                    (with-labels
                                                                     (flatten)
                                                                     ((err
                                                                       trr
                                                                       unm
                                                                       stam
                                                                       stom)))
                                                                    (("1"
                                                                      (with-labels
                                                                       (case
                                                                        "NOT releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                                                       ((rel)))
                                                                      (("1"
                                                                        (expand
                                                                         "releaseRedex?"
                                                                         rel)
                                                                        (("1"
                                                                          (case
                                                                           "variable?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                                                          (("1"
                                                                            (postpone)
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "variable?(make_redex_typed(typed_to_topstate(tS))`state`redex)")
                                                                            (("1"
                                                                              (postpone)
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "pureLetRedex?(make_redex_typed
                                                                                                                                                                  (typed_to_topstate(rS))`state`redex)")
                                                                              (("1"
                                                                                (case
                                                                                 "pureLetRedex?(make_redex_typed
                                                                                                                                                                            (typed_to_topstate(tS))`state`redex)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     types_matches)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace*)
                                                                                        nil)))))))
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (replace
                                                                                     trr
                                                                                     :dir
                                                                                     RL)
                                                                                    (("2"
                                                                                      (expand
                                                                                       pureLetRedex?)
                                                                                      (("2"
                                                                                        (expand
                                                                                         letRedex?)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (split
                                                                                             +)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand*
                                                                                                 unmark
                                                                                                 translate_refs
                                                                                                 +)
                                                                                                nil)))
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand*
                                                                                                 unmark
                                                                                                 translate_refs
                                                                                                 +)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   translate_refs_value)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     unmark_value)
                                                                                                    nil)))))))
                                                                                             ("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (expand*
                                                                                                 unmark
                                                                                                 translate_refs
                                                                                                 +)
                                                                                                (("3"
                                                                                                  (use
                                                                                                   translate_refs_pure)
                                                                                                  (("3"
                                                                                                    (use
                                                                                                     unmark_pure)
                                                                                                    nil)))))))))))))))))))))
                                                                               ("2"
                                                                                (case
                                                                                 "pureLetRedex?(make_redex_typed
                                                                                                                                                                            (typed_to_topstate(tS))`state`redex)")
                                                                                (("1"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("1"
                                                                                    (replace
                                                                                     trr
                                                                                     :dir
                                                                                     RL)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (1
                                                                                        -1
                                                                                        rel))
                                                                                      (("1"
                                                                                        (expand*
                                                                                         make_redex_typed
                                                                                         make_redex)
                                                                                        (("1"
                                                                                          (generalize
                                                                                           "typed_to_topstate(rS)`state`redex"
                                                                                           "A"
                                                                                           "IExpression")
                                                                                          (("1"
                                                                                            (induct
                                                                                             A)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil)
                                                                                             ("3"
                                                                                              (grind)
                                                                                              nil)
                                                                                             ("4"
                                                                                              (grind)
                                                                                              nil)
                                                                                             ("5"
                                                                                              (skeep*
                                                                                               :preds?
                                                                                               t)
                                                                                              (("5"
                                                                                                (expand
                                                                                                 buildRedex
                                                                                                 (-3
                                                                                                  1
                                                                                                  2))
                                                                                                (("5"
                                                                                                  (case
                                                                                                   "value?(letexpr1_var)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (delete
                                                                                                       -2
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         pureLetRedex?)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           letRedex?)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand*
                                                                                                               unmark
                                                                                                               translate_refs)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 translate_refs_e_pure)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   unmark_e_pure)
                                                                                                                  nil)))))))))))))))
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil)))))))))
                                                                                             ("6"
                                                                                              (grind)
                                                                                              nil)
                                                                                             ("7"
                                                                                              (grind)
                                                                                              nil)
                                                                                             ("8"
                                                                                              (grind)
                                                                                              nil)
                                                                                             ("9"
                                                                                              (grind)
                                                                                              nil)
                                                                                             ("10"
                                                                                              (grind)
                                                                                              nil)
                                                                                             ("11"
                                                                                              (grind)
                                                                                              nil)
                                                                                             ("12"
                                                                                              (grind)
                                                                                              nil)
                                                                                             ("13"
                                                                                              (grind)
                                                                                              nil)))))))))))))
                                                                                 ("2"
                                                                                  (case
                                                                                   "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                     (rS))`state`redex)")
                                                                                  (("1"
                                                                                    (case
                                                                                     "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                               (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         types_matches)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil)))))))
                                                                                     ("2"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("2"
                                                                                        (replace
                                                                                         trr
                                                                                         :dir
                                                                                         RL)
                                                                                        (("2"
                                                                                          (expand
                                                                                           applyRedex?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand*
                                                                                               (unmark
                                                                                                translate_refs)
                                                                                               1)
                                                                                              nil)))))))))))
                                                                                   ("2"
                                                                                    (case
                                                                                     "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                               (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("1"
                                                                                        (replace
                                                                                         trr
                                                                                         :dir
                                                                                         RL)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (1
                                                                                            -1
                                                                                            rel))
                                                                                          (("1"
                                                                                            (generalize
                                                                                             "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                             A
                                                                                             "IExpression")
                                                                                            (("1"
                                                                                              (induct-and-simplify
                                                                                               A)
                                                                                              nil)))))))))
                                                                                     ("2"
                                                                                      (case
                                                                                       "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                         (rS))`state`redex)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             types_matches)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace*)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   ift_condtion_match)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "make_redex_typed(typed_to_topstate(tS))`state"
                                                                                                     "make_redex_typed(typed_to_topstate(rS))`state")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       -1)
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand*
                                                                                                       make_redex_typed
                                                                                                       typed_to_topstate
                                                                                                       make_redex
                                                                                                       to_topstate)
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand*
                                                                                                       make_redex_typed
                                                                                                       typed_to_topstate
                                                                                                       make_redex_e
                                                                                                       to_topstate)
                                                                                                      nil)))))))))))))
                                                                                         ("2"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("2"
                                                                                            (replace
                                                                                             trr
                                                                                             :dir
                                                                                             RL)
                                                                                            (("2"
                                                                                              (expand*
                                                                                               pureIftRedex?
                                                                                               iftRedex?)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand*
                                                                                                       (unmark
                                                                                                        translate_refs)
                                                                                                       1)
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       unmark
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         translate_refs
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           translate_refs_pure)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             unmark_pure)
                                                                                                            nil)))))))
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       unmark
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         translate_refs
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (use
                                                                                                           translate_refs_pure)
                                                                                                          (("3"
                                                                                                            (use
                                                                                                             unmark_pure)
                                                                                                            nil)))))))))))))))))))))
                                                                                       ("2"
                                                                                        (case
                                                                                         "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("1"
                                                                                            (replace
                                                                                             trr
                                                                                             :dir
                                                                                             RL)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                -1
                                                                                                rel))
                                                                                              (("1"
                                                                                                (generalize
                                                                                                 "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                 A
                                                                                                 "IExpression")
                                                                                                (("1"
                                                                                                  (induct
                                                                                                   A)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (grind)
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (grind)
                                                                                                    nil)
                                                                                                   ("5"
                                                                                                    (grind)
                                                                                                    nil)
                                                                                                   ("6"
                                                                                                    (skeep*)
                                                                                                    (("6"
                                                                                                      (delete
                                                                                                       -1
                                                                                                       -2
                                                                                                       -3)
                                                                                                      (("6"
                                                                                                        (expand
                                                                                                         pureIftRedex?)
                                                                                                        (("6"
                                                                                                          (expand
                                                                                                           iftRedex?)
                                                                                                          (("6"
                                                                                                            (flatten)
                                                                                                            (("6"
                                                                                                              (expand*
                                                                                                               unmark
                                                                                                               translate_refs)
                                                                                                              (("6"
                                                                                                                (assert)
                                                                                                                (("6"
                                                                                                                  (rewrite
                                                                                                                   translate_refs_e_pure)
                                                                                                                  (("6"
                                                                                                                    (rewrite
                                                                                                                     unmark_e_pure)
                                                                                                                    (("6"
                                                                                                                      (rewrite
                                                                                                                       translate_refs_e_pure)
                                                                                                                      (("6"
                                                                                                                        (rewrite
                                                                                                                         unmark_e_pure)
                                                                                                                        (("6"
                                                                                                                          (split)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (propax)
                                                                                                                            nil)))))))))))))))))))))))))
                                                                                                   ("7"
                                                                                                    (grind)
                                                                                                    nil)
                                                                                                   ("8"
                                                                                                    (grind)
                                                                                                    nil)
                                                                                                   ("9"
                                                                                                    (grind)
                                                                                                    nil)
                                                                                                   ("10"
                                                                                                    (grind)
                                                                                                    nil)
                                                                                                   ("11"
                                                                                                    (grind)
                                                                                                    nil)
                                                                                                   ("12"
                                                                                                    (grind)
                                                                                                    nil)
                                                                                                   ("13"
                                                                                                    (grind)
                                                                                                    nil)))))))))))
                                                                                         ("2"
                                                                                          (case
                                                                                           "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                         (rS))`state`redex)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 types_matches)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil)))))
                                                                                             ("2"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 trr
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   updateRedex?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       unmark
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         translate_refs
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil)))))))))))))))
                                                                                           ("2"
                                                                                            (case
                                                                                             "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 trr
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    -1
                                                                                                    rel))
                                                                                                  (("1"
                                                                                                    (generalize
                                                                                                     "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                     A
                                                                                                     "IExpression")
                                                                                                    (("1"
                                                                                                      (induct-and-simplify
                                                                                                       A)
                                                                                                      nil)))))))))
                                                                                             ("2"
                                                                                              (case
                                                                                               "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                        (rS))`state`redex)")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                  (tS))`state`redex)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     types_matches)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil)))))
                                                                                                 ("2"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     trr
                                                                                                     :dir
                                                                                                     RL)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       lookupRedex?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           unmark
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             translate_refs
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil)))))))))))))))
                                                                                               ("2"
                                                                                                (case
                                                                                                 "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                  (tS))`state`redex)")
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     trr
                                                                                                     :dir
                                                                                                     RL)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (1
                                                                                                        -1
                                                                                                        rel))
                                                                                                      (("1"
                                                                                                        (generalize
                                                                                                         "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                         A
                                                                                                         "IExpression")
                                                                                                        (("1"
                                                                                                          (induct-and-simplify
                                                                                                           A)
                                                                                                          nil)))))))))
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                            (rS))`state`redex)")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                      (tS))`state`redex)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         types_matches)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil)))))
                                                                                                     ("2"
                                                                                                      (delete
                                                                                                       obj)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         trr
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           newintRedex?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               unmark
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 translate_refs
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil)))))))))))))))
                                                                                                   ("2"
                                                                                                    (case
                                                                                                     "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                      (tS))`state`redex)")
                                                                                                    (("1"
                                                                                                      (delete
                                                                                                       obj)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         trr
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (1
                                                                                                            -1
                                                                                                            rel))
                                                                                                          (("1"
                                                                                                            (generalize
                                                                                                             "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                             A
                                                                                                             "IExpression")
                                                                                                            (("1"
                                                                                                              (induct-and-simplify
                                                                                                               A)
                                                                                                              nil)))))))))
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                (rS))`state`redex)")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             types_matches)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (delete
                                                                                                           obj)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             trr
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               newrefRedex?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   unmark
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     translate_refs
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil)))))))))))))))
                                                                                                       ("2"
                                                                                                        (case
                                                                                                         "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                        (("1"
                                                                                                          (delete
                                                                                                           obj)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             trr
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (1
                                                                                                                -1
                                                                                                                rel))
                                                                                                              (("1"
                                                                                                                (generalize
                                                                                                                 "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                                 A
                                                                                                                 "IExpression")
                                                                                                                (("1"
                                                                                                                  (induct-and-simplify
                                                                                                                   A)
                                                                                                                  nil)))))))))
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                                    (rS))`state`redex)")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 types_matches)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (replace*)
                                                                                                                    nil)))))))
                                                                                                             ("2"
                                                                                                              (delete
                                                                                                               obj)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 trr
                                                                                                                 :dir
                                                                                                                 RL)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   popRedex?)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           unmark
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             translate_refs
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil)))))
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           unmark
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             translate_refs
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (use
                                                                                                                               translate_refs_value)
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 unmark_value)
                                                                                                                                nil)))))))))))))))))))))
                                                                                                           ("2"
                                                                                                            (case
                                                                                                             "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                                                                              (tS))`state`redex)")
                                                                                                            (("1"
                                                                                                              (delete
                                                                                                               obj)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 trr
                                                                                                                 :dir
                                                                                                                 RL)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (1
                                                                                                                    -1
                                                                                                                    rel))
                                                                                                                  (("1"
                                                                                                                    (expand*
                                                                                                                     make_redex_typed
                                                                                                                     make_redex)
                                                                                                                    (("1"
                                                                                                                      (generalize
                                                                                                                       "typed_to_topstate(rS)`state`redex"
                                                                                                                       "A"
                                                                                                                       "IExpression")
                                                                                                                      (("1"
                                                                                                                        (induct
                                                                                                                         A)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (grind)
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (grind)
                                                                                                                          nil)
                                                                                                                         ("4"
                                                                                                                          (grind)
                                                                                                                          nil)
                                                                                                                         ("5"
                                                                                                                          (grind)
                                                                                                                          nil)
                                                                                                                         ("6"
                                                                                                                          (grind)
                                                                                                                          nil)
                                                                                                                         ("7"
                                                                                                                          (grind)
                                                                                                                          nil)
                                                                                                                         ("8"
                                                                                                                          (grind)
                                                                                                                          nil)
                                                                                                                         ("9"
                                                                                                                          (grind)
                                                                                                                          nil)
                                                                                                                         ("10"
                                                                                                                          (grind)
                                                                                                                          nil)
                                                                                                                         ("11"
                                                                                                                          (skeep*)
                                                                                                                          (("11"
                                                                                                                            (expand
                                                                                                                             buildRedex
                                                                                                                             (-2
                                                                                                                              1
                                                                                                                              2))
                                                                                                                            (("11"
                                                                                                                              (case
                                                                                                                               "value?(pop1_var)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil)))
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil)))))))))
                                                                                                                         ("12"
                                                                                                                          (grind)
                                                                                                                          nil)
                                                                                                                         ("13"
                                                                                                                          (grind)
                                                                                                                          nil)))))))))))))
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 make_redex_typed)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "make_redex(typed_to_topstate(rS)`state)")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     pureRedex?)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (propax)
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (propax)
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (propax)
                                                                                                                        nil)
                                                                                                                       ("5"
                                                                                                                        (propax)
                                                                                                                        nil)
                                                                                                                       ("6"
                                                                                                                        (propax)
                                                                                                                        nil)
                                                                                                                       ("7"
                                                                                                                        (propax)
                                                                                                                        nil)
                                                                                                                       ("8"
                                                                                                                        (propax)
                                                                                                                        nil)
                                                                                                                       ("9"
                                                                                                                        (expand
                                                                                                                         pureReleaseRedex?)
                                                                                                                        (("9"
                                                                                                                          (expand
                                                                                                                           make_redex)
                                                                                                                          (("9"
                                                                                                                            (rewrite
                                                                                                                             top_releases_build_redex
                                                                                                                             :dir
                                                                                                                             RL)
                                                                                                                            (("9"
                                                                                                                              (expand*
                                                                                                                               typed_to_topstate
                                                                                                                               to_topstate)
                                                                                                                              (("9"
                                                                                                                                (rewrite
                                                                                                                                 top_releases_ct_fill)
                                                                                                                                (("9"
                                                                                                                                  (flatten)
                                                                                                                                  (("9"
                                                                                                                                    (assert)
                                                                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (expand
                                                                           make_redex_typed
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             make_redex
                                                                             -1)
                                                                            (("2"
                                                                              (rewrite
                                                                               top_releases_build_redex
                                                                               :dir
                                                                               RL)
                                                                              (("2"
                                                                                (expand*
                                                                                 typed_to_topstate
                                                                                 to_topstate)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   top_releases_ct_fill)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))))))))))))))
                                                       ("2"
                                                        (use
                                                         make_redex_types_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil)
                                                           ("4"
                                                            (expand*
                                                             typed_to_topstate
                                                             to_topstate)
                                                            nil)
                                                           ("5"
                                                            (expand*
                                                             typed_to_topstate
                                                             to_topstate)
                                                            nil)
                                                           ("6"
                                                            (expand
                                                             make_redex_typed
                                                             -1)
                                                            (("6"
                                                              (expand
                                                               make_redex
                                                               -1)
                                                              (("6"
                                                                (rewrite
                                                                 top_releases_build_redex
                                                                 :dir
                                                                 RL)
                                                                (("6"
                                                                  (expand
                                                                   typed_to_topstate
                                                                   -1)
                                                                  (("6"
                                                                    (expand
                                                                     to_topstate
                                                                     -1)
                                                                    (("6"
                                                                      (rewrite
                                                                       top_releases_ct_fill)
                                                                      (("6"
                                                                        (assert)
                                                                        nil)))))))))))))
                                                           ("7"
                                                            (expand
                                                             state_matches?)
                                                            (("7"
                                                              (inst
                                                               1
                                                               translate)
                                                              (("7"
                                                                (expand
                                                                 state_matches)
                                                                (("7"
                                                                  (propax)
                                                                  nil)))))))))))))
                                                     ("2"
                                                      (expand*
                                                       make_redex_typed
                                                       typed_to_topstate)
                                                      (("2"
                                                        (use
                                                         make_redex_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil)
                                                           ("4"
                                                            (expand
                                                             make_redex)
                                                            (("4"
                                                              (rewrite
                                                               top_releases_build_redex
                                                               :dir
                                                               RL)
                                                              (("4"
                                                                (expand
                                                                 to_topstate)
                                                                (("4"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  (("4"
                                                                    (assert)
                                                                    nil)))))))))
                                                           ("5"
                                                            (expand
                                                             state_matches?)
                                                            (("5"
                                                              (inst?)
                                                              nil)))))))))
                                                     ("3"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil)))
                                                     ("4"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil)))))))))))
                                             ("2"
                                              (expand types_matches)
                                              (("2"
                                                (propax)
                                                nil)))))))))))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (delete obj)
                                  (("2"
                                    (case
                                     "state_matches?(reduce(D)(tS`state), typed_reduce(D)(rS)`state)")
                                    (("1"
                                      (expand state_matches?)
                                      (("1" (propax) nil)))
                                     ("2"
                                      (delete 2)
                                      (("2"
                                        (use bisimulation_lemma)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (rewrite
                                             typed_reduce_state)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand rreduce_n)
                                                (("1"
                                                  (expand rreduce_n)
                                                  (("1"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (typepred "rS`state")
                                            (("2" (propax) nil)))
                                           ("3"
                                            (typepred "rS`state")
                                            (("3" (propax) nil)))
                                           ("4"
                                            (typepred "rS`state")
                                            (("4" (propax) nil)))
                                           ("5"
                                            (expand state_matches?)
                                            (("5"
                                              (inst?)
                                              (("5"
                                                (expand
                                                 typed_to_topstate)
                                                (("5"
                                                  (propax)
                                                  nil)))))))))))))
                                     ("3"
                                      (expand typed_to_topstate)
                                      (("3" (replace*) nil)))))))))
                               ("3"
                                (flatten)
                                (("3"
                                  (expand typed_to_topstate)
                                  (("3"
                                    (replace*)
                                    nil)))))))))))))))))))))))
             ("2" (inst hrec "typed_reduce(D)(rS)")
              (("1" (inst?)
                (("1" (split hrec)
                  (("1" (rewrite typed_reduce_state)
                    (("1" (rewrite top_releases_reduce)
                      (("1" (expand typed_reduce_n +)
                        (("1" (assert) nil)))))))
                   ("2" (propax) nil)
                   ("3" (rewrite typed_reduce_state)
                    (("3" (rewrite top_release_reduce)
                      (("3" (expand releaseReduce)
                        (("3" (expand* decref make_redex)
                          (("3" (split hrec)
                            (("1" (flatten)
                              (("1" (assert) (("1" (grind) nil)))))
                             ("2" (grind) nil)))))))))))
                   ("4" (propax) nil)
                   ("5" (expand state_matches?)
                    (("5" (skeep)
                      (("5" (inst?)
                        (("5" (delete obj)
                          (("5" (expand state_matches)
                            (("5" (expand typed_to_topstate hrec)
                              (("5"
                                (rewrite typed_reduce_state)
                                (("1"
                                  (rewrite top_release_reduce)
                                  (("1"
                                    (use releaseReduce_reduce_match)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((sstam rtm ctm sttm dtm)))
                                          (("1"
                                            (case
                                             "NOT value?(typed_to_topstate(rS)`state`redex)")
                                            (("1"
                                              (case
                                               "releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                              (("1"
                                                (expand releaseRedex?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     typed_reduce)
                                                    (("1"
                                                      (expand*
                                                       pureLetRedex?
                                                       letRedex?
                                                       applyRedex?
                                                       pureIftRedex?
                                                       iftRedex?
                                                       updateRedex?
                                                       lookupRedex?
                                                       newintRedex?
                                                       newrefRedex?
                                                       popRedex?)
                                                      (("1"
                                                        (split hrec)
                                                        (("1"
                                                          (expand
                                                           make_redex_typed)
                                                          (("1"
                                                            (typepred
                                                             "buildRedexType(typed_to_topstate(rS)`state`redex,
                                                                                                                                        typed_to_topstate(rS)`redex_type)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 typed_to_topstate)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))))
                                                         ("2"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil)
                                                         ("3"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil)))))))))))
                                               ("2"
                                                (expand
                                                 make_redex_typed
                                                 +)
                                                (("2"
                                                  (expand make_redex +)
                                                  (("2"
                                                    (lemma
                                                     top_releases_build_redex)
                                                    (("2"
                                                      (inst? :where 1)
                                                      (("2"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (delete hrec)
                                                          (("2"
                                                            (expand
                                                             typed_to_topstate
                                                             +)
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))
                                               ("3"
                                                (split)
                                                (("1"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (propax)
                                                      nil)))))
                                                 ("2" (propax) nil)))))
                                             ("2"
                                              (case
                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                              (("1"
                                                (expand to_topstate)
                                                (("1"
                                                  (rewrite
                                                   top_releases_ct_fill)
                                                  nil)))
                                               ("2"
                                                (expand
                                                 typed_to_topstate)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (grind)
                                                    nil)))))))))))))
                                       ("2"
                                        (typepred "rS`state")
                                        (("2" (propax) nil)))
                                       ("3"
                                        (typepred "rS`state")
                                        (("3" (propax) nil)))
                                       ("4"
                                        (typepred "rS`state")
                                        (("4" (propax) nil)))
                                       ("5"
                                        (flatten)
                                        (("5"
                                          (expand typed_to_topstate)
                                          (("5" (propax) nil)))))
                                       ("6"
                                        (delete hrec)
                                        (("6"
                                          (delete stm)
                                          (("6" (grind) nil)))))))))))
                                 ("2"
                                  (expand typed_to_topstate)
                                  (("2" (propax) nil)))))))))))))))))
                   ("6" (rewrite typed_reduce_state)
                    (("6" (rewrite top_releases_reduce)
                      (("6" (assert) nil)))))))))
               ("2" (split)
                (("1" (propax) nil)
                 ("2" (expand state_matches? -)
                  (("2" (skeep)
                    (("2" (expand* state_matches typed_to_topstate)
                      (("2" (flatten)
                        (("2" (replace*) nil)))))))))))))))))))))
     ("2" (delete 4 -4)
      (("2" (expand state_matches?)
        (("2" (skeep)
          (("2" (expand* state_matches typed_to_topstate)
            (("2" (flatten) (("2" (replace*) nil)))))))))))
     ("3" (delete 4)
      (("3" (expand state_matches?)
        (("3" (skeep)
          (("3" (expand* state_matches typed_to_topstate)
            (("3" (flatten) (("3" (replace*) nil)))))))))))
     ("4" (split) (("1" (propax) nil) ("2" (propax) nil))))
    nil)
   nil nil)
  (bisimulation_lemma-10 "" 3703509422
   ("" (measure-induct+ "top_releases_ct(trS`state`redex)" ("trS"))
    (("1" (label hrec -1)
      (("1" (with-labels (skeep* +) ((err1 err2 dwt stm obj)))
        (("1" (name-replace rS "x!1")
          (("1" (case-replace "top_releases_ct(rS`state`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand typed_reduce_n +)
                (("1" (assert)
                  (("1" (expand typed_reduce_n)
                    (("1" (expand state_matches?)
                      (("1" (skeep)
                        (("1" (expand state_matches)
                          (("1" (rewrite typed_reduce_state)
                            (("1"
                              (case "exists (translate):
                                                         state_matches(reduce(D)(tS`state), typed_reduce(D)(rS)`state)
                                                                      (translate)")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst + "translate!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "types_matches(typed_reduce(D)(tS), typed_reduce(D)(rS))")
                                      (("1"
                                        (expand types_matches)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (label obj 1)
                                          (("2"
                                            (case
                                             "types_matches(typed_to_topstate(tS), typed_to_topstate(rS))")
                                            (("1"
                                              (delete -6 -7 -8 -9)
                                              (("1"
                                                (case
                                                 "atom?(typed_to_topstate(tS)`state`redex)")
                                                (("1"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (delete -4)
                                                      (("1"
                                                        (expand
                                                         typed_reduce)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete -3)
                                                    (("2"
                                                      (expand
                                                       state_matches)
                                                      (("2"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (case
                                                             "atom?(unmark(typed_to_topstate(rS)`state`redex))")
                                                            (("1"
                                                              (case
                                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                                              (("1"
                                                                (hide-all-but
                                                                 (1
                                                                  -1
                                                                  -2))
                                                                (("1"
                                                                  (expand
                                                                   typed_to_topstate)
                                                                  (("1"
                                                                    (generalize
                                                                     "to_topstate(rS`state)`redex"
                                                                     A
                                                                     "IExpression")
                                                                    (("1"
                                                                      (induct-and-simplify
                                                                       A)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 to_topstate)
                                                                (("2"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (name-replace
                                                               A
                                                               "unmark(typed_to_topstate(rS)`state`redex)")
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -1))
                                                                (("2"
                                                                  (generalize
                                                                   A
                                                                   A
                                                                   "IExpression")
                                                                  (("2"
                                                                    (induct-and-simplify
                                                                     A)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (delete -3)
                                                    (("1"
                                                      (expand
                                                       state_matches)
                                                      (("1"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("1"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (rewrite
                                                             translate_refs_atom)
                                                            (("1"
                                                              (rewrite
                                                               unmark_atom)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "state_matches?(make_redex_typed(typed_to_topstate(tS))`state, make_redex_typed(typed_to_topstate(rS))`state)")
                                                    (("1"
                                                      (case
                                                       "types_matches(make_redex_typed(typed_to_topstate(tS)), make_redex_typed(typed_to_topstate(rS)))")
                                                      (("1"
                                                        (delete -4)
                                                        (("1"
                                                          (expand
                                                           typed_reduce)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               state_matches?)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   state_matches
                                                                   -2)
                                                                  (("1"
                                                                    (with-labels
                                                                     (flatten)
                                                                     ((err
                                                                       trr
                                                                       unm
                                                                       stam
                                                                       stom)))
                                                                    (("1"
                                                                      (with-labels
                                                                       (case
                                                                        "NOT releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                                                       ((rel)))
                                                                      (("1"
                                                                        (expand
                                                                         "releaseRedex?"
                                                                         rel)
                                                                        (("1"
                                                                          (case
                                                                           "pureLetRedex?(make_redex_typed
                                                                                                                                       (typed_to_topstate(rS))`state`redex)")
                                                                          (("1"
                                                                            (case
                                                                             "pureLetRedex?(make_redex_typed
                                                                                                                                               (typed_to_topstate(tS))`state`redex)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 types_matches)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replace*)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (delete
                                                                               obj)
                                                                              (("2"
                                                                                (replace
                                                                                 trr
                                                                                 :dir
                                                                                 RL)
                                                                                (("2"
                                                                                  (expand
                                                                                   pureLetRedex?)
                                                                                  (("2"
                                                                                    (expand
                                                                                     letRedex?)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand*
                                                                                             unmark
                                                                                             translate_refs
                                                                                             +)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand*
                                                                                             unmark
                                                                                             translate_refs
                                                                                             +)
                                                                                            (("2"
                                                                                              (use
                                                                                               translate_refs_atom)
                                                                                              (("2"
                                                                                                (use
                                                                                                 unmark_atom)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand*
                                                                                             unmark
                                                                                             translate_refs
                                                                                             +)
                                                                                            (("3"
                                                                                              (use
                                                                                               translate_refs_pure)
                                                                                              (("3"
                                                                                                (use
                                                                                                 unmark_pure)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "pureLetRedex?(make_redex_typed
                                                                                                                                               (typed_to_topstate(tS))`state`redex)")
                                                                            (("1"
                                                                              (delete
                                                                               obj)
                                                                              (("1"
                                                                                (replace
                                                                                 trr
                                                                                 :dir
                                                                                 RL)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    -1
                                                                                    rel))
                                                                                  (("1"
                                                                                    (expand*
                                                                                     make_redex_typed
                                                                                     make_redex)
                                                                                    (("1"
                                                                                      (generalize
                                                                                       "typed_to_topstate(rS)`state`redex"
                                                                                       "A"
                                                                                       "IExpression")
                                                                                      (("1"
                                                                                        (induct
                                                                                         A)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("4"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("5"
                                                                                          (skeep*
                                                                                           :preds?
                                                                                           t)
                                                                                          (("5"
                                                                                            (expand
                                                                                             buildRedex
                                                                                             (-3
                                                                                              1
                                                                                              2))
                                                                                            (("5"
                                                                                              (case
                                                                                               "atom?(letexpr1_var)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   -2
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     pureLetRedex?)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       letRedex?)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (expand*
                                                                                                           unmark
                                                                                                           translate_refs)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             translate_refs_e_pure)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               unmark_e_pure)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("6"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("7"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("8"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("9"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("10"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("11"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("12"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("13"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                      (rS))`state`redex)")
                                                                              (("1"
                                                                                (case
                                                                                 "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                              (tS))`state`redex)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     types_matches)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (replace
                                                                                     trr
                                                                                     :dir
                                                                                     RL)
                                                                                    (("2"
                                                                                      (expand
                                                                                       applyRedex?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand*
                                                                                           (unmark
                                                                                            translate_refs)
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                              (tS))`state`redex)")
                                                                                (("1"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("1"
                                                                                    (replace
                                                                                     trr
                                                                                     :dir
                                                                                     RL)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (1
                                                                                        -1
                                                                                        rel))
                                                                                      (("1"
                                                                                        (generalize
                                                                                         "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                         A
                                                                                         "IExpression")
                                                                                        (("1"
                                                                                          (induct-and-simplify
                                                                                           A)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                      (rS))`state`redex)")
                                                                                  (("1"
                                                                                    (case
                                                                                     "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                              (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         types_matches)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace*)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               ift_condtion_match)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "make_redex_typed(typed_to_topstate(tS))`state"
                                                                                                 "make_redex_typed(typed_to_topstate(rS))`state")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   -1)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand*
                                                                                                   make_redex_typed
                                                                                                   typed_to_topstate
                                                                                                   make_redex
                                                                                                   to_topstate)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand*
                                                                                                   make_redex_typed
                                                                                                   typed_to_topstate
                                                                                                   make_redex_e
                                                                                                   to_topstate)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("2"
                                                                                        (replace
                                                                                         trr
                                                                                         :dir
                                                                                         RL)
                                                                                        (("2"
                                                                                          (expand*
                                                                                           pureIftRedex?
                                                                                           iftRedex?)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand*
                                                                                                   (unmark
                                                                                                    translate_refs)
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   unmark
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     translate_refs
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       translate_refs_pure)
                                                                                                      (("2"
                                                                                                        (use
                                                                                                         unmark_pure)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand
                                                                                                   unmark
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     translate_refs
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (use
                                                                                                       translate_refs_pure)
                                                                                                      (("3"
                                                                                                        (use
                                                                                                         unmark_pure)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                              (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("1"
                                                                                        (replace
                                                                                         trr
                                                                                         :dir
                                                                                         RL)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (1
                                                                                            -1
                                                                                            rel))
                                                                                          (("1"
                                                                                            (generalize
                                                                                             "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                             A
                                                                                             "IExpression")
                                                                                            (("1"
                                                                                              (induct
                                                                                               A)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("4"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("5"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("6"
                                                                                                (skeep*)
                                                                                                (("6"
                                                                                                  (delete
                                                                                                   -1
                                                                                                   -2
                                                                                                   -3)
                                                                                                  (("6"
                                                                                                    (expand
                                                                                                     pureIftRedex?)
                                                                                                    (("6"
                                                                                                      (expand
                                                                                                       iftRedex?)
                                                                                                      (("6"
                                                                                                        (flatten)
                                                                                                        (("6"
                                                                                                          (expand*
                                                                                                           unmark
                                                                                                           translate_refs)
                                                                                                          (("6"
                                                                                                            (assert)
                                                                                                            (("6"
                                                                                                              (rewrite
                                                                                                               translate_refs_e_pure)
                                                                                                              (("6"
                                                                                                                (rewrite
                                                                                                                 unmark_e_pure)
                                                                                                                (("6"
                                                                                                                  (rewrite
                                                                                                                   translate_refs_e_pure)
                                                                                                                  (("6"
                                                                                                                    (rewrite
                                                                                                                     unmark_e_pure)
                                                                                                                    (("6"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("7"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("8"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("9"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("10"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("11"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("12"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("13"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                       (rS))`state`redex)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                          (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             types_matches)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("2"
                                                                                            (replace
                                                                                             trr
                                                                                             :dir
                                                                                             RL)
                                                                                            (("2"
                                                                                              (expand
                                                                                               updateRedex?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   unmark
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     translate_refs
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                          (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("1"
                                                                                            (replace
                                                                                             trr
                                                                                             :dir
                                                                                             RL)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                -1
                                                                                                rel))
                                                                                              (("1"
                                                                                                (generalize
                                                                                                 "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                 A
                                                                                                 "IExpression")
                                                                                                (("1"
                                                                                                  (induct-and-simplify
                                                                                                   A)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                  (rS))`state`redex)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 types_matches)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 trr
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   lookupRedex?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       unmark
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         translate_refs
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 trr
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    -1
                                                                                                    rel))
                                                                                                  (("1"
                                                                                                    (generalize
                                                                                                     "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                     A
                                                                                                     "IExpression")
                                                                                                    (("1"
                                                                                                      (induct-and-simplify
                                                                                                       A)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                  (rS))`state`redex)")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     types_matches)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     trr
                                                                                                     :dir
                                                                                                     RL)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       newintRedex?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           unmark
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             translate_refs
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     trr
                                                                                                     :dir
                                                                                                     RL)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (1
                                                                                                        -1
                                                                                                        rel))
                                                                                                      (("1"
                                                                                                        (generalize
                                                                                                         "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                         A
                                                                                                         "IExpression")
                                                                                                        (("1"
                                                                                                          (induct-and-simplify
                                                                                                           A)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                  (rS))`state`redex)")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         types_matches)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (delete
                                                                                                       obj)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         trr
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           newrefRedex?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               unmark
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 translate_refs
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (case
                                                                                                     "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                    (("1"
                                                                                                      (delete
                                                                                                       obj)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         trr
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (1
                                                                                                            -1
                                                                                                            rel))
                                                                                                          (("1"
                                                                                                            (generalize
                                                                                                             "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                                             A
                                                                                                             "IExpression")
                                                                                                            (("1"
                                                                                                              (induct-and-simplify
                                                                                                               A)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                  (rS))`state`redex)")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             types_matches)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replace*)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (delete
                                                                                                           obj)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             trr
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               popRedex?)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       unmark
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         translate_refs
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       unmark
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         translate_refs
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           translate_refs_atom)
                                                                                                                          (("2"
                                                                                                                            (use
                                                                                                                             unmark_atom)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (case
                                                                                                         "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                        (("1"
                                                                                                          (delete
                                                                                                           obj)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             trr
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (1
                                                                                                                -1
                                                                                                                rel))
                                                                                                              (("1"
                                                                                                                (expand*
                                                                                                                 make_redex_typed
                                                                                                                 make_redex)
                                                                                                                (("1"
                                                                                                                  (generalize
                                                                                                                   "typed_to_topstate(rS)`state`redex"
                                                                                                                   "A"
                                                                                                                   "IExpression")
                                                                                                                  (("1"
                                                                                                                    (induct
                                                                                                                     A)
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("5"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("6"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("7"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("8"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("9"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("10"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("11"
                                                                                                                      (skeep*)
                                                                                                                      (("11"
                                                                                                                        (expand
                                                                                                                         buildRedex
                                                                                                                         (-2
                                                                                                                          1
                                                                                                                          2))
                                                                                                                        (("11"
                                                                                                                          (case
                                                                                                                           "atom?(pop1_var)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("12"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("13"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             make_redex_typed)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "make_redex(typed_to_topstate(rS)`state)")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 pureRedex?)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("5"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("6"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("7"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("8"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("9"
                                                                                                                    (expand
                                                                                                                     pureReleaseRedex?)
                                                                                                                    (("9"
                                                                                                                      (expand
                                                                                                                       make_redex)
                                                                                                                      (("9"
                                                                                                                        (rewrite
                                                                                                                         top_releases_build_redex
                                                                                                                         :dir
                                                                                                                         RL)
                                                                                                                        (("9"
                                                                                                                          (expand*
                                                                                                                           typed_to_topstate
                                                                                                                           to_topstate)
                                                                                                                          (("9"
                                                                                                                            (rewrite
                                                                                                                             top_releases_ct_fill)
                                                                                                                            (("9"
                                                                                                                              (flatten)
                                                                                                                              (("9"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (expand
                                                                           make_redex_typed
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             make_redex
                                                                             -1)
                                                                            (("2"
                                                                              (rewrite
                                                                               top_releases_build_redex
                                                                               :dir
                                                                               RL)
                                                                              (("2"
                                                                                (expand*
                                                                                 typed_to_topstate
                                                                                 to_topstate)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   top_releases_ct_fill)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         make_redex_types_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (expand*
                                                             typed_to_topstate
                                                             to_topstate)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (expand*
                                                             typed_to_topstate
                                                             to_topstate)
                                                            nil
                                                            nil)
                                                           ("6"
                                                            (expand
                                                             make_redex_typed
                                                             -1)
                                                            (("6"
                                                              (expand
                                                               make_redex
                                                               -1)
                                                              (("6"
                                                                (rewrite
                                                                 top_releases_build_redex
                                                                 :dir
                                                                 RL)
                                                                (("6"
                                                                  (expand
                                                                   typed_to_topstate
                                                                   -1)
                                                                  (("6"
                                                                    (expand
                                                                     to_topstate
                                                                     -1)
                                                                    (("6"
                                                                      (rewrite
                                                                       top_releases_ct_fill)
                                                                      (("6"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("7"
                                                            (expand
                                                             state_matches?)
                                                            (("7"
                                                              (inst
                                                               1
                                                               translate)
                                                              (("7"
                                                                (expand
                                                                 state_matches)
                                                                (("7"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand*
                                                       make_redex_typed
                                                       typed_to_topstate)
                                                      (("2"
                                                        (use
                                                         make_redex_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (expand
                                                             make_redex)
                                                            (("4"
                                                              (rewrite
                                                               top_releases_build_redex
                                                               :dir
                                                               RL)
                                                              (("4"
                                                                (expand
                                                                 to_topstate)
                                                                (("4"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (expand
                                                             state_matches?)
                                                            (("5"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand types_matches)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (delete obj)
                                  (("2"
                                    (case
                                     "state_matches?(reduce(D)(tS`state), typed_reduce(D)(rS)`state)")
                                    (("1"
                                      (expand state_matches?)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (delete 2)
                                      (("2"
                                        (use bisimulation_lemma)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (rewrite
                                             typed_reduce_state)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand rreduce_n)
                                                (("1"
                                                  (expand rreduce_n)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "rS`state")
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (typepred "rS`state")
                                            (("3" (propax) nil nil))
                                            nil)
                                           ("4"
                                            (typepred "rS`state")
                                            (("4" (propax) nil nil))
                                            nil)
                                           ("5"
                                            (expand state_matches?)
                                            (("5"
                                              (inst?)
                                              (("5"
                                                (expand
                                                 typed_to_topstate)
                                                (("5"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand typed_to_topstate)
                                      (("3" (replace*) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3"
                                  (expand typed_to_topstate)
                                  (("3" (replace*) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst hrec "typed_reduce(D)(rS)")
              (("1" (inst?)
                (("1" (split hrec)
                  (("1" (rewrite typed_reduce_state)
                    (("1" (rewrite top_releases_reduce)
                      (("1" (expand typed_reduce_n +)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (rewrite typed_reduce_state)
                    (("3" (rewrite top_release_reduce)
                      (("3" (expand releaseReduce)
                        (("3" (expand* decref make_redex)
                          (("3" (split hrec)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (propax) nil nil)
                   ("5" (expand state_matches?)
                    (("5" (skeep)
                      (("5" (inst?)
                        (("5" (delete obj)
                          (("5" (expand state_matches)
                            (("5" (expand typed_to_topstate hrec)
                              (("5"
                                (rewrite typed_reduce_state)
                                (("1"
                                  (rewrite top_release_reduce)
                                  (("1"
                                    (use releaseReduce_reduce_match)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((sstam rtm ctm sttm dtm)))
                                          (("1"
                                            (case
                                             "NOT atom?(typed_to_topstate(rS)`state`redex)")
                                            (("1"
                                              (case
                                               "releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                              (("1"
                                                (expand releaseRedex?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     typed_reduce)
                                                    (("1"
                                                      (expand*
                                                       pureLetRedex?
                                                       letRedex?
                                                       applyRedex?
                                                       pureIftRedex?
                                                       iftRedex?
                                                       updateRedex?
                                                       lookupRedex?
                                                       newintRedex?
                                                       newrefRedex?
                                                       popRedex?)
                                                      (("1"
                                                        (split hrec)
                                                        (("1"
                                                          (expand
                                                           make_redex_typed)
                                                          (("1"
                                                            (typepred
                                                             "buildRedexType(typed_to_topstate(rS)`state`redex,
                                                                                                                    typed_to_topstate(rS)`redex_type)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 typed_to_topstate)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 make_redex_typed
                                                 +)
                                                (("2"
                                                  (expand make_redex +)
                                                  (("2"
                                                    (lemma
                                                     top_releases_build_redex)
                                                    (("2"
                                                      (inst? :where 1)
                                                      (("2"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (delete hrec)
                                                          (("2"
                                                            (expand
                                                             typed_to_topstate
                                                             +)
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (split)
                                                (("1"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                              (("1"
                                                (expand to_topstate)
                                                (("1"
                                                  (rewrite
                                                   top_releases_ct_fill)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 typed_to_topstate)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "rS`state")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (typepred "rS`state")
                                        (("3" (propax) nil nil))
                                        nil)
                                       ("4"
                                        (typepred "rS`state")
                                        (("4" (propax) nil nil))
                                        nil)
                                       ("5"
                                        (flatten)
                                        (("5"
                                          (expand typed_to_topstate)
                                          (("5" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (delete hrec)
                                        (("6"
                                          (delete stm)
                                          (("6" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand typed_to_topstate)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (rewrite typed_reduce_state)
                    (("6" (rewrite top_releases_reduce)
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (propax) nil nil)
                 ("2" (expand state_matches? -)
                  (("2" (skeep)
                    (("2" (expand* state_matches typed_to_topstate)
                      (("2" (flatten) (("2" (replace*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (delete 4 -4)
      (("2" (expand state_matches?)
        (("2" (skeep)
          (("2" (expand* state_matches typed_to_topstate)
            (("2" (flatten) (("2" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (delete 4)
      (("3" (expand state_matches?)
        (("3" (skeep)
          (("3" (expand* state_matches typed_to_topstate)
            (("3" (flatten) (("3" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
    nil)
   nil nil)
  (bisimulation_lemma-9 "" 3703508479
   ("" (measure-induct+ "top_releases_ct(trS`state`redex)" ("trS"))
    (("1" (label hrec -1)
      (("1" (with-labels (skeep* +) ((err1 err2 dwt stm obj)))
        (("1" (name-replace rS "x!1")
          (("1" (case-replace "top_releases_ct(rS`state`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand typed_reduce_n +)
                (("1" (assert)
                  (("1" (expand typed_reduce_n)
                    (("1" (expand state_matches?)
                      (("1" (skeep)
                        (("1" (expand state_matches)
                          (("1" (rewrite typed_reduce_state)
                            (("1"
                              (case "exists (translate):
                                                         state_matches(reduce(D)(tS`state), typed_reduce(D)(rS)`state)
                                                                      (translate)")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst + "translate!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "types_matches(typed_reduce(D)(tS), typed_reduce(D)(rS))")
                                      (("1"
                                        (expand types_matches)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (label obj 1)
                                          (("2"
                                            (case
                                             "types_matches(typed_to_topstate(tS), typed_to_topstate(rS))")
                                            (("1"
                                              (delete -6 -7 -8 -9)
                                              (("1"
                                                (case
                                                 "atom?(typed_to_topstate(tS)`state`redex)")
                                                (("1"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (delete -4)
                                                      (("1"
                                                        (expand
                                                         typed_reduce)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete -3)
                                                    (("2"
                                                      (expand
                                                       state_matches)
                                                      (("2"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (case
                                                             "atom?(unmark(typed_to_topstate(rS)`state`redex))")
                                                            (("1"
                                                              (case
                                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                                              (("1"
                                                                (hide-all-but
                                                                 (1
                                                                  -1
                                                                  -2))
                                                                (("1"
                                                                  (expand
                                                                   typed_to_topstate)
                                                                  (("1"
                                                                    (generalize
                                                                     "to_topstate(rS`state)`redex"
                                                                     A
                                                                     "IExpression")
                                                                    (("1"
                                                                      (induct-and-simplify
                                                                       A)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 to_topstate)
                                                                (("2"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (name-replace
                                                               A
                                                               "unmark(typed_to_topstate(rS)`state`redex)")
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -1))
                                                                (("2"
                                                                  (generalize
                                                                   A
                                                                   A
                                                                   "IExpression")
                                                                  (("2"
                                                                    (induct-and-simplify
                                                                     A)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (delete -3)
                                                    (("1"
                                                      (expand
                                                       state_matches)
                                                      (("1"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("1"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (rewrite
                                                             translate_refs_atom)
                                                            (("1"
                                                              (rewrite
                                                               unmark_atom)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "state_matches?(make_redex_typed(typed_to_topstate(tS))`state, make_redex_typed(typed_to_topstate(rS))`state)")
                                                    (("1"
                                                      (case
                                                       "types_matches(make_redex_typed(typed_to_topstate(tS)), make_redex_typed(typed_to_topstate(rS)))")
                                                      (("1"
                                                        (delete -4)
                                                        (("1"
                                                          (expand
                                                           typed_reduce)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               state_matches?)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   state_matches
                                                                   -2)
                                                                  (("1"
                                                                    (with-labels
                                                                     (flatten)
                                                                     ((err
                                                                       trr
                                                                       unm
                                                                       stam
                                                                       stom)))
                                                                    (("1"
                                                                      (with-labels
                                                                       (case
                                                                        "releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                                                       ((rel)))
                                                                      (("1"
                                                                        (expand
                                                                         "releaseRedex?"
                                                                         rel)
                                                                        (("1"
                                                                          (case
                                                                           "pureLetRedex?(make_redex_typed
                                                                                                                                       (typed_to_topstate(rS))`state`redex)")
                                                                          (("1"
                                                                            (case
                                                                             "pureLetRedex?(make_redex_typed
                                                                                                                                               (typed_to_topstate(tS))`state`redex)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 types_matches)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replace*)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (delete
                                                                               obj)
                                                                              (("2"
                                                                                (replace
                                                                                 trr
                                                                                 :dir
                                                                                 RL)
                                                                                (("2"
                                                                                  (expand
                                                                                   pureLetRedex?)
                                                                                  (("2"
                                                                                    (expand
                                                                                     letRedex?)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "pureLetRedex?(make_redex_typed
                                                                                                                                               (typed_to_topstate(tS))`state`redex)")
                                                                            (("1"
                                                                              (delete
                                                                               obj)
                                                                              (("1"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                      (rS))`state`redex)")
                                                                              (("1"
                                                                                (case
                                                                                 "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                              (tS))`state`redex)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     types_matches)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (replace
                                                                                     trr
                                                                                     :dir
                                                                                     RL)
                                                                                    (("2"
                                                                                      (expand
                                                                                       applyRedex?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                              (tS))`state`redex)")
                                                                                (("1"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("1"
                                                                                    (replace
                                                                                     trr
                                                                                     :dir
                                                                                     RL)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (1
                                                                                        -1
                                                                                        rel))
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         A
                                                                                         "make_redex_typed(typed_to_topstate(rS))`state`redex"
                                                                                         "IExpression")
                                                                                        (("1"
                                                                                          (induct-and-simplify
                                                                                           A)
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                      (rS))`state`redex)")
                                                                                  (("1"
                                                                                    (case
                                                                                     "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                              (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         types_matches)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace*)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               ift_condtion_match)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "make_redex_typed(typed_to_topstate(tS))`state"
                                                                                                 "make_redex_typed(typed_to_topstate(rS))`state")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   -1)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand*
                                                                                                   make_redex_typed
                                                                                                   typed_to_topstate
                                                                                                   make_redex
                                                                                                   to_topstate)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand*
                                                                                                   make_redex_typed
                                                                                                   typed_to_topstate
                                                                                                   make_redex_e
                                                                                                   to_topstate)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("2"
                                                                                        (replace
                                                                                         trr
                                                                                         :dir
                                                                                         RL)
                                                                                        (("2"
                                                                                          (expand*
                                                                                           pureIftRedex?
                                                                                           iftRedex?)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                              (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("1"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                       (rS))`state`redex)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                          (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             types_matches)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("2"
                                                                                            (replace
                                                                                             trr
                                                                                             :dir
                                                                                             RL)
                                                                                            (("2"
                                                                                              (expand
                                                                                               updateRedex?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                          (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                  (rS))`state`redex)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 types_matches)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 trr
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   lookupRedex?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                  (rS))`state`redex)")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     types_matches)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     trr
                                                                                                     :dir
                                                                                                     RL)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       newintRedex?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("1"
                                                                                                    (postpone)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                  (rS))`state`redex)")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         types_matches)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (delete
                                                                                                       obj)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         trr
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           newrefRedex?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (case
                                                                                                     "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                    (("1"
                                                                                                      (delete
                                                                                                       obj)
                                                                                                      (("1"
                                                                                                        (postpone)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                  (rS))`state`redex)")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             types_matches)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replace*)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (delete
                                                                                                           obj)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             trr
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               popRedex?)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (case
                                                                                                         "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                                                                          (tS))`state`redex)")
                                                                                                        (("1"
                                                                                                          (delete
                                                                                                           obj)
                                                                                                          (("1"
                                                                                                            (postpone)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             make_redex_typed)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "make_redex(typed_to_topstate(rS)`state)")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 pureRedex?)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("5"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("6"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("7"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("8"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("9"
                                                                                                                    (expand
                                                                                                                     pureReleaseRedex?)
                                                                                                                    (("9"
                                                                                                                      (expand
                                                                                                                       make_redex)
                                                                                                                      (("9"
                                                                                                                        (rewrite
                                                                                                                         top_releases_build_redex
                                                                                                                         :dir
                                                                                                                         RL)
                                                                                                                        (("9"
                                                                                                                          (expand*
                                                                                                                           typed_to_topstate
                                                                                                                           to_topstate)
                                                                                                                          (("9"
                                                                                                                            (rewrite
                                                                                                                             top_releases_ct_fill)
                                                                                                                            (("9"
                                                                                                                              (flatten)
                                                                                                                              (("9"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         make_redex_types_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (expand
                                                             make_redex_typed
                                                             -1)
                                                            (("4"
                                                              (expand
                                                               typed_to_topstate
                                                               -1)
                                                              (("4"
                                                                (expand
                                                                 make_redex
                                                                 -1)
                                                                (("4"
                                                                  (rewrite
                                                                   top_releases_build_redex
                                                                   -1
                                                                   :dir
                                                                   RL)
                                                                  (("4"
                                                                    (expand
                                                                     to_topstate)
                                                                    (("4"
                                                                      (rewrite
                                                                       top_releases_ct_fill)
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (expand
                                                             state_matches?)
                                                            (("5"
                                                              (inst
                                                               1
                                                               translate)
                                                              (("5"
                                                                (expand
                                                                 state_matches
                                                                 1)
                                                                (("5"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand*
                                                       make_redex_typed
                                                       typed_to_topstate)
                                                      (("2"
                                                        (use
                                                         make_redex_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (expand
                                                             make_redex)
                                                            (("4"
                                                              (rewrite
                                                               top_releases_build_redex
                                                               :dir
                                                               RL)
                                                              (("4"
                                                                (expand
                                                                 to_topstate)
                                                                (("4"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (expand
                                                             state_matches?)
                                                            (("5"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand types_matches)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (delete obj)
                                  (("2"
                                    (case
                                     "state_matches?(reduce(D)(tS`state), typed_reduce(D)(rS)`state)")
                                    (("1"
                                      (expand state_matches?)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (delete 2)
                                      (("2"
                                        (use bisimulation_lemma)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (rewrite
                                             typed_reduce_state)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand rreduce_n)
                                                (("1"
                                                  (expand rreduce_n)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "rS`state")
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (typepred "rS`state")
                                            (("3" (propax) nil nil))
                                            nil)
                                           ("4"
                                            (typepred "rS`state")
                                            (("4" (propax) nil nil))
                                            nil)
                                           ("5"
                                            (expand state_matches?)
                                            (("5"
                                              (inst?)
                                              (("5"
                                                (expand
                                                 typed_to_topstate)
                                                (("5"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand typed_to_topstate)
                                      (("3" (replace*) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3"
                                  (expand typed_to_topstate)
                                  (("3" (replace*) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst hrec "typed_reduce(D)(rS)")
              (("1" (inst?)
                (("1" (split hrec)
                  (("1" (rewrite typed_reduce_state)
                    (("1" (rewrite top_releases_reduce)
                      (("1" (expand typed_reduce_n +)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (rewrite typed_reduce_state)
                    (("3" (rewrite top_release_reduce)
                      (("3" (expand releaseReduce)
                        (("3" (expand* decref make_redex)
                          (("3" (split hrec)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (propax) nil nil)
                   ("5" (expand state_matches?)
                    (("5" (skeep)
                      (("5" (inst?)
                        (("5" (delete obj)
                          (("5" (expand state_matches)
                            (("5" (expand typed_to_topstate hrec)
                              (("5"
                                (rewrite typed_reduce_state)
                                (("1"
                                  (rewrite top_release_reduce)
                                  (("1"
                                    (use releaseReduce_reduce_match)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((sstam rtm ctm sttm dtm)))
                                          (("1"
                                            (case
                                             "NOT atom?(typed_to_topstate(rS)`state`redex)")
                                            (("1"
                                              (case
                                               "releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                              (("1"
                                                (expand releaseRedex?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     typed_reduce)
                                                    (("1"
                                                      (expand*
                                                       pureLetRedex?
                                                       letRedex?
                                                       applyRedex?
                                                       pureIftRedex?
                                                       iftRedex?
                                                       updateRedex?
                                                       lookupRedex?
                                                       newintRedex?
                                                       newrefRedex?
                                                       popRedex?)
                                                      (("1"
                                                        (split hrec)
                                                        (("1"
                                                          (expand
                                                           make_redex_typed)
                                                          (("1"
                                                            (typepred
                                                             "buildRedexType(typed_to_topstate(rS)`state`redex,
                                                                                                                    typed_to_topstate(rS)`redex_type)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 typed_to_topstate)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 make_redex_typed
                                                 +)
                                                (("2"
                                                  (expand make_redex +)
                                                  (("2"
                                                    (lemma
                                                     top_releases_build_redex)
                                                    (("2"
                                                      (inst? :where 1)
                                                      (("2"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (delete hrec)
                                                          (("2"
                                                            (expand
                                                             typed_to_topstate
                                                             +)
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (split)
                                                (("1"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                              (("1"
                                                (expand to_topstate)
                                                (("1"
                                                  (rewrite
                                                   top_releases_ct_fill)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 typed_to_topstate)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "rS`state")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (typepred "rS`state")
                                        (("3" (propax) nil nil))
                                        nil)
                                       ("4"
                                        (typepred "rS`state")
                                        (("4" (propax) nil nil))
                                        nil)
                                       ("5"
                                        (flatten)
                                        (("5"
                                          (expand typed_to_topstate)
                                          (("5" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (delete hrec)
                                        (("6"
                                          (delete stm)
                                          (("6" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand typed_to_topstate)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (rewrite typed_reduce_state)
                    (("6" (rewrite top_releases_reduce)
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (propax) nil nil)
                 ("2" (expand state_matches? -)
                  (("2" (skeep)
                    (("2" (expand* state_matches typed_to_topstate)
                      (("2" (flatten) (("2" (replace*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (delete 4 -4)
      (("2" (expand state_matches?)
        (("2" (skeep)
          (("2" (expand* state_matches typed_to_topstate)
            (("2" (flatten) (("2" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (delete 4)
      (("3" (expand state_matches?)
        (("3" (skeep)
          (("3" (expand* state_matches typed_to_topstate)
            (("3" (flatten) (("3" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
    nil)
   nil nil)
  (bisimulation_lemma-8 "" 3703448161
   ("" (measure-induct+ "top_releases_ct(trS`state`redex)" ("trS"))
    (("1" (label hrec -1)
      (("1" (with-labels (skeep* +) ((err1 err2 dwt stm obj)))
        (("1" (name-replace rS "x!1")
          (("1" (case-replace "top_releases_ct(rS`state`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand typed_reduce_n +)
                (("1" (assert)
                  (("1" (expand typed_reduce_n)
                    (("1" (expand state_matches?)
                      (("1" (skeep)
                        (("1" (expand state_matches)
                          (("1" (rewrite typed_reduce_state)
                            (("1"
                              (case "exists (translate):
                                              state_matches(reduce(D)(tS`state), typed_reduce(D)(rS)`state)
                                                           (translate)")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst + "translate!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "types_matches(typed_reduce(D)(tS), typed_reduce(D)(rS))")
                                      (("1"
                                        (expand types_matches)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (label obj 1)
                                          (("2"
                                            (case
                                             "types_matches(typed_to_topstate(tS), typed_to_topstate(rS))")
                                            (("1"
                                              (delete -6 -7 -8 -9)
                                              (("1"
                                                (case
                                                 "atom?(typed_to_topstate(tS)`state`redex)")
                                                (("1"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (delete -4)
                                                      (("1"
                                                        (expand
                                                         typed_reduce)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete -3)
                                                    (("2"
                                                      (expand
                                                       state_matches)
                                                      (("2"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (case
                                                             "atom?(unmark(typed_to_topstate(rS)`state`redex))")
                                                            (("1"
                                                              (case
                                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                                              (("1"
                                                                (hide-all-but
                                                                 (1
                                                                  -1
                                                                  -2))
                                                                (("1"
                                                                  (expand
                                                                   typed_to_topstate)
                                                                  (("1"
                                                                    (generalize
                                                                     "to_topstate(rS`state)`redex"
                                                                     A
                                                                     "IExpression")
                                                                    (("1"
                                                                      (induct-and-simplify
                                                                       A)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 to_topstate)
                                                                (("2"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (name-replace
                                                               A
                                                               "unmark(typed_to_topstate(rS)`state`redex)")
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -1))
                                                                (("2"
                                                                  (generalize
                                                                   A
                                                                   A
                                                                   "IExpression")
                                                                  (("2"
                                                                    (induct-and-simplify
                                                                     A)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (delete -3)
                                                    (("1"
                                                      (expand
                                                       state_matches)
                                                      (("1"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("1"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (rewrite
                                                             translate_refs_atom)
                                                            (("1"
                                                              (rewrite
                                                               unmark_atom)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "state_matches?(make_redex_typed(typed_to_topstate(tS))`state, make_redex_typed(typed_to_topstate(rS))`state)")
                                                    (("1"
                                                      (case
                                                       "types_matches(make_redex_typed(typed_to_topstate(tS)), make_redex_typed(typed_to_topstate(rS)))")
                                                      (("1"
                                                        (delete -4)
                                                        (("1"
                                                          (expand
                                                           typed_reduce)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               state_matches?)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   state_matches
                                                                   -2)
                                                                  (("1"
                                                                    (with-labels
                                                                     (flatten)
                                                                     ((err
                                                                       trr
                                                                       unm
                                                                       stam
                                                                       stom)))
                                                                    (("1"
                                                                      (case
                                                                       "pureLetRedex?(make_redex_typed
                                                                                                              (typed_to_topstate(rS))`state`redex)")
                                                                      (("1"
                                                                        (case
                                                                         "pureLetRedex?(make_redex_typed
                                                                                                                    (typed_to_topstate(tS))`state`redex)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             types_matches)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace*)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (replace
                                                                             trr
                                                                             :dir
                                                                             RL)
                                                                            (("2"
                                                                              (expand
                                                                               pureLetRedex?)
                                                                              (("2"
                                                                                (expand
                                                                                 letRedex?)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     +)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand*
                                                                                         unmark
                                                                                         translate_refs
                                                                                         +)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand*
                                                                                         unmark
                                                                                         translate_refs
                                                                                         +)
                                                                                        (("2"
                                                                                          (use
                                                                                           translate_refs_atom)
                                                                                          (("2"
                                                                                            (use
                                                                                             unmark_atom)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (expand*
                                                                                         unmark
                                                                                         translate_refs
                                                                                         +)
                                                                                        (("3"
                                                                                          (use
                                                                                           translate_refs_pure)
                                                                                          (("3"
                                                                                            (use
                                                                                             unmark_pure)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "pureLetRedex?(make_redex_typed
                                                                                                                    (typed_to_topstate(tS))`state`redex)")
                                                                        (("1"
                                                                          (delete
                                                                           obj)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                         (rS))`state`redex)")
                                                                          (("1"
                                                                            (case
                                                                             "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                               (tS))`state`redex)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 types_matches)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (delete
                                                                               obj)
                                                                              (("2"
                                                                                (replace
                                                                                 trr
                                                                                 :dir
                                                                                 RL)
                                                                                (("2"
                                                                                  (expand
                                                                                   applyRedex?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand*
                                                                                       (unmark
                                                                                        translate_refs)
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                               (tS))`state`redex)")
                                                                            (("1"
                                                                              (delete
                                                                               obj)
                                                                              (("1"
                                                                                (replace
                                                                                 trr
                                                                                 :dir
                                                                                 RL)
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                     (rS))`state`redex)")
                                                                              (("1"
                                                                                (case
                                                                                 "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                           (tS))`state`redex)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     types_matches)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace*)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           ift_condtion_match)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "make_redex_typed(typed_to_topstate(tS))`state"
                                                                                             "make_redex_typed(typed_to_topstate(rS))`state")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               -1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand*
                                                                                               make_redex_typed
                                                                                               typed_to_topstate
                                                                                               make_redex
                                                                                               to_topstate)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (expand*
                                                                                               make_redex_typed
                                                                                               typed_to_topstate
                                                                                               make_redex_e
                                                                                               to_topstate)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (replace
                                                                                     trr
                                                                                     :dir
                                                                                     RL)
                                                                                    (("2"
                                                                                      (expand*
                                                                                       pureIftRedex?
                                                                                       iftRedex?)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand*
                                                                                               (unmark
                                                                                                translate_refs)
                                                                                               1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               unmark
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 translate_refs
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   translate_refs_pure)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     unmark_pure)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (expand
                                                                                               unmark
                                                                                               1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 translate_refs
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (use
                                                                                                   translate_refs_pure)
                                                                                                  (("3"
                                                                                                    (use
                                                                                                     unmark_pure)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                           (tS))`state`redex)")
                                                                                (("1"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("1"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                       (rS))`state`redex)")
                                                                                  (("1"
                                                                                    (case
                                                                                     "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                        (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         types_matches)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("2"
                                                                                        (replace
                                                                                         trr
                                                                                         :dir
                                                                                         RL)
                                                                                        (("2"
                                                                                          (expand
                                                                                           updateRedex?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               unmark
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 translate_refs
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                        (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("1"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                              (rS))`state`redex)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                    (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             types_matches)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("2"
                                                                                            (replace
                                                                                             trr
                                                                                             :dir
                                                                                             RL)
                                                                                            (("2"
                                                                                              (expand
                                                                                               lookupRedex?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   unmark
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     translate_refs
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                    (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                          (rS))`state`redex)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 types_matches)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 trr
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   newintRedex?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       unmark
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         translate_refs
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                      (rS))`state`redex)")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                            (tS))`state`redex)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     types_matches)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     trr
                                                                                                     :dir
                                                                                                     RL)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       newrefRedex?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           unmark
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             translate_refs
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                            (tS))`state`redex)")
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("1"
                                                                                                    (postpone)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                  (rS))`state`redex)")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                        (tS))`state`redex)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         types_matches)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (replace*)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (delete
                                                                                                       obj)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         trr
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           popRedex?)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   unmark
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     translate_refs
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   unmark
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     translate_refs
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (use
                                                                                                                       translate_refs_atom)
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         unmark_atom)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (case
                                                                                                     "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                                                                        (tS))`state`redex)")
                                                                                                    (("1"
                                                                                                      (delete
                                                                                                       obj)
                                                                                                      (("1"
                                                                                                        (postpone)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         make_redex_typed)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "make_redex(typed_to_topstate(rS)`state)")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             pureRedex?)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("5"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("6"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("7"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("8"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("9"
                                                                                                                (expand
                                                                                                                 pureReleaseRedex?)
                                                                                                                (("9"
                                                                                                                  (expand
                                                                                                                   make_redex)
                                                                                                                  (("9"
                                                                                                                    (rewrite
                                                                                                                     top_releases_build_redex
                                                                                                                     :dir
                                                                                                                     RL)
                                                                                                                    (("9"
                                                                                                                      (expand*
                                                                                                                       typed_to_topstate
                                                                                                                       to_topstate)
                                                                                                                      (("9"
                                                                                                                        (rewrite
                                                                                                                         top_releases_ct_fill)
                                                                                                                        (("9"
                                                                                                                          (flatten)
                                                                                                                          (("9"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         make_redex_types_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (expand
                                                             make_redex_typed
                                                             -1)
                                                            (("4"
                                                              (expand
                                                               typed_to_topstate
                                                               -1)
                                                              (("4"
                                                                (expand
                                                                 make_redex
                                                                 -1)
                                                                (("4"
                                                                  (rewrite
                                                                   top_releases_build_redex
                                                                   -1
                                                                   :dir
                                                                   RL)
                                                                  (("4"
                                                                    (expand
                                                                     to_topstate)
                                                                    (("4"
                                                                      (rewrite
                                                                       top_releases_ct_fill)
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (expand
                                                             state_matches?)
                                                            (("5"
                                                              (inst
                                                               1
                                                               translate)
                                                              (("5"
                                                                (expand
                                                                 state_matches
                                                                 1)
                                                                (("5"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand*
                                                       make_redex_typed
                                                       typed_to_topstate)
                                                      (("2"
                                                        (use
                                                         make_redex_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (expand
                                                             make_redex)
                                                            (("4"
                                                              (rewrite
                                                               top_releases_build_redex
                                                               :dir
                                                               RL)
                                                              (("4"
                                                                (expand
                                                                 to_topstate)
                                                                (("4"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (expand
                                                             state_matches?)
                                                            (("5"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand types_matches)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (delete obj)
                                  (("2"
                                    (case
                                     "state_matches?(reduce(D)(tS`state), typed_reduce(D)(rS)`state)")
                                    (("1"
                                      (expand state_matches?)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (delete 2)
                                      (("2"
                                        (use bisimulation_lemma)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (rewrite
                                             typed_reduce_state)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand rreduce_n)
                                                (("1"
                                                  (expand rreduce_n)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "rS`state")
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (typepred "rS`state")
                                            (("3" (propax) nil nil))
                                            nil)
                                           ("4"
                                            (typepred "rS`state")
                                            (("4" (propax) nil nil))
                                            nil)
                                           ("5"
                                            (expand state_matches?)
                                            (("5"
                                              (inst?)
                                              (("5"
                                                (expand
                                                 typed_to_topstate)
                                                (("5"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand typed_to_topstate)
                                      (("3" (replace*) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3"
                                  (expand typed_to_topstate)
                                  (("3" (replace*) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst hrec "typed_reduce(D)(rS)")
              (("1" (inst?)
                (("1" (split hrec)
                  (("1" (rewrite typed_reduce_state)
                    (("1" (rewrite top_releases_reduce)
                      (("1" (expand typed_reduce_n +)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (rewrite typed_reduce_state)
                    (("3" (rewrite top_release_reduce)
                      (("3" (expand releaseReduce)
                        (("3" (expand* decref make_redex)
                          (("3" (split hrec)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (propax) nil nil)
                   ("5" (expand state_matches?)
                    (("5" (skeep)
                      (("5" (inst?)
                        (("5" (delete obj)
                          (("5" (expand state_matches)
                            (("5" (expand typed_to_topstate hrec)
                              (("5"
                                (rewrite typed_reduce_state)
                                (("1"
                                  (rewrite top_release_reduce)
                                  (("1"
                                    (use releaseReduce_reduce_match)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((sstam rtm ctm sttm dtm)))
                                          (("1"
                                            (case
                                             "NOT atom?(typed_to_topstate(rS)`state`redex)")
                                            (("1"
                                              (case
                                               "releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                              (("1"
                                                (expand releaseRedex?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     typed_reduce)
                                                    (("1"
                                                      (expand*
                                                       pureLetRedex?
                                                       letRedex?
                                                       applyRedex?
                                                       pureIftRedex?
                                                       iftRedex?
                                                       updateRedex?
                                                       lookupRedex?
                                                       newintRedex?
                                                       newrefRedex?
                                                       popRedex?)
                                                      (("1"
                                                        (split hrec)
                                                        (("1"
                                                          (expand
                                                           make_redex_typed)
                                                          (("1"
                                                            (typepred
                                                             "buildRedexType(typed_to_topstate(rS)`state`redex,
                                                                                                typed_to_topstate(rS)`redex_type)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 typed_to_topstate)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 make_redex_typed
                                                 +)
                                                (("2"
                                                  (expand make_redex +)
                                                  (("2"
                                                    (lemma
                                                     top_releases_build_redex)
                                                    (("2"
                                                      (inst? :where 1)
                                                      (("2"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (delete hrec)
                                                          (("2"
                                                            (expand
                                                             typed_to_topstate
                                                             +)
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (split)
                                                (("1"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                              (("1"
                                                (expand to_topstate)
                                                (("1"
                                                  (rewrite
                                                   top_releases_ct_fill)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 typed_to_topstate)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "rS`state")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (typepred "rS`state")
                                        (("3" (propax) nil nil))
                                        nil)
                                       ("4"
                                        (typepred "rS`state")
                                        (("4" (propax) nil nil))
                                        nil)
                                       ("5"
                                        (flatten)
                                        (("5"
                                          (expand typed_to_topstate)
                                          (("5" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (delete hrec)
                                        (("6"
                                          (delete stm)
                                          (("6" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand typed_to_topstate)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (rewrite typed_reduce_state)
                    (("6" (rewrite top_releases_reduce)
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (propax) nil nil)
                 ("2" (expand state_matches? -)
                  (("2" (skeep)
                    (("2" (expand* state_matches typed_to_topstate)
                      (("2" (flatten) (("2" (replace*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (delete 4 -4)
      (("2" (expand state_matches?)
        (("2" (skeep)
          (("2" (expand* state_matches typed_to_topstate)
            (("2" (flatten) (("2" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (delete 4)
      (("3" (expand state_matches?)
        (("3" (skeep)
          (("3" (expand* state_matches typed_to_topstate)
            (("3" (flatten) (("3" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
    nil)
   nil nil)
  (bisimulation_lemma-7 "" 3703430148
   ("" (measure-induct+ "top_releases_ct(trS`state`redex)" ("trS"))
    (("1" (label hrec -1)
      (("1" (with-labels (skeep* +) ((err1 err2 dwt stm obj)))
        (("1" (name-replace rS "x!1")
          (("1" (case-replace "top_releases_ct(rS`state`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand typed_reduce_n +)
                (("1" (assert)
                  (("1" (expand typed_reduce_n)
                    (("1" (expand state_matches?)
                      (("1" (skeep)
                        (("1" (expand state_matches)
                          (("1" (rewrite typed_reduce_state)
                            (("1"
                              (case "exists (translate):
                                   state_matches(reduce(D)(tS`state), typed_reduce(D)(rS)`state)
                                                (translate)")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst + "translate!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "types_matches(typed_reduce(D)(tS), typed_reduce(D)(rS))")
                                      (("1"
                                        (expand types_matches)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (label obj 1)
                                          (("2"
                                            (case
                                             "types_matches(typed_to_topstate(tS), typed_to_topstate(rS))")
                                            (("1"
                                              (delete -6 -7 -8 -9)
                                              (("1"
                                                (case
                                                 "atom?(typed_to_topstate(tS)`state`redex)")
                                                (("1"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (delete -4)
                                                      (("1"
                                                        (expand
                                                         typed_reduce)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete -3)
                                                    (("2"
                                                      (expand
                                                       state_matches)
                                                      (("2"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (case
                                                             "atom?(unmark(typed_to_topstate(rS)`state`redex))")
                                                            (("1"
                                                              (case
                                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                                              (("1"
                                                                (hide-all-but
                                                                 (1
                                                                  -1
                                                                  -2))
                                                                (("1"
                                                                  (expand
                                                                   typed_to_topstate)
                                                                  (("1"
                                                                    (generalize
                                                                     "to_topstate(rS`state)`redex"
                                                                     A
                                                                     "IExpression")
                                                                    (("1"
                                                                      (induct-and-simplify
                                                                       A)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 to_topstate)
                                                                (("2"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (name-replace
                                                               A
                                                               "unmark(typed_to_topstate(rS)`state`redex)")
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -1))
                                                                (("2"
                                                                  (generalize
                                                                   A
                                                                   A
                                                                   "IExpression")
                                                                  (("2"
                                                                    (induct-and-simplify
                                                                     A)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (delete -3)
                                                    (("1"
                                                      (expand
                                                       state_matches)
                                                      (("1"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("1"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (rewrite
                                                             translate_refs_atom)
                                                            (("1"
                                                              (rewrite
                                                               unmark_atom)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "state_matches?(make_redex_typed(typed_to_topstate(tS))`state, make_redex_typed(typed_to_topstate(rS))`state)")
                                                    (("1"
                                                      (case
                                                       "types_matches(make_redex_typed(typed_to_topstate(tS)), make_redex_typed(typed_to_topstate(rS)))")
                                                      (("1"
                                                        (delete -4)
                                                        (("1"
                                                          (expand
                                                           typed_reduce)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "pureLetRedex?(make_redex_typed
                                                                                     (typed_to_topstate(rS))`state`redex)")
                                                              (("1"
                                                                (case
                                                                 "pureLetRedex?(make_redex_typed
                                                                                         (typed_to_topstate(tS))`state`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     types_matches)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace*)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (expand
                                                                     state_matches?)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         state_matches
                                                                         -3)
                                                                        (("2"
                                                                          (with-labels
                                                                           (flatten)
                                                                           ((err
                                                                             trr
                                                                             unm
                                                                             stam
                                                                             stom)))
                                                                          (("2"
                                                                            (replace
                                                                             trr
                                                                             :dir
                                                                             RL)
                                                                            (("2"
                                                                              (expand
                                                                               pureLetRedex?)
                                                                              (("2"
                                                                                (expand
                                                                                 letRedex?)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     +)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand*
                                                                                         unmark
                                                                                         translate_refs
                                                                                         +)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand*
                                                                                         unmark
                                                                                         translate_refs
                                                                                         +)
                                                                                        (("2"
                                                                                          (use
                                                                                           translate_refs_atom)
                                                                                          (("2"
                                                                                            (use
                                                                                             unmark_atom)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (expand*
                                                                                         unmark
                                                                                         translate_refs
                                                                                         +)
                                                                                        (("3"
                                                                                          (use
                                                                                           translate_refs_pure)
                                                                                          (("3"
                                                                                            (use
                                                                                             unmark_pure)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "pureLetRedex?(make_redex_typed
                                                                                         (typed_to_topstate(tS))`state`redex)")
                                                                (("1"
                                                                  (delete
                                                                   obj)
                                                                  (("1"
                                                                    (expand
                                                                     state_matches?)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (expand
                                                                         state_matches
                                                                         -3)
                                                                        (("1"
                                                                          (with-labels
                                                                           (flatten)
                                                                           ((err
                                                                             trr
                                                                             unm
                                                                             stam
                                                                             stom)))
                                                                          (("1"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                            (rS))`state`redex)")
                                                                  (("1"
                                                                    (case
                                                                     "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                (tS))`state`redex)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         types_matches)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (expand
                                                                         state_matches?)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             state_matches
                                                                             -3)
                                                                            (("2"
                                                                              (with-labels
                                                                               (flatten)
                                                                               ((err
                                                                                 trr
                                                                                 unm
                                                                                 stam
                                                                                 stom)))
                                                                              (("2"
                                                                                (replace
                                                                                 trr
                                                                                 :dir
                                                                                 RL)
                                                                                (("2"
                                                                                  (expand
                                                                                   applyRedex?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand*
                                                                                       (unmark
                                                                                        translate_refs)
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                                                (tS))`state`redex)")
                                                                    (("1"
                                                                      (delete
                                                                       obj)
                                                                      (("1"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                    (rS))`state`redex)")
                                                                      (("1"
                                                                        (case
                                                                         "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                        (tS))`state`redex)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             types_matches)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace*)
                                                                                (("1"
                                                                                  (lemma
                                                                                   ift_condtion_match)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "make_redex_typed(typed_to_topstate(tS))`state"
                                                                                     "make_redex_typed(typed_to_topstate(rS))`state")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -1)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand*
                                                                                       make_redex_typed
                                                                                       typed_to_topstate
                                                                                       make_redex
                                                                                       to_topstate)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (expand*
                                                                                       make_redex_typed
                                                                                       typed_to_topstate
                                                                                       make_redex_e
                                                                                       to_topstate)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (expand
                                                                             state_matches?)
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 state_matches
                                                                                 -3)
                                                                                (("2"
                                                                                  (with-labels
                                                                                   (flatten)
                                                                                   ((err
                                                                                     trr
                                                                                     unm
                                                                                     stam
                                                                                     stom)))
                                                                                  (("2"
                                                                                    (replace
                                                                                     trr
                                                                                     :dir
                                                                                     RL)
                                                                                    (("2"
                                                                                      (expand*
                                                                                       pureIftRedex?
                                                                                       iftRedex?)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand*
                                                                                               (unmark
                                                                                                translate_refs)
                                                                                               1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               unmark
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 translate_refs
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   translate_refs_pure)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     unmark_pure)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (expand
                                                                                               unmark
                                                                                               1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 translate_refs
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (use
                                                                                                   translate_refs_pure)
                                                                                                  (("3"
                                                                                                    (use
                                                                                                     unmark_pure)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                                                        (tS))`state`redex)")
                                                                        (("1"
                                                                          (delete
                                                                           obj)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                       (rS))`state`redex)")
                                                                          (("1"
                                                                            (case
                                                                             "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                      (tS))`state`redex)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 types_matches)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (delete
                                                                               obj)
                                                                              (("2"
                                                                                (expand
                                                                                 state_matches?)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (expand
                                                                                     state_matches
                                                                                     -3)
                                                                                    (("2"
                                                                                      (with-labels
                                                                                       (flatten)
                                                                                       ((err
                                                                                         trr
                                                                                         unm
                                                                                         stam
                                                                                         stom)))
                                                                                      (("2"
                                                                                        (replace
                                                                                         trr
                                                                                         :dir
                                                                                         RL)
                                                                                        (("2"
                                                                                          (expand
                                                                                           updateRedex?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               unmark
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 translate_refs
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                                                      (tS))`state`redex)")
                                                                            (("1"
                                                                              (delete
                                                                               obj)
                                                                              (("1"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                          (rS))`state`redex)")
                                                                              (("1"
                                                                                (case
                                                                                 "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                              (tS))`state`redex)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     types_matches)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (expand
                                                                                     state_matches?)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (expand
                                                                                         state_matches
                                                                                         -3)
                                                                                        (("2"
                                                                                          (with-labels
                                                                                           (flatten)
                                                                                           ((err
                                                                                             trr
                                                                                             unm
                                                                                             stam
                                                                                             stom)))
                                                                                          (("2"
                                                                                            (replace
                                                                                             trr
                                                                                             :dir
                                                                                             RL)
                                                                                            (("2"
                                                                                              (expand
                                                                                               lookupRedex?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   unmark
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     translate_refs
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                                                              (tS))`state`redex)")
                                                                                (("1"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("1"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                  (rS))`state`redex)")
                                                                                  (("1"
                                                                                    (case
                                                                                     "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                      (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         types_matches)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("2"
                                                                                        (expand
                                                                                         state_matches?)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (expand
                                                                                             state_matches
                                                                                             -3)
                                                                                            (("2"
                                                                                              (with-labels
                                                                                               (flatten)
                                                                                               ((err
                                                                                                 trr
                                                                                                 unm
                                                                                                 stam
                                                                                                 stom)))
                                                                                              (("2"
                                                                                                (replace
                                                                                                 trr
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   newintRedex?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       unmark
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         translate_refs
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                      (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("1"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                          (rS))`state`redex)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                              (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             types_matches)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("2"
                                                                                            (expand
                                                                                             state_matches?)
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 state_matches
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (with-labels
                                                                                                   (flatten)
                                                                                                   ((err
                                                                                                     trr
                                                                                                     unm
                                                                                                     stam
                                                                                                     stom)))
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     trr
                                                                                                     :dir
                                                                                                     RL)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       newrefRedex?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           unmark
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             translate_refs
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                              (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                  (rS))`state`redex)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                      (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 types_matches)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (replace*)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 state_matches?)
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     state_matches
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (with-labels
                                                                                                       (flatten)
                                                                                                       ((err
                                                                                                         trr
                                                                                                         unm
                                                                                                         stam
                                                                                                         stom)))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         trr
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           popRedex?)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   unmark
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     translate_refs
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   unmark
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     translate_refs
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (use
                                                                                                                       translate_refs_atom)
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         unmark_atom)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                                      (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 make_redex_typed)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "make_redex(typed_to_topstate(rS)`state)")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     pureRedex?)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("5"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("6"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("7"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("8"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("9"
                                                                                                        (expand
                                                                                                         pureReleaseRedex?)
                                                                                                        (("9"
                                                                                                          (expand
                                                                                                           make_redex)
                                                                                                          (("9"
                                                                                                            (rewrite
                                                                                                             top_releases_build_redex
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("9"
                                                                                                              (expand*
                                                                                                               typed_to_topstate
                                                                                                               to_topstate)
                                                                                                              (("9"
                                                                                                                (rewrite
                                                                                                                 top_releases_ct_fill)
                                                                                                                (("9"
                                                                                                                  (flatten)
                                                                                                                  (("9"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         make_redex_types_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (expand
                                                             make_redex_typed
                                                             -1)
                                                            (("4"
                                                              (expand
                                                               typed_to_topstate
                                                               -1)
                                                              (("4"
                                                                (expand
                                                                 make_redex
                                                                 -1)
                                                                (("4"
                                                                  (rewrite
                                                                   top_releases_build_redex
                                                                   -1
                                                                   :dir
                                                                   RL)
                                                                  (("4"
                                                                    (expand
                                                                     to_topstate)
                                                                    (("4"
                                                                      (rewrite
                                                                       top_releases_ct_fill)
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (expand
                                                             state_matches?)
                                                            (("5"
                                                              (inst
                                                               1
                                                               translate)
                                                              (("5"
                                                                (expand
                                                                 state_matches
                                                                 1)
                                                                (("5"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand*
                                                       make_redex_typed
                                                       typed_to_topstate)
                                                      (("2"
                                                        (use
                                                         make_redex_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (expand
                                                             make_redex)
                                                            (("4"
                                                              (rewrite
                                                               top_releases_build_redex
                                                               :dir
                                                               RL)
                                                              (("4"
                                                                (expand
                                                                 to_topstate)
                                                                (("4"
                                                                  (rewrite
                                                                   top_releases_ct_fill)
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (expand
                                                             state_matches?)
                                                            (("5"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand types_matches)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (delete obj)
                                  (("2"
                                    (case
                                     "state_matches?(reduce(D)(tS`state), typed_reduce(D)(rS)`state)")
                                    (("1"
                                      (expand state_matches?)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (delete 2)
                                      (("2"
                                        (use bisimulation_lemma)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (rewrite
                                             typed_reduce_state)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand rreduce_n)
                                                (("1"
                                                  (expand rreduce_n)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "rS`state")
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (typepred "rS`state")
                                            (("3" (propax) nil nil))
                                            nil)
                                           ("4"
                                            (typepred "rS`state")
                                            (("4" (propax) nil nil))
                                            nil)
                                           ("5"
                                            (expand state_matches?)
                                            (("5"
                                              (inst?)
                                              (("5"
                                                (expand
                                                 typed_to_topstate)
                                                (("5"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand typed_to_topstate)
                                      (("3" (replace*) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3"
                                  (expand typed_to_topstate)
                                  (("3" (replace*) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst hrec "typed_reduce(D)(rS)")
              (("1" (inst?)
                (("1" (split hrec)
                  (("1" (rewrite typed_reduce_state)
                    (("1" (rewrite top_releases_reduce)
                      (("1" (expand typed_reduce_n +)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (rewrite typed_reduce_state)
                    (("3" (rewrite top_release_reduce)
                      (("3" (expand releaseReduce)
                        (("3" (expand* decref make_redex)
                          (("3" (split hrec)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (propax) nil nil)
                   ("5" (expand state_matches?)
                    (("5" (skeep)
                      (("5" (inst?)
                        (("5" (delete obj)
                          (("5" (expand state_matches)
                            (("5" (expand typed_to_topstate hrec)
                              (("5"
                                (rewrite typed_reduce_state)
                                (("1"
                                  (rewrite top_release_reduce)
                                  (("1"
                                    (use releaseReduce_reduce_match)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((sstam rtm ctm sttm dtm)))
                                          (("1"
                                            (case
                                             "NOT atom?(typed_to_topstate(rS)`state`redex)")
                                            (("1"
                                              (case
                                               "releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                              (("1"
                                                (expand releaseRedex?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     typed_reduce)
                                                    (("1"
                                                      (expand*
                                                       pureLetRedex?
                                                       letRedex?
                                                       applyRedex?
                                                       pureIftRedex?
                                                       iftRedex?
                                                       updateRedex?
                                                       lookupRedex?
                                                       newintRedex?
                                                       newrefRedex?
                                                       popRedex?)
                                                      (("1"
                                                        (split hrec)
                                                        (("1"
                                                          (expand
                                                           make_redex_typed)
                                                          (("1"
                                                            (typepred
                                                             "buildRedexType(typed_to_topstate(rS)`state`redex,
                                                                            typed_to_topstate(rS)`redex_type)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 typed_to_topstate)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 make_redex_typed
                                                 +)
                                                (("2"
                                                  (expand make_redex +)
                                                  (("2"
                                                    (lemma
                                                     top_releases_build_redex)
                                                    (("2"
                                                      (inst? :where 1)
                                                      (("2"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (delete hrec)
                                                          (("2"
                                                            (expand
                                                             typed_to_topstate
                                                             +)
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (split)
                                                (("1"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                              (("1"
                                                (expand to_topstate)
                                                (("1"
                                                  (rewrite
                                                   top_releases_ct_fill)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 typed_to_topstate)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "rS`state")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (typepred "rS`state")
                                        (("3" (propax) nil nil))
                                        nil)
                                       ("4"
                                        (typepred "rS`state")
                                        (("4" (propax) nil nil))
                                        nil)
                                       ("5"
                                        (flatten)
                                        (("5"
                                          (expand typed_to_topstate)
                                          (("5" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (delete hrec)
                                        (("6"
                                          (delete stm)
                                          (("6" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand typed_to_topstate)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (rewrite typed_reduce_state)
                    (("6" (rewrite top_releases_reduce)
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (propax) nil nil)
                 ("2" (expand state_matches? -)
                  (("2" (skeep)
                    (("2" (expand* state_matches typed_to_topstate)
                      (("2" (flatten) (("2" (replace*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (delete 4 -4)
      (("2" (expand state_matches?)
        (("2" (skeep)
          (("2" (expand* state_matches typed_to_topstate)
            (("2" (flatten) (("2" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (delete 4)
      (("3" (expand state_matches?)
        (("3" (skeep)
          (("3" (expand* state_matches typed_to_topstate)
            (("3" (flatten) (("3" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
    nil)
   nil nil)
  (bisimulation_lemma-6 "" 3703429366
   ("" (measure-induct+ "top_releases_ct(trS`state`redex)" ("trS"))
    (("1" (label hrec -1)
      (("1" (with-labels (skeep* +) ((err1 err2 dwt stm obj)))
        (("1" (name-replace rS "x!1")
          (("1" (case-replace "top_releases_ct(rS`state`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand typed_reduce_n +)
                (("1" (assert)
                  (("1" (expand typed_reduce_n)
                    (("1" (expand state_matches?)
                      (("1" (skeep)
                        (("1" (expand state_matches)
                          (("1" (rewrite typed_reduce_state)
                            (("1"
                              (case "exists (translate):
                        state_matches(reduce(D)(tS`state), typed_reduce(D)(rS)`state)
                                     (translate)")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst + "translate!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "types_matches(typed_reduce(D)(tS), typed_reduce(D)(rS))")
                                      (("1"
                                        (expand types_matches)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (label obj 1)
                                          (("2"
                                            (case
                                             "types_matches(typed_to_topstate(tS), typed_to_topstate(rS))")
                                            (("1"
                                              (delete -6 -7 -8 -9)
                                              (("1"
                                                (case
                                                 "atom?(typed_to_topstate(tS)`state`redex)")
                                                (("1"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (delete -4)
                                                      (("1"
                                                        (expand
                                                         typed_reduce)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete -3)
                                                    (("2"
                                                      (expand
                                                       state_matches)
                                                      (("2"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (case
                                                             "atom?(unmark(typed_to_topstate(rS)`state`redex))")
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (name-replace
                                                               A
                                                               "unmark(typed_to_topstate(rS)`state`redex)")
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -1))
                                                                (("2"
                                                                  (generalize
                                                                   A
                                                                   A
                                                                   "IExpression")
                                                                  (("2"
                                                                    (induct-and-simplify
                                                                     A)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (delete -3)
                                                    (("1"
                                                      (expand
                                                       state_matches)
                                                      (("1"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("1"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (rewrite
                                                             translate_refs_atom)
                                                            (("1"
                                                              (rewrite
                                                               unmark_atom)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "state_matches(make_redex_typed(typed_to_topstate(tS))`state, make_redex_typed(typed_to_topstate(rS))`state)(translate)")
                                                    (("1"
                                                      (case
                                                       "types_matches(make_redex_typed(typed_to_topstate(tS)), make_redex_typed(typed_to_topstate(rS)))")
                                                      (("1"
                                                        (delete -4)
                                                        (("1"
                                                          (expand
                                                           typed_reduce)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "pureLetRedex?(make_redex_typed
                                                            (typed_to_topstate(rS))`state`redex)")
                                                              (("1"
                                                                (case
                                                                 "pureLetRedex?(make_redex_typed
                                                              (typed_to_topstate(tS))`state`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     types_matches)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace*)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "pureLetRedex?(make_redex_typed
                                                              (typed_to_topstate(tS))`state`redex)")
                                                                (("1"
                                                                  (delete
                                                                   obj)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "applyRedex?(make_redex_typed(typed_to_topstate
                                                                               (rS))`state`redex)")
                                                                  (("1"
                                                                    (case
                                                                     "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                 (tS))`state`redex)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         types_matches)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                 (tS))`state`redex)")
                                                                    (("1"
                                                                      (delete
                                                                       obj)
                                                                      (("1"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                   (rS))`state`redex)")
                                                                      (("1"
                                                                        (case
                                                                         "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                     (tS))`state`redex)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             types_matches)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace*)
                                                                                (("1"
                                                                                  (lemma
                                                                                   ift_condtion_match)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "make_redex_typed(typed_to_topstate(tS))`state"
                                                                                     "make_redex_typed(typed_to_topstate(rS))`state")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         state_matches?)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand*
                                                                                       make_redex_typed
                                                                                       typed_to_topstate
                                                                                       make_redex
                                                                                       to_topstate)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (expand*
                                                                                       make_redex_typed
                                                                                       typed_to_topstate
                                                                                       make_redex_e
                                                                                       to_topstate)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                     (tS))`state`redex)")
                                                                        (("1"
                                                                          (delete
                                                                           obj)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                       (rS))`state`redex)")
                                                                          (("1"
                                                                            (case
                                                                             "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                    (tS))`state`redex)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 types_matches)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (delete
                                                                               obj)
                                                                              (("2"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                    (tS))`state`redex)")
                                                                            (("1"
                                                                              (delete
                                                                               obj)
                                                                              (("1"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                      (rS))`state`redex)")
                                                                              (("1"
                                                                                (case
                                                                                 "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                        (tS))`state`redex)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     types_matches)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                        (tS))`state`redex)")
                                                                                (("1"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("1"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                          (rS))`state`redex)")
                                                                                  (("1"
                                                                                    (case
                                                                                     "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                            (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         types_matches)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("2"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                            (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("1"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                              (rS))`state`redex)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             types_matches)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                  (rS))`state`redex)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                    (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 types_matches)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (replace*)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                    (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 make_redex_typed)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "make_redex(typed_to_topstate(rS)`state)")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     pureRedex?)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("5"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("6"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("7"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("8"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("9"
                                                                                                        (expand
                                                                                                         pureReleaseRedex?)
                                                                                                        (("9"
                                                                                                          (expand
                                                                                                           make_redex)
                                                                                                          (("9"
                                                                                                            (rewrite
                                                                                                             top_releases_build_redex
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("9"
                                                                                                              (expand*
                                                                                                               typed_to_topstate
                                                                                                               to_topstate)
                                                                                                              (("9"
                                                                                                                (rewrite
                                                                                                                 top_releases_ct_fill)
                                                                                                                (("9"
                                                                                                                  (flatten)
                                                                                                                  (("9"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand*
                                                       make_redex_typed
                                                       typed_to_topstate)
                                                      (("2"
                                                        (use
                                                         make_redex_match)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (expand
                                                             state_matches?)
                                                            (("5"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand types_matches)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (delete obj)
                                  (("2"
                                    (case
                                     "state_matches?(reduce(D)(tS`state), typed_reduce(D)(rS)`state)")
                                    (("1"
                                      (expand state_matches?)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (delete 2)
                                      (("2"
                                        (use bisimulation_lemma)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (rewrite
                                             typed_reduce_state)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand rreduce_n)
                                                (("1"
                                                  (expand rreduce_n)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "rS`state")
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (typepred "rS`state")
                                            (("3" (propax) nil nil))
                                            nil)
                                           ("4"
                                            (typepred "rS`state")
                                            (("4" (propax) nil nil))
                                            nil)
                                           ("5"
                                            (expand state_matches?)
                                            (("5"
                                              (inst?)
                                              (("5"
                                                (expand
                                                 typed_to_topstate)
                                                (("5"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand typed_to_topstate)
                                      (("3" (replace*) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3"
                                  (expand typed_to_topstate)
                                  (("3" (replace*) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst hrec "typed_reduce(D)(rS)")
              (("1" (inst?)
                (("1" (split hrec)
                  (("1" (rewrite typed_reduce_state)
                    (("1" (rewrite top_releases_reduce)
                      (("1" (expand typed_reduce_n +)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (rewrite typed_reduce_state)
                    (("3" (rewrite top_release_reduce)
                      (("3" (expand releaseReduce)
                        (("3" (expand* decref make_redex)
                          (("3" (split hrec)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (propax) nil nil)
                   ("5" (expand state_matches?)
                    (("5" (skeep)
                      (("5" (inst?)
                        (("5" (delete obj)
                          (("5" (expand state_matches)
                            (("5" (expand typed_to_topstate hrec)
                              (("5"
                                (rewrite typed_reduce_state)
                                (("1"
                                  (rewrite top_release_reduce)
                                  (("1"
                                    (use releaseReduce_reduce_match)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((sstam rtm ctm sttm dtm)))
                                          (("1"
                                            (case
                                             "NOT atom?(typed_to_topstate(rS)`state`redex)")
                                            (("1"
                                              (case
                                               "releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                              (("1"
                                                (expand releaseRedex?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     typed_reduce)
                                                    (("1"
                                                      (expand*
                                                       pureLetRedex?
                                                       letRedex?
                                                       applyRedex?
                                                       pureIftRedex?
                                                       iftRedex?
                                                       updateRedex?
                                                       lookupRedex?
                                                       newintRedex?
                                                       newrefRedex?
                                                       popRedex?)
                                                      (("1"
                                                        (split hrec)
                                                        (("1"
                                                          (expand
                                                           make_redex_typed)
                                                          (("1"
                                                            (typepred
                                                             "buildRedexType(typed_to_topstate(rS)`state`redex,
                                                        typed_to_topstate(rS)`redex_type)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 typed_to_topstate)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 make_redex_typed
                                                 +)
                                                (("2"
                                                  (expand make_redex +)
                                                  (("2"
                                                    (lemma
                                                     top_releases_build_redex)
                                                    (("2"
                                                      (inst? :where 1)
                                                      (("2"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (delete hrec)
                                                          (("2"
                                                            (expand
                                                             typed_to_topstate
                                                             +)
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (split)
                                                (("1"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                              (("1"
                                                (expand to_topstate)
                                                (("1"
                                                  (rewrite
                                                   top_releases_ct_fill)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 typed_to_topstate)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "rS`state")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (typepred "rS`state")
                                        (("3" (propax) nil nil))
                                        nil)
                                       ("4"
                                        (typepred "rS`state")
                                        (("4" (propax) nil nil))
                                        nil)
                                       ("5"
                                        (flatten)
                                        (("5"
                                          (expand typed_to_topstate)
                                          (("5" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (delete hrec)
                                        (("6"
                                          (delete stm)
                                          (("6" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand typed_to_topstate)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (rewrite typed_reduce_state)
                    (("6" (rewrite top_releases_reduce)
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (propax) nil nil)
                 ("2" (expand state_matches? -)
                  (("2" (skeep)
                    (("2" (expand* state_matches typed_to_topstate)
                      (("2" (flatten) (("2" (replace*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (delete 4 -4)
      (("2" (expand state_matches?)
        (("2" (skeep)
          (("2" (expand* state_matches typed_to_topstate)
            (("2" (flatten) (("2" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (delete 4)
      (("3" (expand state_matches?)
        (("3" (skeep)
          (("3" (expand* state_matches typed_to_topstate)
            (("3" (flatten) (("3" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
    nil)
   nil nil)
  (bisimulation_lemma-5 "" 3703429033
   ("" (measure-induct+ "top_releases_ct(trS`state`redex)" ("trS"))
    (("1" (label hrec -1)
      (("1" (with-labels (skeep* +) ((err1 err2 dwt stm obj)))
        (("1" (name-replace rS "x!1")
          (("1" (case-replace "top_releases_ct(rS`state`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand typed_reduce_n +)
                (("1" (assert)
                  (("1" (expand typed_reduce_n)
                    (("1" (expand state_matches?)
                      (("1" (skeep)
                        (("1" (expand state_matches)
                          (("1" (rewrite typed_reduce_state)
                            (("1"
                              (case "exists (translate):
                        state_matches(reduce(D)(tS`state), typed_reduce(D)(rS)`state)
                                     (translate)")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst + "translate!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "types_matches(typed_reduce(D)(tS), typed_reduce(D)(rS))")
                                      (("1"
                                        (expand types_matches)
                                        (("1" (propax) nil)))
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (label obj 1)
                                          (("2"
                                            (case
                                             "types_matches(typed_to_topstate(tS), typed_to_topstate(rS))")
                                            (("1"
                                              (delete -6 -7 -8 -9)
                                              (("1"
                                                (case
                                                 "atom?(typed_to_topstate(tS)`state`redex)")
                                                (("1"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (delete -4)
                                                      (("1"
                                                        (expand
                                                         typed_reduce)
                                                        (("1"
                                                          (propax)
                                                          nil)))))))
                                                   ("2"
                                                    (delete -3)
                                                    (("2"
                                                      (expand
                                                       state_matches)
                                                      (("2"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (case
                                                             "atom?(unmark(typed_to_topstate(rS)`state`redex))")
                                                            (("1"
                                                              (postpone)
                                                              nil)
                                                             ("2"
                                                              (name-replace
                                                               A
                                                               "unmark(typed_to_topstate(rS)`state`redex)")
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -1))
                                                                (("2"
                                                                  (generalize
                                                                   A
                                                                   A
                                                                   "IExpression")
                                                                  (("2"
                                                                    (induct-and-simplify
                                                                     A)
                                                                    nil)))))))))))))))))))
                                                 ("2"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (delete -3)
                                                    (("1"
                                                      (expand
                                                       state_matches)
                                                      (("1"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("1"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (rewrite
                                                             translate_refs_atom)
                                                            (("1"
                                                              (rewrite
                                                               unmark_atom)
                                                              nil)))))))))))
                                                   ("2"
                                                    (case
                                                     "state_matches(make_redex_typed(typed_to_topstate(tS))`state, make_redex_typed(typed_to_topstate(rS))`state)(translate)")
                                                    (("2"
                                                      (case
                                                       "types_matches(make_redex_typed(typed_to_topstate(tS)), make_redex_typed(typed_to_topstate(rS)))")
                                                      (("1"
                                                        (delete -3)
                                                        (("1"
                                                          (expand
                                                           typed_reduce)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "pureLetRedex?(make_redex_typed
                                                            (typed_to_topstate(rS))`state`redex)")
                                                              (("1"
                                                                (case
                                                                 "pureLetRedex?(make_redex_typed
                                                              (typed_to_topstate(tS))`state`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     types_matches)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace*)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (postpone)
                                                                    nil)))))
                                                               ("2"
                                                                (case
                                                                 "pureLetRedex?(make_redex_typed
                                                              (typed_to_topstate(tS))`state`redex)")
                                                                (("1"
                                                                  (delete
                                                                   obj)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil)))
                                                                 ("2"
                                                                  (case
                                                                   "applyRedex?(make_redex_typed(typed_to_topstate
                                                                               (rS))`state`redex)")
                                                                  (("1"
                                                                    (case
                                                                     "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                 (tS))`state`redex)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         types_matches)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (postpone)
                                                                        nil)))))
                                                                   ("2"
                                                                    (case
                                                                     "applyRedex?(make_redex_typed(typed_to_topstate
                                                                                 (tS))`state`redex)")
                                                                    (("1"
                                                                      (delete
                                                                       obj)
                                                                      (("1"
                                                                        (postpone)
                                                                        nil)))
                                                                     ("2"
                                                                      (case
                                                                       "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                   (rS))`state`redex)")
                                                                      (("1"
                                                                        (case
                                                                         "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                     (tS))`state`redex)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             types_matches)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace*)
                                                                                (("1"
                                                                                  (lemma
                                                                                   ift_condtion_match)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "make_redex_typed(typed_to_topstate(tS))`state"
                                                                                     "make_redex_typed(typed_to_topstate(rS))`state")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         state_matches?)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil)))))))
                                                                                     ("2"
                                                                                      (expand*
                                                                                       make_redex_typed
                                                                                       typed_to_topstate
                                                                                       make_redex
                                                                                       to_topstate)
                                                                                      nil)
                                                                                     ("3"
                                                                                      (expand*
                                                                                       make_redex_typed
                                                                                       typed_to_topstate
                                                                                       make_redex_e
                                                                                       to_topstate)
                                                                                      nil)))))))))))))
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (postpone)
                                                                            nil)))))
                                                                       ("2"
                                                                        (case
                                                                         "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                                                     (tS))`state`redex)")
                                                                        (("1"
                                                                          (delete
                                                                           obj)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil)))
                                                                         ("2"
                                                                          (case
                                                                           "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                       (rS))`state`redex)")
                                                                          (("1"
                                                                            (case
                                                                             "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                    (tS))`state`redex)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 types_matches)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (delete
                                                                               obj)
                                                                              (("2"
                                                                                (postpone)
                                                                                nil)))))
                                                                           ("2"
                                                                            (case
                                                                             "updateRedex?(make_redex_typed(typed_to_topstate
                                                                                    (tS))`state`redex)")
                                                                            (("1"
                                                                              (delete
                                                                               obj)
                                                                              (("1"
                                                                                (postpone)
                                                                                nil)))
                                                                             ("2"
                                                                              (case
                                                                               "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                      (rS))`state`redex)")
                                                                              (("1"
                                                                                (case
                                                                                 "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                        (tS))`state`redex)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     types_matches)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil)))))
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (postpone)
                                                                                    nil)))))
                                                                               ("2"
                                                                                (case
                                                                                 "lookupRedex?(make_redex_typed(typed_to_topstate
                                                                                        (tS))`state`redex)")
                                                                                (("1"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("1"
                                                                                    (postpone)
                                                                                    nil)))
                                                                                 ("2"
                                                                                  (case
                                                                                   "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                          (rS))`state`redex)")
                                                                                  (("1"
                                                                                    (case
                                                                                     "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                            (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         types_matches)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("2"
                                                                                        (postpone)
                                                                                        nil)))))
                                                                                   ("2"
                                                                                    (case
                                                                                     "newintRedex?(make_redex_typed(typed_to_topstate
                                                                                            (tS))`state`redex)")
                                                                                    (("1"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("1"
                                                                                        (postpone)
                                                                                        nil)))
                                                                                     ("2"
                                                                                      (case
                                                                                       "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                              (rS))`state`redex)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             types_matches)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil)))))
                                                                                         ("2"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("2"
                                                                                            (postpone)
                                                                                            nil)))))
                                                                                       ("2"
                                                                                        (case
                                                                                         "newrefRedex?(make_redex_typed(typed_to_topstate
                                                                                                (tS))`state`redex)")
                                                                                        (("1"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil)))
                                                                                         ("2"
                                                                                          (case
                                                                                           "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                  (rS))`state`redex)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                    (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 types_matches)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (replace*)
                                                                                                    nil)))))))
                                                                                             ("2"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("2"
                                                                                                (postpone)
                                                                                                nil)))))
                                                                                           ("2"
                                                                                            (case
                                                                                             "popRedex?(make_redex_typed(typed_to_topstate
                                                                                                    (tS))`state`redex)")
                                                                                            (("1"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil)))
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 make_redex_typed)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "make_redex(typed_to_topstate(rS)`state)")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     pureRedex?)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (propax)
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (propax)
                                                                                                        nil)
                                                                                                       ("5"
                                                                                                        (propax)
                                                                                                        nil)
                                                                                                       ("6"
                                                                                                        (propax)
                                                                                                        nil)
                                                                                                       ("7"
                                                                                                        (propax)
                                                                                                        nil)
                                                                                                       ("8"
                                                                                                        (propax)
                                                                                                        nil)
                                                                                                       ("9"
                                                                                                        (expand
                                                                                                         pureReleaseRedex?)
                                                                                                        (("9"
                                                                                                          (expand
                                                                                                           make_redex)
                                                                                                          (("9"
                                                                                                            (rewrite
                                                                                                             top_releases_build_redex
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("9"
                                                                                                              (expand*
                                                                                                               typed_to_topstate
                                                                                                               to_topstate)
                                                                                                              (("9"
                                                                                                                (rewrite
                                                                                                                 top_releases_ct_fill)
                                                                                                                (("9"
                                                                                                                  (flatten)
                                                                                                                  (("9"
                                                                                                                    (assert)
                                                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                       ("2"
                                                        (postpone)
                                                        nil)
                                                       ("3"
                                                        (split)
                                                        (("1"
                                                          (expand
                                                           typed_to_topstate)
                                                          (("1"
                                                            (expand
                                                             to_topstate)
                                                            (("1"
                                                              (propax)
                                                              nil)))))
                                                         ("2"
                                                          (propax)
                                                          nil)))
                                                       ("4"
                                                        (split)
                                                        (("1"
                                                          (expand*
                                                           typed_to_topstate
                                                           to_topstate)
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil)))))))))))))
                                             ("2"
                                              (expand types_matches)
                                              (("2"
                                                (propax)
                                                nil)))))))))))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (delete obj)
                                  (("2"
                                    (case
                                     "state_matches?(reduce(D)(tS`state), typed_reduce(D)(rS)`state)")
                                    (("1"
                                      (expand state_matches?)
                                      (("1" (propax) nil)))
                                     ("2"
                                      (delete 2)
                                      (("2"
                                        (use bisimulation_lemma)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (rewrite
                                             typed_reduce_state)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand rreduce_n)
                                                (("1"
                                                  (expand rreduce_n)
                                                  (("1"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (typepred "rS`state")
                                            (("2" (propax) nil)))
                                           ("3"
                                            (typepred "rS`state")
                                            (("3" (propax) nil)))
                                           ("4"
                                            (typepred "rS`state")
                                            (("4" (propax) nil)))
                                           ("5"
                                            (expand state_matches?)
                                            (("5"
                                              (inst?)
                                              (("5"
                                                (expand
                                                 typed_to_topstate)
                                                (("5"
                                                  (propax)
                                                  nil)))))))))))))
                                     ("3"
                                      (expand typed_to_topstate)
                                      (("3" (replace*) nil)))))))))
                               ("3"
                                (flatten)
                                (("3"
                                  (expand typed_to_topstate)
                                  (("3"
                                    (replace*)
                                    nil)))))))))))))))))))))))
             ("2" (inst hrec "typed_reduce(D)(rS)")
              (("1" (inst?)
                (("1" (split hrec)
                  (("1" (rewrite typed_reduce_state)
                    (("1" (rewrite top_releases_reduce)
                      (("1" (expand typed_reduce_n +)
                        (("1" (assert) nil)))))))
                   ("2" (propax) nil)
                   ("3" (rewrite typed_reduce_state)
                    (("3" (rewrite top_release_reduce)
                      (("3" (expand releaseReduce)
                        (("3" (expand* decref make_redex)
                          (("3" (split hrec)
                            (("1" (flatten)
                              (("1" (assert) (("1" (grind) nil)))))
                             ("2" (grind) nil)))))))))))
                   ("4" (propax) nil)
                   ("5" (expand state_matches?)
                    (("5" (skeep)
                      (("5" (inst?)
                        (("5" (delete obj)
                          (("5" (expand state_matches)
                            (("5" (expand typed_to_topstate hrec)
                              (("5"
                                (rewrite typed_reduce_state)
                                (("1"
                                  (rewrite top_release_reduce)
                                  (("1"
                                    (use releaseReduce_reduce_match)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((sstam rtm ctm sttm dtm)))
                                          (("1"
                                            (case
                                             "NOT atom?(typed_to_topstate(rS)`state`redex)")
                                            (("1"
                                              (case
                                               "releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                              (("1"
                                                (expand releaseRedex?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     typed_reduce)
                                                    (("1"
                                                      (expand*
                                                       pureLetRedex?
                                                       letRedex?
                                                       applyRedex?
                                                       pureIftRedex?
                                                       iftRedex?
                                                       updateRedex?
                                                       lookupRedex?
                                                       newintRedex?
                                                       newrefRedex?
                                                       popRedex?)
                                                      (("1"
                                                        (split hrec)
                                                        (("1"
                                                          (expand
                                                           make_redex_typed)
                                                          (("1"
                                                            (typepred
                                                             "buildRedexType(typed_to_topstate(rS)`state`redex,
                                                        typed_to_topstate(rS)`redex_type)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 typed_to_topstate)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))))
                                                         ("2"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil)
                                                         ("3"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil)))))))))))
                                               ("2"
                                                (expand
                                                 make_redex_typed
                                                 +)
                                                (("2"
                                                  (expand make_redex +)
                                                  (("2"
                                                    (lemma
                                                     top_releases_build_redex)
                                                    (("2"
                                                      (inst? :where 1)
                                                      (("2"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (delete hrec)
                                                          (("2"
                                                            (expand
                                                             typed_to_topstate
                                                             +)
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))
                                               ("3"
                                                (split)
                                                (("1"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (propax)
                                                      nil)))))
                                                 ("2" (propax) nil)))))
                                             ("2"
                                              (case
                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                              (("1"
                                                (expand to_topstate)
                                                (("1"
                                                  (rewrite
                                                   top_releases_ct_fill)
                                                  nil)))
                                               ("2"
                                                (expand
                                                 typed_to_topstate)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (grind)
                                                    nil)))))))))))))
                                       ("2"
                                        (typepred "rS`state")
                                        (("2" (propax) nil)))
                                       ("3"
                                        (typepred "rS`state")
                                        (("3" (propax) nil)))
                                       ("4"
                                        (typepred "rS`state")
                                        (("4" (propax) nil)))
                                       ("5"
                                        (flatten)
                                        (("5"
                                          (expand typed_to_topstate)
                                          (("5" (propax) nil)))))
                                       ("6"
                                        (delete hrec)
                                        (("6"
                                          (delete stm)
                                          (("6" (grind) nil)))))))))))
                                 ("2"
                                  (expand typed_to_topstate)
                                  (("2" (propax) nil)))))))))))))))))
                   ("6" (rewrite typed_reduce_state)
                    (("6" (rewrite top_releases_reduce)
                      (("6" (assert) nil)))))))))
               ("2" (split)
                (("1" (propax) nil)
                 ("2" (expand state_matches? -)
                  (("2" (skeep)
                    (("2" (expand* state_matches typed_to_topstate)
                      (("2" (flatten)
                        (("2" (replace*) nil)))))))))))))))))))))
     ("2" (delete 4 -4)
      (("2" (expand state_matches?)
        (("2" (skeep)
          (("2" (expand* state_matches typed_to_topstate)
            (("2" (flatten) (("2" (replace*) nil)))))))))))
     ("3" (delete 4)
      (("3" (expand state_matches?)
        (("3" (skeep)
          (("3" (expand* state_matches typed_to_topstate)
            (("3" (flatten) (("3" (replace*) nil)))))))))))
     ("4" (split) (("1" (propax) nil) ("2" (propax) nil))))
    nil)
   nil nil)
  (bisimulation_lemma-4 "" 3703422987
   ("" (measure-induct+ "top_releases_ct(trS`state`redex)" ("trS"))
    (("1" (label hrec -1)
      (("1" (with-labels (skeep* +) ((err1 err2 dwt stm obj)))
        (("1" (name-replace rS "x!1")
          (("1" (case-replace "top_releases_ct(rS`state`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand typed_reduce_n +)
                (("1" (assert)
                  (("1" (expand typed_reduce_n)
                    (("1" (expand state_matches?)
                      (("1" (skeep)
                        (("1" (expand state_matches)
                          (("1" (rewrite typed_reduce_state)
                            (("1"
                              (case "exists (translate):
             state_matches(reduce(D)(tS`state), typed_reduce(D)(rS)`state)
                          (translate)")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst + "translate!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "types_matches(typed_reduce(D)(tS), typed_reduce(D)(rS))")
                                      (("1"
                                        (expand types_matches)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (label obj 1)
                                          (("2"
                                            (case
                                             "types_matches(typed_to_topstate(tS), typed_to_topstate(rS))")
                                            (("1"
                                              (delete -6 -7 -8 -9)
                                              (("1"
                                                (case
                                                 "atom?(typed_to_topstate(tS)`state`redex)")
                                                (("1"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (delete -4)
                                                      (("1"
                                                        (expand
                                                         typed_reduce)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete -3)
                                                    (("2"
                                                      (expand
                                                       state_matches)
                                                      (("2"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (case
                                                             "atom?(unmark(typed_to_topstate(rS)`state`redex))")
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (name-replace
                                                               A
                                                               "unmark(typed_to_topstate(rS)`state`redex)")
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -1))
                                                                (("2"
                                                                  (generalize
                                                                   A
                                                                   A
                                                                   "IExpression")
                                                                  (("2"
                                                                    (induct-and-simplify
                                                                     A)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "atom?(typed_to_topstate(rS)`state`redex)")
                                                  (("1"
                                                    (delete -3)
                                                    (("1"
                                                      (expand
                                                       state_matches)
                                                      (("1"
                                                        (with-labels
                                                         (flatten)
                                                         ((err
                                                           trr
                                                           unm
                                                           stam
                                                           stom)))
                                                        (("1"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (rewrite
                                                             translate_refs_atom)
                                                            (("1"
                                                              (rewrite
                                                               unmark_atom)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "types_matches(make_redex_typed(typed_to_topstate(tS)), make_redex_typed(typed_to_topstate(rS)))")
                                                    (("1"
                                                      (delete -3)
                                                      (("1"
                                                        (expand
                                                         typed_reduce)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "pureLetRedex?(make_redex_typed
                                     (typed_to_topstate(rS))`state`redex)")
                                                            (("1"
                                                              (case
                                                               "pureLetRedex?(make_redex_typed
                                     (typed_to_topstate(tS))`state`redex)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   types_matches)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replace*)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "pureLetRedex?(make_redex_typed
                                     (typed_to_topstate(tS))`state`redex)")
                                                              (("1"
                                                                (delete
                                                                 obj)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "applyRedex?(make_redex_typed(typed_to_topstate
                                                    (rS))`state`redex)")
                                                                (("1"
                                                                  (case
                                                                   "applyRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       types_matches)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "applyRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                  (("1"
                                                                    (delete
                                                                     obj)
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                    (rS))`state`redex)")
                                                                    (("1"
                                                                      (case
                                                                       "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           types_matches)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replace*)
                                                                              (("1"
                                                                                (lemma
                                                                                 ift_condtion_match)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "make_redex_typed(typed_to_topstate(tS))`state"
                                                                                   "make_redex_typed(typed_to_topstate(rS))`state")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       state_matches?)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand*
                                                                                     make_redex_typed
                                                                                     typed_to_topstate
                                                                                     make_redex
                                                                                     to_topstate)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand*
                                                                                     make_redex_typed
                                                                                     typed_to_topstate
                                                                                     make_redex_e
                                                                                     to_topstate)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "pureIftRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                      (("1"
                                                                        (delete
                                                                         obj)
                                                                        (("1"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "updateRedex?(make_redex_typed(typed_to_topstate
                                                    (rS))`state`redex)")
                                                                        (("1"
                                                                          (case
                                                                           "updateRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               types_matches)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (delete
                                                                             obj)
                                                                            (("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "updateRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                          (("1"
                                                                            (delete
                                                                             obj)
                                                                            (("1"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "lookupRedex?(make_redex_typed(typed_to_topstate
                                                    (rS))`state`redex)")
                                                                            (("1"
                                                                              (case
                                                                               "lookupRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   types_matches)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (delete
                                                                                 obj)
                                                                                (("2"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "lookupRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                              (("1"
                                                                                (delete
                                                                                 obj)
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "newintRedex?(make_redex_typed(typed_to_topstate
                                                    (rS))`state`redex)")
                                                                                (("1"
                                                                                  (case
                                                                                   "newintRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       types_matches)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (delete
                                                                                     obj)
                                                                                    (("2"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "newintRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                                  (("1"
                                                                                    (delete
                                                                                     obj)
                                                                                    (("1"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "newrefRedex?(make_redex_typed(typed_to_topstate
                                                    (rS))`state`redex)")
                                                                                    (("1"
                                                                                      (case
                                                                                       "newrefRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           types_matches)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (delete
                                                                                         obj)
                                                                                        (("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "newrefRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                                      (("1"
                                                                                        (delete
                                                                                         obj)
                                                                                        (("1"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "popRedex?(make_redex_typed(typed_to_topstate
                                                    (rS))`state`redex)")
                                                                                        (("1"
                                                                                          (case
                                                                                           "popRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               types_matches)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace*)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (delete
                                                                                             obj)
                                                                                            (("2"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "popRedex?(make_redex_typed(typed_to_topstate
                                                    (tS))`state`redex)")
                                                                                          (("1"
                                                                                            (delete
                                                                                             obj)
                                                                                            (("1"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               make_redex_typed)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "make_redex(typed_to_topstate(rS)`state)")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   pureRedex?)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("4"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("5"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("6"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("7"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("8"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("9"
                                                                                                      (expand
                                                                                                       pureReleaseRedex?)
                                                                                                      (("9"
                                                                                                        (expand
                                                                                                         make_redex)
                                                                                                        (("9"
                                                                                                          (rewrite
                                                                                                           top_releases_build_redex
                                                                                                           :dir
                                                                                                           RL)
                                                                                                          (("9"
                                                                                                            (expand*
                                                                                                             typed_to_topstate
                                                                                                             to_topstate)
                                                                                                            (("9"
                                                                                                              (rewrite
                                                                                                               top_releases_ct_fill)
                                                                                                              (("9"
                                                                                                                (flatten)
                                                                                                                (("9"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         typed_to_topstate)
                                                        (("1"
                                                          (expand
                                                           to_topstate)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (split)
                                                      (("1"
                                                        (expand*
                                                         typed_to_topstate
                                                         to_topstate)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand types_matches)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (delete obj)
                                  (("2"
                                    (case
                                     "state_matches?(reduce(D)(tS`state), typed_reduce(D)(rS)`state)")
                                    (("1"
                                      (expand state_matches?)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (delete 2)
                                      (("2"
                                        (use bisimulation_lemma)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (rewrite
                                             typed_reduce_state)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand rreduce_n)
                                                (("1"
                                                  (expand rreduce_n)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "rS`state")
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (typepred "rS`state")
                                            (("3" (propax) nil nil))
                                            nil)
                                           ("4"
                                            (typepred "rS`state")
                                            (("4" (propax) nil nil))
                                            nil)
                                           ("5"
                                            (expand state_matches?)
                                            (("5"
                                              (inst?)
                                              (("5"
                                                (expand
                                                 typed_to_topstate)
                                                (("5"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand typed_to_topstate)
                                      (("3" (replace*) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3"
                                  (expand typed_to_topstate)
                                  (("3" (replace*) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst hrec "typed_reduce(D)(rS)")
              (("1" (inst?)
                (("1" (split hrec)
                  (("1" (rewrite typed_reduce_state)
                    (("1" (rewrite top_releases_reduce)
                      (("1" (expand typed_reduce_n +)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (rewrite typed_reduce_state)
                    (("3" (rewrite top_release_reduce)
                      (("3" (expand releaseReduce)
                        (("3" (expand* decref make_redex)
                          (("3" (split hrec)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (propax) nil nil)
                   ("5" (expand state_matches?)
                    (("5" (skeep)
                      (("5" (inst?)
                        (("5" (delete obj)
                          (("5" (expand state_matches)
                            (("5" (expand typed_to_topstate hrec)
                              (("5"
                                (rewrite typed_reduce_state)
                                (("1"
                                  (rewrite top_release_reduce)
                                  (("1"
                                    (use releaseReduce_reduce_match)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((sstam rtm ctm sttm dtm)))
                                          (("1"
                                            (case
                                             "NOT atom?(typed_to_topstate(rS)`state`redex)")
                                            (("1"
                                              (case
                                               "releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                              (("1"
                                                (expand releaseRedex?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     typed_reduce)
                                                    (("1"
                                                      (expand*
                                                       pureLetRedex?
                                                       letRedex?
                                                       applyRedex?
                                                       pureIftRedex?
                                                       iftRedex?
                                                       updateRedex?
                                                       lookupRedex?
                                                       newintRedex?
                                                       newrefRedex?
                                                       popRedex?)
                                                      (("1"
                                                        (split hrec)
                                                        (("1"
                                                          (expand
                                                           make_redex_typed)
                                                          (("1"
                                                            (typepred
                                                             "buildRedexType(typed_to_topstate(rS)`state`redex,
                                    typed_to_topstate(rS)`redex_type)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 typed_to_topstate)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand*
                                                           make_redex_typed
                                                           typed_to_topstate)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 make_redex_typed
                                                 +)
                                                (("2"
                                                  (expand make_redex +)
                                                  (("2"
                                                    (lemma
                                                     top_releases_build_redex)
                                                    (("2"
                                                      (inst? :where 1)
                                                      (("2"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (delete hrec)
                                                          (("2"
                                                            (expand
                                                             typed_to_topstate
                                                             +)
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (split)
                                                (("1"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "top_releases_ct(to_topstate(rS`state)`redex) = 0")
                                              (("1"
                                                (expand to_topstate)
                                                (("1"
                                                  (rewrite
                                                   top_releases_ct_fill)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 typed_to_topstate)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "rS`state")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (typepred "rS`state")
                                        (("3" (propax) nil nil))
                                        nil)
                                       ("4"
                                        (typepred "rS`state")
                                        (("4" (propax) nil nil))
                                        nil)
                                       ("5"
                                        (flatten)
                                        (("5"
                                          (expand typed_to_topstate)
                                          (("5" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (delete hrec)
                                        (("6"
                                          (delete stm)
                                          (("6" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand typed_to_topstate)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (rewrite typed_reduce_state)
                    (("6" (rewrite top_releases_reduce)
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (propax) nil nil)
                 ("2" (expand state_matches? -)
                  (("2" (skeep)
                    (("2" (expand* state_matches typed_to_topstate)
                      (("2" (flatten) (("2" (replace*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (delete 4 -4)
      (("2" (expand state_matches?)
        (("2" (skeep)
          (("2" (expand* state_matches typed_to_topstate)
            (("2" (flatten) (("2" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (delete 4)
      (("3" (expand state_matches?)
        (("3" (skeep)
          (("3" (expand* state_matches typed_to_topstate)
            (("3" (flatten) (("3" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
    nil)
   nil nil)
  (bisimulation_lemma-3 "" 3703364110
   ("" (measure-induct+ "top_releases_ct(trS`state`redex)" ("trS"))
    (("1" (label hrec -1)
      (("1" (with-labels (skeep* +) ((err1 err2 dwt stm obj)))
        (("1" (name-replace rS "x!1")
          (("1" (case-replace "top_releases_ct(rS`state`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand typed_reduce_n +)
                (("1" (assert)
                  (("1" (expand typed_reduce_n)
                    (("1" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (inst hrec "typed_reduce(D)(rS)")
              (("1" (inst?)
                (("1" (split hrec)
                  (("1" (rewrite typed_reduce_state)
                    (("1" (rewrite top_releases_reduce)
                      (("1" (expand typed_reduce_n +)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (rewrite typed_reduce_state)
                    (("3" (rewrite top_release_reduce)
                      (("3" (expand releaseReduce)
                        (("3" (expand* decref make_redex)
                          (("3" (split hrec)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (propax) nil nil)
                   ("5" (expand state_matches?)
                    (("5" (skeep)
                      (("5" (inst?)
                        (("5" (delete obj)
                          (("5" (expand state_matches)
                            (("5" (expand typed_to_topstate hrec)
                              (("5"
                                (rewrite typed_reduce_state)
                                (("1"
                                  (rewrite top_release_reduce)
                                  (("1"
                                    (use releaseReduce_reduce_match)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((sstam rtm ctm sttm dtm)))
                                          (("1"
                                            (case
                                             "atom?(typed_to_topstate(rS)`state`redex)")
                                            (("1"
                                              (case
                                               "releaseRedex?(make_redex_typed(typed_to_topstate(rS))`state`redex)")
                                              (("1"
                                                (expand releaseRedex?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     typed_reduce)
                                                    (("1"
                                                      (expand
                                                       typed_to_topstate)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (expand
                                                           typeinfo_fill
                                                           +
                                                           2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 make_redex_typed
                                                 +)
                                                (("2"
                                                  (expand make_redex +)
                                                  (("2"
                                                    (lemma
                                                     top_releases_build_redex)
                                                    (("2"
                                                      (inst? :where 1)
                                                      (("2"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (delete hrec)
                                                          (("2"
                                                            (expand
                                                             typed_to_topstate
                                                             +)
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (split)
                                                (("1"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (name
                                               rS2
                                               "make_redex_typed(typed_to_topstate(rS))")
                                              (("1" (postpone) nil nil)
                                               ("2"
                                                (split)
                                                (("1"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "rS`state")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (typepred "rS`state")
                                        (("3" (propax) nil nil))
                                        nil)
                                       ("4"
                                        (typepred "rS`state")
                                        (("4" (propax) nil nil))
                                        nil)
                                       ("5"
                                        (flatten)
                                        (("5"
                                          (expand typed_to_topstate)
                                          (("5" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (delete hrec)
                                        (("6"
                                          (delete stm)
                                          (("6" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand typed_to_topstate)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (rewrite typed_reduce_state)
                    (("6" (rewrite top_releases_reduce)
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (propax) nil nil)
                 ("2" (expand state_matches? -)
                  (("2" (skeep)
                    (("2" (expand* state_matches typed_to_topstate)
                      (("2" (flatten) (("2" (replace*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (delete 4 -4)
      (("2" (expand state_matches?)
        (("2" (skeep)
          (("2" (expand* state_matches typed_to_topstate)
            (("2" (flatten) (("2" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (delete 4)
      (("3" (expand state_matches?)
        (("3" (skeep)
          (("3" (expand* state_matches typed_to_topstate)
            (("3" (flatten) (("3" (replace*) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
    nil)
   nil shostak)
  (bisimulation_lemma-2 "" 3703355139
   ("" (skeep* :preds? t)
    ((""
      (case "state_matches?(typed_reduce(D)(tS)`state,
                     typed_reduce_n(D)
                                   (top_releases_ct(trS`state`redex) + 1,
                                    trS)`state)")
      (("1" (expand state_matches?)
        (("1" (skeep)
          (("1" (inst?)
            (("1" (expand state_matches +)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (delete -1)
                    (("1" (expand state_matches)
                      (("1" (flatten)
                        (("1" (delete -2) (("1" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak)
  (bisimulation_lemma-1 nil 3703351556
   ("" (measure-induct+ "top_releases_ct(trS`state`redex)" ("trS"))
    (("1" (name-replace "trS" "x!1")
      (("1" (with-labels (skeep) ((err1 err2 dwt stm obj)))
        (("1" (label hrec -1)
          (("1" (case-replace "top_releases_ct(trS`state`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand typed_reduce_n)
                (("1" (expand typed_reduce_n)
                  (("1" (assert) (("1" (postpone) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (expand typed_reduce_n obj)
              (("2" (assert)
                (("2" (inst hrec "typed_reduce(D)(trS)")
                  (("2" (inst hrec D tS)
                    (("2" (split hrec)
                      (("1" (rewrite typed_reduce_state)
                        (("1" (rewrite top_releases_reduce)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (propax) nil nil)
                       ("3" (rewrite typed_reduce_state)
                        (("3" (rewrite top_release_reduce)
                          (("3"
                            (case-replace
                             "releaseReduce(D)(make_redex(to_topstate(trS`state)))`error = trS`state`error")
                            (("3" (delete hrec)
                              (("3"
                                (expand releaseReduce)
                                (("3"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand decref)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand*
                                           make_redex
                                           to_topstate)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand* make_redex to_topstate)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (propax) nil nil)
                       ("5" (delete obj)
                        (("5"
                          (case "state_matches?(to_topstate(tS`state), to_topstate(reduce(D)(trS`state)))")
                          (("1" (expand state_matches? -1)
                            (("1" (skeep)
                              (("1"
                                (expand state_matches? hrec)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (expand state_matches hrec)
                                    (("1"
                                      (split)
                                      (("1"
                                        (expand typed_to_topstate hrec)
                                        (("1"
                                          (rewrite typed_reduce_state)
                                          nil
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (postpone) nil nil)
                                       ("4" (postpone) nil nil)
                                       ("5" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (delete hrec)
                            (("2" (rewrite top_release_reduce)
                              (("2"
                                (name-replace
                                 "rS"
                                 "make_redex
                                               (to_topstate(trS`state))")
                                (("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("6" (rewrite typed_reduce_state)
                        (("6" (rewrite top_releases_reduce)
                          (("6" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (postpone) nil nil)
     ("3" (expand state_matches? -)
      (("3" (skeep -)
        (("3" (expand state_matches)
          (("3" (flatten)
            (("3" (expand typed_to_topstate)
              (("3" (replace* -) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
    nil)
   nil shostak))
 (iapply_nstacktypes_iterm_TCC1 0
  (iapply_nstacktypes_iterm_TCC1-1 nil 3706632220
   ("" (skeep* :preds? t)
    (("" (expand length -3) (("" (grind) nil nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (iapply_nstacktypes_iterm subtype "args_type" "(cons?[nat])")))
 (iapply_nstacktypes_iterm_TCC2 0
  (iapply_nstacktypes_iterm_TCC2-1 nil 3706632220
   ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (iapply_nstacktypes_iterm subtype
    "list_props[nat].length(args_type) - 1" "nat")))
 (iapply_nstacktypes_iterm_TCC3 0
  (iapply_nstacktypes_iterm_TCC3-1 nil 3706632220
   ("" (skeep* :preds? t)
    (("" (expand length + 2) (("" (grind) nil nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil
   (iapply_nstacktypes_iterm subtype "list_adt[nat].cdr(args_type)"
    "{args_type_1: list[nat] | list_props[nat].length(args_type_1) = list_props[nat].length(args_type) - 1}")))
 (iapply_nstacktypes_iterm_TCC4 0
  (iapply_nstacktypes_iterm_TCC4-1 nil 3706632220
   ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (iapply_nstacktypes_iterm subtype "k - 2" "nat")))
 (iapply_nstacktypes_iterm_TCC5 0
  (iapply_nstacktypes_iterm_TCC5-1 nil 3706632220
   ("" (skeep* :preds? t)
    (("" (expand length) (("" (grind) nil nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (iapply_nstacktypes_iterm subtype "args_type" "(cons?[nat])")))
 (iapply_nstacktypes_iterm_TCC6 0
  (iapply_nstacktypes_iterm_TCC6-1 nil 3706632220
   ("" (skeep* :preds? t)
    (("" (expand length -3) (("" (grind) nil nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil
   (iapply_nstacktypes_iterm subtype "list_adt[nat].cdr(args_type)"
    "{args_type: list[nat] | k - 2 <= 2 * list_props[nat].length(args_type)}")))
 (iapply_nstacktypes_iterm_TCC7 0
  (iapply_nstacktypes_iterm_TCC7-1 nil 3706632220
   ("" (termination-tcc) nil nil) nil nil
   (iapply_nstacktypes_iterm termination
    "iapply_nstacktypes_iterm(k - 2, more_finseq[nat].add(list_adt[nat].car(args_type), stypes), list_adt[nat].cdr(args_type), tA)"
    "nil")))
 (same_shape_TCC1 0
  (same_shape_TCC1-1 nil 3710631065 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[IContext])" IL nil)) nil
   (same_shape termination
    "typed_reduction_props.same_shape(typed_reduction_props.K1, typed_reduction.lcrhs(typed_reduction_props.tK))"
    "nil")))
 (same_shape_TCC2 0
  (same_shape_TCC2-1 nil 3710631065 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[IContext])" IL nil)) nil
   (same_shape termination
    "typed_reduction_props.same_shape(typed_reduction_props.K1, typed_reduction.pctbody(typed_reduction_props.tK))"
    "nil")))
 (apply_iterm_match_TCC1 0
  (apply_iterm_match_TCC2-1 nil 3706632220 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (apply_iterm_match const-decl "bool" iareduction nil))
   nil
   (apply_iterm_match subtype "args_types"
    "{args_type: list[nat] | k <= 2 * list_props[nat].length(args_type)}")))
 (composet_TCC1 0
  (composet_TCC1-1 nil 3710617755 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[typeinfo_ctx])"
     typed_reduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (composet termination
    "typed_reduction_props.composet(typed_reduction_props.tK, typed_reduction_props.tK2)"
    "nil")))
 (composet_TCC2 0
  (composet_TCC2-1 nil 3710617755 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[typeinfo_ctx])"
     typed_reduction nil))
   nil
   (composet termination
    "typed_reduction_props.composet(typed_reduction_props.tK, typed_reduction_props.tK2)"
    "nil")))
 (composition_typeinfo 0
  (composition_typeinfo-1 nil 3710684412
   ("" (induct tK1)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (typeinfo_ctx_induction formula-decl nil typed_reduction nil)
    (composet def-decl "typeinfo_ctx" typed_reduction_props nil)
    (typeinfo_fill def-decl "typeinfo" typed_reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (typeinfo_ctx type-decl nil typed_reduction nil))
   shostak))
 (compose_same_shape 0
  (compose_same_shape-1 nil 3710633041
   ("" (induct K1)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((popct? adt-recognizer-decl "[typeinfo_ctx -> boolean]"
     typed_reduction nil)
    (pctbody adt-accessor-decl "[(popct?) -> typeinfo_ctx]"
     typed_reduction nil)
    (letct? adt-recognizer-decl "[typeinfo_ctx -> boolean]"
     typed_reduction nil)
    (lcrhs adt-accessor-decl "[(letct?) -> typeinfo_ctx]"
     typed_reduction nil)
    (IContext_induction formula-decl nil IL nil)
    (composet def-decl "typeinfo_ctx" typed_reduction_props nil)
    (compose def-decl "IContext" IL nil)
    (same_shape def-decl "bool" typed_reduction_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil))
   shostak))
 (buildRedexType_fill 0
  (buildRedexType_fill-1 nil 3710633069
   ("" (induct K)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand fill +)
        (("2" (expand buildRedexType +)
          (("2" (lift-if +)
            (("2" (split +)
              (("1" (flatten)
                (("1" (use not_value_redex_fill)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (inst -2 A tA "lcrhs(tK)")
                  (("1" (expand same_shape -3)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand typeinfo_fill +)
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1" (decompose-equality) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (expand same_shape -2)
          (("3" (flatten)
            (("3" (expand typeinfo_fill +)
              (("3" (assert)
                (("3" (inst?)
                  (("3" (inst?)
                    (("3" (assert)
                      (("3" (expand fill +)
                        (("3" (expand buildRedexType +)
                          (("3" (lift-if +)
                            (("3" (split +)
                              (("1"
                                (flatten)
                                (("1"
                                  (use not_value_redex_fill)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (decompose-equality +)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pctbody adt-accessor-decl "[(popct?) -> typeinfo_ctx]"
     typed_reduction nil)
    (popct? adt-recognizer-decl "[typeinfo_ctx -> boolean]"
     typed_reduction nil)
    (typeinfo_ctx_popct_extensionality formula-decl nil typed_reduction
     nil)
    (popct adt-constructor-decl "[typeinfo_ctx -> (popct?)]"
     typed_reduction nil)
    (not_value_redex_fill formula-decl nil IL nil)
    (letct? adt-recognizer-decl "[typeinfo_ctx -> boolean]"
     typed_reduction nil)
    (tK skolem-const-decl "typeinfo_ctx" typed_reduction_props nil)
    (lcrhs adt-accessor-decl "[(letct?) -> typeinfo_ctx]"
     typed_reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (letct adt-constructor-decl
     "[[nat, typeinfo_ctx, typeinfo] -> (letct?)]" typed_reduction nil)
    (letctype adt-accessor-decl "[(letct?) -> nat]" typed_reduction
     nil)
    (lcbody adt-accessor-decl "[(letct?) -> typeinfo]" typed_reduction
     nil)
    (typeinfo_ctx_letct_extensionality formula-decl nil typed_reduction
     nil)
    (value? const-decl "bool" IL nil)
    (letRedex? const-decl "bool" IL nil)
    (applyRedex? const-decl "bool" IL nil)
    (iftRedex? const-decl "bool" IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (lookupRedex? const-decl "bool" IL nil)
    (newintRedex? const-decl "bool" IL nil)
    (newrefRedex? const-decl "bool" IL nil)
    (popRedex? const-decl "bool" IL nil)
    (releaseRedex? const-decl "bool" IL nil)
    (IContext_induction formula-decl nil IL nil)
    (fill def-decl "IExpression" IL nil)
    (buildRedexType def-decl "{tK, tB | typeinfo_fill(tK, tB) = tA}"
     typed_reduction nil)
    (typeinfo_fill def-decl "typeinfo" typed_reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (redex? const-decl "bool" IL nil)
    (same_shape def-decl "bool" typed_reduction_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil))
   shostak))
 (applyReduce_match_rec_TCC1 0
  (applyReduce_match_rec_TCC1-1 nil 3706632220
   ("" (subtype-tcc) nil nil) nil nil
   (applyReduce_match_rec subtype "k"
    "upto(2 * list_props[(IExpression_adt.variable?)].length(L))")))
 (applyReduce_match_rec_TCC2 0
  (applyReduce_match_rec_TCC2-1 nil 3706632220
   ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (apply_iterm_match const-decl "bool" typed_reduction_props nil)
    (apply_iterm_match const-decl "bool" iareduction nil))
   nil
   (applyReduce_match_rec subtype "k + 1"
    "upto(2 * list_props[(IExpression_adt.variable?)].length(L))")))
 (applyReduce_match_rec 0
  (applyReduce_match_rec-7 nil 3710625972
   ("" (measure-induct+ k ("k"))
    (("" (name-replace k "x!1")
      (("" (skeep* :preds? t)
        (("" (case-replace "k = 0")
          (("1" (delete -13)
            (("1" (expand apply_iterm_match)
              (("1" (use applyReduce_match_rec)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1"
                              (expand iapply_nstacktypes_iterm
                                      (-15 -16 2))
                              (("1"
                                (rewrite typed_reduce_defs)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand apply_iterm_match -14)
                                    (("1"
                                      (expand
                                       iapply_nstack_iterm
                                       -14
                                       3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand rreduction.letApply)
                                          (("1"
                                            (rewrite vars_letApply)
                                            (("1"
                                              (case
                                               "vars(A)(length(L) - 1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (name
                                                   L2
                                                   "rreduction.letApply(length(L) - 1,
                                                                                                                       map(LAMBDA x: x WITH [(index) := 1 + index(x)])
                                                                                                                          (cdr(L)),
                                                                                                                       A)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (case
                                                       "fill(trS`state`context, trS`state`redex) = fill(compose(K, letc(hole, L2)), car(L))")
                                                      (("1"
                                                        (expand
                                                         typed_reduce
                                                         +)
                                                        (("1"
                                                          (expand
                                                           typed_to_topstate
                                                           +)
                                                          (("1"
                                                            (expand
                                                             to_topstate
                                                             +)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 not_value_redex_fill)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       make_redex_typed)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (rewrite
                                                                           buildRedex_fill)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "buildRedexType(fill(compose(K, letc(hole, L2)),
                                                                                                                                        car(L)),
                                                                                                                                   typeinfo_fill(trS`context_type,
                                                                                                                                                 trS`redex_type))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   letApply_type
                                                                                   -24)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             redex?)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     redex?)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         context_composition)
                                                        (("2"
                                                          (expand
                                                           fill
                                                           1
                                                           3)
                                                          (("2"
                                                            (expand
                                                             fill
                                                             1
                                                             3)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? -9)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite map_length)
                                              (("2"
                                                (expand length 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -7)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand length -7)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (split)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (split)
                    (("1" (expand k) (("1" (propax) nil nil)) nil)
                     ("2" (propax) nil nil) ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case-replace "k = 1")
            (("1" (hide -13)
              (("1" (expand apply_iterm_match)
                (("1" (expand iapply_nstacktypes_iterm)
                  (("1" (expand iapply_nstacktypes_iterm)
                    (("1" (flatten)
                      (("1" (use applyReduce_match_rec)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1" (expand apply_iterm_match -14)
                              (("1"
                                (expand iapply_nstack_iterm -14)
                                (("1"
                                  (case-replace
                                   "typed_reduce(D)(trS)`def_types = tD")
                                  (("1"
                                    (expand typed_reduce +)
                                    (("1"
                                      (case
                                       "value?(typed_to_topstate(trS)`state`redex)")
                                      (("1"
                                        (hide 3)
                                        (("1"
                                          (expand typed_to_topstate -1)
                                          (("1"
                                            (expand to_topstate -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -20)
                                                (("1"
                                                  (lemma
                                                   not_value_redex_fill)
                                                  (("1"
                                                    (inst? :where -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         redex?
                                                         +)
                                                        (("1"
                                                          (expand
                                                           letRedex?
                                                           +)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -10
                                                       "index(car(L))")
                                                      (("2"
                                                        (split -10)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           in_varlist)
                                                          (("2"
                                                            (rewrite
                                                             some_nth)
                                                            (("2"
                                                              (inst
                                                               1
                                                               0)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "pureLetRedex?(make_redex_typed(typed_to_topstate(trS))`state`redex)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand pureLetRedex?)
                                              (("1"
                                                (expand letRedex?)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       make_redex_typed
                                                       +)
                                                      (("1"
                                                        (expand
                                                         typed_to_topstate
                                                         +)
                                                        (("1"
                                                          (expand
                                                           to_topstate
                                                           +)
                                                          (("1"
                                                            (replace
                                                             -24
                                                             +)
                                                            (("1"
                                                              (replace
                                                               -22
                                                               +)
                                                              (("1"
                                                                (rewrite
                                                                 buildRedexType_fill
                                                                 +)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case-replace
                                                                     "length(cdr(args_types)) = length(args_types) - 1")
                                                                    (("1"
                                                                      (expand
                                                                       length
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (lift-if
                                                                         1)
                                                                        (("1"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               length
                                                                               -18
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   5)
                                                                  (("2"
                                                                    (expand
                                                                     redex?
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       letRedex?)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   5)
                                                                  (("3"
                                                                    (inst
                                                                     -12
                                                                     "index(car(L))")
                                                                    (("3"
                                                                      (split
                                                                       -12)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         in_varlist)
                                                                        (("2"
                                                                          (rewrite
                                                                           some_nth)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             0)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 5)
                                            (("2"
                                              (expand make_redex_typed)
                                              (("2"
                                                (expand make_redex)
                                                (("2"
                                                  (expand
                                                   typed_to_topstate)
                                                  (("2"
                                                    (expand
                                                     to_topstate)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (replace -19)
                                                        (("2"
                                                          (rewrite
                                                           buildRedex_fill)
                                                          (("1"
                                                            (expand
                                                             pureLetRedex?
                                                             +)
                                                            (("1"
                                                              (expand
                                                               letRedex?
                                                               +)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             redex?)
                                                            (("2"
                                                              (expand
                                                               letRedex?)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (inst
                                                             -9
                                                             "index(car(L))")
                                                            (("3"
                                                              (split
                                                               -9)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 in_varlist)
                                                                (("2"
                                                                  (rewrite
                                                                   some_nth)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     0)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide 5)
                                            (("3"
                                              (expand
                                               typed_to_topstate)
                                              (("3"
                                                (expand to_topstate)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 4)
                                    (("2"
                                      (expand typed_reduce +)
                                      (("2"
                                        (expand typed_to_topstate +)
                                        (("2"
                                          (expand to_topstate +)
                                          (("2"
                                            (expand make_redex_typed +)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 4)
                          (("2" (split)
                            (("1" (expand k) (("1" (propax) nil nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand apply_iterm_match (3 -12))
              (("2" (use applyReduce_match_rec)
                (("1" (expand apply_iterm_match (4 -14))
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (rewrite typed_reduce_state)
                        (("1" (assert)
                          (("1" (inst -13 "k-2")
                            (("1" (assert)
                              (("1"
                                (expand iapply_nstacktypes_iterm +)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -13
                                     D
                                     A
                                     "compose(K, popc(hole))"
                                     dom
                                     "push(S`seq(S`length - 1 - index(car(L))), IF ref?(S`seq(S`length - 1 - index(car(L)))) AND marked(car(L)) THEN S WITH [`seq(S`length - 1 - index(car(L))) := nil] ELSE S ENDIF)"
                                     "map(LAMBDA (y: (variable?)): y WITH [(index) := 1 + index(y)])(cdr(L))"
                                     trS
                                     tA
                                     _
                                     tD
                                     str
                                     "IF ref?(S`seq(S`length - 1 - index(car(L)))) AND NOT marked(car(L)) THEN cnt WITH [(refindex(S`seq(S`length - 1 - index(car(L))))) := cnt(refindex(S`seq(S`length - 1 - index(car(L))))) + 1] ELSE cnt ENDIF"
                                     "add(car(args_types), stypes)"
                                     "cdr(args_types)")
                                    (("1"
                                      (inst
                                       -13
                                       "composet(tK, popct(holet))")
                                      (("1"
                                        (split -13)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -5)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 composition_typeinfo)
                                                (("1"
                                                  (expand
                                                   typeinfo_fill
                                                   -3
                                                   3)
                                                  (("1"
                                                    (expand
                                                     typeinfo_fill
                                                     -3
                                                     3)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 5)
                                          (("2"
                                            (expand
                                             apply_iterm_match
                                             -13)
                                            (("2"
                                              (expand
                                               apply_iterm_match
                                               +)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     iapply_nstack_iterm
                                                     (-15 -16 -17))
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (case
                                                         "marked(car(L))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "ref?(S`seq(S`length - 1 - index(car(L))))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 context_composition)
                                                                (("1"
                                                                  (expand
                                                                   fill
                                                                   1
                                                                   3)
                                                                  (("1"
                                                                    (expand
                                                                     fill
                                                                     1
                                                                     3)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 context_composition)
                                                                (("2"
                                                                  (expand
                                                                   fill
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     fill
                                                                     2
                                                                     3)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (inst
                                                               -8
                                                               "index(car(L))")
                                                              (("3"
                                                                (split
                                                                 -8)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     in_varlist)
                                                                    (("2"
                                                                      (rewrite
                                                                       some_nth)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         0)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             context_composition)
                                                            (("1"
                                                              (expand
                                                               fill
                                                               2
                                                               3)
                                                              (("1"
                                                                (expand
                                                                 fill
                                                                 2
                                                                 3)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 3)
                                                              (("2"
                                                                (typepred
                                                                 S)
                                                                (("2"
                                                                  (expand
                                                                   every)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "S`length-1-index(car(L))")
                                                                    (("1"
                                                                      (expand
                                                                       domainValue?)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -7
                                                                         "index(car(L))")
                                                                        (("2"
                                                                          (split
                                                                           -7)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             in_varlist)
                                                                            (("2"
                                                                              (rewrite
                                                                               some_nth)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 0)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 3)
                                                              (("3"
                                                                (flatten)
                                                                (("3"
                                                                  (inst
                                                                   -9
                                                                   "index(car(L))")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (inst
                                                                       -8
                                                                       "index(car(L))")
                                                                      (("3"
                                                                        (split
                                                                         -8)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           in_varlist)
                                                                          (("2"
                                                                            (rewrite
                                                                             some_nth)
                                                                            (("2"
                                                                              (inst
                                                                               1
                                                                               0)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide 3)
                                                              (("4"
                                                                (inst
                                                                 -7
                                                                 "index(car(L))")
                                                                (("4"
                                                                  (split
                                                                   -7)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     in_varlist)
                                                                    (("2"
                                                                      (rewrite
                                                                       some_nth)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         0)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 5)
                                          (("3"
                                            (expand
                                             iapply_nstacktypes_iterm
                                             -14)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (rewrite
                                           composition_typeinfo)
                                          (("4"
                                            (expand typeinfo_fill 1 3)
                                            (("4"
                                              (expand
                                               typeinfo_fill
                                               1
                                               3)
                                              (("4"
                                                (hide 5)
                                                (("4"
                                                  (expand
                                                   iapply_nstacktypes_iterm
                                                   -15)
                                                  (("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5" (propax) nil nil)
                                         ("6"
                                          (hide 5)
                                          (("6"
                                            (rewrite
                                             compose_same_shape)
                                            (("6"
                                              (expand same_shape 1)
                                              (("6"
                                                (expand same_shape 1)
                                                (("6"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand length -12)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (split -12)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -8)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 5)
                                                      (("2"
                                                        (rewrite
                                                         map_length)
                                                        (("2"
                                                          (case
                                                           "null?(L)")
                                                          (("1"
                                                            (expand
                                                             length)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "null?(args_types)")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide 6)
                                                      (("2"
                                                        (rewrite
                                                         map_length)
                                                        (("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 5)
                                      (("3"
                                        (expand push +)
                                        (("3"
                                          (expand add +)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide 5)
                                      (("4"
                                        (typepred S)
                                        (("4"
                                          (case "null?(args_types)")
                                          (("1"
                                            (expand length -14 1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (hide 5)
                                      (("5"
                                        (typepred S)
                                        (("5"
                                          (expand every -1)
                                          (("5"
                                            (inst? -1)
                                            (("1"
                                              (expand domainValue?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -7 "index(car(L))")
                                              (("2"
                                                (split -7)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand in_varlist +)
                                                  (("2"
                                                    (rewrite some_nth)
                                                    (("2"
                                                      (inst 1 0)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (flatten)
                                      (("6"
                                        (inst -8 "index(car(L))")
                                        (("6"
                                          (split -8)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand in_varlist +)
                                            (("2"
                                              (rewrite some_nth)
                                              (("2"
                                                (inst 1 0)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("7"
                                      (flatten)
                                      (("7"
                                        (case "null?(L)")
                                        (("1"
                                          (expand length)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("8"
                                      (expand push +)
                                      (("8"
                                        (expand add +)
                                        (("8"
                                          (hide 5)
                                          (("8"
                                            (assert)
                                            (("8"
                                              (rewrite map_length)
                                              (("1"
                                                (case-replace
                                                 "length(cdr(L)) = length(L) - 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand k 1)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (expand
                                                           in_varlist)
                                                          (("1"
                                                            (rewrite
                                                             some_map)
                                                            (("1"
                                                              (expand
                                                               o)
                                                              (("1"
                                                                (rewrite
                                                                 some_nth)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -9
                                                                     "i-1")
                                                                    (("1"
                                                                      (split
                                                                       -9)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         some_nth)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "i_1+1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst -10 i)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand length 1 2)
                                                  (("2"
                                                    (lift-if +)
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           length)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (case "null?(L)")
                                                  (("1"
                                                    (expand length)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (case "null?(L)")
                                                  (("1"
                                                    (expand length)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("9"
                                      (hide 5)
                                      (("9"
                                        (expand push)
                                        (("9"
                                          (expand add)
                                          (("9"
                                            (expand every)
                                            (("9"
                                              (skeep)
                                              (("9"
                                                (case-replace
                                                 "i = S`length")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred S)
                                                    (("1"
                                                      (expand every)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst
                                                           -8
                                                           "index(car(L))")
                                                          (("1"
                                                            (split -8)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               in_varlist)
                                                              (("2"
                                                                (rewrite
                                                                 some_nth)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   0)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred S)
                                                    (("2"
                                                      (expand every)
                                                      (("2"
                                                        (inst -1 i)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 domainValue?)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("10"
                                      (hide 5)
                                      (("10" (grind) nil nil))
                                      nil)
                                     ("11"
                                      (hide 5)
                                      (("11"
                                        (flatten)
                                        (("11"
                                          (inst -9 "index(car(L))")
                                          (("11"
                                            (split -9)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand in_varlist)
                                              (("2"
                                                (rewrite some_nth)
                                                (("2"
                                                  (inst 1 0)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("12"
                                      (hide 5)
                                      (("12"
                                        (flatten)
                                        (("12"
                                          (case "null?(L)")
                                          (("1"
                                            (expand length)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("13"
                                      (hide 5)
                                      (("13"
                                        (flatten)
                                        (("13"
                                          (case "null?(L)")
                                          (("1"
                                            (expand length)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("14"
                                      (hide 5)
                                      (("14"
                                        (inst -7 "index(car(L))")
                                        (("1"
                                          (split -7)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand in_varlist)
                                            (("2"
                                              (rewrite some_nth)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 0)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (case "null?(L)")
                                                  (("1"
                                                    (expand length)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "null?(L)")
                                          (("1"
                                            (expand length)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("15"
                                      (hide 5)
                                      (("15"
                                        (case "null?(L)")
                                        (("1"
                                          (expand length)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (expand k) (("1" (propax) nil nil)) nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((typed_reduce_state formula-decl nil typed_rreduction nil)
    (iapply_nstacktypes_iterm def-decl "[finseq[nat], typeinfo]"
     typed_reduction_props nil)
    (iapply_nstack_iterm def-decl
     "[{S1: Stack | every(domainValue?(dom))(S1)}, [i: (dom) -> nat], IExpression]"
     iareduction nil)
    (letApply def-decl "IExpression" rreduction nil)
    (map_length formula-decl nil more_map_props nil)
    (fill def-decl "IExpression" IL nil)
    (compose def-decl "IContext" IL nil)
    (letc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (letc adt-constructor-decl "[[IContext, IExpression] -> (letc?)]"
     IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (to_topstate_dangling application-judgement "(noDanglingRefs?)"
     rreduction nil)
    (typed_to_topstate const-decl "typed_rstate" typed_rreduction nil)
    (make_redex_typed const-decl "typed_rstate" typed_rreduction nil)
    (buildRedex_fill formula-decl nil IL nil)
    (typeinfo_fill def-decl "typeinfo" typed_reduction nil)
    (buildRedexType def-decl "{tK, tB | typeinfo_fill(tK, tB) = tA}"
     typed_reduction nil)
    (letApply_type def-decl "typeinfo" typed_reduction nil)
    (redex? const-decl "bool" IL nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (not_value_redex_fill formula-decl nil IL nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (context_composition formula-decl nil IL nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (pure_letApply rec-application-judgement "(pure?)" rreduction nil)
    (vars_letApply formula-decl nil rreduction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (apply_iterm_match const-decl "bool" iareduction nil)
    (typed_reduce_defs formula-decl nil typed_rreduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (reduce_ndr application-judgement "(noDanglingRefs?)" rreduction
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (k skolem-const-decl "nat" typed_reduction_props nil)
    (x!1 skolem-const-decl "nat" typed_reduction_props nil)
    (dom skolem-const-decl "finite_set[nat]" typed_reduction_props nil)
    (S skolem-const-decl "{S | every(domainValue?(dom))(S)}"
     typed_reduction_props nil)
    (A skolem-const-decl "(pure?)" typed_reduction_props nil)
    (L skolem-const-decl "{L |
   x!1 < 2 * length(L) AND
    (FORALL i: in_varlist(L)(i) IMPLIES i < S`length) AND
     FORALL i: i < length(L) IMPLIES vars(A)(i)}" typed_reduction_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (Defs type-eq-decl nil iareduction nil)
    (Definition type-eq-decl nil iareduction nil)
    (applyReduce_match_rec formula-decl nil iareduction nil)
    (O const-decl "T3" function_props nil)
    (i skolem-const-decl "nat" typed_reduction_props nil)
    (some_map formula-decl nil finseq_theorems nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (holet adt-constructor-decl "(holet?)" typed_reduction nil)
    (holet? adt-recognizer-decl "[typeinfo_ctx -> boolean]"
     typed_reduction nil)
    (popct adt-constructor-decl "[typeinfo_ctx -> (popct?)]"
     typed_reduction nil)
    (popct? adt-recognizer-decl "[typeinfo_ctx -> boolean]"
     typed_reduction nil)
    (composet def-decl "typeinfo_ctx" typed_reduction_props nil)
    (same_shape def-decl "bool" typed_reduction_props nil)
    (compose_same_shape formula-decl nil typed_reduction_props nil)
    (composition_typeinfo formula-decl nil typed_reduction_props nil)
    (popc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (popc adt-constructor-decl "[IContext -> (popc?)]" IL nil)
    (stypes skolem-const-decl "{stypes | stypes`length = S`length}"
     typed_reduction_props nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (seq type-eq-decl nil more_finseq nil)
    (args_types skolem-const-decl
     "{args_types: list[nat] | length(args_types) = length(L)}"
     typed_reduction_props nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (push const-decl "Stack" IL nil)
    (nil adt-constructor-decl "(nil?)" IExpression_adt nil)
    (nil? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (marked adt-accessor-decl "[(variable?) -> bool]" IExpression_adt
     nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (nth def-decl "T" list_props nil)
    (some_nth formula-decl nil finseq_theorems nil)
    (letRedex? const-decl "bool" IL nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (letexpr adt-constructor-decl
     "[[IExpression, IExpression] -> (letexpr?)]" IExpression_adt nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (buildRedexType_fill formula-decl nil typed_reduction_props nil)
    (lett? adt-recognizer-decl "[typeinfo -> boolean]" typeinfo_adt
     nil)
    (lett adt-constructor-decl "[[nat, typeinfo, typeinfo] -> (lett?)]"
     typeinfo_adt nil)
    (leaft? adt-recognizer-decl "[typeinfo -> boolean]" typeinfo_adt
     nil)
    (leaft adt-constructor-decl "[nat -> (leaft?)]" typeinfo_adt nil)
    (typed_reduce const-decl "typed_rstate" typed_rreduction nil)
    (Defs type-eq-decl nil typed_rreduction nil)
    (Definition type-eq-decl nil typed_rreduction nil)
    (apply_iterm_match const-decl "bool" typed_reduction_props nil)
    (Store type-eq-decl nil typed_reduction_props nil)
    (tdef type-eq-decl nil typed_reduction_props nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (armc? def-decl "bool" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (refs def-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (cpure? def-decl "bool" IL nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (in_varlist const-decl "finite_set[nat]" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (value? const-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (applyReduce_match_rec-6 nil 3710625551
   ("" (measure-induct+ k ("k"))
    (("" (name-replace k "x!1")
      (("" (skeep* :preds? t)
        (("" (case-replace "k = 0")
          (("1" (delete -13)
            (("1" (expand apply_iterm_match)
              (("1" (use applyReduce_match_rec)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1"
                              (expand iapply_nstacktypes_iterm
                                      (-15 -16 2))
                              (("1"
                                (rewrite typed_reduce_defs)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand apply_iterm_match -14)
                                    (("1"
                                      (expand
                                       iapply_nstack_iterm
                                       -14
                                       3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand rreduction.letApply)
                                          (("1"
                                            (rewrite vars_letApply)
                                            (("1"
                                              (case
                                               "vars(A)(length(L) - 1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (name
                                                   L2
                                                   "rreduction.letApply(length(L) - 1,
                                                                                                        map(LAMBDA x: x WITH [(index) := 1 + index(x)])
                                                                                                           (cdr(L)),
                                                                                                        A)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (case
                                                       "fill(trS`state`context, trS`state`redex) = fill(compose(K, letc(hole, L2)), car(L))")
                                                      (("1"
                                                        (expand
                                                         typed_reduce
                                                         +)
                                                        (("1"
                                                          (expand
                                                           typed_to_topstate
                                                           +)
                                                          (("1"
                                                            (expand
                                                             to_topstate
                                                             +)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 not_value_redex_fill)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       make_redex_typed)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (rewrite
                                                                           buildRedex_fill)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "buildRedexType(fill(compose(K, letc(hole, L2)),
                                                                                                                        car(L)),
                                                                                                                   typeinfo_fill(trS`context_type,
                                                                                                                                 trS`redex_type))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   letApply_type
                                                                                   -24)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)))))))))
                                                                           ("2"
                                                                            (expand
                                                                             redex?)
                                                                            (("2"
                                                                              (propax)
                                                                              nil)))))))))))
                                                                   ("2"
                                                                    (expand
                                                                     redex?)
                                                                    (("2"
                                                                      (propax)
                                                                      nil)))))))))))))))
                                                       ("2"
                                                        (rewrite
                                                         context_composition)
                                                        (("2"
                                                          (expand
                                                           fill
                                                           1
                                                           3)
                                                          (("2"
                                                            (expand
                                                             fill
                                                             1
                                                             3)
                                                            (("2"
                                                              (propax)
                                                              nil)))))))))))))))
                                               ("2"
                                                (inst? -9)
                                                (("2"
                                                  (split)
                                                  (("1" (propax) nil)
                                                   ("2"
                                                    (assert)
                                                    nil)))))))
                                             ("2"
                                              (rewrite map_length)
                                              (("2"
                                                (expand length 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -7)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          nil)))))
                                                     ("2"
                                                      (assert)
                                                      nil)))))))))
                                             ("3"
                                              (expand length -7)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (split)
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (assert)
                                                    nil)))))))))))))))))))))))))))))))))))
                 ("2" (hide 3)
                  (("2" (split)
                    (("1" (expand k) (("1" (propax) nil)))
                     ("2" (propax) nil) ("3" (propax) nil)))))))))))
           ("2" (case-replace "k = 1")
            (("1" (hide -13)
              (("1" (expand apply_iterm_match)
                (("1" (expand iapply_nstacktypes_iterm)
                  (("1" (expand iapply_nstacktypes_iterm)
                    (("1" (flatten)
                      (("1" (use applyReduce_match_rec)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1" (expand apply_iterm_match -14)
                              (("1"
                                (expand iapply_nstack_iterm -14)
                                (("1"
                                  (split +)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand typed_reduce +)
                                      (("1"
                                        (case
                                         "value?(typed_to_topstate(trS)`state`redex)")
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (expand typed_to_topstate)
                                            (("1"
                                              (expand to_topstate)
                                              (("1"
                                                (replace -19)
                                                (("1"
                                                  (hide-all-but -1)
                                                  (("1"
                                                    (case-replace
                                                     "K = hole")
                                                    (("1" (grind) nil)
                                                     ("2"
                                                      (case "popc?(K)")
                                                      (("1"
                                                        (grind)
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "letc?(K)")
                                                        (("1"
                                                          (grind)
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil)))))))))))))))))
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "pureLetRedex?(make_redex_typed(typed_to_topstate
                                                                                                                                  (trS))`state`redex)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand pureLetRedex?)
                                                (("1"
                                                  (expand letRedex?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         typed_to_topstate)
                                                        (("1"
                                                          (expand
                                                           to_topstate)
                                                          (("1"
                                                            (replace
                                                             -21)
                                                            (("1"
                                                              (expand
                                                               make_redex_typed)
                                                              (("1"
                                                                (expand
                                                                 make_redex)
                                                                (("1"
                                                                  (replace
                                                                   -23)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil)))))))))))))))))))))))
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (expand
                                                 make_redex_typed)
                                                (("2"
                                                  (expand make_redex)
                                                  (("2"
                                                    (expand
                                                     typed_to_topstate)
                                                    (("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (replace -18)
                                                        (("2"
                                                          (rewrite
                                                           buildRedex_fill)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               pureLetRedex?)
                                                              (("1"
                                                                (expand
                                                                 letRedex?)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("2"
                                                            (expand
                                                             redex?)
                                                            (("2"
                                                              (expand
                                                               letRedex?)
                                                              (("2"
                                                                (propax)
                                                                nil)))))
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (inst
                                                               -8
                                                               "index(car(L))")
                                                              (("3"
                                                                (split
                                                                 -8)
                                                                (("1"
                                                                  (assert)
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   in_varlist)
                                                                  (("2"
                                                                    (rewrite
                                                                     some_nth)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       0)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))))
                                             ("3"
                                              (expand
                                               typed_to_topstate
                                               1)
                                              (("3"
                                                (expand to_topstate 1)
                                                (("3"
                                                  (propax)
                                                  nil)))))))))))))))
                                   ("2" (postpone) nil)
                                   ("3"
                                    (hide-all-but (1 -17))
                                    (("3"
                                      (expand typed_reduce)
                                      (("3"
                                        (expand*
                                         make_redex_typed
                                         typed_to_topstate)
                                        nil)))))))))))))))
                         ("2" (hide 4)
                          (("2" (split)
                            (("1" (expand k) (("1" (propax) nil)))
                             ("2" (propax) nil)
                             ("3" (propax) nil)))))))))))))))))
             ("2" (expand apply_iterm_match (3 -12))
              (("2" (use applyReduce_match_rec)
                (("1" (expand apply_iterm_match (4 -14))
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (rewrite typed_reduce_state)
                        (("1" (assert)
                          (("1" (inst -13 "k-2")
                            (("1" (assert)
                              (("1"
                                (expand iapply_nstacktypes_iterm +)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand
                                     iapply_nstacktypes_iterm
                                     (-15 -16))
                                    (("1"
                                      (inst? -13)
                                      (("1"
                                        (inst? -13)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -13
                                             "compose(popc(hole), K)"
                                             dom
                                             "push(S`seq(S`length - 1 - index(car(L))), IF ref?(S`seq(S`length - 1 - index(car(L)))) AND marked(car(L)) THEN S WITH [`seq(S`length - 1 - index(car(L))) := nil] ELSE S ENDIF)"
                                             "map(LAMBDA (y: (variable?)): y WITH [(index) := 1 + index(y)])(cdr(L))"
                                             tA
                                             _
                                             str
                                             "IF ref?(S`seq(S`length - 1 - index(car(L)))) AND NOT marked(car(L)) THEN cnt WITH [(refindex(S`seq(S`length - 1 - index(car(L))))) := cnt(refindex(S`seq(S`length - 1 - index(car(L))))) + 1] ELSE cnt ENDIF"
                                             "add(car(args_types), stypes)"
                                             "cdr(args_types)")
                                            (("1"
                                              (inst
                                               -13
                                               "composet(tK, popct(holet))")
                                              (("1"
                                                (split -13)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       composition_typeinfo)
                                                      (("1"
                                                        (expand
                                                         typeinfo_fill
                                                         -3
                                                         3)
                                                        (("1"
                                                          (expand
                                                           typeinfo_fill
                                                           -3
                                                           3)
                                                          (("1"
                                                            (propax)
                                                            nil)))))))))))
                                                 ("2"
                                                  (hide 5)
                                                  (("2"
                                                    (expand
                                                     apply_iterm_match
                                                     -13)
                                                    (("2"
                                                      (expand
                                                       apply_iterm_match
                                                       +)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             iapply_nstack_iterm
                                                             (-15
                                                              -16
                                                              -17))
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (propax)
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil)
                                                               ("3"
                                                                (case
                                                                 "marked(car(L))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "ref?(S`seq(S`length - 1 - index(car(L))))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (postpone)
                                                                        nil)))
                                                                     ("2"
                                                                      (postpone)
                                                                      nil)
                                                                     ("3"
                                                                      (postpone)
                                                                      nil)))))
                                                                 ("2"
                                                                  (postpone)
                                                                  nil)))))))))))))))))
                                                 ("3" (propax) nil)
                                                 ("4"
                                                  (rewrite
                                                   composition_typeinfo)
                                                  (("4"
                                                    (expand
                                                     typeinfo_fill
                                                     1
                                                     3)
                                                    (("4"
                                                      (expand
                                                       typeinfo_fill
                                                       1
                                                       3)
                                                      (("4"
                                                        (propax)
                                                        nil)))))))))))
                                             ("2"
                                              (expand length -12)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split -12)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               length
                                                               -8)
                                                              (("1"
                                                                (assert)
                                                                nil)))
                                                             ("2"
                                                              (postpone)
                                                              nil)))))))
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil)))
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil)))))))))))))))))
                                             ("3"
                                              (hide 5)
                                              (("3"
                                                (expand push +)
                                                (("3"
                                                  (expand add +)
                                                  (("3"
                                                    (assert)
                                                    nil)))))))
                                             ("4"
                                              (hide 5)
                                              (("4"
                                                (typepred S)
                                                (("4"
                                                  (expand every -1)
                                                  (("4"
                                                    (inst? -1)
                                                    (("1"
                                                      (expand
                                                       domainValue?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (inst
                                                       -7
                                                       "index(car(L))")
                                                      (("2"
                                                        (split -7)
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           in_varlist
                                                           +)
                                                          (("2"
                                                            (rewrite
                                                             some_nth)
                                                            (("2"
                                                              (inst
                                                               1
                                                               0)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))))))))
                                             ("5"
                                              (flatten)
                                              (("5"
                                                (inst
                                                 -8
                                                 "index(car(L))")
                                                (("5"
                                                  (split -8)
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (expand
                                                     in_varlist
                                                     +)
                                                    (("2"
                                                      (rewrite
                                                       some_nth)
                                                      (("2"
                                                        (inst 1 0)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))
                                             ("6"
                                              (flatten)
                                              (("6"
                                                (case "null?(L)")
                                                (("1"
                                                  (expand length)
                                                  (("1" (assert) nil)))
                                                 ("2" (assert) nil)))))
                                             ("7"
                                              (expand push +)
                                              (("7"
                                                (expand add +)
                                                (("7"
                                                  (hide 5)
                                                  (("7"
                                                    (assert)
                                                    (("7"
                                                      (postpone)
                                                      nil)))))))))
                                             ("8"
                                              (hide 5)
                                              (("8" (postpone) nil)))
                                             ("9"
                                              (hide 5)
                                              (("9" (grind) nil)))
                                             ("10"
                                              (hide 5)
                                              (("10" (postpone) nil)))
                                             ("11"
                                              (hide 5)
                                              (("11" (postpone) nil)))
                                             ("12"
                                              (hide 5)
                                              (("12" (postpone) nil)))
                                             ("13"
                                              (hide 5)
                                              (("13" (postpone) nil)))
                                             ("14"
                                              (hide 5)
                                              (("14"
                                                (postpone)
                                                nil)))))))))))))))))))))))))))))))
                 ("2" (split)
                  (("1" (expand k) (("1" (propax) nil)))
                   ("2" (propax) nil) ("3" (propax) nil))))))))))))))))
    nil)
   nil nil)
  (applyReduce_match_rec-5 nil 3710622003
   ("" (measure-induct+ k ("k"))
    (("" (name-replace k "x!1")
      (("" (skeep* :preds? t)
        (("" (case-replace "k = 0")
          (("1" (delete -13)
            (("1" (expand apply_iterm_match)
              (("1" (use applyReduce_match_rec)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1"
                              (expand iapply_nstacktypes_iterm
                                      (-15 -16 2))
                              (("1"
                                (rewrite typed_reduce_defs)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand apply_iterm_match -14)
                                    (("1"
                                      (expand
                                       iapply_nstack_iterm
                                       -14
                                       3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand rreduction.letApply)
                                          (("1"
                                            (rewrite vars_letApply)
                                            (("1"
                                              (case
                                               "vars(A)(length(L) - 1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (name
                                                   L2
                                                   "rreduction.letApply(length(L) - 1,
                                                                                         map(LAMBDA x: x WITH [(index) := 1 + index(x)])
                                                                                            (cdr(L)),
                                                                                         A)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (case
                                                       "fill(trS`state`context, trS`state`redex) = fill(compose(K, letc(hole, L2)), car(L))")
                                                      (("1"
                                                        (expand
                                                         typed_reduce
                                                         +)
                                                        (("1"
                                                          (expand
                                                           typed_to_topstate
                                                           +)
                                                          (("1"
                                                            (expand
                                                             to_topstate
                                                             +)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 not_value_redex_fill)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       make_redex_typed)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (rewrite
                                                                           buildRedex_fill)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "buildRedexType(fill(compose(K, letc(hole, L2)),
                                                                                                        car(L)),
                                                                                                   typeinfo_fill(trS`context_type,
                                                                                                                 trS`redex_type))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   letApply_type
                                                                                   -24)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             redex?)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     redex?)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         context_composition)
                                                        (("2"
                                                          (expand
                                                           fill
                                                           1
                                                           3)
                                                          (("2"
                                                            (expand
                                                             fill
                                                             1
                                                             3)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? -9)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite map_length)
                                              (("2"
                                                (expand length 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -7)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand length -7)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (split)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (split)
                    (("1" (expand k) (("1" (propax) nil nil)) nil)
                     ("2" (propax) nil nil) ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case-replace "k = 1")
            (("1" (hide -13)
              (("1" (expand apply_iterm_match)
                (("1" (expand iapply_nstacktypes_iterm)
                  (("1" (expand iapply_nstacktypes_iterm)
                    (("1" (flatten)
                      (("1" (use applyReduce_match_rec)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1" (expand apply_iterm_match -14)
                              (("1"
                                (expand iapply_nstack_iterm -14)
                                (("1"
                                  (split +)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand typed_reduce +)
                                      (("1"
                                        (case
                                         "value?(typed_to_topstate(trS)`state`redex)")
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (expand typed_to_topstate)
                                            (("1"
                                              (expand to_topstate)
                                              (("1"
                                                (replace -19)
                                                (("1"
                                                  (hide-all-but -1)
                                                  (("1"
                                                    (case-replace
                                                     "K = hole")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case "popc?(K)")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "letc?(K)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "pureLetRedex?(make_redex_typed(typed_to_topstate
                                                                                                                 (trS))`state`redex)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand pureLetRedex?)
                                                (("1"
                                                  (expand letRedex?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         typed_to_topstate)
                                                        (("1"
                                                          (expand
                                                           to_topstate)
                                                          (("1"
                                                            (replace
                                                             -21)
                                                            (("1"
                                                              (expand
                                                               make_redex_typed)
                                                              (("1"
                                                                (expand
                                                                 make_redex)
                                                                (("1"
                                                                  (replace
                                                                   -23)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (expand
                                                 make_redex_typed)
                                                (("2"
                                                  (expand make_redex)
                                                  (("2"
                                                    (expand
                                                     typed_to_topstate)
                                                    (("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (replace -18)
                                                        (("2"
                                                          (rewrite
                                                           buildRedex_fill)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               pureLetRedex?)
                                                              (("1"
                                                                (expand
                                                                 letRedex?)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             redex?)
                                                            (("2"
                                                              (expand
                                                               letRedex?)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (inst
                                                               -8
                                                               "index(car(L))")
                                                              (("3"
                                                                (split
                                                                 -8)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   in_varlist)
                                                                  (("2"
                                                                    (rewrite
                                                                     some_nth)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       0)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               typed_to_topstate
                                               1)
                                              (("3"
                                                (expand to_topstate 1)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil)
                                   ("3"
                                    (hide-all-but (1 -17))
                                    (("3"
                                      (expand typed_reduce)
                                      (("3"
                                        (expand*
                                         make_redex_typed
                                         typed_to_topstate)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 4)
                          (("2" (split)
                            (("1" (expand k) (("1" (propax) nil nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand apply_iterm_match (3 -12))
              (("2" (use applyReduce_match_rec)
                (("1" (expand apply_iterm_match (4 -14))
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (rewrite typed_reduce_state)
                        (("1" (assert)
                          (("1" (inst -13 "k-2")
                            (("1" (assert)
                              (("1"
                                (expand iapply_nstacktypes_iterm +)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand
                                     iapply_nstacktypes_iterm
                                     (-15 -16))
                                    (("1"
                                      (inst? -13)
                                      (("1"
                                        (inst? -13)
                                        (("1"
                                          (inst? -13)
                                          (("1"
                                            (inst? -13)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -13
                                                 "push(S`seq(S`length - 1 - index(car(L))), IF ref?(S`seq(S`length - 1 - index(car(L)))) AND marked(car(L)) THEN S WITH [`seq(S`length - 1 - index(car(L))) := nil] ELSE S ENDIF)"
                                                 "map(LAMBDA (y: (variable?)): y WITH [(index) := 1 + index(y)])(cdr(L))"
                                                 tA
                                                 _
                                                 str
                                                 "IF ref?(S`seq(S`length - 1 - index(car(L)))) AND NOT marked(car(L)) THEN cnt WITH [(refindex(S`seq(S`length - 1 - index(car(L))))) := cnt(refindex(S`seq(S`length - 1 - index(car(L))))) + 1] ELSE cnt ENDIF"
                                                 "add(car(args_types), stypes)"
                                                 "cdr(args_types)")
                                                (("1"
                                                  (inst
                                                   -13
                                                   "composet(tK, popct(holet))")
                                                  (("1"
                                                    (split -13)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           composition_typeinfo)
                                                          (("1"
                                                            (expand
                                                             typeinfo_fill
                                                             -3
                                                             3)
                                                            (("1"
                                                              (expand
                                                               typeinfo_fill
                                                               -3
                                                               3)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 5)
                                                      (("2"
                                                        (expand
                                                         apply_iterm_match
                                                         -13)
                                                        (("2"
                                                          (expand
                                                           apply_iterm_match
                                                           +)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 iapply_nstack_iterm
                                                                 (-15
                                                                  -16
                                                                  -17))
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (case
                                                                     "marked(car(L))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "ref?(S`seq(S`length - 1 - index(car(L))))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (postpone)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (rewrite
                                                       composition_typeinfo)
                                                      (("4"
                                                        (expand
                                                         typeinfo_fill
                                                         1
                                                         3)
                                                        (("4"
                                                          (expand
                                                           typeinfo_fill
                                                           1
                                                           3)
                                                          (("4"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand length -12)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (split -12)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   length
                                                                   -8)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 5)
                                                  (("3"
                                                    (expand push +)
                                                    (("3"
                                                      (expand add +)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide 5)
                                                  (("4"
                                                    (typepred S)
                                                    (("4"
                                                      (expand every -1)
                                                      (("4"
                                                        (inst? -1)
                                                        (("1"
                                                          (expand
                                                           domainValue?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -7
                                                           "index(car(L))")
                                                          (("2"
                                                            (split -7)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               in_varlist
                                                               +)
                                                              (("2"
                                                                (rewrite
                                                                 some_nth)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   0)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (flatten)
                                                  (("5"
                                                    (inst
                                                     -8
                                                     "index(car(L))")
                                                    (("5"
                                                      (split -8)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         in_varlist
                                                         +)
                                                        (("2"
                                                          (rewrite
                                                           some_nth)
                                                          (("2"
                                                            (inst 1 0)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (flatten)
                                                  (("6"
                                                    (case "null?(L)")
                                                    (("1"
                                                      (expand length)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (expand push +)
                                                  (("7"
                                                    (expand add +)
                                                    (("7"
                                                      (hide 5)
                                                      (("7"
                                                        (assert)
                                                        (("7"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("8"
                                                  (hide 5)
                                                  (("8"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("9"
                                                  (hide 5)
                                                  (("9"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("10"
                                                  (hide 5)
                                                  (("10"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("11"
                                                  (hide 5)
                                                  (("11"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("12"
                                                  (hide 5)
                                                  (("12"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("13"
                                                  (hide 5)
                                                  (("13"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("14"
                                                  (hide 5)
                                                  (("14"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (expand k) (("1" (propax) nil nil)) nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (applyReduce_match_rec-4 nil 3710620883
   ("" (measure-induct+ k ("k"))
    (("" (name-replace k "x!1")
      (("" (skeep* :preds? t)
        (("" (case-replace "k = 0")
          (("1" (delete -13)
            (("1" (expand apply_iterm_match)
              (("1" (use applyReduce_match_rec)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1"
                              (expand iapply_nstacktypes_iterm
                                      (-15 -16 2))
                              (("1"
                                (rewrite typed_reduce_defs)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand apply_iterm_match -14)
                                    (("1"
                                      (expand
                                       iapply_nstack_iterm
                                       -14
                                       3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand rreduction.letApply)
                                          (("1"
                                            (rewrite vars_letApply)
                                            (("1"
                                              (case
                                               "vars(A)(length(L) - 1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (name
                                                   L2
                                                   "rreduction.letApply(length(L) - 1,
                                                                          map(LAMBDA x: x WITH [(index) := 1 + index(x)])
                                                                             (cdr(L)),
                                                                          A)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (case
                                                       "fill(trS`state`context, trS`state`redex) = fill(compose(K, letc(hole, L2)), car(L))")
                                                      (("1"
                                                        (expand
                                                         typed_reduce
                                                         +)
                                                        (("1"
                                                          (expand
                                                           typed_to_topstate
                                                           +)
                                                          (("1"
                                                            (expand
                                                             to_topstate
                                                             +)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 not_value_redex_fill)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       make_redex_typed)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (rewrite
                                                                           buildRedex_fill)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "buildRedexType(fill(compose(K, letc(hole, L2)),
                                                                                        car(L)),
                                                                                   typeinfo_fill(trS`context_type,
                                                                                                 trS`redex_type))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   letApply_type
                                                                                   -24)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             redex?)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     redex?)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         context_composition)
                                                        (("2"
                                                          (expand
                                                           fill
                                                           1
                                                           3)
                                                          (("2"
                                                            (expand
                                                             fill
                                                             1
                                                             3)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? -9)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite map_length)
                                              (("2"
                                                (expand length 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -7)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand length -7)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (split)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (split)
                    (("1" (expand k) (("1" (propax) nil nil)) nil)
                     ("2" (propax) nil nil) ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case-replace "k = 1")
            (("1" (hide -13)
              (("1" (expand apply_iterm_match)
                (("1" (expand iapply_nstacktypes_iterm)
                  (("1" (expand iapply_nstacktypes_iterm)
                    (("1" (flatten)
                      (("1" (use applyReduce_match_rec)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1" (expand apply_iterm_match -14)
                              (("1"
                                (expand iapply_nstack_iterm -14)
                                (("1"
                                  (split +)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand typed_reduce +)
                                      (("1"
                                        (case
                                         "value?(typed_to_topstate(trS)`state`redex)")
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (expand typed_to_topstate)
                                            (("1"
                                              (expand to_topstate)
                                              (("1"
                                                (replace -19)
                                                (("1"
                                                  (hide-all-but -1)
                                                  (("1"
                                                    (case-replace
                                                     "K = hole")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case "popc?(K)")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "letc?(K)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "pureLetRedex?(make_redex_typed(typed_to_topstate
                                                                                                (trS))`state`redex)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand pureLetRedex?)
                                                (("1"
                                                  (expand letRedex?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         typed_to_topstate)
                                                        (("1"
                                                          (expand
                                                           to_topstate)
                                                          (("1"
                                                            (replace
                                                             -21)
                                                            (("1"
                                                              (expand
                                                               make_redex_typed)
                                                              (("1"
                                                                (expand
                                                                 make_redex)
                                                                (("1"
                                                                  (replace
                                                                   -23)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (expand
                                                 make_redex_typed)
                                                (("2"
                                                  (expand make_redex)
                                                  (("2"
                                                    (expand
                                                     typed_to_topstate)
                                                    (("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (replace -18)
                                                        (("2"
                                                          (rewrite
                                                           buildRedex_fill)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               pureLetRedex?)
                                                              (("1"
                                                                (expand
                                                                 letRedex?)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             redex?)
                                                            (("2"
                                                              (expand
                                                               letRedex?)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (inst
                                                               -8
                                                               "index(car(L))")
                                                              (("3"
                                                                (split
                                                                 -8)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   in_varlist)
                                                                  (("2"
                                                                    (rewrite
                                                                     some_nth)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       0)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               typed_to_topstate
                                               1)
                                              (("3"
                                                (expand to_topstate 1)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil)
                                   ("3"
                                    (hide-all-but (1 -17))
                                    (("3"
                                      (expand typed_reduce)
                                      (("3"
                                        (expand*
                                         make_redex_typed
                                         typed_to_topstate)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 4)
                          (("2" (split)
                            (("1" (expand k) (("1" (propax) nil nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand apply_iterm_match (3 -12))
              (("2" (use applyReduce_match_rec)
                (("1" (expand apply_iterm_match (4 -14))
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (rewrite typed_reduce_state)
                        (("1" (assert)
                          (("1" (inst -13 "k-2")
                            (("1" (assert)
                              (("1"
                                (expand iapply_nstacktypes_iterm +)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand
                                     iapply_nstacktypes_iterm
                                     (-15 -16))
                                    (("1"
                                      (inst? -13)
                                      (("1"
                                        (inst? -13)
                                        (("1"
                                          (inst? -13)
                                          (("1"
                                            (inst? -13)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -13
                                                 "push(S`seq(S`length - 1 - index(car(L))), IF ref?(S`seq(S`length - 1 - index(car(L)))) AND marked(car(L)) THEN S WITH [`seq(S`length - 1 - index(car(L))) := nil] ELSE S ENDIF)"
                                                 "cdr(L)"
                                                 tA
                                                 _
                                                 str
                                                 "IF ref?(S`seq(S`length - 1 - index(car(L)))) AND NOT marked(car(L)) THEN cnt WITH [(refindex(S`seq(S`length - 1 - index(car(L))))) := cnt(refindex(S`seq(S`length - 1 - index(car(L))))) + 1] ELSE cnt ENDIF"
                                                 "add(car(args_types), stypes)"
                                                 "cdr(args_types)")
                                                (("1"
                                                  (inst
                                                   -13
                                                   "composet(tK, popct(holet))")
                                                  (("1"
                                                    (split -13)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           composition_typeinfo)
                                                          (("1"
                                                            (expand
                                                             typeinfo_fill
                                                             -3
                                                             3)
                                                            (("1"
                                                              (expand
                                                               typeinfo_fill
                                                               -3
                                                               3)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 5)
                                                      (("2"
                                                        (expand
                                                         apply_iterm_match
                                                         -13)
                                                        (("2"
                                                          (expand
                                                           apply_iterm_match
                                                           +)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 iapply_nstack_iterm
                                                                 (-15
                                                                  -16
                                                                  -17))
                                                                (("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (rewrite
                                                       composition_typeinfo)
                                                      (("4"
                                                        (expand
                                                         typeinfo_fill
                                                         1
                                                         3)
                                                        (("4"
                                                          (expand
                                                           typeinfo_fill
                                                           1
                                                           3)
                                                          (("4"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand length -12)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (split -12)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   length
                                                                   -8)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 5)
                                                  (("3"
                                                    (expand push +)
                                                    (("3"
                                                      (expand add +)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide 5)
                                                  (("4"
                                                    (typepred S)
                                                    (("4"
                                                      (expand every -1)
                                                      (("4"
                                                        (inst? -1)
                                                        (("1"
                                                          (expand
                                                           domainValue?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -7
                                                           "index(car(L))")
                                                          (("2"
                                                            (split -7)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               in_varlist
                                                               +)
                                                              (("2"
                                                                (rewrite
                                                                 some_nth)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   0)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (flatten)
                                                  (("5"
                                                    (inst
                                                     -8
                                                     "index(car(L))")
                                                    (("5"
                                                      (split -8)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         in_varlist
                                                         +)
                                                        (("2"
                                                          (rewrite
                                                           some_nth)
                                                          (("2"
                                                            (inst 1 0)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (flatten)
                                                  (("6"
                                                    (case "null?(L)")
                                                    (("1"
                                                      (expand length)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (expand push +)
                                                  (("7"
                                                    (expand add +)
                                                    (("7"
                                                      (hide 5)
                                                      (("7"
                                                        (assert)
                                                        (("7"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("8"
                                                  (hide 5)
                                                  (("8"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("9"
                                                  (hide 5)
                                                  (("9"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("10"
                                                  (hide 5)
                                                  (("10"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("11"
                                                  (hide 5)
                                                  (("11"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("12"
                                                  (hide 5)
                                                  (("12"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("13"
                                                  (hide 5)
                                                  (("13"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("14"
                                                  (hide 5)
                                                  (("14"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (expand k) (("1" (propax) nil nil)) nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (applyReduce_match_rec-3 nil 3710619940
   ("" (measure-induct+ k ("k"))
    (("" (name-replace k "x!1")
      (("" (skeep* :preds? t)
        (("" (case-replace "k = 0")
          (("1" (delete -13)
            (("1" (expand apply_iterm_match)
              (("1" (use applyReduce_match_rec)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1"
                              (expand iapply_nstacktypes_iterm
                                      (-15 -16 2))
                              (("1"
                                (rewrite typed_reduce_defs)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand apply_iterm_match -14)
                                    (("1"
                                      (expand
                                       iapply_nstack_iterm
                                       -14
                                       3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand rreduction.letApply)
                                          (("1"
                                            (rewrite vars_letApply)
                                            (("1"
                                              (case
                                               "vars(A)(length(L) - 1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (name
                                                   L2
                                                   "rreduction.letApply(length(L) - 1,
                                                           map(LAMBDA x: x WITH [(index) := 1 + index(x)])
                                                              (cdr(L)),
                                                           A)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (case
                                                       "fill(trS`state`context, trS`state`redex) = fill(compose(K, letc(hole, L2)), car(L))")
                                                      (("1"
                                                        (expand
                                                         typed_reduce
                                                         +)
                                                        (("1"
                                                          (expand
                                                           typed_to_topstate
                                                           +)
                                                          (("1"
                                                            (expand
                                                             to_topstate
                                                             +)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 not_value_redex_fill)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       make_redex_typed)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (rewrite
                                                                           buildRedex_fill)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "buildRedexType(fill(compose(K, letc(hole, L2)),
                                                                        car(L)),
                                                                   typeinfo_fill(trS`context_type,
                                                                                 trS`redex_type))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   letApply_type
                                                                                   -24)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)))))))))
                                                                           ("2"
                                                                            (expand
                                                                             redex?)
                                                                            (("2"
                                                                              (propax)
                                                                              nil)))))))))))
                                                                   ("2"
                                                                    (expand
                                                                     redex?)
                                                                    (("2"
                                                                      (propax)
                                                                      nil)))))))))))))))
                                                       ("2"
                                                        (rewrite
                                                         context_composition)
                                                        (("2"
                                                          (expand
                                                           fill
                                                           1
                                                           3)
                                                          (("2"
                                                            (expand
                                                             fill
                                                             1
                                                             3)
                                                            (("2"
                                                              (propax)
                                                              nil)))))))))))))))
                                               ("2"
                                                (inst? -9)
                                                (("2"
                                                  (split)
                                                  (("1" (propax) nil)
                                                   ("2"
                                                    (assert)
                                                    nil)))))))
                                             ("2"
                                              (rewrite map_length)
                                              (("2"
                                                (expand length 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -7)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          nil)))))
                                                     ("2"
                                                      (assert)
                                                      nil)))))))))
                                             ("3"
                                              (expand length -7)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (split)
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (assert)
                                                    nil)))))))))))))))))))))))))))))))))))
                 ("2" (hide 3)
                  (("2" (split)
                    (("1" (expand k) (("1" (propax) nil)))
                     ("2" (propax) nil) ("3" (propax) nil)))))))))))
           ("2" (case-replace "k = 1")
            (("1" (hide -13)
              (("1" (expand apply_iterm_match)
                (("1" (expand iapply_nstacktypes_iterm)
                  (("1" (expand iapply_nstacktypes_iterm)
                    (("1" (flatten)
                      (("1" (use applyReduce_match_rec)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1" (expand apply_iterm_match -14)
                              (("1"
                                (expand iapply_nstack_iterm -14)
                                (("1"
                                  (split +)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand typed_reduce +)
                                      (("1"
                                        (case
                                         "value?(typed_to_topstate(trS)`state`redex)")
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (expand typed_to_topstate)
                                            (("1"
                                              (expand to_topstate)
                                              (("1"
                                                (replace -19)
                                                (("1"
                                                  (hide-all-but -1)
                                                  (("1"
                                                    (case-replace
                                                     "K = hole")
                                                    (("1" (grind) nil)
                                                     ("2"
                                                      (case "popc?(K)")
                                                      (("1"
                                                        (grind)
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "letc?(K)")
                                                        (("1"
                                                          (grind)
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil)))))))))))))))))
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "pureLetRedex?(make_redex_typed(typed_to_topstate
                                                                               (trS))`state`redex)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand pureLetRedex?)
                                                (("1"
                                                  (expand letRedex?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         typed_to_topstate)
                                                        (("1"
                                                          (expand
                                                           to_topstate)
                                                          (("1"
                                                            (replace
                                                             -21)
                                                            (("1"
                                                              (expand
                                                               make_redex_typed)
                                                              (("1"
                                                                (expand
                                                                 make_redex)
                                                                (("1"
                                                                  (replace
                                                                   -23)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil)))))))))))))))))))))))
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (expand
                                                 make_redex_typed)
                                                (("2"
                                                  (expand make_redex)
                                                  (("2"
                                                    (expand
                                                     typed_to_topstate)
                                                    (("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (replace -18)
                                                        (("2"
                                                          (rewrite
                                                           buildRedex_fill)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               pureLetRedex?)
                                                              (("1"
                                                                (expand
                                                                 letRedex?)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("2"
                                                            (expand
                                                             redex?)
                                                            (("2"
                                                              (expand
                                                               letRedex?)
                                                              (("2"
                                                                (propax)
                                                                nil)))))
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (inst
                                                               -8
                                                               "index(car(L))")
                                                              (("3"
                                                                (split
                                                                 -8)
                                                                (("1"
                                                                  (assert)
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   in_varlist)
                                                                  (("2"
                                                                    (rewrite
                                                                     some_nth)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       0)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))))
                                             ("3"
                                              (expand
                                               typed_to_topstate
                                               1)
                                              (("3"
                                                (expand to_topstate 1)
                                                (("3"
                                                  (propax)
                                                  nil)))))))))))))))
                                   ("2" (postpone) nil)
                                   ("3"
                                    (hide-all-but (1 -17))
                                    (("3"
                                      (expand typed_reduce)
                                      (("3"
                                        (expand*
                                         make_redex_typed
                                         typed_to_topstate)
                                        nil)))))))))))))))
                         ("2" (hide 4)
                          (("2" (split)
                            (("1" (expand k) (("1" (propax) nil)))
                             ("2" (propax) nil)
                             ("3" (propax) nil)))))))))))))))))
             ("2" (expand apply_iterm_match (3 -12))
              (("2" (use applyReduce_match_rec)
                (("1" (expand apply_iterm_match (4 -14))
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (rewrite typed_reduce_state)
                        (("1" (assert)
                          (("1" (inst -13 "k-2")
                            (("1" (assert)
                              (("1"
                                (expand iapply_nstacktypes_iterm +)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand
                                     iapply_nstacktypes_iterm
                                     (-15 -16))
                                    (("1"
                                      (inst? -13)
                                      (("1"
                                        (inst? -13)
                                        (("1"
                                          (inst? -13)
                                          (("1"
                                            (inst? -13)
                                            (("1"
                                              (inst? -13)
                                              (("1"
                                                (inst
                                                 -13
                                                 "cdr(L)"
                                                 tA
                                                 _
                                                 str
                                                 cnt
                                                 "stypes"
                                                 "cdr(args_types)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -13
                                                     "composet(tK, popct(holet))")
                                                    (("1"
                                                      (split -13)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (rewrite
                                                           composition_typeinfo)
                                                          (("1"
                                                            (expand
                                                             typeinfo_fill
                                                             -3
                                                             3)
                                                            (("1"
                                                              (expand
                                                               typeinfo_fill
                                                               -3
                                                               3)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (postpone)
                                                                  nil)))))))))))
                                                       ("2"
                                                        (postpone)
                                                        nil)
                                                       ("3"
                                                        (postpone)
                                                        nil)
                                                       ("4"
                                                        (postpone)
                                                        nil)))))))
                                                 ("2"
                                                  (expand length -12)
                                                  (("2"
                                                    (lift-if -12)
                                                    (("2"
                                                      (lift-if -12)
                                                      (("2"
                                                        (lift-if -12)
                                                        (("2"
                                                          (expand
                                                           length
                                                           -6)
                                                          (("2"
                                                            (lift-if
                                                             -6)
                                                            (("2"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))))))))))))
                                                 ("3"
                                                  (split)
                                                  (("1"
                                                    (expand k)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -6)
                                                      (("1"
                                                        (lift-if -6)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil)))))))))
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (expand
                                                         in_varlist)
                                                        (("2"
                                                          (expand
                                                           some
                                                           -8)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 length
                                                                 -8)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))
                                                               ("2"
                                                                (assert)
                                                                nil)))))))))))))
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst -9 i)
                                                      (("3"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           length
                                                           1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 length
                                                                 -7)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))
                                                               ("2"
                                                                (assert)
                                                                nil)))))))))))))))
                                                 ("4"
                                                  (expand length -6)
                                                  (("4"
                                                    (lift-if)
                                                    (("4"
                                                      (split)
                                                      (("1"
                                                        (grind)
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil)))))))))))))))))))))))))))))))))))))))
                 ("2" (split)
                  (("1" (expand k) (("1" (propax) nil)))
                   ("2" (propax) nil) ("3" (propax) nil))))))))))))))))
    nil)
   nil nil)
  (applyReduce_match_rec-2 nil 3710618193
   ("" (measure-induct+ k ("k"))
    (("" (name-replace k "x!1")
      (("" (skeep* :preds? t)
        (("" (case-replace "k = 0")
          (("1" (delete -13)
            (("1" (expand apply_iterm_match)
              (("1" (use applyReduce_match_rec)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1"
                              (expand iapply_nstacktypes_iterm
                                      (-15 -16 2))
                              (("1"
                                (rewrite typed_reduce_defs)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand apply_iterm_match -14)
                                    (("1"
                                      (expand
                                       iapply_nstack_iterm
                                       -14
                                       3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand rreduction.letApply)
                                          (("1"
                                            (rewrite vars_letApply)
                                            (("1"
                                              (case
                                               "vars(A)(length(L) - 1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (name
                                                   L2
                                                   "rreduction.letApply(length(L) - 1,
                                            map(LAMBDA x: x WITH [(index) := 1 + index(x)])
                                               (cdr(L)),
                                            A)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (case
                                                       "fill(trS`state`context, trS`state`redex) = fill(compose(K, letc(hole, L2)), car(L))")
                                                      (("1"
                                                        (expand
                                                         typed_reduce
                                                         +)
                                                        (("1"
                                                          (expand
                                                           typed_to_topstate
                                                           +)
                                                          (("1"
                                                            (expand
                                                             to_topstate
                                                             +)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 not_value_redex_fill)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       make_redex_typed)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (rewrite
                                                                           buildRedex_fill)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "buildRedexType(fill(compose(K, letc(hole, L2)),
                                                        car(L)),
                                                   typeinfo_fill(trS`context_type,
                                                                 trS`redex_type))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   letApply_type
                                                                                   -24)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)))))))))
                                                                           ("2"
                                                                            (expand
                                                                             redex?)
                                                                            (("2"
                                                                              (propax)
                                                                              nil)))))))))))
                                                                   ("2"
                                                                    (expand
                                                                     redex?)
                                                                    (("2"
                                                                      (propax)
                                                                      nil)))))))))))))))
                                                       ("2"
                                                        (rewrite
                                                         context_composition)
                                                        (("2"
                                                          (expand
                                                           fill
                                                           1
                                                           3)
                                                          (("2"
                                                            (expand
                                                             fill
                                                             1
                                                             3)
                                                            (("2"
                                                              (propax)
                                                              nil)))))))))))))))
                                               ("2"
                                                (inst? -9)
                                                (("2"
                                                  (split)
                                                  (("1" (propax) nil)
                                                   ("2"
                                                    (assert)
                                                    nil)))))))
                                             ("2"
                                              (rewrite map_length)
                                              (("2"
                                                (expand length 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -7)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          nil)))))
                                                     ("2"
                                                      (assert)
                                                      nil)))))))))
                                             ("3"
                                              (expand length -7)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (split)
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (assert)
                                                    nil)))))))))))))))))))))))))))))))))))
                 ("2" (hide 3)
                  (("2" (split)
                    (("1" (expand k) (("1" (propax) nil)))
                     ("2" (propax) nil) ("3" (propax) nil)))))))))))
           ("2" (case-replace "k = 1")
            (("1" (hide -13)
              (("1" (expand apply_iterm_match)
                (("1" (expand iapply_nstacktypes_iterm)
                  (("1" (expand iapply_nstacktypes_iterm)
                    (("1" (flatten)
                      (("1" (use applyReduce_match_rec)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1" (expand apply_iterm_match -14)
                              (("1"
                                (expand iapply_nstack_iterm -14)
                                (("1"
                                  (split +)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand typed_reduce +)
                                      (("1"
                                        (case
                                         "value?(typed_to_topstate(trS)`state`redex)")
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (expand typed_to_topstate)
                                            (("1"
                                              (expand to_topstate)
                                              (("1"
                                                (replace -19)
                                                (("1"
                                                  (hide-all-but -1)
                                                  (("1"
                                                    (case-replace
                                                     "K = hole")
                                                    (("1" (grind) nil)
                                                     ("2"
                                                      (case "popc?(K)")
                                                      (("1"
                                                        (grind)
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "letc?(K)")
                                                        (("1"
                                                          (grind)
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil)))))))))))))))))
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "pureLetRedex?(make_redex_typed(typed_to_topstate
                                                              (trS))`state`redex)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand pureLetRedex?)
                                                (("1"
                                                  (expand letRedex?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         typed_to_topstate)
                                                        (("1"
                                                          (expand
                                                           to_topstate)
                                                          (("1"
                                                            (replace
                                                             -21)
                                                            (("1"
                                                              (expand
                                                               make_redex_typed)
                                                              (("1"
                                                                (expand
                                                                 make_redex)
                                                                (("1"
                                                                  (replace
                                                                   -23)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil)))))))))))))))))))))))
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (expand
                                                 make_redex_typed)
                                                (("2"
                                                  (expand make_redex)
                                                  (("2"
                                                    (expand
                                                     typed_to_topstate)
                                                    (("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (replace -18)
                                                        (("2"
                                                          (rewrite
                                                           buildRedex_fill)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               pureLetRedex?)
                                                              (("1"
                                                                (expand
                                                                 letRedex?)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("2"
                                                            (expand
                                                             redex?)
                                                            (("2"
                                                              (expand
                                                               letRedex?)
                                                              (("2"
                                                                (propax)
                                                                nil)))))
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (inst
                                                               -8
                                                               "index(car(L))")
                                                              (("3"
                                                                (split
                                                                 -8)
                                                                (("1"
                                                                  (assert)
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   in_varlist)
                                                                  (("2"
                                                                    (rewrite
                                                                     some_nth)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       0)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))))
                                             ("3"
                                              (expand
                                               typed_to_topstate
                                               1)
                                              (("3"
                                                (expand to_topstate 1)
                                                (("3"
                                                  (propax)
                                                  nil)))))))))))))))
                                   ("2" (postpone) nil)
                                   ("3"
                                    (hide-all-but (1 -17))
                                    (("3"
                                      (expand typed_reduce)
                                      (("3"
                                        (expand*
                                         make_redex_typed
                                         typed_to_topstate)
                                        nil)))))))))))))))
                         ("2" (hide 4)
                          (("2" (split)
                            (("1" (expand k) (("1" (propax) nil)))
                             ("2" (propax) nil)
                             ("3" (propax) nil)))))))))))))))))
             ("2" (expand apply_iterm_match (3 -12))
              (("2" (use applyReduce_match_rec)
                (("1" (expand apply_iterm_match (4 -14))
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (rewrite typed_reduce_state)
                        (("1" (assert)
                          (("1" (inst -13 "k-2")
                            (("1" (assert)
                              (("1"
                                (expand iapply_nstacktypes_iterm +)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand
                                     iapply_nstacktypes_iterm
                                     (-15 -16))
                                    (("1"
                                      (inst? -13)
                                      (("1"
                                        (inst? -13)
                                        (("1"
                                          (inst? -13)
                                          (("1"
                                            (inst? -13)
                                            (("1"
                                              (inst? -13)
                                              (("1"
                                                (inst
                                                 -13
                                                 "cdr(L)"
                                                 tA
                                                 _
                                                 str
                                                 cnt
                                                 "add(car(args_types), stypes)"
                                                 "cdr(args_types)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -13
                                                     "composet(tK, popct(holet))")
                                                    (("1"
                                                      (split -13)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (rewrite
                                                           composition_typeinfo)
                                                          (("1"
                                                            (expand
                                                             typeinfo_fill
                                                             -3
                                                             3)
                                                            (("1"
                                                              (expand
                                                               typeinfo_fill
                                                               -3
                                                               3)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (postpone)
                                                                  nil)))))))))))
                                                       ("2"
                                                        (postpone)
                                                        nil)
                                                       ("3"
                                                        (postpone)
                                                        nil)
                                                       ("4"
                                                        (postpone)
                                                        nil)))))))
                                                 ("2"
                                                  (expand length -12)
                                                  (("2"
                                                    (lift-if -12)
                                                    (("2"
                                                      (lift-if -12)
                                                      (("2"
                                                        (lift-if -12)
                                                        (("2"
                                                          (expand
                                                           length
                                                           -6)
                                                          (("2"
                                                            (lift-if
                                                             -6)
                                                            (("2"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))))))))))))
                                                 ("3"
                                                  (split)
                                                  (("1"
                                                    (expand k)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -6)
                                                      (("1"
                                                        (lift-if -6)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil)))))))))
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (expand
                                                         in_varlist)
                                                        (("2"
                                                          (expand
                                                           some
                                                           -8)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 length
                                                                 -8)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))
                                                               ("2"
                                                                (assert)
                                                                nil)))))))))))))
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst -9 i)
                                                      (("3"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           length
                                                           1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 length
                                                                 -7)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))
                                                               ("2"
                                                                (assert)
                                                                nil)))))))))))))))
                                                 ("4"
                                                  (expand length -6)
                                                  (("4"
                                                    (lift-if)
                                                    (("4"
                                                      (split)
                                                      (("1"
                                                        (grind)
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil)))))))))))))))))))))))))))))))))))))))
                 ("2" (split)
                  (("1" (expand k) (("1" (propax) nil)))
                   ("2" (propax) nil) ("3" (propax) nil))))))))))))))))
    nil)
   nil nil)
  (applyReduce_match_rec-1 nil 3706632239
   ("" (measure-induct+ k ("k"))
    (("" (name-replace k "x!1")
      (("" (skeep* :preds? t)
        (("" (case-replace "k = 0")
          (("1" (delete -13)
            (("1" (expand apply_iterm_match)
              (("1" (use applyReduce_match_rec)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1"
                              (expand iapply_nstacktypes_iterm
                                      (-15 -16 2))
                              (("1"
                                (rewrite typed_reduce_defs)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand apply_iterm_match -14)
                                    (("1"
                                      (expand
                                       iapply_nstack_iterm
                                       -14
                                       3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand rreduction.letApply)
                                          (("1"
                                            (rewrite vars_letApply)
                                            (("1"
                                              (case
                                               "vars(A)(length(L) - 1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (name
                                                   L2
                                                   "rreduction.letApply(length(L) - 1,
                             map(LAMBDA x: x WITH [(index) := 1 + index(x)])
                                (cdr(L)),
                             A)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (case
                                                       "fill(trS`state`context, trS`state`redex) = fill(compose(K, letc(hole, L2)), car(L))")
                                                      (("1"
                                                        (expand
                                                         typed_reduce
                                                         +)
                                                        (("1"
                                                          (expand
                                                           typed_to_topstate
                                                           +)
                                                          (("1"
                                                            (expand
                                                             to_topstate
                                                             +)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 not_value_redex_fill)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       make_redex_typed)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (rewrite
                                                                           buildRedex_fill)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "buildRedexType(fill(compose(K, letc(hole, L2)),
                                        car(L)),
                                   typeinfo_fill(trS`context_type,
                                                 trS`redex_type))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   letApply_type
                                                                                   -24)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             redex?)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     redex?)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         context_composition)
                                                        (("2"
                                                          (expand
                                                           fill
                                                           1
                                                           3)
                                                          (("2"
                                                            (expand
                                                             fill
                                                             1
                                                             3)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? -9)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite map_length)
                                              (("2"
                                                (expand length 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -7)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand length -7)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (split)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (split)
                    (("1" (expand k) (("1" (propax) nil nil)) nil)
                     ("2" (propax) nil nil) ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case-replace "k = 1")
            (("1" (hide -13)
              (("1" (expand apply_iterm_match)
                (("1" (expand iapply_nstacktypes_iterm)
                  (("1" (expand iapply_nstacktypes_iterm)
                    (("1" (flatten)
                      (("1" (use applyReduce_match_rec)
                        (("1" (rewrite typed_reduce_state)
                          (("1" (assert)
                            (("1" (expand apply_iterm_match -14)
                              (("1"
                                (expand iapply_nstack_iterm -14)
                                (("1"
                                  (split +)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand typed_reduce +)
                                      (("1"
                                        (case
                                         "value?(typed_to_topstate(trS)`state`redex)")
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (expand typed_to_topstate)
                                            (("1"
                                              (expand to_topstate)
                                              (("1"
                                                (replace -19)
                                                (("1"
                                                  (hide-all-but -1)
                                                  (("1"
                                                    (case-replace
                                                     "K = hole")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case "popc?(K)")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "letc?(K)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "pureLetRedex?(make_redex_typed(typed_to_topstate
                                             (trS))`state`redex)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand pureLetRedex?)
                                                (("1"
                                                  (expand letRedex?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         typed_to_topstate)
                                                        (("1"
                                                          (expand
                                                           to_topstate)
                                                          (("1"
                                                            (replace
                                                             -21)
                                                            (("1"
                                                              (expand
                                                               make_redex_typed)
                                                              (("1"
                                                                (expand
                                                                 make_redex)
                                                                (("1"
                                                                  (replace
                                                                   -23)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (expand
                                                 make_redex_typed)
                                                (("2"
                                                  (expand make_redex)
                                                  (("2"
                                                    (expand
                                                     typed_to_topstate)
                                                    (("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (replace -18)
                                                        (("2"
                                                          (rewrite
                                                           buildRedex_fill)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               pureLetRedex?)
                                                              (("1"
                                                                (expand
                                                                 letRedex?)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             redex?)
                                                            (("2"
                                                              (expand
                                                               letRedex?)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (inst
                                                               -8
                                                               "index(car(L))")
                                                              (("3"
                                                                (split
                                                                 -8)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   in_varlist)
                                                                  (("2"
                                                                    (rewrite
                                                                     some_nth)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       0)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               typed_to_topstate
                                               1)
                                              (("3"
                                                (expand to_topstate 1)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil)
                                   ("3"
                                    (hide-all-but (1 -17))
                                    (("3"
                                      (expand typed_reduce)
                                      (("3"
                                        (expand*
                                         make_redex_typed
                                         typed_to_topstate)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 4)
                          (("2" (split)
                            (("1" (expand k) (("1" (propax) nil nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand apply_iterm_match (3 -12))
              (("2" (use applyReduce_match_rec)
                (("1" (expand apply_iterm_match (4 -14))
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (rewrite typed_reduce_state)
                        (("1" (assert)
                          (("1" (inst -13 "k-2")
                            (("1" (assert)
                              (("1"
                                (expand iapply_nstacktypes_iterm +)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand
                                     iapply_nstacktypes_iterm
                                     (-15 -16))
                                    (("1"
                                      (inst? -13)
                                      (("1"
                                        (inst? -13)
                                        (("1"
                                          (inst? -13)
                                          (("1"
                                            (inst? -13)
                                            (("1"
                                              (inst? -13)
                                              (("1"
                                                (inst
                                                 -13
                                                 "cdr(L)"
                                                 tA
                                                 _
                                                 str
                                                 cnt
                                                 stypes
                                                 "cdr(args_types)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -13
                                                     "composet(tK, popct(holet))")
                                                    (("1"
                                                      (split -13)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (rewrite
                                                           composition_typeinfo)
                                                          (("1"
                                                            (expand
                                                             typeinfo_fill
                                                             -3
                                                             3)
                                                            (("1"
                                                              (expand
                                                               typeinfo_fill
                                                               -3
                                                               3)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("4"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand length -12)
                                                  (("2"
                                                    (lift-if -12)
                                                    (("2"
                                                      (lift-if -12)
                                                      (("2"
                                                        (lift-if -12)
                                                        (("2"
                                                          (expand
                                                           length
                                                           -6)
                                                          (("2"
                                                            (lift-if
                                                             -6)
                                                            (("2"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (split)
                                                  (("1"
                                                    (expand k)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -6)
                                                      (("1"
                                                        (lift-if -6)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst -8 i)
                                                      (("2"
                                                        (expand
                                                         in_varlist)
                                                        (("2"
                                                          (expand
                                                           some
                                                           -8)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 length
                                                                 -8)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst -9 i)
                                                      (("3"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           length
                                                           1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 length
                                                                 -7)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand length -6)
                                                  (("4"
                                                    (lift-if)
                                                    (("4"
                                                      (split)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (expand k) (("1" (propax) nil nil)) nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (is_well_typed_same_shape 0
  (is_well_typed_same_shape-1 nil 3710680164
   ("" (induct K)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil))
    nil)
   ((popc adt-constructor-decl "[IContext -> (popc?)]" IL nil)
    (popc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (popct? adt-recognizer-decl "[typeinfo_ctx -> boolean]"
     typed_reduction nil)
    (pctbody adt-accessor-decl "[(popct?) -> typeinfo_ctx]"
     typed_reduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (letc adt-constructor-decl "[[IContext, IExpression] -> (letc?)]"
     IL nil)
    (letc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (letct? adt-recognizer-decl "[typeinfo_ctx -> boolean]"
     typed_reduction nil)
    (lcrhs adt-accessor-decl "[(letct?) -> typeinfo_ctx]"
     typed_reduction nil)
    (union const-decl "set" sets nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (drop const-decl "finite_set[nat]" IL nil)
    (member const-decl "bool" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IContext_induction formula-decl nil IL nil)
    (same_shape def-decl "bool" typed_reduction_props nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (tdef type-eq-decl nil typed_reduction_props nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (< const-decl "bool" reals nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (popDepth def-decl "nat" IL nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (cpure? def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil))
   shostak))
 (applyReduce_match_init_TCC1 0
  (applyReduce_match_init_TCC1-1 nil 3710678959
   ("" (subtype-tcc) nil nil)
   ((applyRedex? const-decl "bool" IL nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (applyReduce_match_init subtype
    "typed_reduction_props.trS`state`redex"
    "(IExpression_adt.application?)")))
 (applyReduce_match_init_TCC2 0
  (applyReduce_match_init_TCC2-1 nil 3710678959
   ("" (subtype-tcc) nil nil)
   ((defs_well_typed const-decl "boolean" typed_reduction nil)
    (applyRedex? const-decl "bool" IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (applyReduce_match_init subtype
    "IExpression_adt.fun(typed_reduction_props.trS`state`redex)"
    "below[trS`def_types`length]")))
 (applyReduce_match_init_TCC3 0
  (applyReduce_match_init_TCC3-1 nil 3710678959
   ("" (skeep* :preds? t)
    (("" (typepred "trS`state`redex")
      (("" (inst -2 i)
        (("" (split -2) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((typed_rstate type-eq-decl nil typed_rreduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (armc? def-decl "bool" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (refs def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (in_varlist const-decl "finite_set[nat]" IL nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (applyRedex? const-decl "bool" IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (applyReduce_match_init subtype
    "IExpression_adt.args(typed_reduction_props.trS`state`redex)"
    "{L | FORALL i: booleans.IMPLIES(IL.in_varlist(typed_reduction_props.L)(typed_reduction_props.i), reals.<(typed_reduction_props.i, typed_reduction_props.trS`state`stack`length))}")))
 (applyReduce_match_init_TCC4 0
  (applyReduce_match_init_TCC4-1 nil 3710678959
   ("" (subtype-tcc) nil nil)
   ((defs_well_typed const-decl "boolean" typed_reduction nil)
    (applyRedex? const-decl "bool" IL nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (applyReduce_match_init subtype "0"
    "naturalnumbers.upto(number_fields.*(2, list_props[(IExpression_adt.variable?)].length(IExpression_adt.args(typed_reduction_props.trS`state`redex))))")))
 (applyReduce_match_init_TCC5 0
  (applyReduce_match_init_TCC5-1 nil 3710678959
   ("" (subtype-tcc) nil nil)
   ((defs_well_typed const-decl "boolean" typed_reduction nil)
    (applyRedex? const-decl "bool" IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (applyReduce_match_init subtype "typed_reduction_props.trS"
    "{tS | booleans.AND(, typed_reduction.defs_well_typed(typed_reduction_props.D, typed_rreduction.tS`def_types))}")))
 (applyReduce_match_init_TCC6 0
  (applyReduce_match_init_TCC6-1 nil 3710678959
   ("" (skeep* :preds? t)
    (("" (rewrite finseq2list_length)
      (("" (typepred "trS`redex_type")
        (("" (expand applyRedex?)
          (("" (assert)
            (("" (expand is_well_typed) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq2list_length formula-decl nil list2finseq_extra nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (fun adt-accessor-decl "[(application?) -> nat]" IExpression_adt
         nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (applyRedex? const-decl "bool" IL nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (applyReduce_match_init subtype
    "list2finseq[naturalnumbers.nat].finseq2list(typed_reduction_props.trS`def_types`seq(IExpression_adt.fun(typed_reduction_props.trS`state`redex))`args_type)"
    "{args_types: list_adt[naturalnumbers.nat].list | list_props[naturalnumbers.nat].length(args_types) = list_props[(IExpression_adt.variable?)].length(IExpression_adt.args(typed_reduction_props.trS`state`redex))}")))
 (applyReduce_match_init 0
  (applyReduce_match_init-1 nil 3710678960
   ("" (with-labels (skeep* :preds? t) ((app err dwt funl leq obj)))
    (("" (expand apply_iterm_match obj)
      (("" (split obj)
        (("1"
          (case-replace
           "typed_reduce(D)(trS)`state = reduce(D)(trS`state)")
          (("1" (use applyReduce_match_init) (("1" (assert) nil nil))
            nil)
           ("2" (hide obj)
            (("2" (expand typed_reduce +)
              (("2" (expand reduce +)
                (("2" (assert)
                  (("2" (expand make_redex_typed)
                    (("2" (expand typed_to_topstate)
                      (("2" (assert)
                        (("2" (lift-if +)
                          (("2" (lift-if +)
                            (("2" (lift-if +)
                              (("2"
                                (lift-if +)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand iapply_nstacktypes_iterm obj)
          (("2" (case "value?(typed_to_topstate(trS)`state`redex)")
            (("1" (expand typed_to_topstate)
              (("1" (expand to_topstate)
                (("1" (use not_value_redex_fill)
                  (("1" (assert)
                    (("1" (expand redex?) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (case "applyRedex?(make_redex_typed(typed_to_topstate(trS))`state`redex)")
              (("1" (assert)
                (("1" (expand typed_reduce obj)
                  (("1" (expand* applyRedex? pureLetRedex? letRedex?)
                    (("1" (assert)
                      (("1"
                        (expand* make_redex_typed typed_to_topstate)
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide obj)
                (("2" (expand make_redex_typed +)
                  (("2" (expand make_redex +)
                    (("2" (expand typed_to_topstate +)
                      (("2" (expand to_topstate +)
                        (("2" (rewrite buildRedex_fill)
                          (("1" (assert) nil nil)
                           ("2" (expand redex?)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (expand typed_to_topstate +)
                  (("3" (expand to_topstate +) (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand iapply_nstacktypes_iterm +)
          (("3" (case "value?(typed_to_topstate(trS)`state`redex)")
            (("1" (hide obj)
              (("1" (expand* typed_to_topstate to_topstate)
                (("1" (use not_value_redex_fill)
                  (("1" (assert)
                    (("1" (expand redex?) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (case "applyRedex?(make_redex_typed(typed_to_topstate(trS))`state`redex)")
              (("1" (assert)
                (("1" (expand typed_reduce +)
                  (("1" (expand* applyRedex? pureLetRedex? letRedex?)
                    (("1" (assert)
                      (("1" (expand typed_to_topstate +)
                        (("1" (expand make_redex_typed +)
                          (("1" (expand make_redex)
                            (("1" (expand to_topstate)
                              (("1"
                                (rewrite buildRedex_fill)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite finseq2list_length)
                                    (("1"
                                      (rewrite buildRedexType_fill)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide obj)
                                        (("2"
                                          (typepred "trS`context_type")
                                          (("2"
                                            (use
                                             is_well_typed_same_shape)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide obj)
                                        (("3"
                                          (expand* redex? applyRedex?)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide obj)
                                  (("2"
                                    (expand* redex? applyRedex?)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide obj)
                (("2"
                  (expand* make_redex_typed typed_to_topstate
                   make_redex to_topstate)
                  (("2" (rewrite buildRedex_fill)
                    (("1" (assert) nil nil)
                     ("2" (expand redex?) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide obj)
                (("3" (expand* typed_to_topstate to_topstate) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (expand typed_reduce obj)
          (("4" (expand make_redex_typed obj)
            (("4" (expand typed_to_topstate obj)
              (("4" (propax) nil nil)) nil))
            nil))
          nil)
         ("5" (typepred "trS`context_type")
          (("5" (use is_well_typed_same_shape) (("5" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_iterm_match const-decl "bool" typed_reduction_props nil)
    (buildRedexType_fill formula-decl nil typed_reduction_props nil)
    (tdef type-eq-decl nil typed_reduction_props nil)
    (is_well_typed_same_shape formula-decl nil typed_reduction_props
     nil)
    (finseq2list_length formula-decl nil list2finseq_extra nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (fun adt-accessor-decl "[(application?) -> nat]" IExpression_adt
         nil)
    (iapply_nstacktypes_iterm def-decl "[finseq[nat], typeinfo]"
     typed_reduction_props nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (applyRedex? const-decl "bool" IL nil)
    (letRedex? const-decl "bool" IL nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (buildRedex_fill formula-decl nil IL nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (not_value_redex_fill formula-decl nil IL nil)
    (redex? const-decl "bool" IL nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (reduce_ndr application-judgement "(noDanglingRefs?)" rreduction
     nil)
    (IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (pure? def-decl "bool" IL nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil typed_rreduction nil)
    (Defs type-eq-decl nil typed_rreduction nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (typed_reduce const-decl "typed_rstate" typed_rreduction nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (reduce const-decl "rstate" rreduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (Defs type-eq-decl nil iareduction nil)
    (Definition type-eq-decl nil iareduction nil)
    (applyReduce_match_init formula-decl nil iareduction nil)
    (to_topstate_dangling application-judgement "(noDanglingRefs?)"
     rreduction nil)
    (typed_to_topstate const-decl "typed_rstate" typed_rreduction nil)
    (make_redex_typed const-decl "typed_rstate" typed_rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (iapply_nstacktypes_iterm_end_TCC1 0
  (iapply_nstacktypes_iterm_end_TCC1-1 nil 3710680521
   ("" (subtype-tcc) nil nil) nil nil
   (iapply_nstacktypes_iterm_end subtype
    "typed_reduction_props.args_type"
    "{args_type: list_adt[naturalnumbers.nat].list | reals.<=(number_fields.*(2, typed_reduction_props.arity), number_fields.*(2, list_props[naturalnumbers.nat].length(args_type)))}")))
 (iapply_nstacktypes_iterm_end 0
  (iapply_nstacktypes_iterm_end-1 nil 3710680522
   ("" (induct arity)
    (("1" (skeep* :preds? t)
      (("1" (expand iapply_nstacktypes_iterm +)
        (("1" (split)
          (("1" (decompose-equality +)
            (("1" (grind) nil nil)
             ("2" (decompose-equality +) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (expand letApply_type +)
            (("2" (expand npopts +) (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep* :preds? t)
      (("2" (expand iapply_nstacktypes_iterm +)
        (("2" (inst?)
          (("1" (flatten)
            (("1" (replace -4)
              (("1" (replace -5)
                (("1" (expand npopts + 2)
                  (("1" (decompose-equality +)
                    (("1" (expand o +)
                      (("1" (expand list2finseq +)
                        (("1" (expand add +)
                          (("1" (expand length + 2)
                            (("1" (lift-if +) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (decompose-equality +)
                      (("2" (expand list2finseq +)
                        (("2" (expand o +)
                          (("2" (expand add +)
                            (("2" (lift-if +)
                              (("2"
                                (lift-if +)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand nth + 3)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand length -2) (("2" (grind) nil nil)) nil)) nil)
           ("3" (expand length) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" typed_reduction_props nil)
    (args_type skolem-const-decl
     "{args_type: list[nat] | length(args_type) = 1 + j}"
     typed_reduction_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (seq type-eq-decl nil more_finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (letApply_type def-decl "typeinfo" typed_reduction nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (npopts def-decl "typeinfo" typed_rreduction nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (O const-decl "finseq" finite_sequences nil)
    (iapply_nstacktypes_iterm def-decl "[finseq[nat], typeinfo]"
     typed_reduction_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (typed_reduce_n_err 0
  (typed_reduce_n_err-1 nil 3710682149
   ("" (induct i) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (typed_reduce_n def-decl "typed_rstate" typed_reduction_props nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (armc? def-decl "bool" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (typed_reduce_n_def_types 0
  (typed_reduce_n_def_types-1 nil 3710682173
   ("" (induct i)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand typed_reduce_n +)
        (("2" (lift-if +)
          (("2" (split +)
            (("1" (propax) nil nil)
             ("2" (flatten)
              (("2" (inst? -3)
                (("2" (replace -3)
                  (("2" (expand typed_reduce +)
                    (("2" (expand make_redex_typed +)
                      (("2" (expand typed_to_topstate +)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((make_redex_typed const-decl "typed_rstate" typed_rreduction nil)
    (typed_to_topstate const-decl "typed_rstate" typed_rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (typed_reduce const-decl "typed_rstate" typed_rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Defs type-eq-decl nil typed_rreduction nil)
    (Definition type-eq-decl nil typed_rreduction nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (typed_reduce_n def-decl "typed_rstate" typed_reduction_props nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (armc? def-decl "bool" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (typed_reduce_n_compose_TCC1 0
  (typed_reduce_n_compose_TCC2-1 nil 3710681656
   ("" (skeep* :preds? t)
    (("" (rewrite typed_reduce_n_def_types) nil nil)) nil)
   ((typed_reduce_n_def_types formula-decl nil typed_reduction_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (typed_reduce_n_compose subtype
    "typed_reduction_props.typed_reduce_n(typed_reduction_props.D)(typed_reduction_props.j, typed_reduction_props.trS)"
    "{trS | typed_reduction.defs_well_typed(typed_reduction_props.D, typed_reduction_props.trS`def_types)}")))
 (typed_reduce_n_compose 0
  (typed_reduce_n_compose-1 nil 3710681656
   ("" (induct j)
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand typed_reduce_n + (2 3))
        (("2" (lift-if +)
          (("2" (inst? -1)
            (("1" (replace -1)
              (("1" (split)
                (("1" (flatten)
                  (("1" (rewrite typed_reduce_n_err) nil nil)) nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand typed_reduce +)
                (("2" (expand make_redex_typed)
                  (("2" (expand typed_to_topstate)
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (assert) (("3" (rewrite typed_reduce_n_err) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep* :preds? t)
        (("3" (rewrite typed_reduce_n_def_types) nil nil)) nil))
      nil))
    nil)
   ((typed_reduce_n_def_types formula-decl nil typed_reduction_props
     nil)
    (make_redex_typed const-decl "typed_rstate" typed_rreduction nil)
    (typed_to_topstate const-decl "typed_rstate" typed_rreduction nil)
    (typed_reduce_n_err formula-decl nil typed_reduction_props nil)
    (Definition type-eq-decl nil typed_rreduction nil)
    (Defs type-eq-decl nil typed_rreduction nil)
    (typed_reduce const-decl "typed_rstate" typed_rreduction nil)
    (trS skolem-const-decl "{trS | defs_well_typed(D, trS`def_types)}"
     typed_reduction_props nil)
    (D skolem-const-decl "Defs" typed_reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (typed_reduce_n def-decl "typed_rstate" typed_reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (applyReduce_match_lemma 0
  (applyReduce_match_lemma-1 nil 3710681046
   ("" (skeep)
    (("" (induct k :fnum 2)
      (("1" (expand typed_reduce_n +)
        (("1" (assert)
          (("1" (expand typed_reduce_n +)
            (("1" (use applyReduce_match_init) (("1" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (use applyReduce_match_rec)
          (("1" (assert)
            (("1"
              (case-replace
               "typed_reduce_n(D)(2 + jt, trS) = typed_reduce(D)(typed_reduce_n(D)(1 + jt, trS))")
              (("1" (lemma typed_reduce_n_compose)
                (("1" (inst -1 D 1 "1+jt" trS)
                  (("1" (expand typed_reduce_n -1 1)
                    (("1" (lift-if -1)
                      (("1" (split -1)
                        (("1" (flatten)
                          (("1" (expand apply_iterm_match)
                            (("1" (expand apply_iterm_match)
                              (("1" (flatten) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand typed_reduce_n -1 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (split)
              (("1" (expand apply_iterm_match)
                (("1" (flatten)
                  (("1" (expand apply_iterm_match)
                    (("1" (flatten) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand apply_iterm_match)
                (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (assert)
              (("3" (split)
                (("1" (skeep)
                  (("1" (typepred "trS`state`redex")
                    (("1" (inst -2 i)
                      (("1" (split -2)
                        (("1" (assert) nil nil)
                         ("2" (expand applyRedex?)
                          (("2" (assert)
                            (("2" (expand vars +)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (rewrite vars_mark)
                    (("2" (typepred "D`seq(fun(trS`state`redex))`body")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (rewrite pure_mark) nil nil))
          nil))
        nil)
       ("3" (rewrite finseq2list_length)
        (("3" (expand defs_well_typed)
          (("3" (flatten)
            (("3" (inst?)
              (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("4" (hide 3)
        (("4" (skeep)
          (("4" (typepred "trS`state`redex")
            (("4" (inst -2 i)
              (("4" (split -2)
                (("1" (assert) nil nil)
                 ("2" (expand applyRedex?)
                  (("2" (assert)
                    (("2" (expand vars +) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (expand defs_well_typed)
        (("5" (flatten) (("5" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (pure? def-decl "bool" IL nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (D skolem-const-decl "Defs" typed_reduction_props nil)
    (trS skolem-const-decl "typed_rstate" typed_reduction_props nil)
    (fun adt-accessor-decl "[(application?) -> nat]" IExpression_adt
         nil)
    (in_varlist const-decl "finite_set[nat]" IL nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (pred type-eq-decl nil defined_types nil)
    (tdef type-eq-decl nil typed_reduction_props nil)
    (Store type-eq-decl nil typed_reduction_props nil)
    (apply_iterm_match const-decl "bool" typed_reduction_props nil)
    (typed_reduce_n def-decl "typed_rstate" typed_reduction_props nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (armc? def-decl "bool" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (args adt-accessor-decl "[(application?) -> list[(variable?)]]"
          IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (applyReduce_match_init formula-decl nil typed_reduction_props nil)
    (applyReduce_match_rec formula-decl nil typed_reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (jt skolem-const-decl "upto(2 * length(args(trS`state`redex)))"
     typed_reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (typed_reduce const-decl "typed_rstate" typed_rreduction nil)
    (Defs type-eq-decl nil typed_rreduction nil)
    (Definition type-eq-decl nil typed_rreduction nil)
    (apply_iterm_match const-decl "bool" iareduction nil)
    (typed_reduce_n_compose formula-decl nil typed_reduction_props nil)
    (unmark_pure rec-application-judgement "(pure?)" preprocess nil)
    (vars_mark formula-decl nil preprocess nil)
    (applyRedex? const-decl "bool" IL nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pure_mark formula-decl nil preprocess nil)
    (finseq2list_length formula-decl nil list2finseq_extra nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (applyReduce_match_TCC1 0
  (applyReduce_match_TCC1-1 nil 3706632220 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (value? const-decl "bool" IL nil)
    (typed_to_topstate const-decl "typed_rstate" typed_rreduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil))
   nil
   (applyReduce_match subtype "typed_reduction.typed_to_topstate(tS)"
    "{tS | typed_reduction.tS`state`context = IL.hole AND NOT IL.value?(typed_reduction.tS`state`redex)}")))
 (applyReduce_match_TCC2 0
  (applyReduce_match_TCC3-1 nil 3710681829 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (applyRedex? const-decl "bool" IL nil)
    (make_redex_typed const-decl "typed_rstate" typed_rreduction nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (value? const-decl "bool" IL nil)
    (typed_to_topstate const-decl "typed_rstate" typed_rreduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil))
   nil
   (applyReduce_match subtype "typed_reduction_props.trS"
    "{tS | booleans.AND(, typed_reduction.defs_well_typed(typed_reduction_props.D, typed_rreduction.tS`def_types))}")))
 (applyReduce_match 0
  (applyReduce_match-2 nil 3710682847
   ("" (with-labels (skeep* :preds? t) ((err val app dwt obj)))
    ((""
      (with-labels (name nS "make_redex_typed(typed_to_topstate(trS))")
       ((nsdef)))
      (("" (replace nsdef)
        (("" (expand typed_iareduce obj)
          (("" (replace nsdef)
            (("" (assert)
              (("" (expand* applyRedex? pureLetRedex? letRedex?)
                (("" (assert)
                  ((""
                    (inst obj "1 + 2 * length(args(nS`state`redex))")
                    (("" (lemma applyReduce_match_lemma)
                      (("" (inst -1 D nS)
                        (("" (split -1)
                          (("1"
                            (inst -1
                             "2 * length(args(nS`state`redex))")
                            (("1" (expand apply_iterm_match)
                              (("1"
                                (with-labels
                                 (flatten -1)
                                 ((aim st rt dt sms)))
                                (("1"
                                  (lemma iapply_nstacktypes_iterm_end)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (rewrite
                                             list2finseq_finseq2list)
                                            (("1"
                                              (expand
                                               iastate_matches
                                               obj)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   "typed_reduce_n(D)(1 + 2 * length(args(nS`state`redex)), nS) = typed_reduce_n(D)(1 + 2 * length(args(nS`state`redex)), trS)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace rt)
                                                      (("1"
                                                        (replace st)
                                                        (("1"
                                                          (case-replace
                                                           "nS`def_types = trS`def_types")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               apply_iterm_match)
                                                              (("1"
                                                                (lemma
                                                                 iapply_nstack_iterm_end)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             iapplyReduce
                                                                             obj)
                                                                            (("1"
                                                                              (case
                                                                               "fun(nS`state`redex) < D`length AND
               length(args(nS`state`redex)) =
                D`seq(fun(nS`state`redex))`arity")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     state_matches?)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (obj
                                                                                        err))
                                                                                      (("1"
                                                                                        (expand*
                                                                                         nS
                                                                                         make_redex_typed
                                                                                         typed_to_topstate
                                                                                         make_redex
                                                                                         to_topstate)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 obj)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "nS`redex_type")
                                                                                  (("2"
                                                                                    (expand
                                                                                     is_well_typed)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         defs_well_typed)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (inst?
                                                                                             dwt)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "nS`state`redex")
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         i)
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             vars
                                                                             +)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide obj)
                                                            (("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (expand*
                                                                 nS
                                                                 make_redex_typed
                                                                 typed_to_topstate)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide obj)
                                                    (("2"
                                                      (expand
                                                       typed_reduce_n
                                                       +)
                                                      (("2"
                                                        (expand nS + 1)
                                                        (("2"
                                                          (expand
                                                           make_redex_typed
                                                           +)
                                                          (("2"
                                                            (expand
                                                             typed_to_topstate
                                                             +)
                                                            (("2"
                                                              (expand
                                                               make_redex
                                                               +)
                                                              (("2"
                                                                (expand
                                                                 to_topstate
                                                                 +)
                                                                (("2"
                                                                  (case-replace
                                                                   "typed_reduce(D)(trS) = typed_reduce(D)(nS)")
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (case
                                                                       "typed_to_topstate(trS) = typed_to_topstate(nS)")
                                                                      (("1"
                                                                        (expand
                                                                         typed_reduce
                                                                         +)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (replace
                                                                             nsdef)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand*
                                                                                 pureLetRedex?
                                                                                 letRedex?)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "nS`def_types = trS`def_types")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand*
                                                                                         nS
                                                                                         make_redex_typed
                                                                                         typed_to_topstate)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (decompose-equality
                                                                         1)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("1"
                                                                            (expand*
                                                                             nS
                                                                             typed_to_topstate
                                                                             make_redex_typed)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             typed_to_topstate)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               1)
                                                                              (("1"
                                                                                (expand*
                                                                                 nS
                                                                                 make_redex_typed
                                                                                 make_redex
                                                                                 typed_to_topstate
                                                                                 to_topstate)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand*
                                                                                 nS
                                                                                 make_redex_typed
                                                                                 make_redex
                                                                                 typed_to_topstate
                                                                                 to_topstate)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (expand*
                                                                                 nS
                                                                                 make_redex_typed
                                                                                 make_redex
                                                                                 typed_to_topstate
                                                                                 to_topstate)
                                                                                nil
                                                                                nil)
                                                                               ("4"
                                                                                (expand*
                                                                                 nS
                                                                                 make_redex_typed
                                                                                 make_redex
                                                                                 typed_to_topstate
                                                                                 to_topstate)
                                                                                (("4"
                                                                                  (typepred
                                                                                   "buildRedex(fill(trS`state`context, trS`state`redex))")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (expand*
                                                                                 nS
                                                                                 make_redex_typed
                                                                                 make_redex
                                                                                 typed_to_topstate
                                                                                 to_topstate)
                                                                                nil
                                                                                nil)
                                                                               ("6"
                                                                                (expand*
                                                                                 nS
                                                                                 make_redex_typed
                                                                                 make_redex
                                                                                 typed_to_topstate
                                                                                 to_topstate)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("3"
                                                                            (expand*
                                                                             nS
                                                                             typed_to_topstate
                                                                             make_redex_typed)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("4"
                                                                            (expand*
                                                                             nS
                                                                             typed_to_topstate
                                                                             make_redex_typed)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("5"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("5"
                                                                            (expand*
                                                                             nS
                                                                             typed_to_topstate
                                                                             make_redex_typed)
                                                                            (("5"
                                                                              (typepred
                                                                               "buildRedexType(to_topstate(trS`state)`redex,
                                    typeinfo_fill
                                    (trS`context_type, trS`redex_type))")
                                                                              (("5"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("6"
                                                                          (expand
                                                                           typed_to_topstate
                                                                           +)
                                                                          (("6"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite finseq2list_length)
                                      (("2"
                                        (hide obj)
                                        (("2"
                                          (typepred "nS`redex_type")
                                          (("2"
                                            (expand is_well_typed)
                                            (("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand applyRedex?)
                            (("2" (assert) nil nil)) nil)
                           ("3"
                            (expand* nS make_redex_typed
                             typed_to_topstate make_redex to_topstate)
                            nil nil)
                           ("4" (hide obj)
                            (("4"
                              (expand* nS make_redex_typed
                               typed_to_topstate)
                              nil nil))
                            nil)
                           ("5" (hide obj)
                            (("5" (typepred "nS`redex_type")
                              (("5"
                                (expand is_well_typed)
                                (("5"
                                  (flatten)
                                  (("5"
                                    (expand defs_well_typed)
                                    (("5"
                                      (flatten)
                                      (("5"
                                        (expand*
                                         nS
                                         make_redex_typed
                                         typed_to_topstate)
                                        (("5" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6" (hide obj)
                            (("6" (typepred "nS`redex_type")
                              (("6"
                                (expand is_well_typed)
                                (("6"
                                  (flatten)
                                  (("6"
                                    (expand defs_well_typed)
                                    (("6"
                                      (flatten)
                                      (("6"
                                        (inst
                                         dwt
                                         "fun(nS`state`redex)")
                                        (("6"
                                          (flatten)
                                          (("6"
                                            (expand*
                                             nS
                                             make_redex_typed
                                             typed_to_topstate)
                                            (("6" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (letRedex? const-decl "bool" IL nil)
    (applyRedex? const-decl "bool" IL nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (args adt-accessor-decl "[(application?) -> list[(variable?)]]"
          IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (pure? def-decl "bool" IL nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (nS skolem-const-decl "typed_rstate" typed_reduction_props nil)
    (fun adt-accessor-decl "[(application?) -> nat]" IExpression_adt
         nil)
    (list2finseq_finseq2list formula-decl nil list2finseq_extra nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (to_topstate_dangling application-judgement "(noDanglingRefs?)"
     rreduction nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (fill def-decl "IExpression" IL nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (buildRedexType def-decl "{tK, tB | typeinfo_fill(tK, tB) = tA}"
     typed_reduction nil)
    (typeinfo_fill def-decl "typeinfo" typed_reduction nil)
    (Definition type-eq-decl nil typed_rreduction nil)
    (Defs type-eq-decl nil typed_rreduction nil)
    (typed_reduce const-decl "typed_rstate" typed_rreduction nil)
    (iapply_nstack_iterm_end formula-decl nil iareduction nil)
    (iapplyReduce const-decl "rstate" iareduction nil)
    (state_matches? const-decl "bool" iareduction nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (in_varlist const-decl "finite_set[nat]" IL nil)
    (apply_iterm_match const-decl "bool" iareduction nil)
    (typed_reduce_n def-decl "typed_rstate" typed_reduction_props nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (Defs type-eq-decl nil typed_reduction nil)
    (Definition type-eq-decl nil typed_reduction nil)
    (iastate_matches const-decl "bool" typed_reduction_props nil)
    (finseq2list_length formula-decl nil list2finseq_extra nil)
    (iapply_nstacktypes_iterm_end formula-decl nil
     typed_reduction_props nil)
    (apply_iterm_match const-decl "bool" typed_reduction_props nil)
    (applyReduce_match_lemma formula-decl nil typed_reduction_props
     nil)
    (typed_iareduce const-decl "typed_rstate" typed_rreduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (make_redex_typed const-decl "typed_rstate" typed_rreduction nil)
    (typed_to_topstate const-decl "typed_rstate" typed_rreduction nil))
   nil)
  (applyReduce_match-1 nil 3710636062
   ("" (with-labels (skeep* :preds? t) ((err val app obj)))
    ((""
      (with-labels (name nS "make_redex_typed(typed_to_topstate(trS))")
       ((nsdef)))
      (("" (replace nsdef)
        (("" (expand typed_iareduce obj)
          (("" (replace nsdef)
            (("" (assert)
              (("" (expand* applyRedex? pureLetRedex? letRedex?)
                (("" (assert)
                  ((""
                    (inst obj "1 + 2 * length(args(nS`state`redex))")
                    (("" (lemma applyReduce_match_lemma)
                      (("" (inst -1 D nS)
                        (("" (split -1)
                          (("1"
                            (inst -1
                             "2 * length(args(nS`state`redex))")
                            (("1" (postpone) nil nil)) nil)
                           ("2" (expand applyRedex?)
                            (("2" (assert) nil nil)) nil)
                           ("3"
                            (expand* nS make_redex_typed
                             typed_to_topstate make_redex to_topstate)
                            nil nil)
                           ("4" (hide obj)
                            (("4"
                              (expand* nS make_redex_typed
                               typed_to_topstate)
                              (("4"
                                (assert)
                                (("4" (postpone) nil nil))
                                nil))
                              nil))
                            nil)
                           ("5" (postpone) nil nil)
                           ("6" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (bisimulation_lemma_i_TCC1 0
  (bisimulation_lemma_i_TCC1-1 nil 3710610291
   ("" (skeep* :preds? t) (("" (assert) (("" (grind) nil nil)) nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (defs_well_typed const-decl "boolean" typed_reduction nil)
    (state_matches? const-decl "bool" iareduction nil)
    (iastate_matches const-decl "bool" typed_reduction_props nil))
   nil
   (bisimulation_lemma_i subtype "typed_reduction_props.trS2"
    "{tS | booleans.AND(, typed_reduction.defs_well_typed(typed_reduction_props.D, typed_rreduction.tS`def_types))}")))
 (bisimulation_lemma_i 0
  (bisimulation_lemma_i-3 nil 3710611110
   ("" (with-labels (skeep* :preds? t) ((err1 err2 dwt iam obj)))
    (("" (expand typed_iareduce obj)
      (("" (with-labels (name t "typed_to_topstate(trS2)") ((tdef)))
        (("" (replace tdef)
          (("" (case "value?(t`state`redex)")
            (("1" (assert)
              (("1" (inst obj 1)
                (("1" (expand typed_reduce_n obj)
                  (("1" (expand typed_reduce_n obj)
                    (("1" (expand typed_reduce obj)
                      (("1"
                        (case-replace
                         "typed_to_topstate(trS1)`state`redex = t`state`redex")
                        (("1" (assert)
                          (("1" (expand iastate_matches)
                            (("1" (flatten)
                              (("1"
                                (expand typed_to_topstate)
                                (("1"
                                  (expand to_topstate)
                                  (("1"
                                    (expand t obj)
                                    (("1"
                                      (expand typed_to_topstate)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand state_matches?)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand to_topstate)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide obj)
                            (("2" (expand typed_to_topstate)
                              (("2"
                                (expand to_topstate)
                                (("2"
                                  (expand t)
                                  (("2"
                                    (expand typed_to_topstate)
                                    (("2"
                                      (expand to_topstate)
                                      (("2"
                                        (expand iastate_matches)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand state_matches?)
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2"
                (with-labels (name nS "make_redex_typed(t)") ((nsdef)))
                (("1" (replace nsdef)
                  (("1"
                    (with-labels (name t2 "typed_to_topstate(trS1)")
                     ((t2def)))
                    (("1" (case "value?(t2`state`redex)")
                      (("1" (hide obj)
                        (("1" (expand t)
                          (("1" (expand t2)
                            (("1" (expand typed_to_topstate)
                              (("1"
                                (expand to_topstate)
                                (("1"
                                  (expand iastate_matches)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand state_matches?)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2"
                          (with-labels
                           (name nS2 "make_redex_typed(t2)")
                           ((ns2def)))
                          (("1"
                            (with-labels
                             (case "iastate_matches(nS2, nS)")
                             ((iam2)))
                            (("1" (case-replace "nS`state = nS2`state")
                              (("1"
                                (case "variable?(nS2`state`redex)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst obj 1)
                                    (("1"
                                      (expand typed_reduce_n obj)
                                      (("1"
                                        (expand typed_reduce_n obj)
                                        (("1"
                                          (expand typed_reduce obj)
                                          (("1"
                                            (replace t2def)
                                            (("1"
                                              (replace ns2def)
                                              (("1"
                                                (expand
                                                 iastate_matches
                                                 obj)
                                                (("1"
                                                  (expand
                                                   iastate_matches)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         iareduction.state_matches?
                                                         obj)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "pureLetRedex?(nS2`state`redex)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst obj 1)
                                      (("1"
                                        (expand typed_reduce_n obj)
                                        (("1"
                                          (expand typed_reduce_n obj)
                                          (("1"
                                            (expand typed_reduce obj)
                                            (("1"
                                              (replace t2def obj)
                                              (("1"
                                                (replace ns2def obj)
                                                (("1"
                                                  (expand
                                                   iastate_matches)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case-replace
                                                         "nS`context_type = nS2`context_type")
                                                        (("1"
                                                          (case-replace
                                                           "nS`redex_type = nS2`redex_type")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               state_matches?
                                                               obj)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide obj)
                                                            (("2"
                                                              (expand
                                                               nS
                                                               +)
                                                              (("2"
                                                                (expand
                                                                 nS2
                                                                 +)
                                                                (("2"
                                                                  (expand
                                                                   make_redex_typed
                                                                   +)
                                                                  (("2"
                                                                    (expand
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       t2)
                                                                      (("2"
                                                                        (expand
                                                                         typed_to_topstate)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             to_topstate)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 state_matches?)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide obj)
                                                          (("2"
                                                            (expand*
                                                             nS
                                                             nS2
                                                             make_redex_typed)
                                                            (("2"
                                                              (expand*
                                                               t
                                                               t2
                                                               typed_to_topstate
                                                               to_topstate
                                                               state_matches?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case
                                     "applyRedex?(nS2`state`redex)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma applyReduce_match)
                                        (("1"
                                          (inst -1 D trS1)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst obj n)
                                                (("1"
                                                  (expand
                                                   typed_iareduce
                                                   -1)
                                                  (("1"
                                                    (replace t2def)
                                                    (("1"
                                                      (replace ns2def)
                                                      (("1"
                                                        (hide-all-but
                                                         (obj
                                                          iam
                                                          iam2
                                                          -1))
                                                        (("1"
                                                          (expand
                                                           iastate_matches)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case-replace
                                                                 "nS2`context_type = nS`context_type")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   obj)
                                                                  (("2"
                                                                    (expand
                                                                     nS2
                                                                     +)
                                                                    (("2"
                                                                      (expand
                                                                       nS
                                                                       +)
                                                                      (("2"
                                                                        (expand
                                                                         make_redex_typed
                                                                         +)
                                                                        (("2"
                                                                          (expand
                                                                           t2
                                                                           +)
                                                                          (("2"
                                                                            (expand
                                                                             t
                                                                             +)
                                                                            (("2"
                                                                              (expand
                                                                               typed_to_topstate
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 to_topstate
                                                                                 +)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     state_matches?)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3" (assert) nil nil)
                                             ("4" (assert) nil nil)
                                             ("5" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case
                                       "pureIftRedex?(nS2`state`redex)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "marked(condition(nS2`state`redex))")
                                          (("1"
                                            (inst obj 2)
                                            (("1"
                                              (expand
                                               typed_reduce_n
                                               obj)
                                              (("1"
                                                (expand
                                                 typed_reduce_n
                                                 obj)
                                                (("1"
                                                  (expand
                                                   typed_reduce
                                                   obj
                                                   1)
                                                  (("1"
                                                    (replace t2def obj)
                                                    (("1"
                                                      (replace
                                                       ns2def
                                                       obj)
                                                      (("1"
                                                        (expand
                                                         ifReduce
                                                         obj
                                                         1)
                                                        (("1"
                                                          (expand
                                                           release_marked
                                                           obj)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "nS2`state`error")
                                                              (("1"
                                                                (hide
                                                                 obj)
                                                                (("1"
                                                                  (expand*
                                                                   nS2
                                                                   make_redex_typed
                                                                   make_redex
                                                                   t2
                                                                   typed_to_topstate
                                                                   to_topstate)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   typed_reduce_n)
                                                                  (("2"
                                                                    (expand
                                                                     typed_reduce
                                                                     obj
                                                                     2)
                                                                    (("2"
                                                                      (replace
                                                                       t2def)
                                                                      (("2"
                                                                        (replace
                                                                         ns2def)
                                                                        (("2"
                                                                          (case
                                                                           "release?(ifReduce(D)(nS2`state)`redex)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               typed_reduce
                                                                               obj)
                                                                              (("1"
                                                                                (expand
                                                                                 typed_to_topstate
                                                                                 obj)
                                                                                (("1"
                                                                                  (expand
                                                                                   to_topstate
                                                                                   obj)
                                                                                  (("1"
                                                                                    (use
                                                                                     not_value_redex_fill)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           make_redex_typed
                                                                                           obj)
                                                                                          (("1"
                                                                                            (expand
                                                                                             make_redex
                                                                                             obj)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               buildRedex_fill
                                                                                               obj)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand*
                                                                                                   pureLetRedex?
                                                                                                   letRedex?
                                                                                                   applyRedex?
                                                                                                   pureIftRedex?
                                                                                                   iftRedex?
                                                                                                   updateRedex?
                                                                                                   lookupRedex?
                                                                                                   newintRedex?
                                                                                                   newrefRedex?
                                                                                                   popRedex?)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     iastate_matches)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           obj)
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "ifReduce(D)(nS2`state)
                           WITH [(context)
                                   := ifReduce(D)(nS2`state)`context,
                                 (redex) := ifReduce(D)(nS2`state)`redex] = ifReduce(D)(nS2`state)")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               aifReduce
                                                                                                               obj)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 state_matches?)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               obj)
                                                                                                              (("2"
                                                                                                                (decompose-equality
                                                                                                                 1)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (typepred
                                                                                                             "buildRedexType(fill(ifReduce(D)(nS2`state)`context,
                                        ifReduce(D)(nS2`state)`redex),
                                   typeinfo_fill(nS2`context_type,
                                                 IF get
                                                    (nS2`state`stack)
                                                    (condition
                                                     (nS2`state`redex))
                                                    =
                                                    constant(0)
                                                 THEN telse(nS2`redex_type)
                                                 ELSE tthen(nS2`redex_type)
                                                 ENDIF))")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "nS`redex_type = nS2`redex_type")
                                                                                                                (("1"
                                                                                                                  (case-replace
                                                                                                                   "nS`context_type = nS2`context_type")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide-all-but
                                                                                                                       obj)
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     obj)
                                                                                                                    (("2"
                                                                                                                      (expand*
                                                                                                                       nS
                                                                                                                       nS2
                                                                                                                       make_redex_typed)
                                                                                                                      (("2"
                                                                                                                        (expand*
                                                                                                                         t
                                                                                                                         t2
                                                                                                                         typed_to_topstate
                                                                                                                         to_topstate
                                                                                                                         state_matches?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   obj)
                                                                                                                  (("2"
                                                                                                                    (expand*
                                                                                                                     nS
                                                                                                                     nS2
                                                                                                                     make_redex_typed)
                                                                                                                    (("2"
                                                                                                                      (expand*
                                                                                                                       t
                                                                                                                       t2
                                                                                                                       typed_to_topstate
                                                                                                                       to_topstate
                                                                                                                       state_matches?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "nS2`redex_type")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     is_well_typed)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (typepred
                                                                                                                   "nS2`redex_type")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     is_well_typed)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("4"
                                                                                                                (typepred
                                                                                                                 "nS2`state`redex")
                                                                                                                (("4"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "index(condition(nS2`state`redex))")
                                                                                                                  (("4"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 obj)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   redex?)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     releaseRedex?)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         obj)
                                                                                        (("2"
                                                                                          (expand
                                                                                           redex?)
                                                                                          (("2"
                                                                                            (expand
                                                                                             releaseRedex?)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             obj)
                                                                            (("2"
                                                                              (expand
                                                                               ifReduce
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 release_marked
                                                                                 +)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst obj 1)
                                            (("2"
                                              (expand
                                               typed_reduce_n
                                               obj)
                                              (("2"
                                                (expand
                                                 typed_reduce_n
                                                 obj)
                                                (("2"
                                                  (expand
                                                   typed_reduce
                                                   obj)
                                                  (("2"
                                                    (replace t2def)
                                                    (("2"
                                                      (replace ns2def)
                                                      (("2"
                                                        (expand
                                                         iastate_matches)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 aifReduce)
                                                                (("1"
                                                                  (expand
                                                                   state_matches?)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case-replace
                                                                 "nS2`redex_type = nS`redex_type")
                                                                (("1"
                                                                  (case-replace
                                                                   "nS2`context_type = nS`context_type")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     obj)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     obj)
                                                                    (("2"
                                                                      (expand*
                                                                       nS
                                                                       nS2
                                                                       make_redex_typed)
                                                                      (("2"
                                                                        (expand*
                                                                         t
                                                                         t2
                                                                         typed_to_topstate
                                                                         to_topstate
                                                                         state_matches?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   obj)
                                                                  (("2"
                                                                    (expand*
                                                                     nS
                                                                     nS2
                                                                     make_redex_typed)
                                                                    (("2"
                                                                      (expand*
                                                                       t
                                                                       t2
                                                                       typed_to_topstate
                                                                       to_topstate
                                                                       state_matches?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "updateRedex?(nS2`state`redex)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst obj 1)
                                            (("1"
                                              (expand
                                               typed_reduce_n
                                               obj)
                                              (("1"
                                                (expand
                                                 typed_reduce_n
                                                 obj)
                                                (("1"
                                                  (expand
                                                   typed_reduce
                                                   obj)
                                                  (("1"
                                                    (replace t2def)
                                                    (("1"
                                                      (replace ns2def)
                                                      (("1"
                                                        (expand
                                                         iastate_matches
                                                         obj)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             iastate_matches)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   state_matches?)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "lookupRedex?(nS2`state`redex)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "marked(arrayvalue(nS2`state`redex))")
                                              (("1"
                                                (expand
                                                 alookupReduce
                                                 obj)
                                                (("1"
                                                  (case
                                                   "marked(arrayvalue(nS2`state`redex))
                                        AND
                                        NOT
                                        lookupReduce(D)(nS2`state)`error")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst obj 2)
                                                        (("1"
                                                          (expand
                                                           typed_reduce_n
                                                           obj)
                                                          (("1"
                                                            (expand
                                                             typed_reduce_n
                                                             obj)
                                                            (("1"
                                                              (expand
                                                               typed_reduce_n
                                                               obj)
                                                              (("1"
                                                                (expand
                                                                 typed_reduce
                                                                 obj
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   typed_reduce
                                                                   obj
                                                                   2)
                                                                  (("1"
                                                                    (replace
                                                                     t2def)
                                                                    (("1"
                                                                      (replace
                                                                       ns2def)
                                                                      (("1"
                                                                        (case
                                                                         "release?(lookupReduce(D)(nS2`state)`redex)")
                                                                        (("1"
                                                                          (expand
                                                                           typed_reduce
                                                                           obj)
                                                                          (("1"
                                                                            (expand*
                                                                             typed_to_topstate
                                                                             to_topstate)
                                                                            (("1"
                                                                              (use
                                                                               not_value_redex_fill)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand*
                                                                                       make_redex_typed
                                                                                       make_redex)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         buildRedex_fill)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand*
                                                                                             pureLetRedex?
                                                                                             letRedex?
                                                                                             applyRedex?
                                                                                             pureIftRedex?
                                                                                             iftRedex?
                                                                                             updateRedex?
                                                                                             lookupRedex?
                                                                                             newintRedex?
                                                                                             newrefRedex?
                                                                                             popRedex?)
                                                                                            (("1"
                                                                                              (expand
                                                                                               iastate_matches
                                                                                               obj)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 iastate_matches)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         obj)
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "lookupReduce(D)(nS2`state)
                           WITH [(context)
                                   := lookupReduce(D)(nS2`state)`context,
                                 (redex)
                                   := lookupReduce(D)(nS2`state)`redex] = lookupReduce(D)(nS2`state)")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             state_matches?)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (decompose-equality
                                                                                                             1)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "buildRedexType(fill(lookupReduce(D)(nS2`state)`context,
                                        lookupReduce(D)(nS2`state)`redex),
                                   typeinfo_fill(nS2`context_type,
                                                 nS2`redex_type))")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           redex?)
                                                                                          (("2"
                                                                                            (expand
                                                                                             releaseRedex?)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     obj)
                                                                                    (("2"
                                                                                      (expand
                                                                                       redex?)
                                                                                      (("2"
                                                                                        (expand
                                                                                         releaseRedex?)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           obj)
                                                                          (("2"
                                                                            (expand
                                                                             lookupReduce
                                                                             +)
                                                                            (("2"
                                                                              (lift-if
                                                                               +)
                                                                              (("2"
                                                                                (split
                                                                                 +)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     release_marked)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       1)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace 1)
                                                    (("2"
                                                      (inst obj 1)
                                                      (("2"
                                                        (expand
                                                         typed_reduce_n
                                                         obj)
                                                        (("2"
                                                          (expand
                                                           typed_reduce_n
                                                           obj)
                                                          (("2"
                                                            (expand
                                                             typed_reduce
                                                             obj)
                                                            (("2"
                                                              (replace
                                                               t2def)
                                                              (("2"
                                                                (replace
                                                                 ns2def)
                                                                (("2"
                                                                  (expand
                                                                   iastate_matches)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         state_matches?)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide obj)
                                                    (("3"
                                                      (expand*
                                                       nS2
                                                       make_redex_typed
                                                       make_redex
                                                       t2
                                                       typed_to_topstate
                                                       to_topstate)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst obj 1)
                                                (("2"
                                                  (expand
                                                   alookupReduce
                                                   obj)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       typed_reduce_n
                                                       obj)
                                                      (("2"
                                                        (expand
                                                         typed_reduce_n
                                                         obj)
                                                        (("2"
                                                          (expand
                                                           typed_reduce
                                                           obj)
                                                          (("2"
                                                            (replace
                                                             t2def)
                                                            (("2"
                                                              (replace
                                                               ns2def)
                                                              (("2"
                                                                (expand
                                                                 iastate_matches)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       state_matches?)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "newintRedex?(nS2`state`redex)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst obj 1)
                                                (("1"
                                                  (expand
                                                   typed_reduce_n
                                                   obj)
                                                  (("1"
                                                    (expand
                                                     typed_reduce_n
                                                     obj)
                                                    (("1"
                                                      (expand
                                                       typed_reduce
                                                       obj)
                                                      (("1"
                                                        (replace t2def)
                                                        (("1"
                                                          (replace
                                                           ns2def)
                                                          (("1"
                                                            (expand
                                                             iastate_matches)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   state_matches?)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "newrefRedex?(nS2`state`redex)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst obj 1)
                                                  (("1"
                                                    (expand
                                                     typed_reduce_n
                                                     obj)
                                                    (("1"
                                                      (expand
                                                       typed_reduce_n
                                                       obj)
                                                      (("1"
                                                        (expand
                                                         typed_reduce
                                                         obj)
                                                        (("1"
                                                          (replace
                                                           t2def)
                                                          (("1"
                                                            (replace
                                                             ns2def)
                                                            (("1"
                                                              (expand
                                                               iastate_matches)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     state_matches?)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "popRedex?(nS2`state`redex)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst obj 1)
                                                    (("1"
                                                      (expand
                                                       typed_reduce_n
                                                       obj)
                                                      (("1"
                                                        (expand
                                                         typed_reduce_n
                                                         obj)
                                                        (("1"
                                                          (expand
                                                           typed_reduce
                                                           obj)
                                                          (("1"
                                                            (replace
                                                             t2def)
                                                            (("1"
                                                              (replace
                                                               ns2def)
                                                              (("1"
                                                                (expand
                                                                 iastate_matches)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       obj)
                                                                      (("1"
                                                                        (expand
                                                                         state_matches?)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case-replace
                                                                         "nS`context_type = nS2`context_type")
                                                                        (("1"
                                                                          (case-replace
                                                                           "nS`redex_type = nS2`redex_type")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             obj)
                                                                            (("2"
                                                                              (expand*
                                                                               nS
                                                                               nS2
                                                                               make_redex_typed)
                                                                              (("2"
                                                                                (expand*
                                                                                 t
                                                                                 t2
                                                                                 typed_to_topstate
                                                                                 to_topstate
                                                                                 state_matches?)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand*
                                                                           nS
                                                                           nS2
                                                                           make_redex_typed)
                                                                          (("2"
                                                                            (hide
                                                                             obj)
                                                                            (("2"
                                                                              (expand*
                                                                               t
                                                                               t2
                                                                               typed_to_topstate
                                                                               to_topstate
                                                                               state_matches?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (inst obj 1)
                                                    (("2"
                                                      (expand
                                                       typed_reduce_n
                                                       obj)
                                                      (("2"
                                                        (expand
                                                         typed_reduce_n
                                                         obj)
                                                        (("2"
                                                          (expand
                                                           typed_reduce
                                                           obj)
                                                          (("2"
                                                            (replace
                                                             t2def)
                                                            (("2"
                                                              (replace
                                                               ns2def)
                                                              (("2"
                                                                (expand
                                                                 iastate_matches)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       state_matches?)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide obj)
                                (("2"
                                  (decompose-equality 1)
                                  (("1"
                                    (expand*
                                     nS
                                     nS2
                                     make_redex_typed
                                     make_redex
                                     t
                                     t2
                                     typed_to_topstate
                                     to_topstate
                                     iastate_matches
                                     state_matches?)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand*
                                     nS
                                     nS2
                                     make_redex_typed
                                     make_redex
                                     t
                                     t2
                                     typed_to_topstate
                                     to_topstate
                                     iastate_matches
                                     state_matches?)
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (expand*
                                     nS
                                     nS2
                                     make_redex_typed
                                     make_redex
                                     t
                                     t2
                                     typed_to_topstate
                                     to_topstate
                                     iastate_matches
                                     state_matches?)
                                    nil
                                    nil)
                                   ("4"
                                    (expand*
                                     nS
                                     nS2
                                     make_redex_typed
                                     make_redex
                                     t
                                     t2
                                     typed_to_topstate
                                     to_topstate
                                     iastate_matches
                                     state_matches?)
                                    (("4" (assert) nil nil))
                                    nil)
                                   ("5"
                                    (expand*
                                     nS
                                     nS2
                                     make_redex_typed
                                     make_redex
                                     t
                                     t2
                                     typed_to_topstate
                                     to_topstate
                                     iastate_matches
                                     state_matches?)
                                    (("5" (assert) nil nil))
                                    nil)
                                   ("6"
                                    (expand*
                                     nS
                                     nS2
                                     make_redex_typed
                                     make_redex
                                     t
                                     t2
                                     typed_to_topstate
                                     to_topstate
                                     iastate_matches
                                     state_matches?)
                                    (("6" (assert) nil nil))
                                    nil)
                                   ("7"
                                    (expand*
                                     nS
                                     nS2
                                     make_redex_typed
                                     make_redex
                                     t
                                     t2
                                     typed_to_topstate
                                     to_topstate
                                     iastate_matches
                                     state_matches?)
                                    (("7" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide obj)
                              (("2"
                                (expand iastate_matches)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (split)
                                    (("1"
                                      (expand* nS2 nS)
                                      (("1"
                                        (expand*
                                         make_redex_typed
                                         make_redex
                                         t
                                         t2
                                         typed_to_topstate
                                         to_tostate
                                         state_matches?)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand to_topstate)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand* nS2 nS make_redex_typed)
                                      (("2"
                                        (typepred
                                         "buildRedexType(t2`state`redex, t2`redex_type)")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (typepred
                                             "buildRedexType(t`state`redex, t`redex_type)")
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (expand*
                                                 t2
                                                 t
                                                 typed_to_topstate)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand*
                                       nS2
                                       nS
                                       make_redex_typed
                                       t
                                       t2
                                       typed_to_topstate)
                                      nil
                                      nil)
                                     ("4"
                                      (expand*
                                       nS2
                                       nS
                                       make_redex_typed
                                       t
                                       t2
                                       typed_to_topstate)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide obj)
                            (("2"
                              (expand* t2 typed_to_topstate
                               to_topstate)
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide obj)
                  (("2" (expand* t typed_to_topstate to_topstate) nil
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((typed_to_topstate const-decl "typed_rstate" typed_rreduction nil)
    (typed_rstate type-eq-decl nil typed_rreduction nil)
    (expr_type def-decl "nat" typed_reduction nil)
    (popn const-decl "finseq[nat]" typed_reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (is_well_typed_ctx def-decl "bool" typed_reduction nil)
    (typeinfo_ctx type-decl nil typed_reduction nil)
    (is_well_typed def-decl "bool" typed_reduction nil)
    (tdef type-eq-decl nil typed_reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (value_of_type const-decl "boolean" typed_reduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (armc? def-decl "bool" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (tdef type-eq-decl nil typed_rreduction nil)
    (typeinfo type-decl nil typeinfo_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (iastate_matches const-decl "bool" typed_reduction_props nil)
    (t skolem-const-decl "typed_rstate" typed_reduction_props nil)
    (to_topstate_dangling application-judgement "(noDanglingRefs?)"
     rreduction nil)
    (state_matches? const-decl "bool" iareduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (typed_reduce const-decl "typed_rstate" typed_rreduction nil)
    (typed_reduce_n def-decl "typed_rstate" typed_reduction_props nil)
    (make_redex_typed const-decl "typed_rstate" typed_rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (applyRedex? const-decl "bool" IL nil)
    (applyReduce_match formula-decl nil typed_reduction_props nil)
    (pure? def-decl "bool" IL nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil typed_reduction_props nil)
    (Defs type-eq-decl nil typed_reduction_props nil)
    (alookupReduce const-decl "rstate" iareduction nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (lookupReduce const-decl "rstate" rreduction nil)
    (arrayvalue adt-accessor-decl "[(lookup?) -> (variable?)]"
     IExpression_adt nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (ifReduce const-decl "rstate" rreduction nil)
    (not_value_redex_fill formula-decl nil IL nil)
    (releaseRedex? const-decl "bool" IL nil)
    (redex? const-decl "bool" IL nil)
    (typeinfo_fill def-decl "typeinfo" typed_reduction nil)
    (buildRedexType def-decl "{tK, tB | typeinfo_fill(tK, tB) = tA}"
     typed_reduction nil)
    (fill def-decl "IExpression" IL nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (get const-decl "(value?)" IL nil)
    (constant? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (constant adt-constructor-decl "[int -> (constant?)]"
     IExpression_adt nil)
    (iftt? adt-recognizer-decl "[typeinfo -> boolean]" typeinfo_adt
     nil)
    (telse adt-accessor-decl "[(iftt?) -> typeinfo]" typeinfo_adt nil)
    (tthen adt-accessor-decl "[(iftt?) -> typeinfo]" typeinfo_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (finite_difference application-judgement "finite_set[nat]"
     countability "sets_aux/")
    (empty? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (markv const-decl "(variable?)" preprocess nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (add const-decl "(nonempty?)" sets nil)
    (aifReduce const-decl "rstate" iareduction nil)
    (iftRedex? const-decl "bool" IL nil)
    (lookupRedex? const-decl "bool" IL nil)
    (newrefRedex? const-decl "bool" IL nil)
    (popRedex? const-decl "bool" IL nil)
    (newintRedex? const-decl "bool" IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (letRedex? const-decl "bool" IL nil)
    (buildRedex_fill formula-decl nil IL nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (Definition type-eq-decl nil rreduction nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (release_marked const-decl "rstate" rreduction nil)
    (condition adt-accessor-decl "[(ift?) -> (variable?)]"
               IExpression_adt nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (marked adt-accessor-decl "[(variable?) -> bool]" IExpression_adt
     nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (nS2 skolem-const-decl "typed_rstate" typed_reduction_props nil)
    (nS skolem-const-decl "typed_rstate" typed_reduction_props nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (t2 skolem-const-decl "typed_rstate" typed_reduction_props nil)
    (typed_iareduce const-decl "typed_rstate" typed_rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil)
  (bisimulation_lemma_i-2 nil 3710610531
   ("" (with-labels (skeep* :preds? t) ((err1 err2 dwt iam obj)))
    (("" (expand typed_iareduce obj)
      (("" (with-labels (name t "typed_to_topstate(trS2)") ((tdef)))
        (("" (replace tdef)
          (("" (case "value?(t`state`redex)")
            (("1" (assert)
              (("1" (inst obj 1)
                (("1" (expand typed_reduce_n obj)
                  (("1" (expand typed_reduce_n obj)
                    (("1" (expand typed_reduce obj)
                      (("1"
                        (case-replace
                         "typed_to_topstate(trS1)`state`redex = t`state`redex")
                        (("1" (assert)
                          (("1" (expand iastate_matches)
                            (("1" (flatten)
                              (("1"
                                (expand typed_to_topstate)
                                (("1"
                                  (expand to_topstate)
                                  (("1"
                                    (expand t obj)
                                    (("1"
                                      (expand typed_to_topstate)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand state_matches?)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand to_topstate)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide obj)
                            (("2" (expand typed_to_topstate)
                              (("2"
                                (expand to_topstate)
                                (("2"
                                  (expand t)
                                  (("2"
                                    (expand typed_to_topstate)
                                    (("2"
                                      (expand to_topstate)
                                      (("2"
                                        (expand iastate_matches)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand state_matches?)
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2"
                (with-labels (name nS "make_redex_typed(t)") ((nsdef)))
                (("1" (replace nsdef)
                  (("1"
                    (with-labels (name t2 "typed_to_topstate(trS1)")
                     ((t2def)))
                    (("1" (case "value?(t2`state`redex)")
                      (("1" (postpone) nil nil)
                       ("2" (assert)
                        (("2"
                          (with-labels
                           (name nS2 "make_redex_typed(t2)")
                           ((ns2def)))
                          (("1"
                            (with-labels
                             (case "iastate_matches(nS2, nS)")
                             ((iam2)))
                            (("1" (case "variable?(nS`state`redex)")
                              (("1"
                                (case-replace
                                 "nS`state`redex = nS2`state`redex")
                                (("1"
                                  (case "variable?(nS`state`redex)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst obj 1)
                                      (("1"
                                        (expand typed_reduce_n obj)
                                        (("1"
                                          (expand typed_reduce_n obj)
                                          (("1"
                                            (expand typed_reduce obj)
                                            (("1"
                                              (replace t2def)
                                              (("1"
                                                (replace ns2def)
                                                (("1"
                                                  (expand
                                                   iastate_matches
                                                   (obj iam2))
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (bisimulation_lemma_i-1 nil 3710610292
   ("" (with-labels (skeep* :preds? t) ((dwt iam obj)))
    (("" (expand typed_iareduce obj)
      (("" (with-labels (name t "typed_to_topstate(trS2)") ((tdef)))
        (("" (replace tdef)
          (("" (case "value?(t`state`redex)")
            (("1" (assert)
              (("1" (inst obj 1)
                (("1" (expand typed_reduce_n obj)
                  (("1" (postpone) nil nil)) nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

