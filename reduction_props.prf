(reduction_props
 (decref_induction_TCC1 0
  (decref_induction_TCC1-1 nil 3700406650 ("" (subtype-tcc) nil nil)
   ((value? const-decl "bool" IL nil)
    (domainValue? const-decl "bool" IL nil))
   nil
   (decref_induction subtype "IExpression_adt.nil"
    "(IL.domainValue?(rS`domain))")))
 (decref_induction_TCC2 0
  (decref_induction_TCC2-1 nil 3700406650
   ("" (skeep*)
    (("" (typepred "rS`store(r)`seq(i)") (("" (grind) nil nil)) nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (decref_induction subtype
    "IExpression_adt.refindex(rS`store(r)`seq(i))" "(rS`domain)")))
 (decref_induction_TCC3 0
  (decref_induction_TCC3-1 nil 3700406650
   ("" (skeep* :preds? t)
    (("" (case "rS`domain(refindex(rS`store(r)`seq(i)))")
      (("1" (typepred "rS`count(refindex(rS`store(r)`seq(i)))")
        (("1" (rewrite -1)
          (("1" (split)
            (("1" (expand refcount)
              (("1" (use refcountStore_ref)
                (("1" (grind-with-ext) nil nil)) nil))
              nil)
             ("2" (expand refcount)
              (("2" (use refcountStore_update)
                (("2" (grind-with-ext) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil)
       ("2" (typepred "rS`store(r)`seq(i)") (("2" (grind) nil nil))
        nil)
       ("3" (propax) nil nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (refcountStore_update formula-decl nil rreduction nil)
    (refcountStack const-decl "nat" rreduction nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (refcountStore const-decl "nat" rreduction nil)
    (allcount const-decl "nat" rreduction nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (refcountArray const-decl "nat" rreduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IExpression_ref_extensionality formula-decl nil IExpression_adt
     nil)
    (ref adt-constructor-decl "[nat -> (ref?)]" IExpression_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (refcountStore_ref formula-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (decref_induction subtype
    "rS`count(IExpression_adt.refindex(rS`store(r)`seq(i))) - 1"
    "{j | rreduction.j = rreduction.refcount(rS`domain, rS`store WITH [(r)(seq)(i) := IExpression_adt.nil], rS`stack, rS`redex)(IExpression_adt.refindex(rS`store(r)`seq(i)))}")))
 (decref_induction 0
  (decref_induction-1 nil 3700487573
   ("" (expand decref)
    (("" (lemma decref1_induction)
      (("" (skeep)
        (("" (inst?)
          (("" (split)
            (("1" (skeep*)
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decref1_induction formula-decl nil rreduction nil)
    (IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (pred type-eq-decl nil defined_types nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (decref1_preserves 0
  (decref1_preserves-1 nil 3702906974
   ("" (skeep* :preds? t)
    ((""
      (case "FORALL (rS2, (r2: (rS2`domain)), (i2: upto(rS2`store(r2)`length))):
  rS2`redex = rS`redex AND rS2`stack = rS`stack AND rS2`context = rS`context AND rS2`error = rS`error IMPLIES
  decref1(rS2, r2, i2)`redex = rS`redex AND decref1(rS2, r2, i2)`stack = rS`stack AND decref1(rS2, r2, i2)`context = rS`context AND decref1(rS2, r2, i2)`error = rS`error")
      (("1" (inst?) nil nil)
       ("2" (delete 2)
        (("2" (lemma decref1_induction)
          (("2"
            (inst -1 "LAMBDA rS2: rS2`redex = rS`redex AND
         rS2`stack = rS`stack AND
          rS2`context = rS`context AND rS2`error = rS`error")
            (("2" (split -1)
              (("1" (propax) nil nil)
               ("2" (delete 2)
                (("2" (simplify)
                  (("2" (skeep* :preds? t)
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decref1 def-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))}"
     rreduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (allcountStore const-decl "nat" rreduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (decref1_induction formula-decl nil rreduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (decref1_preserves_redex 0
  (decref1_preserves_redex-1 nil 3702907577
   ("" (skeep*)
    (("" (use decref1_preserves) (("" (assert) nil nil)) nil)) nil)
   ((decref1_preserves formula-decl nil reduction_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (decref1_preserves_stack 0
  (decref1_preserves_stack-1 nil 3702907603
   ("" (skeep*)
    (("" (use decref1_preserves) (("" (flatten) nil nil)) nil)) nil)
   ((decref1_preserves formula-decl nil reduction_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (decref1_preserves_context 0
  (decref1_preserves_context-1 nil 3702907642
   ("" (skeep*)
    (("" (use decref1_preserves) (("" (flatten) nil nil)) nil)) nil)
   ((decref1_preserves formula-decl nil reduction_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (decref1_preserves_error 0
  (decref1_preserves_error-1 nil 3702907649
   ("" (skeep*)
    (("" (use decref1_preserves) (("" (flatten) nil nil)) nil)) nil)
   ((decref1_preserves formula-decl nil reduction_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (decref_preserves 0
  (decref_preserves-3 "" 3710696858
   ("" (expand decref)
    (("" (use decref1_preserves)
      (("" (skeep*)
        (("" (inst?) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((decref1_preserves formula-decl nil reduction_props nil)
    (IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (decref1_preserves_redex formula-decl nil reduction_props nil)
    (decref1_preserves_stack formula-decl nil reduction_props nil)
    (decref1_preserves_context formula-decl nil reduction_props nil)
    (decref1_preserves_error formula-decl nil reduction_props nil)
    (decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)
  (decref_preserves-2 "" 3702904188
   ("" (expand decref)
    (("" (use decref1_preserves)
      (("" (skeep*) (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (decref1_preserves_error formula-decl nil reduction_props nil)
    (decref1_preserves_context formula-decl nil reduction_props nil)
    (decref1_preserves_stack formula-decl nil reduction_props nil)
    (decref1_preserves_redex formula-decl nil reduction_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil) nil
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) nil nil nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) nil (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (decref1_preserves formula-decl nil reduction_props nil))
   shostak)
  (decref_preserves-1 nil 3700406796
   ("" (skeep*)
    (("" (lemma decref_induction)
      ((""
        (inst -1
         "LAMBDA rS2: rS2`redex = rS`redex AND rS2`stack = rS`stack AND rS2`context = rS`context AND rS2`error = rS`error")
        (("" (split -1)
          (("1" (inst -1 rS r i) nil nil)
           ("2" (simplify) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((decref1_preserves formula-decl nil reduction_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (decref_preserves_jdg 0
  (decref_preserves_jdg-1 nil 3700418585
   ("" (skeep*) (("" (use decref_preserves) nil nil)) nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (decref_preserves formula-decl nil reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (decref_preserves_jdg subtype "rreduction.decref(rS, r, t)"
    "{rS2 | rS2`redex = rS`redex AND rS2`stack = rS`stack AND rS2`context = rS`context AND rS2`error = rS`error}")))
 (translate_refs_TCC1 0
  (translate_refs_TCC1-1 nil 3699880315
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil
   (translate_refs termination "translate_refs(translate)(B)" "nil")))
 (translate_refs_TCC2 0
  (translate_refs_TCC2-1 nil 3699880315
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil
   (translate_refs termination "translate_refs(translate)(C)" "nil")))
 (translate_refs_TCC3 0
  (translate_refs_TCC3-1 nil 3699880315 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil
   (translate_refs termination "translate_refs(translate)(B)" "nil")))
 (translate_refs_TCC4 0
  (translate_refs_TCC4-2 "" 3700407020
   ("" (skeep* :preds? t)
    (("" (use pure_contextPure) (("" (grind) nil nil)) nil)) nil)
   ((pure_contextPure formula-decl nil IL nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pure? def-decl "bool" IL nil)
    (contextPure? def-decl "bool" IL nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   shostak
   (translate_refs termination "translate_refs(translate)(C)" "nil"))
  (translate_refs_TCC4-1 nil 3699880315
   ("" (skeep* :preds? t)
    (("" (split)
      (("1" (use pure_contextPure) (("1" (grind) nil nil)) nil)
       ("2" (use pure_refs) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil)
    (contextPure? def-decl "bool" IL nil)
    (pure? def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (pure_contextPure formula-decl nil IL nil))
   nil
   (translate_refs termination "translate_refs(translate)(C)" "nil")))
 (translate_refs_TCC5 0
  (translate_refs_TCC5-1 nil 3699880315 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil
   (translate_refs termination "translate_refs(translate)(B)" "nil")))
 (translate_refs_TCC6 0
  (translate_refs_TCC6-2 "" 3700407052 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   shostak
   (translate_refs termination "translate_refs(translate)(B)" "nil"))
  (translate_refs_TCC6-1 nil 3699880315
   ("" (skeep* :preds? t)
    (("" (split 1)
      (("1" (use pure_contextPure) (("1" (grind) nil nil)) nil)
       ("2" (use pure_refs) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (<< adt-def-decl "(strict_well_founded?[IExpression])"
     IExpression_adt nil))
   nil
   (translate_refs termination "translate_refs(translate)(B)" "nil")))
 (translate_refs_pure_TCC1 0
  (translate_refs_pure_TCC1-2 "" 3700416459
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pure? def-decl "bool" IL nil))
   shostak
   (translate_refs_pure_ subtype "IExpression_adt.ref(translate(r))"
    "(IL.pure?)"))
  (translate_refs_pure_TCC1-1 nil 3700317399
   ("" (skeep*)
    (("" (use pure_contextPure)
      (("" (use pure_refs) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pure? def-decl "bool" IL nil))
   nil
   (translate_refs_pure_ subtype "IExpression_adt.ref(translate(r))"
    "(IL.pure?)")))
 (translate_refs_pure_TCC2 0
  (translate_refs_pure_TCC8-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pure? def-decl "bool" IL nil))
   nil (translate_refs_pure_ subtype "B" "{A | IL.pure?(A)}")))
 (translate_refs_pure_TCC3 0
  (translate_refs_pure_TCC9-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pure? def-decl "bool" IL nil))
   nil
   (translate_refs_pure_ subtype "IExpression_adt.pop(v(translate)(B))"
    "(IL.pure?)")))
 (translate_refs_pure_TCC4 0
  (translate_refs_pure_TCC10-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((pure? def-decl "bool" IL nil)) nil
   (translate_refs_pure_ subtype "B" "{A | IL.pure?(A)}")))
 (translate_refs_pure_TCC5 0
  (translate_refs_pure_TCC11-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pure? def-decl "bool" IL nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil))
   nil
   (translate_refs_pure_ subtype
    "IExpression_adt.release(x, v(translate)(B))" "(IL.pure?)")))
 (translate_refs_pure_TCC6 0
  (translate_refs_pure_TCC2-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pure? def-decl "bool" IL nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil))
   nil (translate_refs_pure_ subtype "B" "{A | IL.pure?(A)}")))
 (translate_refs_pure_TCC7 0
  (translate_refs_pure_TCC3-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((pure? def-decl "bool" IL nil)) nil
   (translate_refs_pure_ subtype "C" "{A | IL.pure?(A)}")))
 (translate_refs_pure_TCC8 0
  (translate_refs_pure_TCC4-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pure? def-decl "bool" IL nil))
   nil
   (translate_refs_pure_ subtype
    "IExpression_adt.letexpr(v(translate)(B), v(translate)(C))"
    "(IL.pure?)")))
 (translate_refs_pure_TCC9 0
  (translate_refs_pure_TCC5-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pure? def-decl "bool" IL nil))
   nil (translate_refs_pure_ subtype "B" "{A | IL.pure?(A)}")))
 (translate_refs_pure_TCC10 0
  (translate_refs_pure_TCC6-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pure? def-decl "bool" IL nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil))
   nil (translate_refs_pure_ subtype "C" "{A | IL.pure?(A)}")))
 (translate_refs_pure_TCC11 0
  (translate_refs_pure_TCC7-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((pure? def-decl "bool" IL nil)) nil
   (translate_refs_pure_ subtype
    "IExpression_adt.ift(x, v(translate)(B), v(translate)(C))"
    "(IL.pure?)")))
 (translate_refs_pure 0
  (translate_refs_pure-1 nil 3700317400
   ("" (induct A)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil)
     ("14" (delete 2)
      (("14" (skeep*)
        (("14" (use pure_contextPure)
          (("14" (use pure_refs) (("14" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pure_contextPure formula-decl nil IL nil)
    (pure_refs formula-decl nil IL nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (IExpression type-decl nil IExpression_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (contextPure? def-decl "bool" IL nil)
    (refs def-decl "bool" IL nil))
   shostak))
 (translate_refs_contextPure_TCC1 0
  (translate_refs_contextPure_TCC1-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((contextPure? def-decl "bool" IL nil)) nil
   (translate_refs_contextPure_ subtype
    "IExpression_adt.ref(translate(r))" "(IL.contextPure?)")))
 (translate_refs_contextPure_TCC2 0
  (translate_refs_contextPure_TCC5-1 "" 3710696932
   ("" (skeep* :preds? t)
    (("" (rewrite pure_contextPure +) (("" (grind) nil nil)) nil)) nil)
   ((pure_contextPure formula-decl nil IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" IL nil))
   shostak
   (translate_refs_contextPure_ subtype "reduction_props.B"
    "{A | IL.contextPure?(reduction_props.A)}"))
  (translate_refs_contextPure_TCC3-1 nil 3700406650
   ("" (skeep* :preds? t)
    (("" (lemma pure_contextPure)
      (("" (inst -1 C) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((pure_contextPure formula-decl nil IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" IL nil))
   nil
   (translate_refs_contextPure_ subtype "C"
    "{A | IL.contextPure?(A)}")))
 (translate_refs_contextPure_TCC3 0
  (translate_refs_contextPure_TCC3-1 "" 3710696880
   ("" (skeep* :preds? t)
    (("" (rewrite pure_contextPure +) (("" (grind) nil nil)) nil)) nil)
   ((pure_contextPure formula-decl nil IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" IL nil))
   shostak
   (translate_refs_contextPure_ subtype "reduction_props.C"
    "{A | IL.contextPure?(reduction_props.A)}"))
  (translate_refs_contextPure_TCC11-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((pure_contextPure formula-decl nil IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" IL nil))
   nil
   (translate_refs_contextPure_ subtype
    "IExpression_adt.release(x, v(translate)(B))"
    "(IL.contextPure?)")))
 (translate_refs_contextPure_TCC4 0
  (translate_refs_contextPure_TCC4-1 "" 3710696912
   ("" (skeep* :preds? t)
    (("" (expand contextPure? +)
      (("" (replace -2)
        (("" (assert)
          (("" (rewrite translate_refs_pure) (("" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contextPure? def-decl "bool" IL nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pure? def-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (translate_refs_pure recursive-judgement-axiom nil reduction_props
     nil))
   shostak
   (translate_refs_contextPure_ subtype
    "IExpression_adt.letexpr(reduction_props.v(reduction_props.translate)(reduction_props.B), reduction_props.v(reduction_props.translate)(reduction_props.C))"
    "(IL.contextPure?)"))
  (translate_refs_contextPure_TCC2-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((contextPure? def-decl "bool" IL nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pure? def-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (translate_refs_pure recursive-judgement-axiom nil reduction_props
     nil))
   nil
   (translate_refs_contextPure_ subtype "B"
    "{A | IL.contextPure?(A)}")))
 (translate_refs_contextPure_TCC5 0
  (translate_refs_contextPure_TCC5-1 "" 3710698909
   ("" (skeep* :preds? t)
    (("" (rewrite pure_contextPure +) (("" (grind) nil nil)) nil)) nil)
   nil shostak
   (translate_refs_contextPure_ subtype "reduction_props.B"
    "{A | IL.contextPure?(reduction_props.A)}"))
  (translate_refs_contextPure_TCC8-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((pure_contextPure formula-decl nil IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" IL nil))
   nil
   (translate_refs_contextPure_ subtype "B"
    "{A | IL.contextPure?(A)}")))
 (translate_refs_contextPure_TCC6 0
  (translate_refs_contextPure_TCC6-1 "" 3710696945
   ("" (skeep* :preds? t)
    (("" (rewrite pure_contextPure +) (("" (grind) nil nil)) nil)) nil)
   ((pure_contextPure formula-decl nil IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" IL nil))
   shostak
   (translate_refs_contextPure_ subtype "reduction_props.C"
    "{A | IL.contextPure?(reduction_props.A)}"))
  (translate_refs_contextPure_TCC4-1 nil 3700406650
   ("" (skeep* :preds? t)
    (("" (grind) (("" (use translate_refs_pure) nil nil)) nil)) nil)
   ((pure_contextPure formula-decl nil IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" IL nil))
   nil
   (translate_refs_contextPure_ subtype
    "IExpression_adt.letexpr(v(translate)(B), v(translate)(C))"
    "(IL.contextPure?)")))
 (translate_refs_contextPure_TCC7 0
  (translate_refs_contextPure_TCC9-1 nil 3700406650
   ("" (skeep* :preds? t)
    (("" (expand contextPure? +)
      (("" (replace -3)
        (("" (assert)
          (("" (rewrite translate_refs_pure)
            (("1" (rewrite translate_refs_pure) (("1" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contextPure? def-decl "bool" IL nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pure? def-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (translate_refs_pure recursive-judgement-axiom nil reduction_props
     nil))
   nil
   (translate_refs_contextPure_ subtype
    "IExpression_adt.pop(v(translate)(B))" "(IL.contextPure?)")))
 (translate_refs_contextPure_TCC8 0
  (translate_refs_contextPure_TCC10-1 nil 3700406650
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (contextPure? def-decl "bool" IL nil))
   nil
   (translate_refs_contextPure_ subtype "B"
    "{A | IL.contextPure?(A)}")))
 (translate_refs_contextPure_TCC9 0
  (translate_refs_contextPure_TCC5-1 nil 3700406650
   ("" (skeep* :preds? t)
    (("" (expand contextPure? +)
      (("" (replace -3)
        (("" (assert)
          (("" (rewrite translate_refs_pure)
            (("1" (rewrite translate_refs_pure) (("1" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contextPure? def-decl "bool" IL nil)) nil
   (translate_refs_contextPure_ subtype "B"
    "{A | IL.contextPure?(A)}")))
 (translate_refs_contextPure_TCC10 0
  (translate_refs_contextPure_TCC6-1 nil 3700406650
   ("" (skeep* :preds? t)
    (("" (lemma pure_contextPure) (("" (grind) nil nil)) nil)) nil)
   ((pure_contextPure formula-decl nil IL nil)
    (contextPure? def-decl "bool" IL nil))
   nil
   (translate_refs_contextPure_ subtype "C"
    "{A | IL.contextPure?(A)}")))
 (translate_refs_contextPure_TCC11 0
  (translate_refs_contextPure_TCC7-1 nil 3700406650
   ("" (skeep* :preds? t)
    (("" (recursive-judgement-tcc)
      (("1" (use translate_refs_pure) nil nil)
       ("2" (use translate_refs_pure) nil nil))
      nil))
    nil)
   ((contextPure? def-decl "bool" IL nil)) nil
   (translate_refs_contextPure_ subtype
    "IExpression_adt.ift(x, v(translate)(B), v(translate)(C))"
    "(IL.contextPure?)")))
 (translate_refs_value 0
  (translate_refs_value-1 nil 3700406650
   ("" (judgement-tcc)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((translate_refs def-decl "IExpression" reduction_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil))
   nil
   (translate_refs_value subtype "translate_refs(translate)(A)"
    "(IL.value?)")))
 (translate_refs_atom 0
  (translate_refs_atom-1 nil 3700406650
   ("" (judgement-tcc)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil))
    nil)
   ((translate_refs def-decl "IExpression" reduction_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (atom? const-decl "bool" IL nil) (value? const-decl "bool" IL nil))
   nil
   (translate_refs_atom subtype "translate_refs(translate)(A)"
    "(IL.atom?)")))
 (translate_refs_pure_eq 0
  (translate_refs_pure_eq-1 nil 3700496981
   ("" (induct-and-simplify A) nil nil)
   ((IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (IExpression_induction formula-decl nil IExpression_adt nil))
   shostak))
 (translate_refs_eq 0
  (translate_refs_eq-1 nil 3700416693
   ("" (induct A)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep* :preds? t)
      (("5" (expand translate_refs 1)
        (("5" (decompose-equality)
          (("1" (grind) nil nil)
           ("2" (rewrite -2)
            (("1" (use pure_contextPure) (("1" (grind) nil nil)) nil)
             ("2" (use pure_refs) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep* :preds? t)
      (("6" (expand translate_refs 1)
        (("6" (decompose-equality)
          (("1" (grind)
            (("1" (use pure_contextPure) (("1" (grind) nil nil)) nil))
            nil)
           ("2" (grind)
            (("2" (use pure_contextPure) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil))
    nil)
   ((ift adt-constructor-decl
     "[[(variable?), IExpression, IExpression] -> (ift?)]"
     IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (IExpression_ift_extensionality formula-decl nil IExpression_adt
     nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (letexpr adt-constructor-decl
     "[[IExpression, IExpression] -> (letexpr?)]" IExpression_adt nil)
    (IExpression_letexpr_extensionality formula-decl nil
     IExpression_adt nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (pure_refs formula-decl nil IL nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pure_contextPure formula-decl nil IL nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (refs def-decl "bool" IL nil) (contextPure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil))
   shostak))
 (translate_refs_refs 0
  (translate_refs_refs-1 nil 3700586867
   ("" (induct-and-simplify A) nil nil)
   ((IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (IExpression_induction formula-decl nil IExpression_adt nil))
   shostak))
 (value_translate_rev_ref 0
  (value_translate_rev_ref-1 nil 3700923241 ("" (grind) nil nil)
   ((translate_refs def-decl "IExpression" reduction_props nil)
    (value? const-decl "bool" IL nil))
   shostak))
 (value_translate_rev_constant 0
  (value_translate_rev_constant-1 nil 3700923245 ("" (grind) nil nil)
   ((translate_refs def-decl "IExpression" reduction_props nil)
    (value? const-decl "bool" IL nil))
   shostak))
 (value_translate_rev_nil 0
  (value_translate_rev_nil-1 nil 3700923250 ("" (grind) nil nil)
   ((translate_refs def-decl "IExpression" reduction_props nil)
    (value? const-decl "bool" IL nil))
   shostak))
 (translate_fill 0
  (translate_fill-1 nil 3701523719
   ("" (induct K)
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand fill 1)
        (("2" (expand translate_refs 1 1)
          (("2" (expand cpure? -2)
            (("2" (flatten)
              (("2" (lemma translate_refs_pure_eq)
                (("2" (inst -1 letc2_var translate)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil))
    nil)
   ((translate_refs_pure_eq formula-decl nil reduction_props nil)
    (IContext_induction formula-decl nil IL nil)
    (fill def-decl "IExpression" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil))
   shostak))
 (translate_vars 0
  (translate_vars-1 nil 3701541869
   ("" (induct A)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil))
    nil)
   ((nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil))
   shostak))
 (translate_popDepth 0
  (translate_popDepth-1 nil 3701541934
   ("" (induct-and-simplify A) nil nil)
   ((IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (popDepth def-decl "nat" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (stack_matches_TCC1 0
  (stack_matches_TCC1-1 nil 3699880315 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (stack_matches subtype "S`length - i - 1" "below[S`length]")))
 (stack_matches_TCC2 0
  (stack_matches_TCC2-2 "" 3700417085 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (stack_matches subtype "S1`length - i - 1" "below[S1`length]"))
  (stack_matches_TCC2-1 nil 3699880315
   ("" (skeep* :preds? t)
    (("" (typepred "S`seq(S`length -i-1)")
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (stack_matches subtype "S1`length - i - 1" "below[S1`length]")))
 (store_matches_TCC1 0
  (store_matches_TCC1-2 "" 3700417113 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak
   (store_matches subtype "j" "below[store1(translate(r))`length]"))
  (store_matches_TCC1-1 nil 3699880315
   ("" (skeep* :preds? t)
    (("" (typepred "store(r)`seq(j)") (("" (grind) nil nil)) nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (store_matches subtype "j" "below[store1(translate(r))`length]")))
 (state_matches_eq 0
  (state_matches_eq-1 nil 3700587734
   ("" (with-labels (skeep) ((stm treq obj)))
    (("" (expand state_matches)
      (("" (with-labels (flatten) ((err trr unm stam stom)))
        (("" (split)
          (("1" (propax) nil nil)
           ("2"
            (lemma translate_refs_eq
             (A "unmark(rS`redex)" translate translate translate2
              translate2))
            (("2" (split)
              (("1" (grind) nil nil)
               ("2" (use unmark_contextPure) nil nil)
               ("3" (skeep)
                (("3" (inst treq i)
                  (("1" (split)
                    (("1" (propax) nil nil)
                     ("2" (typepred "rS`count(i)")
                      (("2" (rewrite -1)
                        (("2" (expand refcount)
                          (("2" (expand refcountExpr)
                            (("2" (rewrite unmark_refs)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "rS`redex")
                    (("2" (rewrite unmark_refs) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (propax) nil nil)
           ("4" (expand stack_matches)
            (("4" (flatten)
              (("4" (split)
                (("1" (propax) nil nil)
                 ("2" (skeep)
                  (("2" (inst?)
                    (("2" (ground)
                      (("2"
                        (lemma translate_refs_eq
                         (A "rS`stack`seq(rS`stack`length - 1 - i)"
                          translate translate translate2 translate2))
                        (("2" (split)
                          (("1" (grind) nil nil)
                           ("2"
                            (typepred
                             "rS`stack`seq(rS`stack`length - 1 - i)")
                            (("2" (grind) nil nil)) nil)
                           ("3" (skeep)
                            (("3" (inst treq i_1)
                              (("1"
                                (split treq)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (typepred "rS`count(i_1)")
                                  (("2"
                                    (rewrite -1)
                                    (("2"
                                      (expand refcount)
                                      (("2"
                                        (expand refcountStack)
                                        (("2"
                                          (lemma
                                           "count_elem[(value?)]")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst -1 "ref(i_1)")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (inst
                                                   1
                                                   "rS`stack`length - i - 1")
                                                  (("1"
                                                    (typepred
                                                     "rS`stack`seq(rS`stack`length - i - 1)")
                                                    (("1"
                                                      (grind-with-ext)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred
                                 "rS`stack`seq(rS`stack`length - 1 - i)")
                                (("2"
                                  (typepred "rS`stack")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (expand store_matches)
            (("5" (skeep)
              (("5" (inst stom r)
                (("5" (case-replace "translate2(r) = translate(r)")
                  (("1" (assert)
                    (("1" (ground)
                      (("1" (skeep)
                        (("1" (inst stom j)
                          (("1"
                            (lemma translate_refs_eq
                             (A "rS`store(r)`seq(j)" translate
                              translate translate2 translate2))
                            (("1" (split -1)
                              (("1" (grind) nil nil)
                               ("2"
                                (typepred "rS`store(r)`seq(j)")
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (inst treq i)
                                  (("1"
                                    (split treq)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (typepred "rS`count(i)")
                                      (("2"
                                        (rewrite -1)
                                        (("2"
                                          (expand refcount)
                                          (("2"
                                            (use refcountStore_ref)
                                            (("2"
                                              (split -1)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (typepred
                                                 "rS`store(r)`seq(j)")
                                                (("2"
                                                  (grind-with-ext)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "rS`store(r)`seq(j)")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst treq r) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches const-decl "boolean" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure recursive-judgement-axiom nil preprocess nil)
    (rS skolem-const-decl "rstate" reduction_props nil)
    (i skolem-const-decl "nat" reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (unmark_refs formula-decl nil preprocess nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (count const-decl "nat" finseq_theorems nil)
    (refcountStack const-decl "nat" rreduction nil)
    (refcountArray const-decl "nat" rreduction nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (allcount const-decl "nat" rreduction nil)
    (refcountStore const-decl "nat" rreduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (translate_refs_eq formula-decl nil reduction_props nil)
    (IExpression type-decl nil IExpression_adt nil)
    (unmark def-decl "IExpression" preprocess nil)
    (IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (estate type-eq-decl nil reduction nil)
    (eS skolem-const-decl "estate" reduction_props nil)
    (i_1 skolem-const-decl "nat" reduction_props nil)
    (count_elem formula-decl nil finseq_theorems nil)
    (ref adt-constructor-decl "[nat -> (ref?)]" IExpression_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl
       "(union(cvars(rS`redex), bumpn(cvars(rS`context), popDepth(rS`redex))))"
       reduction_props nil)
    (IExpression_ref_extensionality formula-decl nil IExpression_adt
     nil)
    (count def-decl "nat" finseq_theorems nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (head const-decl "T" finseq_theorems nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (union const-decl "set" sets nil)
    (r skolem-const-decl "(rS`domain)" reduction_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (i skolem-const-decl "nat" reduction_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (j skolem-const-decl "below(rS`store(r)`length)" reduction_props
     nil)
    (refcountStore_ref formula-decl nil rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (match_domain 0
  (match_domain-1 nil 3700583978
   ("" (with-labels (skeep) ((ndr stm domr countr obj)))
    (("" (expand state_matches)
      (("" (with-labels (flatten) ((err trr unm stam stom)))
        (("" (typepred "rS`count(r)")
          (("" (rewrite -1)
            (("" (expand refcount)
              (("" (case "refcountExpr(rS`redex)(r) = 0")
                (("1" (case "refcountStack(rS`stack)(r) = 0")
                  (("1"
                    (case "refcountStore(rS`domain, rS`store)(r) = 0")
                    (("1" (grind) nil nil)
                     ("2" (expand refcountStore)
                      (("2" (expand allcount)
                        (("2" (rewrite sigma_zero)
                          (("2" (skeep)
                            (("2" (expand refcountArray)
                              (("2"
                                (rewrite count_none_zero)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand store_matches)
                                    (("2"
                                      (inst stom r)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "rS`count(r)")
                                          (("2"
                                            (rewrite -1)
                                            (("2"
                                              (expand refcount)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand refcountStack)
                    (("2" (rewrite count_none_zero)
                      (("2" (skeep)
                        (("2" (expand stack_matches)
                          (("2" (with-labels (flatten) ((staml stamr)))
                            (("2"
                              (inst stamr "rS`stack`length - 1 - i")
                              (("1"
                                (simplify)
                                (("1"
                                  (typepred "eS`stack")
                                  (("1"
                                    (expand every)
                                    (("1"
                                      (inst -1 i)
                                      (("1"
                                        (replace staml)
                                        (("1"
                                          (simplify)
                                          (("1"
                                            (replace stamr :dir RL)
                                            (("1"
                                              (case-replace
                                               "rS`stack`seq(i) = ref(r)")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (grind-with-ext)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred i)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand noDanglingRefs?)
                                (("2"
                                  (inst ndr "rS`stack`length -1 - i")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand refcountExpr)
                  (("2" (ground)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (case "refs(eS`redex)(translate(r))")
                          (("1" (typepred "eS`redex")
                            (("1" (grind) nil nil)) nil)
                           ("2" (use translate_refs_refs)
                            (("2" (split -1)
                              (("1" (grind) nil nil)
                               ("2" (rewrite unmark_refs) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches const-decl "boolean" reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unmark_refs formula-decl nil preprocess nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs_refs formula-decl nil reduction_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (refcountStack const-decl "nat" rreduction nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma_zero formula-decl nil finite_set_theorems nil)
    (count def-decl "nat" finseq_theorems nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (head const-decl "T" finseq_theorems nil)
    (count_none_zero formula-decl nil finseq_theorems nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (allcount const-decl "nat" rreduction nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (refcountArray const-decl "nat" rreduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (refcountStore const-decl "nat" rreduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (rS skolem-const-decl "rstate" reduction_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(rS`stack`length)" reduction_props nil)
    (estate type-eq-decl nil reduction nil)
    (eS skolem-const-decl "estate" reduction_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ref adt-constructor-decl "[nat -> (ref?)]" IExpression_adt nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (stack_stillmatch_TCC1 0
  (stack_stillmatch_TCC1-1 nil 3699975962 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (stack_stillmatch subtype "S`length - i - 1" "below[S`length]")))
 (stack_stillmatch_TCC2 0
  (stack_stillmatch_TCC2-1 nil 3699975962 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (stack_stillmatch subtype "S2`length - i - 1" "below[S2`length]")))
 (stack_stillmatch 0
  (stack_stillmatch-2 "" 3700417311
   ("" (skeep*)
    (("" (expand stack_matches)
      (("" (split)
        (("1" (assert) nil nil)
         ("2" (flatten)
          (("2" (skeep)
            (("2" (inst?)
              (("2" (inst?)
                (("2" (flatten)
                  (("2" (split)
                    (("1" (grind) nil nil)
                     ("2" (typepred "S2`seq(S2`length - 1 - i)")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Stack type-eq-decl nil IL nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)
  (stack_stillmatch-1 nil 3699979922
   ("" (skeep* :preds? t)
    (("" (simplify :let-reduce? t)
      (("" (skeep* :preds? t)
        (("" (expand stack_matches)
          (("" (split)
            (("1" (grind) nil nil)
             ("2" (skeep* :preds? t)
              (("2" (split)
                (("1" (grind) nil nil)
                 ("2" (inst -5 i)
                  (("2" (flatten)
                    (("2" (replace -6 :dir RL)
                      (("2" (replace -4 :dir RL)
                        (("2" (inst -9 i)
                          (("2" (flatten)
                            (("2" (replace -10 :dir RL)
                              (("2"
                                (lemma translate_refs_restrict)
                                (("2"
                                  (inst
                                   -1
                                   "rS`stack`seq(rS`stack`length - 1 - i)"
                                   "extend[nat, (rS`domain), bool, FALSE]
                          ({r: (rS`domain) | rS`count(r) > 0})"
                                   "eS`domain"
                                   "extend[nat, (rS2`domain), bool, FALSE]
                         ({r: (rS2`domain) | rS2`count(r) > 0})")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (rewrite -1)
                                      (("1"
                                        (case-replace
                                         "translate2 = lambda (i_1:
                                (extend[nat, (rS2`domain), bool, FALSE]
                                     ({r: (rS2`domain) |
                                       rS2`count(r) > 0}))):
                        translate(i_1)")
                                        (("1"
                                          (delete 2)
                                          (("1"
                                            (decompose-equality)
                                            (("1" (grind) nil nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (delete 2)
                                      (("2"
                                        (skeep :preds? t)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (delete 2)
                                      (("3"
                                        (skeep*)
                                        (("3"
                                          (typepred "rS2`count(i_1)")
                                          (("1"
                                            (expand extend)
                                            (("1"
                                              (rewrite -1)
                                              (("1"
                                                (expand refcount)
                                                (("1"
                                                  (expand
                                                   refcountStack)
                                                  (("1"
                                                    (use
                                                     "count_elem[(value?)]")
                                                    (("1"
                                                      (typepred
                                                       "rS2`stack")
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (case
                                                           "rS2`domain(i_1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "rS`stack`seq(rS`stack`length - 1 - i)")
                                                            (("1"
                                                              (typepred
                                                               "rS`stack")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (typepred
                                                           "rS`stack`seq(rS`stack`length - 1 - i)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (typepred
                                                           "rS`stack`seq(rS`stack`length - 1 - i)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred
                                             "rS`stack`seq(rS`stack`length - 1 - i)")
                                            (("1"
                                              (typepred "rS`stack")
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (typepred
                                       "rS`stack`seq(rS`stack`length - 1 - i)")
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_elem formula-decl nil finseq_theorems nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (count def-decl "nat" finseq_theorems nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (head const-decl "T" finseq_theorems nil)
    (count const-decl "nat" finseq_theorems nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (refcountArray const-decl "nat" rreduction nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (allcount const-decl "nat" rreduction nil)
    (refcountStore const-decl "nat" rreduction nil)
    (refcountStack const-decl "nat" rreduction nil)
    (estate type-eq-decl nil reduction nil)
    (> const-decl "bool" reals nil) (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (maybe_clear_stack_at_match 0
  (maybe_clear_stack_at_match-1 nil 3706278826
   ("" (skeep* :preds? t)
    (("" (lemma stack_stillmatch)
      (("" (inst -1 _ S1 _ X translate translate)
        (("" (inst? -1 :where +)
          (("" (inst?)
            (("" (split)
              (("1" (propax) nil nil) ("2" (assert) nil nil)
               ("3" (propax) nil nil)
               ("4" (skeep)
                (("4" (assert)
                  (("4" (expand maybe_clear_stack_at)
                    (("4" (lift-if)
                      (("4" (lift-if)
                        (("4" (typepred i) (("4" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((stack_stillmatch formula-decl nil reduction_props nil)
    (domainValue? const-decl "bool" IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Store type-eq-decl nil reduction nil)
    (every const-decl "bool" finseq_theorems nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (refcount const-decl "nat" rreduction nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (< const-decl "bool" reals nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (marked adt-accessor-decl "[(variable?) -> bool]" IExpression_adt
     nil)
    (maybe_clear_stack_at const-decl "{((newStack: Stack
       | every(domainValue?(dom))(newStack) AND
          newStack`length = S`length)),
 ((newcnt: [i: (dom) -> {j | j = refcount(dom, str, newStack, A)(i)}])) |
   FORALL (i: below(S`length)):
     ref?(newStack`seq(newStack`length - 1 - i)) IMPLIES
      ref?(S`seq(S`length - 1 - i)) AND NOT (i = index(x) AND marked(x))}"
     rreduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "(value?)" IL nil)
    (injective? const-decl "bool" functions nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (maybe_clear_stack_at_count 0
  (maybe_clear_stack_at_count-1 nil 3706280333
   ("" (skeep* :preds? t)
    (("" (expand maybe_clear_stack_at) (("" (grind) nil nil)) nil))
    nil)
   ((maybe_clear_stack_at const-decl "{((newStack: Stack
       | every(domainValue?(dom))(newStack) AND
          newStack`length = S`length)),
 ((newcnt: [i: (dom) -> {j | j = refcount(dom, str, newStack, A)(i)}])) |
   FORALL (i: below(S`length)):
     ref?(newStack`seq(newStack`length - 1 - i)) IMPLIES
      ref?(S`seq(S`length - 1 - i)) AND NOT (i = index(x) AND marked(x))}"
     rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (get const-decl "(value?)" IL nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (update_store_count 0
  (update_store_count-1 nil 3706280555
   ("" (skeep* :preds? t)
    (("" (expand update_store)
      (("" (assert)
        (("" (lift-if)
          (("" (split)
            (("1" (flatten)
              (("1" (split)
                (("1" (flatten)
                  (("1" (apply-eta nv "(ref?)") (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((update_store const-decl "{((newstr: Store(dom))),
 ((newcnt: [i: (dom) -> {j | j = refcount(dom, newstr, S, A)(i)}])) |
   newstr = str WITH [(r)`seq(i) := nv]}" rreduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (value? const-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (IExpression_ref_eta formula-decl nil IExpression_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (count_copy_count_TCC1 0
  (count_copy_count_TCC1-1 nil 3706282145 ("" (subtype-tcc) nil nil)
   nil nil (count_copy_count subtype "V`length" "upto(V`length)")))
 (count_copy_count 0
  (count_copy_count-1 nil 3706282145
   ("" (skeep* :preds? t)
    (("" (rewrite count_copy_def) (("" (assert) nil nil)) nil)) nil)
   ((count_copy_def formula-decl nil rreduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (store_stillmatch_TCC1 0
  (store_stillmatch_TCC1-1 nil 3700406650 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (store_stillmatch subtype "r" "(rS2`domain)")))
 (store_stillmatch_TCC2 0
  (store_stillmatch_TCC2-1 nil 3700406650 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (store_stillmatch subtype "r" "(rS2`domain)")))
 (store_stillmatch 0
  (store_stillmatch-1 nil 3700419320
   ("" (skeep* :preds? t)
    (("" (expand store_matches)
      (("" (skeep* :preds? t)
        (("" (inst?)
          (("1" (inst?)
            (("1" (inst?)
              (("1" (assert)
                (("1" (flatten)
                  (("1" (split)
                    (("1" (propax) nil nil) ("2" (grind) nil nil)
                     ("3" (skeep)
                      (("3" (inst?)
                        (("3" (typepred "rS`store(r)`seq(j)")
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((store_matches const-decl "boolean" reduction_props nil)
    (r skolem-const-decl "(rS2`domain)" reduction_props nil)
    (rS2 skolem-const-decl "rstate" reduction_props nil)
    (rS skolem-const-decl "rstate" reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (stack_subset_match 0
  (stack_subset_match-1 nil 3699982369
   ("" (skeep* :preds? t)
    (("" (expand stack_matches)
      (("" (flatten)
        (("" (split)
          (("1" (propax) nil nil)
           ("2" (skeep :preds? t)
            (("2" (inst?) (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (i skolem-const-decl "(X)" reduction_props nil)
    (X skolem-const-decl "finite_set[nat]" reduction_props nil)
    (Y skolem-const-decl "finite_set[nat]" reduction_props nil))
   shostak))
 (stack_subvar_match 0
  (stack_subvar_match-1 nil 3700491709
   (""
    (with-labels (skeep*)
     ((stk_eq ctx_eq depth1 depth2 vars_imp stam obj)))
    (("" (lemma stack_subset_match)
      ((""
        (inst -1 "rS`stack" "eS`stack" "union(cvars(rS2`redex),
                          bumpn(cvars(rS2`context), popDepth(rS2`redex)))"
         " union(cvars(rS`redex),
                          bumpn(cvars(rS`context), popDepth(rS`redex)))"
         translate)
        (("" (split)
          (("1" (grind) nil nil)
           ("2" (delete obj)
            (("2" (skeep* :preds? t)
              (("2" (expand union)
                (("2" (expand member)
                  (("2" (inst vars_imp i)
                    (("2" (rewrite cvars_vars)
                      (("2" (rewrite cvars_vars)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((stack_subset_match formula-decl nil reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (cvars_vars formula-decl nil preprocess nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (union const-decl "set" sets nil)
    (estate type-eq-decl nil reduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (Stack type-eq-decl nil IL nil)
    (value? const-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (state_error_match 0
  (state_error_match-1 nil 3700837607
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil))
   shostak))
 (top_releases_ct_fill 0
  (top_releases_ct_fill-1 nil 3699899104
   ("" (induct K)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((IContext_induction formula-decl nil IL nil)
    (fill def-decl "IExpression" IL nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil))
   shostak))
 (top_releases_build_redex 0
  (top_releases_build_redex-1 nil 3699900232
   ("" (induct-and-simplify A) nil nil)
   ((IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (releaseRedex? const-decl "bool" IL nil)
    (IContext type-decl nil IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fill def-decl "IExpression" IL nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (value? const-decl "bool" IL nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (top_release_reduce_TCC1 0
  (top_release_reduce_TCC1-1 nil 3701461661
   ("" (skeep)
    (("" (case "top_releases_ct(to_topstate(grS)`redex) > 0")
      (("1" (name-replace "A" "to_topstate(grS)`redex")
        (("1" (grind) nil nil)) nil)
       ("2" (expand to_topstate)
        (("2" (rewrite top_releases_ct_fill) nil nil)) nil))
      nil))
    nil)
   ((goodrstate type-eq-decl nil reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (IExpression type-decl nil IExpression_adt nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (A skolem-const-decl "{A |
        (FORALL i: refs(A)(i) IMPLIES to_topstate(grS)`domain(i))
    AND (FORALL i:
           vars(A)(i) IMPLIES
            i + popDepth(A) < to_topstate(grS)`stack`length)
    AND (FORALL i:
           vars(to_topstate(grS)`context)(i) IMPLIES
            i + popDepth(A) + popDepth(to_topstate(grS)`context) <
             to_topstate(grS)`stack`length)
    AND (popDepth(A) + popDepth(to_topstate(grS)`context) <=
          to_topstate(grS)`stack`length)
    AND contextPure?(A) AND (mark(cvars(to_topstate(grS)`context))(A) = A)}"
     reduction_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (top_releases_ct_fill formula-decl nil reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (top_release_reduce subtype "rreduction.to_topstate(grS)"
    "{t: rreduction.rtopstate | NOT IL.value?(t`redex)}")))
 (top_release_reduce_TCC2 0
  (top_release_reduce_TCC2-1 nil 3701461661
   ("" (skeep)
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (case "releaseRedex?(make_redex(to_topstate(grS))`redex)")
        (("1" (typepred "make_redex(to_topstate(grS))")
          (("1" (grind) nil nil)) nil)
         ("2" (lemma top_releases_build_redex)
          (("2" (inst -1 "to_topstate(grS)`redex")
            (("2" (case "top_releases_ct(to_topstate(grS)`redex) > 0")
              (("1" (grind) nil nil)
               ("2" (expand to_topstate)
                (("2" (rewrite top_releases_ct_fill) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma make_redex_ndr)
        (("3" (inst?)
          (("3" (split)
            (("1" (lemma to_topstate_dangling) (("1" (inst?) nil nil))
              nil)
             ("2" (case "top_releases_ct(to_topstate(grS)`redex) > 0")
              (("1" (name-replace A "to_topstate(grS)`redex")
                (("1" (hide-all-but (-1 -2)) (("1" (grind) nil nil))
                  nil))
                nil)
               ("2" (expand to_topstate)
                (("2" (rewrite top_releases_ct_fill) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((to_topstate const-decl "rtopstate" rreduction nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (top_releases_build_redex formula-decl nil reduction_props nil)
    (> const-decl "bool" reals nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (top_releases_ct_fill formula-decl nil reduction_props nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (popRedex? const-decl "bool" IL nil)
    (newrefRedex? const-decl "bool" IL nil)
    (newintRedex? const-decl "bool" IL nil)
    (lookupRedex? const-decl "bool" IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (iftRedex? const-decl "bool" IL nil)
    (applyRedex? const-decl "bool" IL nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (letRedex? const-decl "bool" IL nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (releaseRedex? const-decl "bool" IL nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pureRedex? const-decl "bool" IL nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (to_topstate_dangling judgement-tcc nil rreduction nil)
    (make_redex_ndr judgement-tcc nil rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (top_release_reduce subtype
    "rreduction.make_redex(rreduction.to_topstate(grS))"
    "{grS | IL.pureReleaseRedex?(rreduction.grS`redex) AND rreduction.noDanglingRefs?(rreduction.grS)}")))
 (top_release_reduce 0
  (top_release_reduce-1 nil 3701541851
   ("" (skeep)
    (("" (case "NOT atom?(to_topstate(grS)`redex)")
      (("1" (expand reduce)
        (("1" (name-replace "nS" "make_redex(to_topstate(grS))")
          (("1" (case "release?(nS`redex)")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (expand nS)
              (("2" (expand make_redex)
                (("2" (delete 3)
                  (("2" (lemma top_releases_build_redex)
                    (("2" (inst -1 "to_topstate(grS)`redex")
                      (("2" (expand to_topstate)
                        (("2" (rewrite top_releases_ct_fill)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "top_releases_ct(to_topstate(grS)`redex) > 0")
        (("1" (name-replace A "to_topstate(grS)`redex")
          (("1" (hide-all-but (-1 -2)) (("1" (grind) nil nil)) nil))
          nil)
         ("2" (expand to_topstate)
          (("2" (rewrite top_releases_ct_fill) nil nil)) nil))
        nil))
      nil))
    nil)
   ((goodrstate type-eq-decl nil reduction_props nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (atom? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (pureRedex? const-decl "bool" IL nil)
    (nS skolem-const-decl "{rS | pureRedex?(rS`redex)}" reduction_props
     nil)
    (top_releases_ct_fill formula-decl nil reduction_props nil)
    (releaseRedex? const-decl "bool" IL nil)
    (top_releases_build_redex formula-decl nil reduction_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (releaseReduce const-decl "rstate" rreduction nil)
    (decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (popRedex? const-decl "bool" IL nil)
    (newrefRedex? const-decl "bool" IL nil)
    (newintRedex? const-decl "bool" IL nil)
    (lookupRedex? const-decl "bool" IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (iftRedex? const-decl "bool" IL nil)
    (applyRedex? const-decl "bool" IL nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (letRedex? const-decl "bool" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (reduce const-decl "rstate" rreduction nil)
    (> const-decl "bool" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (top_releases_reduce 0
  (top_releases_reduce-1 nil 3699900446
   ("" (with-labels (skeep) ((ndr topr obj)))
    (("" (rewrite top_release_reduce)
      ((""
        (case-replace
         "top_releases_ct(grS`redex) = top_releases_ct(make_redex(to_topstate(grS))`redex)")
        (("1" (name-replace nS "make_redex(to_topstate(grS))")
          (("1"
            (case-replace
             "releaseReduce(D)(nS)`redex = rexpr(nS`redex)")
            (("1" (apply-eta "nS`redex" "(release?)")
              (("1" (replace -1 :dir RL)
                (("1" (expand top_releases_ct obj 2)
                  (("1" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (delete obj)
              (("2" (expand releaseReduce)
                (("2" (lift-if) (("2" (grind) nil nil)) nil)) nil))
              nil)
             ("3" (delete obj)
              (("3" (lemma top_releases_build_redex)
                (("3" (inst -1 "to_topstate(grS)`redex")
                  (("3" (expand nS)
                    (("3" (expand make_redex)
                      (("3" (expand to_topstate)
                        (("3" (rewrite top_releases_ct_fill)
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (case-replace
           "top_releases_ct(grS`redex) = top_releases_ct(to_topstate(grS)`redex)")
          (("1" (expand make_redex)
            (("1" (delete obj)
              (("1" (typepred "buildRedex(to_topstate(grS)`redex)")
                (("1" (replace -1 :dir RL)
                  (("1" (rewrite top_releases_ct_fill)
                    (("1" (rewrite -1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand to_topstate)
            (("2" (rewrite top_releases_ct_fill) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((top_release_reduce formula-decl nil reduction_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (refs def-decl "bool" IL nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (fill def-decl "IExpression" IL nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (top_releases_ct_fill formula-decl nil reduction_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (releaseRedex? const-decl "bool" IL nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nS skolem-const-decl "{rS | pureRedex?(rS`redex)}" reduction_props
     nil)
    (top_releases_build_redex formula-decl nil reduction_props nil)
    (decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (decref1_preserves_redex formula-decl nil reduction_props nil)
    (decref_preserves_jdg application-judgement "{rS2 |
   rS2`redex = rS`redex AND
    rS2`stack = rS`stack AND
     rS2`context = rS`context AND rS2`error = rS`error}"
     reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IExpression_release_eta formula-decl nil IExpression_adt nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (releaseReduce const-decl "rstate" rreduction nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (rexpr adt-accessor-decl "[(release?) -> IExpression]"
     IExpression_adt nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (pureRedex? const-decl "bool" IL nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (decref1_stillmatch 0
  (decref1_stillmatch-1 nil 3706287118
   ("" (skeep* :preds? t)
    (("" (lemma decref1_induction)
      (("" (inst -1 "LAMBDA rS2: state_matches(eS, rS2)(translate)")
        (("" (split)
          (("1" (inst?) (("1" (prop) nil nil)) nil)
           ("2" (skolem 1 ("rS2" "r2" "i2"))
            (("2" (flatten)
              (("2" (hide-all-but (-1 -2 -3 1))
                (("2" (expand state_matches)
                  (("2" (flatten)
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (expand store_matches)
                        (("5" (skeep :preds? t)
                          (("5" (inst?)
                            (("5" (case-replace "r!1 = r2")
                              (("1" (grind) nil nil)
                               ("2"
                                (simplify)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decref1_induction formula-decl nil rreduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (rS2 skolem-const-decl "rstate" reduction_props nil)
    (r!1 skolem-const-decl "(rS2`domain)" reduction_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (nil adt-constructor-decl "(nil?)" IExpression_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (union const-decl "set" sets nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (member const-decl "bool" sets nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (estate type-eq-decl nil reduction nil)
    (pred type-eq-decl nil defined_types nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (decref_stillmatch 0
  (decref_stillmatch-1 nil 3706287258
   ("" (skeep* :preds? t)
    (("" (expand decref)
      (("" (use decref1_stillmatch)
        (("" (split) (("1" (propax) nil nil) ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cpure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (decref1_stillmatch formula-decl nil reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (decref1_chk_stillmatch 0
  (decref1_chk_stillmatch-1 nil 3706287334
   ("" (skeep*)
    (("" (expand decref1_chk)
      (("" (lift-if)
        (("" (split)
          (("1" (flatten)
            (("1" (use decref1_stillmatch)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (flatten) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((decref1_chk const-decl "{rS1 |
   rS1`domain = rS`domain AND
    (FORALL (s: (rS`domain)):
       rS1`store(s)`length = rS`store(s)`length AND
        rS1`count(s) <= rS`count(s) AND
         (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))}" rreduction
     nil)
    (decref1_stillmatch formula-decl nil reduction_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (estate type-eq-decl nil reduction nil)
    (Store type-eq-decl nil reduction nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cpure? def-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (releaseReduce_match_TCC1 0
  (releaseReduce_match_TCC1-1 nil 3700234159 ("" (subtype-tcc) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (releaseRedex? const-decl "bool" IL nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (releaseReduce_match subtype "grS"
    "{grS | IL.pureReleaseRedex?(rreduction.grS`redex) AND rreduction.noDanglingRefs?(rreduction.grS)}")))
 (releaseReduce_match 0
  (releaseReduce_match-6 "" 3700423366
   ("" (with-labels (skeep* :preds? t) ((err prr ndm arm stm obj)))
    (("" (expand releaseReduce)
      (("" (lift-if)
        (("" (with-labels (ground) ((rf obj) (rf obj)))
          (("1"
            (with-labels
             (case "index(rvar(grS`redex)) + popDepth(grS`redex) < grS`stack`length")
             (("index_sl")))
            (("1" (with-labels (ground) ((rf obj) (rf obj)))
              (("1"
                (with-labels (use decref_stillmatch)
                 ((dcimp) (ndrh) (cnth) (rdxh) (nilh) (sth)))
                (("1" (split dcimp)
                  (("1" (propax) nil nil)
                   ("2" (delete obj)
                    (("2"
                      (with-labels
                       (name "rS2" "grS
                                                                                                      WITH [`stack`seq
                                                                                                                    (grS`stack`length - 1
                                                                                                                     -
                                                                                                                     index(rvar(grS`redex))
                                                                                                                     -
                                                                                                                     popDepth(grS`redex))
                                                                                                              := nil,
                                                                                                            `count
                                                                                                              (refindex(grS`stack`seq
                                                                                                                        (grS`stack`length - 1
                                                                                                                         -
                                                                                                                         index(rvar(grS`redex))
                                                                                                                         -
                                                                                                                         popDepth(grS`redex))))
                                                                                                              := grS`count
                                                                                                                     (refindex
                                                                                                                      (grS`stack`seq
                                                                                                                       (grS`stack`length - 1
                                                                                                                        -
                                                                                                                        index(rvar(grS`redex))
                                                                                                                        -
                                                                                                                        popDepth(grS`redex))))
                                                                                                                  - 1,
                                                                                                            `redex := rexpr(grS`redex)]")
                       ((rS2def)))
                      (("1" (replace -1)
                        (("1" (expand state_matches)
                          (("1"
                            (with-labels (flatten)
                             ((esr trr unm stam stom)))
                            (("1" (split dcimp)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil)
                               ("4"
                                (with-labels
                                 (lemma stack_stillmatch)
                                 ((ssm)))
                                (("4"
                                  (inst
                                   ssm
                                   "grS`stack"
                                   "eS`stack"
                                   "rS2`stack"
                                   "union(cvars(rS2`redex),
                                                                                      bumpn(cvars(rS2`context), popDepth(rS2`redex)))"
                                   "translate"
                                   "translate")
                                  (("4"
                                    (split ssm)
                                    (("1" (propax) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3"
                                      (hide-all-but
                                       (ssm stam rS2def prr))
                                      (("3"
                                        (replace rS2def :dir RL)
                                        (("3"
                                          (simplify)
                                          (("3"
                                            (with-labels
                                             (lemma stack_subset_match)
                                             ((sbm)))
                                            (("3"
                                              (inst? sbm)
                                              (("3"
                                                (inst? sbm :where stam)
                                                (("3"
                                                  (split sbm)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (with-labels
                                                     (skeep :preds? t)
                                                     ((ih sbm)))
                                                    (("2"
                                                      (expand union)
                                                      (("2"
                                                        (expand member)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (delete dcimp)
                                      (("4"
                                        (replace rS2def :dir RL)
                                        (("4"
                                          (simplify)
                                          (("4"
                                            (with-labels
                                             (skeep :preds? t)
                                             ((ih ssm)))
                                            (("4"
                                              (lift-if)
                                              (("4"
                                                (case-replace
                                                 "i = index(rvar(grS`redex)) + popDepth(grS`redex)")
                                                (("1"
                                                  (simplify)
                                                  (("1"
                                                    (replace
                                                     rS2def
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (simplify)
                                                      (("1"
                                                        (with-labels
                                                         (typepred
                                                          "grS`redex")
                                                         ((hrefs
                                                           hvars
                                                           hcvars
                                                           hpop
                                                           hcp
                                                           hmark)))
                                                        (("1"
                                                          (expand
                                                           bumpn)
                                                          (("1"
                                                            (expand
                                                             union)
                                                            (("1"
                                                              (expand
                                                               member)
                                                              (("1"
                                                                (apply-eta
                                                                 "grS`redex"
                                                                 "(release?)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (simplify)
                                                                    (("1"
                                                                      (expand
                                                                       mark)
                                                                      (("1"
                                                                        (with-labels
                                                                         (decompose-equality
                                                                          hmark)
                                                                         ((hmark1
                                                                           hmark2)))
                                                                        (("1"
                                                                          (expand
                                                                           allReleaseMarked?)
                                                                          (("1"
                                                                            (expand
                                                                             markv)
                                                                            (("1"
                                                                              (replace
                                                                               hmark1
                                                                               :dir
                                                                               RL)
                                                                              (("1"
                                                                                (flatten
                                                                                 arm)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   arm)
                                                                                  (("1"
                                                                                    (simplify)
                                                                                    (("1"
                                                                                      (split
                                                                                       arm)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (simplify)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           (arm
                                                                                            ih
                                                                                            prr))
                                                                                          (("2"
                                                                                            (expand
                                                                                             popDepth
                                                                                             ih
                                                                                             (1
                                                                                              2
                                                                                              4))
                                                                                            (("2"
                                                                                              (expand
                                                                                               union)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 member)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   cvars_vars)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (lemma store_stillmatch)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst? :where stom)
                                    (("5"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (case "rS2`count(r) <= 0")
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (replace rS2def :dir RL)
                                            (("2"
                                              (simplify)
                                              (("2"
                                                (lift-if)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4" (grind) nil nil)
                                       ("5" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete dcimp)
                        (("2" (lemma refcount_stack_update)
                          (("2" (inst?)
                            (("1" (inst?)
                              (("1"
                                (split)
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2" (grind-with-ext) nil nil))
                                nil))
                              nil)
                             ("2" (typepred "grS`stack")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (use release_reduce_redex_correct)
                        (("3" (grind) nil nil)) nil)
                       ("4" (use stack_update_correct)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil)
                       ("5" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete obj)
                  (("2" (expand noDanglingRefs?)
                    (("2" (skeep)
                      (("2" (inst ndm i)
                        (("2" (split ndm)
                          (("1" (apply-eta "grS`redex" "(release?)")
                            (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil) ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (use refcount_stack_update)
                  (("3" (split -1)
                    (("1" (ground) (("1" (grind) nil nil)) nil)
                     ("2" (hide-all-but (1 rf))
                      (("2" (grind-with-ext) nil nil)) nil))
                    nil))
                  nil)
                 ("4" (use release_reduce_redex_correct)
                  (("4" (split)
                    (("1" (propax) nil nil) ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil))
                nil))
              nil)
             ("2" (delete obj)
              (("2" (typepred "grS`redex")
                (("2" (inst?)
                  (("2" (inst?) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand state_matches)
            (("2" (flatten)
              (("2" (split obj)
                (("1" (propax) nil nil)
                 ("2" (apply-eta "grS`redex" "(release?)")
                  (("2" (grind) nil nil)) nil)
                 ("3" (propax) nil nil)
                 ("4" (lemma stack_subset_match)
                  (("4" (inst? -1)
                    (("4" (inst? -1 :where stm)
                      (("4" (split -1)
                        (("1" (propax) nil nil)
                         ("2" (skeep :preds? t)
                          (("2" (apply-eta "grS`redex" "(release?)")
                            (("2" (grind) nil nil)) nil))
                          nil)
                         ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (lemma store_stillmatch)
                  (("5" (inst? -1)
                    (("1" (inst? -1 :where stm)
                      (("1" (split -1)
                        (("1" (propax) nil nil) ("2" (assert) nil nil)
                         ("3" (assert) (("3" (grind) nil nil)) nil)
                         ("4" (grind) nil nil) ("5" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil)
                     ("3" (use release_reduce_redex_correct)
                      (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (releaseReduce const-decl "rstate" rreduction nil)
    (decref_preserves_jdg application-judgement "{rS2 |
   rS2`redex = rS`redex AND
    rS2`stack = rS`stack AND
     rS2`context = rS`context AND rS2`error = rS`error}"
     reduction_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (decref1_preserves_stack formula-decl nil reduction_props nil)
    (decref1_preserves_context formula-decl nil reduction_props nil)
    (decref1_preserves_redex formula-decl nil reduction_props nil)
    (decref1_preserves_error formula-decl nil reduction_props nil)
    (decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (i skolem-const-decl "below(grS`stack`length)" reduction_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (releaseRedex? const-decl "bool" IL nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (union const-decl "set" sets nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (cvars_vars formula-decl nil preprocess nil)
    (release adt-constructor-decl
     "[[(variable?), IExpression] -> (release?)]" IExpression_adt nil)
    (markv const-decl "(variable?)" preprocess nil)
    (IExpression_release_eta formula-decl nil IExpression_adt nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (stack_subset_match formula-decl nil reduction_props nil)
    (stack_stillmatch formula-decl nil reduction_props nil)
    (store_stillmatch formula-decl nil reduction_props nil)
    (refcount_stack_update formula-decl nil rreduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IExpression_ref_extensionality formula-decl nil IExpression_adt
     nil)
    (ref adt-constructor-decl "[nat -> (ref?)]" IExpression_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (refcountStack const-decl "nat" rreduction nil)
    (count def-decl "nat" finseq_theorems nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (head const-decl "T" finseq_theorems nil)
    (refcountStore const-decl "nat" rreduction nil)
    (allcount const-decl "nat" rreduction nil)
    (empty? const-decl "bool" sets nil)
    (refcountArray const-decl "nat" rreduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (release_reduce_redex_correct formula-decl nil rreduction nil)
    (stack_update_correct formula-decl nil rreduction nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (nil adt-constructor-decl "(nil?)" IExpression_adt nil)
    (rexpr adt-accessor-decl "[(release?) -> IExpression]"
     IExpression_adt nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (estate type-eq-decl nil reduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (decref_stillmatch formula-decl nil reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (rvar adt-accessor-decl "[(release?) -> (variable?)]"
     IExpression_adt nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)
  (releaseReduce_match-5 "" 3700422764
   ("" (with-labels (skeep* :preds? t) ((err prr ndm arm stm obj)))
    (("" (expand releaseReduce)
      (("" (lift-if)
        (("" (with-labels (ground) ((rf obj) (rf obj)))
          (("1"
            (with-labels
             (case "index(rvar(grS`redex)) + popDepth(grS`redex) < grS`stack`length")
             (("index_sl")))
            (("1" (with-labels (ground) ((rf obj) (rf obj)))
              (("1" (expand state_matches?)
                (("1" (skeep)
                  (("1" (inst?)
                    (("1"
                      (with-labels (use decref_stillmatch)
                       ((dcimp) (ndrh) (cnth) (rdxh) (nilh) (sth)))
                      (("1" (split dcimp)
                        (("1" (propax) nil nil)
                         ("2" (delete obj)
                          (("2"
                            (with-labels
                             (name "rS2" "grS
                                                                      WITH [`stack`seq
                                                                                    (grS`stack`length - 1
                                                                                     -
                                                                                     index(rvar(grS`redex))
                                                                                     -
                                                                                     popDepth(grS`redex))
                                                                              := nil,
                                                                            `count
                                                                              (refindex(grS`stack`seq
                                                                                        (grS`stack`length - 1
                                                                                         -
                                                                                         index(rvar(grS`redex))
                                                                                         -
                                                                                         popDepth(grS`redex))))
                                                                              := grS`count
                                                                                     (refindex
                                                                                      (grS`stack`seq
                                                                                       (grS`stack`length - 1
                                                                                        -
                                                                                        index(rvar(grS`redex))
                                                                                        -
                                                                                        popDepth(grS`redex))))
                                                                                  - 1,
                                                                            `redex := rexpr(grS`redex)]")
                             ((rS2def)))
                            (("1" (replace -1)
                              (("1"
                                (expand state_matches)
                                (("1"
                                  (with-labels
                                   (flatten)
                                   ((esr trr unm stam stom)))
                                  (("1"
                                    (split dcimp)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil)
                                     ("4"
                                      (with-labels
                                       (lemma stack_stillmatch)
                                       ((ssm)))
                                      (("4"
                                        (inst
                                         ssm
                                         "grS`stack"
                                         "eS`stack"
                                         "rS2`stack"
                                         "union(cvars(rS2`redex),
                                                          bumpn(cvars(rS2`context), popDepth(rS2`redex)))"
                                         "translate"
                                         "translate")
                                        (("4"
                                          (split ssm)
                                          (("1" (propax) nil nil)
                                           ("2" (grind) nil nil)
                                           ("3"
                                            (hide-all-but
                                             (ssm stam rS2def prr))
                                            (("3"
                                              (replace rS2def :dir RL)
                                              (("3"
                                                (simplify)
                                                (("3"
                                                  (with-labels
                                                   (lemma
                                                    stack_subset_match)
                                                   ((sbm)))
                                                  (("3"
                                                    (inst? sbm)
                                                    (("3"
                                                      (inst?
                                                       sbm
                                                       :where
                                                       stam)
                                                      (("3"
                                                        (split sbm)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (with-labels
                                                           (skeep
                                                            :preds?
                                                            t)
                                                           ((ih sbm)))
                                                          (("2"
                                                            (expand
                                                             union)
                                                            (("2"
                                                              (expand
                                                               member)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (delete dcimp)
                                            (("4"
                                              (replace rS2def :dir RL)
                                              (("4"
                                                (simplify)
                                                (("4"
                                                  (with-labels
                                                   (skeep :preds? t)
                                                   ((ih ssm)))
                                                  (("4"
                                                    (lift-if)
                                                    (("4"
                                                      (case-replace
                                                       "i = index(rvar(grS`redex)) + popDepth(grS`redex)")
                                                      (("1"
                                                        (simplify)
                                                        (("1"
                                                          (replace
                                                           rS2def
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (simplify)
                                                            (("1"
                                                              (with-labels
                                                               (typepred
                                                                "grS`redex")
                                                               ((hrefs
                                                                 hvars
                                                                 hcvars
                                                                 hpop
                                                                 hcp
                                                                 hmark)))
                                                              (("1"
                                                                (rewrite
                                                                 purePopDepth)
                                                                (("1"
                                                                  (rewrite
                                                                   purePopDepth)
                                                                  (("1"
                                                                    (expand
                                                                     bumpn)
                                                                    (("1"
                                                                      (expand
                                                                       union)
                                                                      (("1"
                                                                        (expand
                                                                         member)
                                                                        (("1"
                                                                          (apply-eta
                                                                           "grS`redex"
                                                                           "(release?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (simplify)
                                                                              (("1"
                                                                                (expand
                                                                                 mark)
                                                                                (("1"
                                                                                  (with-labels
                                                                                   (decompose-equality
                                                                                    hmark)
                                                                                   ((hmark1
                                                                                     hmark2)))
                                                                                  (("1"
                                                                                    (expand
                                                                                     allReleaseMarked?)
                                                                                    (("1"
                                                                                      (expand
                                                                                       markv)
                                                                                      (("1"
                                                                                        (replace
                                                                                         hmark1
                                                                                         :dir
                                                                                         RL)
                                                                                        (("1"
                                                                                          (flatten
                                                                                           arm)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             arm)
                                                                                            (("1"
                                                                                              (simplify)
                                                                                              (("1"
                                                                                                (split
                                                                                                 arm)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (simplify)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (arm
                                                                                                      ih
                                                                                                      prr))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       union)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         member)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           cvars_vars)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             pureReleaseRedex?)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               releaseRedex?)
                                                                                                              (("2"
                                                                                                                (postpone)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete dcimp)
                              (("2"
                                (case
                                 "grS`domain(refindex(grS`stack`seq
                        (grS`stack`length - 1 - index(rvar(grS`redex)) -
                          popDepth(grS`redex))))")
                                (("1"
                                  (typepred
                                   "grS`count
           (refindex(grS`stack`seq
                         (grS`stack`length - 1 - index(rvar(grS`redex)) -
                           popDepth(grS`redex))))")
                                  (("1"
                                    (rewrite -1)
                                    (("1"
                                      (expand refcount)
                                      (("1"
                                        (split)
                                        (("1" (postpone) nil nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil)
                             ("3" (postpone) nil nil)
                             ("4" (postpone) nil nil)
                             ("5" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil)
                       ("3" (postpone) nil nil)
                       ("4" (postpone) nil nil) ("5" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil)
           ("2" (expand state_matches?)
            (("2" (skeep)
              (("2" (inst?)
                (("2" (expand state_matches)
                  (("2" (flatten)
                    (("2" (split obj)
                      (("1" (propax) nil nil) ("2" (postpone) nil nil)
                       ("3" (propax) nil nil)
                       ("4" (lemma stack_subset_match)
                        (("4" (inst? -1)
                          (("4" (inst? -1 :where stm)
                            (("4" (split -1)
                              (("1" (propax) nil nil)
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (apply-eta "grS`redex" "(release?)")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (lemma store_stillmatch)
                        (("5" (inst? -1)
                          (("1" (inst? -1 :where stm)
                            (("1" (split -1)
                              (("1" (propax) nil nil)
                               ("2" (assert) nil nil)
                               ("3"
                                (assert)
                                (("3" (grind) nil nil))
                                nil)
                               ("4" (grind) nil nil)
                               ("5" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil)
                           ("3" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (releaseReduce_match-4 "" 3700310976
   ("" (with-labels (skeep* :preds? t) ((err prr ndm arm stm obj)))
    (("" (expand releaseReduce)
      (("" (lift-if)
        (("" (with-labels (ground) ((rf obj) (rf obj)))
          (("1"
            (with-labels
             (case "index(rvar(grS`redex)) + popDepth(grS`redex) < grS`stack`length")
             (("index_sl")))
            (("1" (with-labels (ground) ((rf obj) (rf obj)))
              (("1"
                (with-labels (use decref_match)
                 ((dcimp) (ndrh) (cnth) (rdxh) (nilh) (sth)))
                (("1" (split dcimp)
                  (("1" (propax) nil nil)
                   ("2" (delete obj)
                    (("2"
                      (with-labels
                       (name "rS2" "grS
                                                      WITH [`stack`seq
                                                                    (grS`stack`length - 1
                                                                     -
                                                                     index(rvar(grS`redex))
                                                                     -
                                                                     popDepth(grS`redex))
                                                              := nil,
                                                            `count
                                                              (refindex(grS`stack`seq
                                                                        (grS`stack`length - 1
                                                                         -
                                                                         index(rvar(grS`redex))
                                                                         -
                                                                         popDepth(grS`redex))))
                                                              := grS`count
                                                                     (refindex
                                                                      (grS`stack`seq
                                                                       (grS`stack`length - 1
                                                                        -
                                                                        index(rvar(grS`redex))
                                                                        -
                                                                        popDepth(grS`redex))))
                                                                  - 1,
                                                            `redex := rexpr(grS`redex)]")
                       ((rS2def)))
                      (("1" (replace -1)
                        (("1" (expand state_matches?)
                          (("1" (skeep)
                            (("1"
                              (inst dcimp
                               "LAMBDA (r: (rS2`domain) | rS2`count(r) > 0): translate(r)")
                              (("1"
                                (expand state_matches)
                                (("1"
                                  (with-labels
                                   (flatten)
                                   ((esr trr unm stam stom)))
                                  (("1"
                                    (split dcimp)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (lemma
                                         translate_refs_restrict2)
                                        (("2"
                                          (inst
                                           -1
                                           "unmark(grS`redex)"
                                           "extend[nat, (grS`domain), bool, FALSE]
                                          ({r: (grS`domain) | grS`count(r) > 0})"
                                           "eS`domain"
                                           "extend[nat, (rS2`domain), bool, FALSE]
                                         ({r: (rS2`domain) | rS2`count(r) > 0})"
                                           _
                                           _)
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (inst? -1)
                                              (("1"
                                                (split -1)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (delete dcimp)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 rS2def))
                                                    (("2"
                                                      (skeep*
                                                       :preds?
                                                       t)
                                                      (("2"
                                                        (replace
                                                         rS2def
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (delete dcimp)
                                                  (("3"
                                                    (skeep*)
                                                    (("3"
                                                      (typepred
                                                       "rS2`redex")
                                                      (("3"
                                                        (rewrite
                                                         unmark_refs)
                                                        (("3"
                                                          (inst -1 i)
                                                          (("3"
                                                            (typepred
                                                             "rS2`count(i)")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (rewrite
                                                   unmark_contextPure)
                                                  nil
                                                  nil)
                                                 ("5" (grind) nil nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3"
                                                (skeep* :preds? t)
                                                (("3"
                                                  (replace
                                                   rS2def
                                                   :dir
                                                   RL)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (grind) nil nil)
                                     ("4"
                                      (with-labels
                                       (lemma stack_stillmatch)
                                       ((ssm)))
                                      (("4"
                                        (inst
                                         ssm
                                         "union(cvars(rS2`redex),
                                          bumpn(cvars(rS2`context), popDepth(rS2`redex)))"
                                         eS
                                         grS
                                         rS2)
                                        (("4"
                                          (simplify :let-reduce? t)
                                          (("4"
                                            (inst? ssm)
                                            (("1"
                                              (inst ssm translate)
                                              (("1"
                                                (split ssm)
                                                (("1" (propax) nil nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil)
                                                 ("4"
                                                  (delete dcimp)
                                                  (("4"
                                                    (with-labels
                                                     (skeep :preds? t)
                                                     ((ih ssm)))
                                                    (("4"
                                                      (expand union)
                                                      (("4"
                                                        (expand member)
                                                        (("4"
                                                          (with-labels
                                                           (typepred
                                                            "grS`redex")
                                                           ((hrefs
                                                             hvars
                                                             hcvars
                                                             hpop
                                                             hcp
                                                             hmark)))
                                                          (("4"
                                                            (rewrite
                                                             rS2def
                                                             :dir
                                                             RL)
                                                            (("4"
                                                              (simplify)
                                                              (("4"
                                                                (delete
                                                                 trr
                                                                 unm
                                                                 stom)
                                                                (("4"
                                                                  (split
                                                                   ssm)
                                                                  (("1"
                                                                    (split
                                                                     ih)
                                                                    (("1"
                                                                      (lemma
                                                                       cvars_vars)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "grS`redex"
                                                                         "i - popDepth(grS`redex)")
                                                                        (("1"
                                                                          (apply-eta
                                                                           "grS`redex"
                                                                           "(release?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       bumpn)
                                                                      (("2"
                                                                        (lemma
                                                                         cvars_vars_ctx)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "grS`context"
                                                                           "i - popDepth(grS`redex) - popDepth(grS`context)")
                                                                          (("1"
                                                                            (apply-eta
                                                                             "grS`redex"
                                                                             "(release?)")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :dir
                                                                               RL)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split
                                                                       ssm)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (apply-eta
                                                                           "grS`redex"
                                                                           "(release?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (expand
                                                                               mark
                                                                               hmark)
                                                                              (("1"
                                                                                (with-labels
                                                                                 (decompose-equality
                                                                                  hmark)
                                                                                 ((hmark1
                                                                                   hmark2)))
                                                                                (("1"
                                                                                  (expand
                                                                                   allReleaseMarked?)
                                                                                  (("1"
                                                                                    (simplify)
                                                                                    (("1"
                                                                                      (expand
                                                                                       markv)
                                                                                      (("1"
                                                                                        (replace
                                                                                         hmark1
                                                                                         :dir
                                                                                         RL)
                                                                                        (("1"
                                                                                          (flatten
                                                                                           arm)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             arm)
                                                                                            (("1"
                                                                                              (simplify)
                                                                                              (("1"
                                                                                                (split
                                                                                                 arm)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   popDepth
                                                                                                   ssm)
                                                                                                  (("2"
                                                                                                    (simplify)
                                                                                                    (("2"
                                                                                                      (case-replace
                                                                                                       "i = index(rvar(grS`redex)) + popDepth(rexpr(grS`redex))")
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (ih
                                                                                                          arm))
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           bumpn)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             union)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               member)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 cvars_vars)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (delete dcimp)
                                                  (("5"
                                                    (skeep)
                                                    (("5"
                                                      (case
                                                       "rS2`count(r) <= 0")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         rS2def
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (delete dcimp)
                                                  (("6"
                                                    (replace
                                                     rS2def
                                                     :dir
                                                     RL)
                                                    (("6"
                                                      (simplify)
                                                      (("6"
                                                        (hide-all-but
                                                         (ssm stam))
                                                        (("6"
                                                          (lemma
                                                           stack_subset_match)
                                                          (("6"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (skeep* :preds? t)
                                              (("3"
                                                (replace
                                                 rS2def
                                                 :dir
                                                 RL)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (expand store_matches)
                                      (("5"
                                        (skeep)
                                        (("5"
                                          (inst stom r_2)
                                          (("1"
                                            (split dcimp)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (with-labels
                                                 (lemma
                                                  translate_refs_restrict)
                                                 ((tsr)))
                                                (("2"
                                                  (inst
                                                   tsr
                                                   "rS2`store(r_2)`seq(j)"
                                                   _
                                                   _
                                                   _)
                                                  (("2"
                                                    (inst
                                                     tsr
                                                     "extend[nat, (grS`domain), bool, FALSE]
                                                                   ({r: (grS`domain) | grS`count(r) > 0})"
                                                     "eS`domain"
                                                     "extend[nat, (rS2`domain), bool, FALSE]
                                                                   ({r: (rS2`domain) | rS2`count(r) > 0})")
                                                    (("2"
                                                      (split tsr)
                                                      (("1"
                                                        (inst
                                                         tsr
                                                         translate)
                                                        (("1"
                                                          (case-replace
                                                           "(lambda (i:
                                                                            (extend[nat, (rS2`domain), bool, FALSE]
                                                                                 ({r: (rS2`domain) |
                                                                                   rS2`count(r) > 0}))):
                                                                    translate(i)) =  lambda (r: (rS2`domain) | rS2`count(r) > 0):
                                                                   translate(r)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (delete
                                                             dcimp)
                                                            (("2"
                                                              (decompose-equality)
                                                              (("1"
                                                                (replace
                                                                 rS2def
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep*
                                                                 :preds?
                                                                 t)
                                                                (("2"
                                                                  (replace
                                                                   rS2def
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep*
                                                                 :preds?
                                                                 t)
                                                                (("3"
                                                                  (replace
                                                                   rS2def
                                                                   :dir
                                                                   RL)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (replace
                                                             rS2def
                                                             :dir
                                                             RL)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (skeep*
                                                             :preds?
                                                             t)
                                                            (("4"
                                                              (replace
                                                               rS2def
                                                               :dir
                                                               RL)
                                                              (("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (skeep*
                                                             :preds?
                                                             t)
                                                            (("5"
                                                              (replace
                                                               rS2def
                                                               :dir
                                                               RL)
                                                              (("5"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep*
                                                         :preds?
                                                         t)
                                                        (("2"
                                                          (replace
                                                           rS2def
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skeep*)
                                                        (("3"
                                                          (typepred
                                                           "rS2`store(r_2)`seq(j)")
                                                          (("3"
                                                            (typepred
                                                             "rS2`count(i)")
                                                            (("1"
                                                              (expand
                                                               refcount)
                                                              (("1"
                                                                (use
                                                                 refcountStore_ref)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (1
                                                                    -1
                                                                    -2
                                                                    -3
                                                                    -4
                                                                    tsr))
                                                                  (("1"
                                                                    (grind-with-ext)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (typepred
                                                         "rS2`store(r_2)`seq(j)")
                                                        (("4"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred r_2)
                                            (("2"
                                              (replace rS2def :dir RL)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep* :preds? t)
                                (("2"
                                  (replace rS2def :dir RL)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete dcimp)
                        (("2" (lemma refcount_stack_update)
                          (("2"
                            (inst -1 grS
                             "grS`stack`length - 1 - index(rvar(grS`redex)) -
                             popDepth(grS`redex)"
                             "refindex(grS`stack`seq(grS`stack`length - 1 - index(rvar(grS`redex)) - popDepth(grS`redex)))")
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (replace -2)
                                    (("2"
                                      (expand refcount)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind-with-ext) nil nil))
                              nil)
                             ("2" (typepred "grS`stack")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (delete dcimp)
                        (("3"
                          (with-labels (typepred "grS`redex")
                           ((hrefs hvars hcvars hpop hcp hmark)))
                          (("3" (split rS2def)
                            (("1" (skeep)
                              (("1"
                                (inst hrefs i)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil)
                             ("4" (grind) nil nil)
                             ("5" (grind) nil nil)
                             ("6" (apply-eta "grS`redex" "(release?)")
                              (("6"
                                (replace -1 :dir RL)
                                (("6"
                                  (expand mark hmark)
                                  (("6"
                                    (decompose-equality hmark)
                                    (("6"
                                      (simplify)
                                      (("6" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (delete dcimp)
                        (("4" (typepred "grS`stack")
                          (("4" (expand every)
                            (("4" (skeep)
                              (("4"
                                (inst -1 i)
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (delete dcimp) (("5" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete obj)
                  (("2" (expand noDanglingRefs?)
                    (("2" (skeep)
                      (("2" (inst ndm i)
                        (("2" (ground)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (delete obj)
                  (("3"
                    (typepred "grS`count
                           (refindex(grS`stack`seq
                                         (grS`stack`length - 1 - index(rvar(grS`redex)) -
                                           popDepth(grS`redex))))")
                    (("1" (rewrite -1)
                      (("1" (expand refcount)
                        (("1" (split cnth)
                          (("1" (expand refcountStack)
                            (("1" (use "count_elem[(value?)]")
                              (("1"
                                (split -1)
                                (("1" (grind) nil nil)
                                 ("2" (inst?) nil nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand refcountStack)
                            (("2" (rewrite count_update)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "grS`stack")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("4" (delete obj)
                  (("4"
                    (with-labels (typepred "grS`redex")
                     ((hrefs hvars hcvars hpop hcp hmark)))
                    (("4" (split rdxh)
                      (("1" (skeep)
                        (("1" (inst hrefs i) (("1" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (apply-eta "grS`redex" "(release?)")
                        (("6" (replace -1 :dir RL)
                          (("6" (expand mark hmark)
                            (("6" (decompose-equality hmark)
                              (("6"
                                (simplify)
                                (("6" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil))
                nil))
              nil)
             ("2" (delete obj)
              (("2" (typepred "grS`redex")
                (("2" (inst -2 "index(rvar(grS`redex))")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand state_matches?)
            (("2" (skeep)
              (("2" (inst?)
                (("2" (expand state_matches)
                  (("2"
                    (with-labels (flatten) ((esr trr unm stam stom)))
                    (("2" (split obj)
                      (("1" (propax) nil nil)
                       ("2" (apply-eta "grS`redex" "(release?)")
                        (("2" (rewrite -1 :dir RL)
                          (("2" (expand unmark trr)
                            (("2" (simplify) (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (propax) nil nil)
                       ("4"
                        (with-labels (lemma stack_subset_match)
                         ((ssm)))
                        (("4" (inst? ssm)
                          (("4" (inst? ssm :where stam)
                            (("4" (split ssm)
                              (("1" (propax) nil nil)
                               ("2"
                                (delete obj)
                                (("2"
                                  (skeep :preds? t)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (releaseReduce_match-3 "" 3700310918
   ("" (with-labels (skeep* :preds? t) ((err prr ndm stm obj)))
    (("" (expand releaseReduce)
      (("" (lift-if)
        (("" (with-labels (ground) ((rf obj) (rf obj)))
          (("1"
            (with-labels
             (case "index(rvar(grS`redex)) + popDepth(grS`redex) < grS`stack`length")
             (("index_sl")))
            (("1" (with-labels (ground) ((rf obj) (rf obj)))
              (("1"
                (with-labels (use decref_match)
                 ((dcimp) (ndrh) (cnth) (rdxh) (nilh) (sth)))
                (("1" (split dcimp)
                  (("1" (propax) nil nil)
                   ("2" (delete obj)
                    (("2"
                      (with-labels
                       (name "rS2" "grS
                                      WITH [`stack`seq
                                                    (grS`stack`length - 1
                                                     -
                                                     index(rvar(grS`redex))
                                                     -
                                                     popDepth(grS`redex))
                                              := nil,
                                            `count
                                              (refindex(grS`stack`seq
                                                        (grS`stack`length - 1
                                                         -
                                                         index(rvar(grS`redex))
                                                         -
                                                         popDepth(grS`redex))))
                                              := grS`count
                                                     (refindex
                                                      (grS`stack`seq
                                                       (grS`stack`length - 1
                                                        -
                                                        index(rvar(grS`redex))
                                                        -
                                                        popDepth(grS`redex))))
                                                  - 1,
                                            `redex := rexpr(grS`redex)]")
                       ((rS2def)))
                      (("1" (replace -1)
                        (("1" (expand state_matches?)
                          (("1" (skeep)
                            (("1"
                              (inst dcimp
                               "LAMBDA (r: (rS2`domain) | rS2`count(r) > 0): translate(r)")
                              (("1"
                                (expand state_matches)
                                (("1"
                                  (with-labels
                                   (flatten)
                                   ((esr trr unm stam stom)))
                                  (("1"
                                    (split dcimp)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (lemma
                                         translate_refs_restrict2)
                                        (("2"
                                          (inst
                                           -1
                                           "unmark(grS`redex)"
                                           "extend[nat, (grS`domain), bool, FALSE]
                          ({r: (grS`domain) | grS`count(r) > 0})"
                                           "eS`domain"
                                           "extend[nat, (rS2`domain), bool, FALSE]
                         ({r: (rS2`domain) | rS2`count(r) > 0})"
                                           _
                                           _)
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (inst? -1)
                                              (("1"
                                                (split -1)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (delete dcimp)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 rS2def))
                                                    (("2"
                                                      (skeep*
                                                       :preds?
                                                       t)
                                                      (("2"
                                                        (replace
                                                         rS2def
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (delete dcimp)
                                                  (("3"
                                                    (skeep*)
                                                    (("3"
                                                      (typepred
                                                       "rS2`redex")
                                                      (("3"
                                                        (rewrite
                                                         unmark_refs)
                                                        (("3"
                                                          (inst -1 i)
                                                          (("3"
                                                            (typepred
                                                             "rS2`count(i)")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (rewrite
                                                   unmark_contextPure)
                                                  nil
                                                  nil)
                                                 ("5" (grind) nil nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3"
                                                (skeep* :preds? t)
                                                (("3"
                                                  (replace
                                                   rS2def
                                                   :dir
                                                   RL)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (grind) nil nil)
                                     ("4"
                                      (with-labels
                                       (lemma stack_stillmatch)
                                       ((ssm)))
                                      (("4"
                                        (inst
                                         ssm
                                         "union(cvars(rS2`redex),
                          bumpn(cvars(rS2`context), popDepth(rS2`redex)))"
                                         eS
                                         grS
                                         rS2)
                                        (("4"
                                          (simplify :let-reduce? t)
                                          (("4"
                                            (inst? ssm)
                                            (("1"
                                              (inst ssm translate)
                                              (("1"
                                                (split ssm)
                                                (("1" (propax) nil nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil)
                                                 ("4"
                                                  (delete dcimp)
                                                  (("4"
                                                    (with-labels
                                                     (skeep :preds? t)
                                                     ((ih ssm)))
                                                    (("4"
                                                      (expand union)
                                                      (("4"
                                                        (expand member)
                                                        (("4"
                                                          (with-labels
                                                           (typepred
                                                            "grS`redex")
                                                           ((hrefs
                                                             hvars
                                                             hcvars
                                                             hpop
                                                             hcp
                                                             hmark)))
                                                          (("4"
                                                            (rewrite
                                                             rS2def
                                                             :dir
                                                             RL)
                                                            (("4"
                                                              (simplify)
                                                              (("4"
                                                                (delete
                                                                 trr
                                                                 unm
                                                                 stom)
                                                                (("4"
                                                                  (split
                                                                   ssm)
                                                                  (("1"
                                                                    (split
                                                                     ih)
                                                                    (("1"
                                                                      (lemma
                                                                       cvars_vars)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "grS`redex"
                                                                         "i - popDepth(grS`redex)")
                                                                        (("1"
                                                                          (apply-eta
                                                                           "grS`redex"
                                                                           "(release?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       bumpn)
                                                                      (("2"
                                                                        (lemma
                                                                         cvars_vars_ctx)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "grS`context"
                                                                           "i - popDepth(grS`redex) - popDepth(grS`context)")
                                                                          (("1"
                                                                            (apply-eta
                                                                             "grS`redex"
                                                                             "(release?)")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :dir
                                                                               RL)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split
                                                                       ssm)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (apply-eta
                                                                           "grS`redex"
                                                                           "(release?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (expand
                                                                               mark
                                                                               hmark)
                                                                              (("1"
                                                                                (with-labels
                                                                                 (decompose-equality
                                                                                  hmark)
                                                                                 ((hmark1
                                                                                   hmark2)))
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (delete dcimp)
                                                  (("5"
                                                    (skeep)
                                                    (("5"
                                                      (case
                                                       "rS2`count(r) <= 0")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         rS2def
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (delete dcimp)
                                                  (("6"
                                                    (replace
                                                     rS2def
                                                     :dir
                                                     RL)
                                                    (("6"
                                                      (simplify)
                                                      (("6"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (skeep* :preds? t)
                                              (("3"
                                                (replace
                                                 rS2def
                                                 :dir
                                                 RL)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (expand store_matches)
                                      (("5"
                                        (skeep)
                                        (("5"
                                          (inst stom r_2)
                                          (("1"
                                            (split dcimp)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (with-labels
                                                 (lemma
                                                  translate_refs_restrict)
                                                 ((tsr)))
                                                (("2"
                                                  (inst
                                                   tsr
                                                   "rS2`store(r_2)`seq(j)"
                                                   _
                                                   _
                                                   _)
                                                  (("2"
                                                    (inst
                                                     tsr
                                                     "extend[nat, (grS`domain), bool, FALSE]
                                               ({r: (grS`domain) | grS`count(r) > 0})"
                                                     "eS`domain"
                                                     "extend[nat, (rS2`domain), bool, FALSE]
                                               ({r: (rS2`domain) | rS2`count(r) > 0})")
                                                    (("2"
                                                      (split tsr)
                                                      (("1"
                                                        (inst
                                                         tsr
                                                         translate)
                                                        (("1"
                                                          (case-replace
                                                           "(lambda (i:
                                                      (extend[nat, (rS2`domain), bool, FALSE]
                                                           ({r: (rS2`domain) |
                                                             rS2`count(r) > 0}))):
                                              translate(i)) =  lambda (r: (rS2`domain) | rS2`count(r) > 0):
                                             translate(r)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (delete
                                                             dcimp)
                                                            (("2"
                                                              (decompose-equality)
                                                              (("1"
                                                                (replace
                                                                 rS2def
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep*
                                                                 :preds?
                                                                 t)
                                                                (("2"
                                                                  (replace
                                                                   rS2def
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep*
                                                                 :preds?
                                                                 t)
                                                                (("3"
                                                                  (replace
                                                                   rS2def
                                                                   :dir
                                                                   RL)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (replace
                                                             rS2def
                                                             :dir
                                                             RL)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (skeep*
                                                             :preds?
                                                             t)
                                                            (("4"
                                                              (replace
                                                               rS2def
                                                               :dir
                                                               RL)
                                                              (("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (skeep*
                                                             :preds?
                                                             t)
                                                            (("5"
                                                              (replace
                                                               rS2def
                                                               :dir
                                                               RL)
                                                              (("5"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep*
                                                         :preds?
                                                         t)
                                                        (("2"
                                                          (replace
                                                           rS2def
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skeep*)
                                                        (("3"
                                                          (typepred
                                                           "rS2`store(r_2)`seq(j)")
                                                          (("3"
                                                            (typepred
                                                             "rS2`count(i)")
                                                            (("1"
                                                              (expand
                                                               refcount)
                                                              (("1"
                                                                (use
                                                                 refcountStore_ref)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (1
                                                                    -1
                                                                    -2
                                                                    -3
                                                                    -4
                                                                    tsr))
                                                                  (("1"
                                                                    (grind-with-ext)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (typepred
                                                         "rS2`store(r_2)`seq(j)")
                                                        (("4"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred r_2)
                                            (("2"
                                              (replace rS2def :dir RL)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep* :preds? t)
                                (("2"
                                  (replace rS2def :dir RL)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete dcimp)
                        (("2" (lemma refcount_stack_update)
                          (("2"
                            (inst -1 grS
                             "grS`stack`length - 1 - index(rvar(grS`redex)) -
                 popDepth(grS`redex)"
                             "refindex(grS`stack`seq(grS`stack`length - 1 - index(rvar(grS`redex)) - popDepth(grS`redex)))")
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (replace -2)
                                    (("2"
                                      (expand refcount)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind-with-ext) nil nil))
                              nil)
                             ("2" (typepred "grS`stack")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (delete dcimp)
                        (("3"
                          (with-labels (typepred "grS`redex")
                           ((hrefs hvars hcvars hpop hcp hmark)))
                          (("3" (split rS2def)
                            (("1" (skeep)
                              (("1"
                                (inst hrefs i)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil)
                             ("4" (grind) nil nil)
                             ("5" (grind) nil nil)
                             ("6" (apply-eta "grS`redex" "(release?)")
                              (("6"
                                (replace -1 :dir RL)
                                (("6"
                                  (expand mark hmark)
                                  (("6"
                                    (decompose-equality hmark)
                                    (("6"
                                      (simplify)
                                      (("6" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (delete dcimp)
                        (("4" (typepred "grS`stack")
                          (("4" (expand every)
                            (("4" (skeep)
                              (("4"
                                (inst -1 i)
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (delete dcimp) (("5" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete obj)
                  (("2" (expand noDanglingRefs?)
                    (("2" (skeep)
                      (("2" (inst ndm i)
                        (("2" (ground)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (delete obj)
                  (("3"
                    (typepred "grS`count
                   (refindex(grS`stack`seq
                                 (grS`stack`length - 1 - index(rvar(grS`redex)) -
                                   popDepth(grS`redex))))")
                    (("1" (rewrite -1)
                      (("1" (expand refcount)
                        (("1" (split cnth)
                          (("1" (expand refcountStack)
                            (("1" (use "count_elem[(value?)]")
                              (("1"
                                (split -1)
                                (("1" (grind) nil nil)
                                 ("2" (inst?) nil nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand refcountStack)
                            (("2" (rewrite count_update)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "grS`stack")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("4" (delete obj)
                  (("4"
                    (with-labels (typepred "grS`redex")
                     ((hrefs hvars hcvars hpop hcp hmark)))
                    (("4" (split rdxh)
                      (("1" (skeep)
                        (("1" (inst hrefs i) (("1" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (apply-eta "grS`redex" "(release?)")
                        (("6" (replace -1 :dir RL)
                          (("6" (expand mark hmark)
                            (("6" (decompose-equality hmark)
                              (("6"
                                (simplify)
                                (("6" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil))
                nil))
              nil)
             ("2" (delete obj)
              (("2" (typepred "grS`redex")
                (("2" (inst -2 "index(rvar(grS`redex))")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand state_matches?)
            (("2" (skeep)
              (("2" (inst?)
                (("2" (expand state_matches)
                  (("2"
                    (with-labels (flatten) ((esr trr unm stam stom)))
                    (("2" (split obj)
                      (("1" (propax) nil nil)
                       ("2" (apply-eta "grS`redex" "(release?)")
                        (("2" (rewrite -1 :dir RL)
                          (("2" (expand unmark trr)
                            (("2" (simplify) (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (propax) nil nil)
                       ("4"
                        (with-labels (lemma stack_subset_match)
                         ((ssm)))
                        (("4" (inst? ssm)
                          (("4" (inst? ssm :where stam)
                            (("4" (split ssm)
                              (("1" (propax) nil nil)
                               ("2"
                                (delete obj)
                                (("2"
                                  (skeep :preds? t)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (releaseReduce_match-2 nil 3700247765
   ("" (with-labels (skeep* :preds? t) ((err prr ndm stm obj)))
    (("" (expand releaseReduce)
      (("" (lift-if)
        (("" (with-labels (ground) ((rf obj) (rf obj)))
          (("1"
            (with-labels
             (case "index(rvar(grS`redex)) + popDepth(grS`redex) < grS`stack`length")
             (("index_sl")))
            (("1" (with-labels (ground) ((rf obj) (rf obj)))
              (("1"
                (with-labels (use decref_match)
                 ((dcimp) (ndrh) (cnth) (rdxh) (nilh) (sth)))
                (("1" (split dcimp)
                  (("1" (propax) nil nil)
                   ("2" (delete obj)
                    (("2"
                      (with-labels
                       (name "rS2" "grS
                                      WITH [`stack`seq
                                                    (grS`stack`length - 1
                                                     -
                                                     index(rvar(grS`redex))
                                                     -
                                                     popDepth(grS`redex))
                                              := nil,
                                            `count
                                              (refindex(grS`stack`seq
                                                        (grS`stack`length - 1
                                                         -
                                                         index(rvar(grS`redex))
                                                         -
                                                         popDepth(grS`redex))))
                                              := grS`count
                                                     (refindex
                                                      (grS`stack`seq
                                                       (grS`stack`length - 1
                                                        -
                                                        index(rvar(grS`redex))
                                                        -
                                                        popDepth(grS`redex))))
                                                  - 1,
                                            `redex := rexpr(grS`redex)]")
                       ((rS2def)))
                      (("1" (replace -1)
                        (("1" (expand state_matches?)
                          (("1" (skeep)
                            (("1"
                              (inst dcimp
                               "LAMBDA (r: (rS2`domain) | rS2`count(r) > 0): translate(r)")
                              (("1"
                                (expand state_matches)
                                (("1"
                                  (with-labels
                                   (flatten)
                                   ((esr trr unm stam stom)))
                                  (("1"
                                    (split dcimp)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (lemma
                                         translate_refs_restrict2)
                                        (("2"
                                          (inst
                                           -1
                                           "unmark(grS`redex)"
                                           "extend[nat, (grS`domain), bool, FALSE]
                          ({r: (grS`domain) | grS`count(r) > 0})"
                                           "eS`domain"
                                           "extend[nat, (rS2`domain), bool, FALSE]
                         ({r: (rS2`domain) | rS2`count(r) > 0})"
                                           _
                                           _)
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (inst? -1)
                                              (("1"
                                                (split -1)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (delete dcimp)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 rS2def))
                                                    (("2"
                                                      (skeep*
                                                       :preds?
                                                       t)
                                                      (("2"
                                                        (replace
                                                         rS2def
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (delete dcimp)
                                                  (("3"
                                                    (skeep*)
                                                    (("3"
                                                      (typepred
                                                       "rS2`redex")
                                                      (("3"
                                                        (rewrite
                                                         unmark_refs)
                                                        (("3"
                                                          (inst -1 i)
                                                          (("3"
                                                            (typepred
                                                             "rS2`count(i)")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (rewrite
                                                   unmark_contextPure)
                                                  nil
                                                  nil)
                                                 ("5" (grind) nil nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3"
                                                (skeep* :preds? t)
                                                (("3"
                                                  (replace
                                                   rS2def
                                                   :dir
                                                   RL)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (grind) nil nil)
                                     ("4"
                                      (with-labels
                                       (lemma stack_stillmatch)
                                       ((ssm)))
                                      (("4"
                                        (inst
                                         ssm
                                         "union(cvars(rS2`redex),
                          bumpn(cvars(rS2`context), popDepth(rS2`redex)))"
                                         eS
                                         grS
                                         rS2)
                                        (("4"
                                          (simplify :let-reduce? t)
                                          (("4"
                                            (inst? ssm)
                                            (("1"
                                              (inst ssm translate)
                                              (("1"
                                                (split ssm)
                                                (("1" (propax) nil nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil)
                                                 ("4"
                                                  (delete dcimp)
                                                  (("4"
                                                    (with-labels
                                                     (skeep :preds? t)
                                                     ((ih ssm)))
                                                    (("4"
                                                      (expand union)
                                                      (("4"
                                                        (expand member)
                                                        (("4"
                                                          (with-labels
                                                           (typepred
                                                            "grS`redex")
                                                           ((hrefs
                                                             hvars
                                                             hcvars
                                                             hpop
                                                             hcp
                                                             hmark)))
                                                          (("4"
                                                            (rewrite
                                                             rS2def
                                                             :dir
                                                             RL)
                                                            (("4"
                                                              (simplify)
                                                              (("4"
                                                                (delete
                                                                 trr
                                                                 unm
                                                                 stom)
                                                                (("4"
                                                                  (split
                                                                   ssm)
                                                                  (("1"
                                                                    (split
                                                                     ih)
                                                                    (("1"
                                                                      (lemma
                                                                       cvars_vars)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "grS`redex"
                                                                         "i - popDepth(grS`redex)")
                                                                        (("1"
                                                                          (apply-eta
                                                                           "grS`redex"
                                                                           "(release?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       bumpn)
                                                                      (("2"
                                                                        (lemma
                                                                         cvars_vars_ctx)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "grS`context"
                                                                           "i - popDepth(grS`redex) - popDepth(grS`context)")
                                                                          (("1"
                                                                            (apply-eta
                                                                             "grS`redex"
                                                                             "(release?)")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :dir
                                                                               RL)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split
                                                                       ssm)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (apply-eta
                                                                           "grS`redex"
                                                                           "(release?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (expand
                                                                               mark
                                                                               hmark)
                                                                              (("1"
                                                                                (with-labels
                                                                                 (decompose-equality
                                                                                  hmark)
                                                                                 ((hmark1
                                                                                   hmark2)))
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (delete dcimp)
                                                  (("5"
                                                    (skeep)
                                                    (("5"
                                                      (case
                                                       "rS2`count(r) <= 0")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         rS2def
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (delete dcimp)
                                                  (("6"
                                                    (replace
                                                     rS2def
                                                     :dir
                                                     RL)
                                                    (("6"
                                                      (simplify)
                                                      (("6"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (skeep* :preds? t)
                                              (("3"
                                                (replace
                                                 rS2def
                                                 :dir
                                                 RL)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (expand store_matches)
                                      (("5"
                                        (skeep)
                                        (("5"
                                          (inst stom r_2)
                                          (("1"
                                            (split dcimp)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (with-labels
                                                 (lemma
                                                  translate_refs_restrict)
                                                 ((tsr)))
                                                (("2"
                                                  (inst
                                                   tsr
                                                   "rS2`store(r_2)`seq(j)"
                                                   _
                                                   _
                                                   _)
                                                  (("2"
                                                    (inst
                                                     tsr
                                                     "extend[nat, (grS`domain), bool, FALSE]
                                               ({r: (grS`domain) | grS`count(r) > 0})"
                                                     "eS`domain"
                                                     "extend[nat, (rS2`domain), bool, FALSE]
                                               ({r: (rS2`domain) | rS2`count(r) > 0})")
                                                    (("2"
                                                      (split tsr)
                                                      (("1"
                                                        (inst
                                                         tsr
                                                         translate)
                                                        (("1"
                                                          (case-replace
                                                           "(lambda (i:
                                                      (extend[nat, (rS2`domain), bool, FALSE]
                                                           ({r: (rS2`domain) |
                                                             rS2`count(r) > 0}))):
                                              translate(i)) =  lambda (r: (rS2`domain) | rS2`count(r) > 0):
                                             translate(r)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (delete
                                                             dcimp)
                                                            (("2"
                                                              (decompose-equality)
                                                              (("1"
                                                                (replace
                                                                 rS2def
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep*
                                                                 :preds?
                                                                 t)
                                                                (("2"
                                                                  (replace
                                                                   rS2def
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep*
                                                                 :preds?
                                                                 t)
                                                                (("3"
                                                                  (replace
                                                                   rS2def
                                                                   :dir
                                                                   RL)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (replace
                                                             rS2def
                                                             :dir
                                                             RL)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (skeep*
                                                             :preds?
                                                             t)
                                                            (("4"
                                                              (replace
                                                               rS2def
                                                               :dir
                                                               RL)
                                                              (("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (skeep*
                                                             :preds?
                                                             t)
                                                            (("5"
                                                              (replace
                                                               rS2def
                                                               :dir
                                                               RL)
                                                              (("5"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep*
                                                         :preds?
                                                         t)
                                                        (("2"
                                                          (replace
                                                           rS2def
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skeep*)
                                                        (("3"
                                                          (typepred
                                                           "rS2`store(r_2)`seq(j)")
                                                          (("3"
                                                            (typepred
                                                             "rS2`count(i)")
                                                            (("1"
                                                              (expand
                                                               refcount)
                                                              (("1"
                                                                (use
                                                                 refcountStore_ref)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (1
                                                                    -1
                                                                    -2
                                                                    -3
                                                                    -4
                                                                    tsr))
                                                                  (("1"
                                                                    (grind-with-ext)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (typepred
                                                         "rS2`store(r_2)`seq(j)")
                                                        (("4"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred r_2)
                                            (("2"
                                              (replace rS2def :dir RL)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep* :preds? t)
                                (("2"
                                  (replace rS2def :dir RL)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete dcimp)
                        (("2" (lemma refcount_stack_update)
                          (("2"
                            (inst -1 grS
                             "grS`stack`length - 1 - index(rvar(grS`redex)) -
                 popDepth(grS`redex)"
                             "refindex(grS`stack`seq(grS`stack`length - 1 - index(rvar(grS`redex)) - popDepth(grS`redex)))")
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (replace -2)
                                    (("2"
                                      (expand refcount)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind-with-ext) nil nil))
                              nil)
                             ("2" (typepred "grS`stack")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (delete dcimp)
                        (("3"
                          (with-labels (typepred "grS`redex")
                           ((hrefs hvars hcvars hpop hcp hmark)))
                          (("3" (split rS2def)
                            (("1" (skeep)
                              (("1"
                                (inst hrefs i)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil)
                             ("4" (grind) nil nil)
                             ("5" (grind) nil nil)
                             ("6" (apply-eta "grS`redex" "(release?)")
                              (("6"
                                (replace -1 :dir RL)
                                (("6"
                                  (expand mark hmark)
                                  (("6"
                                    (decompose-equality hmark)
                                    (("6"
                                      (simplify)
                                      (("6" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (delete dcimp)
                        (("4" (typepred "grS`stack")
                          (("4" (expand every)
                            (("4" (skeep)
                              (("4"
                                (inst -1 i)
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (delete dcimp) (("5" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete obj)
                  (("2" (expand noDanglingRefs?)
                    (("2" (skeep)
                      (("2" (inst ndm i)
                        (("2" (ground)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (delete obj)
                  (("3"
                    (typepred "grS`count
                   (refindex(grS`stack`seq
                                 (grS`stack`length - 1 - index(rvar(grS`redex)) -
                                   popDepth(grS`redex))))")
                    (("1" (rewrite -1)
                      (("1" (expand refcount)
                        (("1" (split cnth)
                          (("1" (expand refcountStack)
                            (("1" (use "count_elem[(value?)]")
                              (("1"
                                (split -1)
                                (("1" (grind) nil nil)
                                 ("2" (inst?) nil nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand refcountStack)
                            (("2" (rewrite count_update)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "grS`stack")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("4" (delete obj)
                  (("4"
                    (with-labels (typepred "grS`redex")
                     ((hrefs hvars hcvars hpop hcp hmark)))
                    (("4" (split rdxh)
                      (("1" (skeep)
                        (("1" (inst hrefs i) (("1" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (apply-eta "grS`redex" "(release?)")
                        (("6" (replace -1 :dir RL)
                          (("6" (expand mark hmark)
                            (("6" (decompose-equality hmark)
                              (("6"
                                (simplify)
                                (("6" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil))
                nil))
              nil)
             ("2" (delete obj)
              (("2" (typepred "grS`redex")
                (("2" (inst -2 "index(rvar(grS`redex))")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand state_matches?)
            (("2" (skeep)
              (("2" (inst?)
                (("2" (expand state_matches)
                  (("2"
                    (with-labels (flatten) ((esr trr unm stam stom)))
                    (("2" (split obj)
                      (("1" (propax) nil nil)
                       ("2" (apply-eta "grS`redex" "(release?)")
                        (("2" (rewrite -1 :dir RL)
                          (("2" (expand unmark trr)
                            (("2" (simplify) (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (propax) nil nil)
                       ("4"
                        (with-labels (lemma stack_subset_match)
                         ((ssm)))
                        (("4" (inst? ssm)
                          (("4" (inst? ssm :where stam)
                            (("4" (split ssm)
                              (("1" (propax) nil nil)
                               ("2"
                                (delete obj)
                                (("2"
                                  (skeep :preds? t)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (releaseReduce_match-1 nil 3700241450
   ("" (with-labels (skeep* :preds? t) ((err prr ndm stm obj)))
    (("" (expand releaseReduce)
      (("" (lift-if)
        (("" (with-labels (ground) ((rf obj) (rf obj)))
          (("1"
            (with-labels
             (case "index(rvar(grS`redex)) + popDepth(grS`redex) < grS`stack`length")
             (("index_sl")))
            (("1" (with-labels (ground) ((rf obj) (rf obj)))
              (("1"
                (with-labels (use decref_match)
                 ((dcimp) (ndrh) (cnth) (rdxh) (nilh) (sth)))
                (("1" (split dcimp)
                  (("1" (propax) nil nil)
                   ("2" (delete obj)
                    (("2"
                      (name "rS2" "grS
                       WITH [`stack`seq
                                     (grS`stack`length - 1
                                      -
                                      index(rvar(grS`redex))
                                      -
                                      popDepth(grS`redex))
                               := nil,
                             `count
                               (refindex(grS`stack`seq
                                         (grS`stack`length - 1
                                          -
                                          index(rvar(grS`redex))
                                          -
                                          popDepth(grS`redex))))
                               := grS`count
                                      (refindex
                                       (grS`stack`seq
                                        (grS`stack`length - 1
                                         -
                                         index(rvar(grS`redex))
                                         -
                                         popDepth(grS`redex))))
                                   - 1,
                             `redex := rexpr(grS`redex)]")
                      (("1" (replace -1)
                        (("1" (expand state_matches?)
                          (("1" (skeep)
                            (("1"
                              (inst dcimp
                               "LAMBDA (r: (rS2`domain) | rS2`count(r) > 0): translate(r)")
                              (("1"
                                (expand state_matches)
                                (("1"
                                  (with-labels
                                   (flatten)
                                   ((esr trr unm stam stom)))
                                  (("1"
                                    (split dcimp)
                                    (("1" (grind) nil nil)
                                     ("2" (postpone) nil nil)
                                     ("3" (grind) nil nil)
                                     ("4" (postpone) nil nil)
                                     ("5"
                                      (expand store_matches)
                                      (("5"
                                        (skeep)
                                        (("5"
                                          (inst stom r_2)
                                          (("1"
                                            (split dcimp)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (with-labels
                                                 (lemma
                                                  translate_refs_restrict)
                                                 ((tsr)))
                                                (("2"
                                                  (inst
                                                   tsr
                                                   "rS2`store(r_2)`seq(j)"
                                                   _
                                                   _
                                                   _)
                                                  (("2"
                                                    (inst
                                                     tsr
                                                     "extend[nat, (grS`domain), bool, FALSE]
                           ({r: (grS`domain) | grS`count(r) > 0})"
                                                     "eS`domain"
                                                     "extend[nat, (rS2`domain), bool, FALSE]
                           ({r: (rS2`domain) | rS2`count(r) > 0})")
                                                    (("2"
                                                      (split tsr)
                                                      (("1"
                                                        (inst
                                                         tsr
                                                         translate)
                                                        (("1"
                                                          (case-replace
                                                           "(lambda (i:
                                (extend[nat, (rS2`domain), bool, FALSE]
                                     ({r: (rS2`domain) |
                                       rS2`count(r) > 0}))):
                        translate(i)) =  lambda (r: (rS2`domain) | rS2`count(r) > 0):
                       translate(r)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (delete
                                                             dcimp)
                                                            (("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("4"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred r_2)
                                            (("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete dcimp) (("2" (postpone) nil nil))
                        nil)
                       ("3" (postpone) nil nil)
                       ("4" (postpone) nil nil)
                       ("5" (postpone) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete obj)
                  (("2" (expand noDanglingRefs?)
                    (("2" (skeep)
                      (("2" (inst ndm i)
                        (("2" (ground)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (delete obj)
                  (("3"
                    (typepred "grS`count
           (refindex(grS`stack`seq
                         (grS`stack`length - 1 - index(rvar(grS`redex)) -
                           popDepth(grS`redex))))")
                    (("1" (rewrite -1)
                      (("1" (expand refcount)
                        (("1" (split cnth)
                          (("1" (expand refcountStack)
                            (("1" (use "count_elem[(value?)]")
                              (("1"
                                (split -1)
                                (("1" (grind) nil nil)
                                 ("2" (inst?) nil nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand refcountStack)
                            (("2" (rewrite count_update)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "grS`stack")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("4" (delete obj)
                  (("4"
                    (with-labels (typepred "grS`redex")
                     ((hrefs hvars hcvars hpop hcp hmark)))
                    (("4" (split rdxh)
                      (("1" (skeep)
                        (("1" (inst hrefs i) (("1" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (apply-eta "grS`redex" "(release?)")
                        (("6" (replace -1 :dir RL)
                          (("6" (expand mark hmark)
                            (("6" (decompose-equality hmark)
                              (("6"
                                (simplify)
                                (("6" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil))
                nil))
              nil)
             ("2" (delete obj)
              (("2" (typepred "grS`redex")
                (("2" (inst -2 "index(rvar(grS`redex))")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand state_matches?)
            (("2" (skeep)
              (("2" (inst?)
                (("2" (expand state_matches)
                  (("2"
                    (with-labels (flatten) ((esr trr unm stam stom)))
                    (("2" (split obj)
                      (("1" (propax) nil nil)
                       ("2" (apply-eta "grS`redex" "(release?)")
                        (("2" (rewrite -1 :dir RL)
                          (("2" (expand unmark trr)
                            (("2" (simplify) (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (propax) nil nil)
                       ("4"
                        (with-labels (lemma stack_subset_match)
                         ((ssm)))
                        (("4" (inst? ssm)
                          (("4" (inst? ssm :where stam)
                            (("4" (split ssm)
                              (("1" (propax) nil nil)
                               ("2"
                                (delete obj)
                                (("2"
                                  (skeep :preds? t)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (release_marked_match_TCC1 0
  (release_marked_match_TCC1-1 nil 3700234159
   ("" (subtype-tcc) nil nil)
   ((variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (release_marked_match subtype
    "rS`stack`length - IExpression_adt.index(x) - IL.popDepth(rS`redex) - 1"
    "below[rS`stack`length]")))
 (release_marked_match_TCC2 0
  (release_marked_match_TCC2-2 "" 3700424094 ("" (grind) nil nil)
   ((variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (release_marked_match subtype
    "rS`stack`length - IExpression_adt.index(x) - IL.popDepth(rS`redex) - 1"
    "below[eS`stack`length]"))
  (release_marked_match_TCC2-1 nil 3700234159
   (""
    (with-labels (skeep* :preds? t) ((xvar stm mark_imp sl_index obj)))
    (("" (split obj)
      (("1"
        (typepred "rS`stack`seq
                           (rS`stack`length - index(x) - popDepth(rS`redex) -
                             1)")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
       ("2" (with-labels (skeep) ((st_ref obj)))
        (("2" (with-labels (case "rS`domain(i)") ((i_domain)))
          (("1" (typepred "rS`count(i)")
            (("1" (expand refcount)
              (("1" (expand refcountStack)
                (("1" (expand extend)
                  (("1" (lemma "count_elem[(value?)]")
                    (("1" (inst? -1)
                      (("1"
                        (inst -1 "rS`stack`seq
                       (rS`stack`length - index(x) - popDepth(rS`redex) - 1)")
                        (("1" (split -1)
                          (("1" (replace -2) (("1" (assert) nil nil))
                            nil)
                           ("2"
                            (inst 1
                             "rS`stack`length - index(x) - popDepth(rS`redex) - 1")
                            (("2" (grind) nil nil)) nil)
                           ("3"
                            (typepred "rS`stack`seq
                           (rS`stack`length - index(x) - popDepth(rS`redex) - 1)")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("4"
                            (typepred "rS`stack`seq
                           (rS`stack`length - index(x) - popDepth(rS`redex) - 1)")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil)
           ("2" (typepred "rS`stack")
            (("2"
              (typepred
               "rS`stack`seq(rS`stack`length - index(x) - popDepth(rS`redex) - 1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (release_marked_match subtype
    "rS`stack`length - IExpression_adt.index(x) - IL.popDepth(rS`redex) - 1"
    "below[eS`stack`length]")))
 (release_marked_match_TCC3 0
  (release_marked_match_TCC3-2 "" 3700424111 ("" (grind) nil nil)
   ((variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (release_marked_match subtype "x"
    "{x | IExpression_adt.index(rreduction.x) + IL.popDepth(rS`redex) < rS`stack`length AND (IExpression_adt.marked(rreduction.x) IMPLIES NOT sets[nat].member(IExpression_adt.index(rreduction.x), IL.vars(rS`redex)) AND NOT sets[nat].member(IExpression_adt.index(rreduction.x), preprocess.cvars(rS`context)))}"))
  (release_marked_match_TCC3-1 nil 3700234159
   ("" (skeep*) (("" (use extend_finite) nil nil)) nil)
   ((variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (release_marked_match subtype "x"
    "{x | IExpression_adt.index(rreduction.x) + IL.popDepth(rS`redex) < rS`stack`length AND (IExpression_adt.marked(rreduction.x) IMPLIES NOT sets[nat].member(IExpression_adt.index(rreduction.x), IL.vars(rS`redex)) AND NOT sets[nat].member(IExpression_adt.index(rreduction.x), preprocess.cvars(rS`context)))}")))
 (release_marked_match 0
  (release_marked_match-1 nil 3700424516
   (""
    (with-labels (skeep* :preds? t)
     ((xvar index_sl mark_imp stm trr obj)))
    (("" (expand release_marked)
      (("" (lift-if)
        (("" (ground)
          (("" (expand state_matches)
            (("" (flatten)
              (("" (split obj)
                (("1" (propax) nil nil)
                 ("2" (expand unmark obj) (("2" (propax) nil nil)) nil)
                 ("3" (propax) nil nil)
                 ("4" (expand stack_matches)
                  (("4" (flatten)
                    (("4" (split obj)
                      (("1" (propax) nil nil)
                       ("2" (skeep :preds? t)
                        (("2" (inst?)
                          (("2" (expand union)
                            (("2" (expand member)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (lemma store_stillmatch)
                  (("5" (inst?)
                    (("1" (inst? :where stm)
                      (("1" (split)
                        (("1" (propax) nil nil)
                         ("2" (simplify) (("2" (propax) nil nil)) nil)
                         ("3" (simplify) (("3" (skeep) nil nil)) nil)
                         ("4" (simplify) (("4" (propax) nil nil)) nil)
                         ("5" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (typepred "rS`count(x1)")
                        (("2" (rewrite -1)
                          (("2" (expand refcount)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((release_marked const-decl "rstate" rreduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (store_stillmatch formula-decl nil reduction_props nil)
    (markv const-decl "(variable?)" preprocess nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (estate type-eq-decl nil reduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (IExpression type-decl nil IExpression_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (release adt-constructor-decl
     "[[(variable?), IExpression] -> (release?)]" IExpression_adt nil)
    (i skolem-const-decl "(union(cvars(release(x, rS`redex)),
       bumpn(cvars(rS`context), popDepth(release(x, rS`redex)))))"
       reduction_props nil)
    (x skolem-const-decl "(variable?)" reduction_props nil)
    (rS skolem-const-decl "rstate" reduction_props nil)
    (member const-decl "bool" sets nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (letApply_unmark_TCC1 0
  (letApply_unmark_TCC1-1 nil 3700835332 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IExpression type-decl nil IExpression_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil))
   nil
   (letApply_unmark subtype "preprocess.unmarkvars(args)"
    "{args: list[(IExpression_adt.variable?)] | list_props[(IExpression_adt.variable?)].length(args) = i}")))
 (letApply_unmark 0
  (letApply_unmark-1 nil 3700835332
   ("" (induct i)
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand letApply 1)
        (("2" (expand unmark 1 1)
          (("2" (expand unmark 1 3)
            (("2" (expand unmark 1 2)
              (("2" (decompose-equality 1)
                (("1" (expand unmarkvars)
                  (("1" (typepred args)
                    (("1" (grind-with-ext) nil nil)) nil))
                  nil)
                 ("2"
                  (case-replace
                   "map(lambda x: x WITH [`index := 1 + index(x)])
                   (cdr(unmarkvars(args))) = unmarkvars(map(lambda x: x WITH [`index := 1 + index(x)])(cdr(args)))")
                  (("1" (grind) nil nil)
                   ("2" (hide-all-but 1)
                    (("2"
                      (case-replace
                       "cdr(unmarkvars(args)) = unmarkvars(cdr(args))")
                      (("1" (delete -1)
                        (("1" (generalize "cdr(args)" "L")
                          (("1" (induct L)
                            (("1" (grind) nil nil)
                             ("2" (skeep*)
                              (("2"
                                (expand unmarkvars 1 1)
                                (("2"
                                  (expand map 1)
                                  (("2"
                                    (expand unmarkvars 1 2)
                                    (("2" (grind-with-ext) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete 2)
                        (("2" (typepred args)
                          (("2" (expand unmarkvars 1 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (marked adt-accessor-decl "[(variable?) -> bool]" IExpression_adt
     nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (FALSE const-decl "bool" booleans nil)
    (variable adt-constructor-decl "[[nat, bool] -> (variable?)]"
     IExpression_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IExpression_variable_extensionality formula-decl nil
     IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IExpression_letexpr_extensionality formula-decl nil
     IExpression_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (letexpr adt-constructor-decl
     "[[IExpression, IExpression] -> (letexpr?)]" IExpression_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (letApply def-decl "IExpression" reduction nil)
    (letApply def-decl "IExpression" rreduction nil)
    (unmark def-decl "IExpression" preprocess nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IExpression type-decl nil IExpression_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (unmarkvars def-decl "list[(variable?)]" preprocess nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil))
   shostak))
 (applyReduce_match_TCC1 0
  (applyReduce_match_TCC1-1 nil 3700234159
   ("" (with-labels (skeep) ((ars stm obj)))
    (("" (expand applyRedex?)
      (("" (expand state_matches?)
        (("" (skeep)
          (("" (expand state_matches) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((applyRedex? const-decl "bool" IL nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (popDepth def-decl "nat" IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (applyReduce_match subtype "gS"
    "{gS | IL.applyRedex?(reduction.gS`redex)}")))
 (applyReduce_match 0
  (applyReduce_match-2 "" 3710697494
   ("" (with-labels (skeep) ((apr stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (inst?)
          (("" (expand applyReduce)
            (("" (case "applyRedex?(gS`redex)")
              (("1" (case-replace "fun(gS`redex) = fun(grS`redex)")
                (("1"
                  (case-replace
                   "length(args(gS`redex)) = length(args(grS`redex))")
                  (("1" (lift-if)
                    (("1"
                      (case "fun(grS`redex) < D`length AND length(args(grS`redex)) = D`seq(fun(grS`redex))`arity")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand state_matches)
                              (("1"
                                (flatten)
                                (("1"
                                  (split)
                                  (("1"
                                    (rewrite letApply_unmark)
                                    (("1"
                                      (rewrite translate_refs_pure_eq)
                                      (("1"
                                        (rewrite unmark_mark)
                                        (("1"
                                          (case-replace
                                           "unmarkvars(args(grS`redex)) = args(gS`redex)")
                                          (("1"
                                            (typepred
                                             "D`seq(fun(grS`redex))`body")
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (replace stm :dir RL)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite pure_letApply)
                                        (("2"
                                          (rewrite unmark_pure)
                                          (("2"
                                            (rewrite pure_mark)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3"
                                    (rewrite cvars_pure)
                                    (("1"
                                      (rewrite cvars_pure)
                                      (("1"
                                        (rewrite purePopDepth)
                                        (("1"
                                          (rewrite purePopDepth)
                                          (("1"
                                            (expand union)
                                            (("1"
                                              (expand member)
                                              (("1"
                                                (case-replace
                                                 "{x: nat |
                       vars(grS`redex)(x) OR
                        bumpn(cvars(grS`context), 0)(x)} = {x: nat |
                       vars(rreduction.letApply(D`seq(fun(grS`redex))`arity,
                                     args(grS`redex),
                                     mark
                                     (emptyset)
                                     (D`seq(fun(grS`redex))`body)))
                           (x)
                        OR bumpn(cvars(grS`context), 0)(x)}")
                                                (("1"
                                                  (replace obj)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (delete obj)
                                                  (("2"
                                                    (decompose-equality
                                                     1)
                                                    (("2"
                                                      (typepred
                                                       "D`seq(fun(grS`redex))`body")
                                                      (("2"
                                                        (rewrite
                                                         vars_letApply)
                                                        (("2"
                                                          (rewrite
                                                           vars_mark)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (use
                                           rreduction.pure_letApply)
                                          (("2"
                                            (use pure_mark)
                                            (("2"
                                              (typepred
                                               "D`seq(fun(grS`redex))`body")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (use rreduction.pure_letApply)
                                      (("2"
                                        (use pure_mark)
                                        (("2"
                                          (typepred
                                           "D`seq(fun(grS`redex))`body")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (lemma store_stillmatch)
                                    (("4"
                                      (inst?)
                                      (("1"
                                        (inst? :where stm)
                                        (("1"
                                          (split -1)
                                          (("1" (propax) nil nil)
                                           ("2" (grind) nil nil)
                                           ("3" (grind) nil nil)
                                           ("4" (grind) nil nil)
                                           ("5" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (use pure_count_keep)
                                          (("2"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (rewrite pure_letApply)
                                              (("3"
                                                (rewrite pure_mark)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (use applyReduce_correct_redex)
                                        (("3"
                                          (simplify :let-reduce? t)
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (split obj)
                          (("1" (flatten)
                            (("1" (split obj)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (use state_error_match)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use state_error_match)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete obj)
                    (("2" (expand state_matches)
                      (("2"
                        (with-labels (flatten) ((trr unm stam stom)))
                        (("2" (replace trr :dir RL)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete obj)
                  (("2" (expand state_matches)
                    (("2" (with-labels (flatten) ((trr unm stam stom)))
                      (("2" (replace trr :dir RL)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil))
                nil)
               ("2" (delete obj) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (goodstate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (estate type-eq-decl nil reduction nil)
    (Store type-eq-decl nil reduction nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (applyRedex? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (args adt-accessor-decl "[(application?) -> list[(variable?)]]"
          IExpression_adt nil)
    (pure? def-decl "bool" IL nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (unmarkvars def-decl "list[(variable?)]" preprocess nil)
    (letApply def-decl "IExpression" reduction nil)
    (translate_refs_pure_eq formula-decl nil reduction_props nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (unmark_pure rec-application-judgement "(pure?)" preprocess nil)
    (unmark_mark formula-decl nil preprocess nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (pure_mark formula-decl nil preprocess nil)
    (pure_letApply recursive-judgement-axiom nil reduction nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (letApply_unmark formula-decl nil reduction_props nil)
    (pure_letApply recursive-judgement-axiom nil rreduction nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (D skolem-const-decl "Defs" reduction_props nil)
    (member const-decl "bool" sets nil)
    (vars_mark formula-decl nil preprocess nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (in_varlist const-decl "finite_set[nat]" IL nil)
    (vars_letApply formula-decl nil rreduction nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (union const-decl "set" sets nil)
    (purePopDepth formula-decl nil IL nil)
    (cvars_pure formula-decl nil preprocess nil)
    (letApply def-decl "IExpression" rreduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pure_count_keep formula-decl nil rreduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (refcountArray const-decl "nat" rreduction nil)
    (empty? const-decl "bool" sets nil)
    (allcount const-decl "nat" rreduction nil)
    (refcountStore const-decl "nat" rreduction nil)
    (refcountStack const-decl "nat" rreduction nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (applyReduce_correct_redex formula-decl nil rreduction nil)
    (store_stillmatch formula-decl nil reduction_props nil)
    (pure_letApply rec-application-judgement "(pure?)" reduction nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_error_match formula-decl nil reduction_props nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (fun adt-accessor-decl "[(application?) -> nat]" IExpression_adt
         nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (applyReduce const-decl "estate" reduction nil)
    (applyReduce const-decl "rstate" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)
  (applyReduce_match-1 nil 3700591313
   ("" (with-labels (skeep) ((apr stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (inst?)
          (("" (expand applyReduce)
            (("" (case "applyRedex?(gS`redex)")
              (("1" (case-replace "fun(gS`redex) = fun(grS`redex)")
                (("1"
                  (case-replace
                   "length(args(gS`redex)) = length(args(grS`redex))")
                  (("1" (lift-if)
                    (("1"
                      (case "fun(grS`redex) < D`length AND length(args(grS`redex)) = D`seq(fun(grS`redex))`arity")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand state_matches)
                              (("1"
                                (flatten)
                                (("1"
                                  (split)
                                  (("1"
                                    (rewrite letApply_unmark)
                                    (("1"
                                      (rewrite translate_refs_pure_eq)
                                      (("1"
                                        (rewrite unmark_mark)
                                        (("1"
                                          (case-replace
                                           "unmarkvars(args(grS`redex)) = args(gS`redex)")
                                          (("1"
                                            (typepred
                                             "D`seq(fun(grS`redex))`body")
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (replace stm :dir RL)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite pure_letApply)
                                        (("2"
                                          (rewrite unmark_pure)
                                          (("2"
                                            (rewrite pure_mark)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3"
                                    (rewrite cvars_pure)
                                    (("1"
                                      (rewrite cvars_pure)
                                      (("1"
                                        (rewrite purePopDepth)
                                        (("1"
                                          (rewrite purePopDepth)
                                          (("1"
                                            (expand union)
                                            (("1"
                                              (expand member)
                                              (("1"
                                                (case-replace
                                                 "{x: nat |
                       vars(grS`redex)(x) OR
                        bumpn(cvars(grS`context), 0)(x)} = {x: nat |
                       vars(rreduction.letApply(D`seq(fun(grS`redex))`arity,
                                     args(grS`redex),
                                     mark
                                     (emptyset)
                                     (D`seq(fun(grS`redex))`body)))
                           (x)
                        OR bumpn(cvars(grS`context), 0)(x)}")
                                                (("1"
                                                  (delete obj)
                                                  (("1"
                                                    (decompose-equality)
                                                    (("1"
                                                      (rewrite
                                                       vars_letApply)
                                                      (("1"
                                                        (typepred
                                                         "D`seq(fun(grS`redex))`body")
                                                        (("1"
                                                          (rewrite
                                                           vars_mark)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (use
                                           rreduction.pure_letApply)
                                          (("2"
                                            (use pure_mark)
                                            (("2"
                                              (typepred
                                               "D`seq(fun(grS`redex))`body")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (use rreduction.pure_letApply)
                                      (("2"
                                        (use pure_mark)
                                        (("2"
                                          (typepred
                                           "D`seq(fun(grS`redex))`body")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (lemma store_stillmatch)
                                    (("4"
                                      (inst?)
                                      (("1"
                                        (inst? :where stm)
                                        (("1"
                                          (split -1)
                                          (("1" (propax) nil nil)
                                           ("2" (grind) nil nil)
                                           ("3" (grind) nil nil)
                                           ("4" (grind) nil nil)
                                           ("5" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (use pure_count_keep)
                                          (("2"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (rewrite pure_letApply)
                                              (("3"
                                                (rewrite pure_mark)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (use applyReduce_correct_redex)
                                        (("3"
                                          (simplify :let-reduce? t)
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (split obj)
                          (("1" (flatten)
                            (("1" (split obj)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (use state_error_match)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use state_error_match)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete obj)
                    (("2" (expand state_matches)
                      (("2"
                        (with-labels (flatten) ((trr unm stam stom)))
                        (("2" (replace trr :dir RL)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete obj)
                  (("2" (expand state_matches)
                    (("2" (with-labels (flatten) ((trr unm stam stom)))
                      (("2" (replace trr :dir RL)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil))
                nil)
               ("2" (delete obj) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (applyReduce const-decl "rstate" rreduction nil)
    (applyReduce const-decl "estate" reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (fun adt-accessor-decl "[(application?) -> nat]" IExpression_adt
         nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil) nil
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (state_error_match formula-decl nil reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (pure_letApply rec-application-judgement "(pure?)" reduction nil)
    (store_stillmatch formula-decl nil reduction_props nil)
    (applyReduce_correct_redex formula-decl nil rreduction nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (refcountStack const-decl "nat" rreduction nil)
    (refcountStore const-decl "nat" rreduction nil)
    (allcount const-decl "nat" rreduction nil)
    (empty? const-decl "bool" sets nil)
    (refcountArray const-decl "nat" rreduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (pure_count_keep formula-decl nil rreduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (letApply def-decl "IExpression" rreduction nil)
    (cvars_pure formula-decl nil preprocess nil)
    (purePopDepth formula-decl nil IL nil)
    (union const-decl "set" sets nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (vars_letApply formula-decl nil rreduction nil)
    (in_varlist const-decl "finite_set[nat]" IL nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_mark formula-decl nil preprocess nil)
    (member const-decl "bool" sets nil) nil nil
    (pure_letApply recursive-judgement-axiom nil rreduction nil)
    (letApply_unmark formula-decl nil reduction_props nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (pure_letApply recursive-judgement-axiom nil reduction nil)
    (pure_mark formula-decl nil preprocess nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (unmark_mark formula-decl nil preprocess nil)
    (unmark_pure rec-application-judgement "(pure?)" preprocess nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil) nil
    (translate_refs def-decl "IExpression" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (translate_refs_pure_eq formula-decl nil reduction_props nil)
    (letApply def-decl "IExpression" reduction nil)
    (unmarkvars def-decl "list[(variable?)]" preprocess nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (pure? def-decl "bool" IL nil)
    (args adt-accessor-decl "[(application?) -> list[(variable?)]]"
          IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    nil (PRED type-eq-decl nil defined_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (applyRedex? const-decl "bool" IL nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil) nil (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil nil (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (state_matches? const-decl "boolean" reduction_props nil))
   shostak))
 (variable_match 0
  (variable_match-1 nil 3706360653
   ("" (skeep* :preds? t)
    (("" (expand state_matches?)
      (("" (skeep) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[T]" countability "sets_aux/")
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (popDepth def-decl "nat" IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (variableReduce_match_TCC1 0
  (variableReduce_match_TCC1-1 nil 3706301597
   ("" (use variable_match) nil nil)
   ((variable_match formula-decl nil reduction_props nil)) nil
   (variableReduce_match subtype "gS"
    "{gS | IExpression_adt.variable?(reduction.gS`redex)}")))
 (variableReduce_match 0
  (variableReduce_match-1 nil 3706301597
   ("" (skeep* :preds? t)
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (inst?)
          (("" (expand state_matches)
            (("" (with-labels (flatten) ((trr unm stam stom)))
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (expand variableReduce)
                  (("2" (assert)
                    (("2" (expand stack_matches)
                      (("2" (with-labels (flatten) ((staml stamr)))
                        (("2" (inst stamr "index(grS`redex)")
                          (("1" (flatten)
                            (("1"
                              (case-replace
                               "unmark(get(grS`stack)(grS`redex)) = get(grS`stack)(grS`redex)")
                              (("1"
                                (expand get)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case-replace
                                     "index(grS`redex) = index(gS`redex)")
                                    (("1"
                                      (replace trr :dir RL)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "get(grS`stack)(grS`redex)")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil)
                 ("4" (lemma stack_stillmatch)
                  (("4" (inst?)
                    (("4" (inst? :where stam)
                      (("4" (inst? :where stam)
                        (("4" (split -1)
                          (("1" (propax) nil nil) ("2" (grind) nil nil)
                           ("3" (hide 2)
                            (("3" (expand variableReduce)
                              (("3"
                                (assert)
                                (("3"
                                  (lemma stack_subset_match)
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (inst? :where stam)
                                      (("3"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (skeep* :preds? t)
                                          (("2"
                                            (typepred
                                             "get(grS`stack)(grS`redex)")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (skeep* :preds? t)
                            (("4" (hide 2)
                              (("4"
                                (expand variableReduce)
                                (("4"
                                  (assert)
                                  (("4"
                                    (lift-if)
                                    (("4"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (typepred
                                                   "grS`redex")
                                                  (("1"
                                                    (expand mark -6)
                                                    (("1"
                                                      (replace
                                                       -6
                                                       :dir
                                                       RL)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (lemma store_stillmatch)
                  (("5" (inst?)
                    (("5" (inst? :where stom)
                      (("5" (split)
                        (("1" (propax) nil nil) ("2" (grind) nil nil)
                         ("3" (skeep* :preds? t)
                          (("3" (expand variableReduce)
                            (("3" (lift-if)
                              (("3"
                                (assert)
                                (("3"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (typepred "grS`count(r)")
                                            (("1"
                                              (rewrite -1)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand refcount)
                                                  (("1"
                                                    (expand
                                                     refcountStack)
                                                    (("1"
                                                      (use
                                                       "count_elem[(value?)]")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (expand variableReduce)
                          (("4" (assert) nil nil)) nil)
                         ("5" (expand variableReduce)
                          (("5" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (store_stillmatch formula-decl nil reduction_props nil)
    (count_elem formula-decl nil finseq_theorems nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (refcountArray const-decl "nat" rreduction nil)
    (empty? const-decl "bool" sets nil)
    (allcount const-decl "nat" rreduction nil)
    (refcountStore const-decl "nat" rreduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (refcountStack const-decl "nat" rreduction nil)
    (stack_stillmatch formula-decl nil reduction_props nil)
    (stack_subset_match formula-decl nil reduction_props nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (singleton? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (markv const-decl "(variable?)" preprocess nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction nil)
    (Definition type-eq-decl nil reduction nil)
    (pure? def-decl "bool" IL nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IExpression type-decl nil IExpression_adt nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (unmark_value application-judgement "(value?)" preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (estate type-eq-decl nil reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (gS skolem-const-decl "goodstate" reduction_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (variableReduce const-decl "estate" reduction nil)
    (get const-decl "(value?)" IL nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (popDepth def-decl "nat" IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (variableReduce const-decl "rstate" rreduction nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[T]" countability "sets_aux/")
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (ift_match 0
  (ift_match-1 nil 3700424146
   ("" (skeep)
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (expand state_matches)
          (("" (flatten)
            (("" (apply-eta "grS`redex" "(ift?)")
              (("1" (replace -1 :dir RL)
                (("1" (expand unmark)
                  (("1" (expand translate_refs)
                    (("1" (replace -3 :dir RL)
                      (("1" (expand pureIftRedex?)
                        (("1" (expand iftRedex?)
                          (("1" (split)
                            (("1" (use translate_refs_pure)
                              (("1" (rewrite unmark_pure) nil nil))
                              nil)
                             ("2" (use translate_refs_pure)
                              (("2" (rewrite unmark_pure) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (IExpression_ift_eta formula-decl nil IExpression_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IContext type-decl nil IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (unmark def-decl "IContext" preprocess nil)
    (unmark def-decl "IExpression" preprocess nil)
    (iftRedex? const-decl "bool" IL nil)
    (elseexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (translate_refs_pure recursive-judgement-axiom nil reduction_props
     nil)
    (pure? def-decl "bool" IL nil)
    (thenexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (pureIftRedex? const-decl "bool" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (ift_condtion_match_TCC1 0
  (ift_condtion_match_TCC1-1 nil 3700425131 ("" (subtype-tcc) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cpure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (iftRedex? const-decl "bool" IL nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (ift_condtion_match subtype "grS`redex" "(IExpression_adt.ift?)")))
 (ift_condtion_match_TCC2 0
  (ift_condtion_match_TCC2-1 nil 3700425131
   ("" (use ifReduce_correct_indexing) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (iftRedex? const-decl "bool" IL nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (goodstate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (estate type-eq-decl nil reduction nil)
    (Store type-eq-decl nil reduction nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cpure? def-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (ifReduce_correct_indexing formula-decl nil rreduction nil))
   nil
   (ift_condtion_match subtype "IExpression_adt.condition(grS`redex)"
    "{x | IExpression_adt.index(IL.x) < grS`stack`length}")))
 (ift_condtion_match_TCC3 0
  (ift_condtion_match_TCC3-1 nil 3700425131
   ("" (use ift_match) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (iftRedex? const-decl "bool" IL nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (goodstate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (estate type-eq-decl nil reduction nil)
    (Store type-eq-decl nil reduction nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cpure? def-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (ift_match formula-decl nil reduction_props nil))
   nil
   (ift_condtion_match subtype "gS`redex" "(IExpression_adt.ift?)")))
 (ift_condtion_match_TCC4 0
  (ift_condtion_match_TCC4-1 nil 3700425131
   ("" (skeep*)
    (("" (use ift_match)
      (("" (ground)
        (("" (typepred "gS`redex") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((ift_match formula-decl nil reduction_props nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (goodstate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (estate type-eq-decl nil reduction nil)
    (Store type-eq-decl nil reduction nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cpure? def-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (condition adt-accessor-decl "[(ift?) -> (variable?)]"
               IExpression_adt nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (iftRedex? const-decl "bool" IL nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (ift_condtion_match subtype "IExpression_adt.condition(gS`redex)"
    "{x | IExpression_adt.index(IL.x) < gS`stack`length}")))
 (ift_condtion_match 0
  (ift_condtion_match-1 nil 3700425030
   ("" (with-labels (skeep*) ((iftr stm obj)))
    (("" (expand get)
      (("" (expand state_matches?)
        (("" (skeep)
          (("" (expand state_matches)
            (("" (with-labels (flatten) ((trr unm stam stom)))
              (("" (expand stack_matches)
                (("" (with-labels (flatten) ((staml stamr)))
                  (("" (inst stamr "index(condition(grS`redex))")
                    (("1"
                      (case-replace
                       "index(condition(gS`redex)) = index(condition(grS`redex))")
                      (("1"
                        (with-labels (flatten stamr) ((stamrl stamrr)))
                        (("1" (replace stamrr :dir RL)
                          (("1"
                            (typepred
                             "grS`stack`seq(grS`stack`length - 1 - index(condition(grS`redex)))")
                            (("1" (grind) nil nil)
                             ("2" (typepred "grS`redex")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete obj)
                        (("2" (replace trr :dir RL)
                          (("2" (apply-eta "grS`redex" "(ift?)")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete obj) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (get const-decl "(value?)" IL nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (iftRedex? const-decl "bool" IL nil)
    (gS skolem-const-decl "goodstate" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IExpression_ift_eta formula-decl nil IExpression_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (IExpression type-decl nil IExpression_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (condition adt-accessor-decl "[(ift?) -> (variable?)]"
               IExpression_adt nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (stack_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (ifReduce_match_TCC1 0
  (ifReduce_match_TCC1-1 nil 3700234159
   ("" (with-labels (skeep) (iftr stm obj))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (expand state_matches)
          (("" (with-labels (flatten) ((trr unm stam stom)))
            (("" (replace trr :dir RL)
              (("" (expand pureIftRedex?)
                (("" (expand iftRedex?)
                  (("" (apply-eta "grS`redex" "(ift?)")
                    (("" (replace -1 :dir RL)
                      (("" (expand unmark)
                        (("" (expand translate_refs iftr)
                          (("" (split)
                            (("1" (use translate_refs_pure)
                              (("1"
                                (use unmark_pure)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (use translate_refs_pure)
                              (("2"
                                (use unmark_pure)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (iftRedex? const-decl "bool" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (elseexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (translate_refs_pure recursive-judgement-axiom nil reduction_props
     nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (pure? def-decl "bool" IL nil)
    (thenexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmark def-decl "IContext" preprocess nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IContext type-decl nil IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (IExpression_ift_eta formula-decl nil IExpression_adt nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (ifReduce_match subtype "gS"
    "{gS | IL.pureIftRedex?(reduction.gS`redex)}")))
 (ifReduce_match 0
  (ifReduce_match-3 "" 3700426340
   ("" (with-labels (skeep) ((iftr stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (inst obj translate)
          ((""
            (with-labels
             (name "cpl"
                   "IF get(grS`stack)(condition(grS`redex)) = constant(0)
                                                        THEN grS WITH [`redex := elseexpr(grS`redex)]
                                                        ELSE grS WITH [`redex := thenexpr(grS`redex)]
                                                        ENDIF")
             ((cpl_def)))
            (("1"
              (case-replace
               "ifReduce(D)(grS) = release_marked(cpl)(condition(grS`redex))")
              (("1" (use release_marked_match)
                (("1" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (delete obj)
                    (("2" (use ifReduce_correct_indexing)
                      (("2" (rewrite purePopDepth)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (use ifReduce_correct_release_marked)
                    (("3" (grind) nil nil)) nil)
                   ("4" (delete obj)
                    (("4" (label obj 1)
                      (("4" (use ift_condtion_match)
                        (("4" (split -1)
                          (("1" (replace -1 cpl_def)
                            (("1" (expand ifReduce obj)
                              (("1"
                                (replace cpl_def :dir RL)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split obj)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand state_matches)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split obj)
                                            (("1"
                                              (replace -1 :dir RL)
                                              (("1"
                                                (apply-eta
                                                 "grS`redex"
                                                 "(ift?)")
                                                (("1"
                                                  (replace -1 :dir RL)
                                                  (("1"
                                                    (expand unmark stm)
                                                    (("1"
                                                      (expand
                                                       translate_refs
                                                       stm)
                                                      (("1"
                                                        (replace
                                                         stm
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (simplify)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (lemma
                                                 stack_subvar_match)
                                                (("3"
                                                  (inst
                                                   -1
                                                   gS
                                                   grS
                                                   cpl
                                                   translate)
                                                  (("3"
                                                    (split -1)
                                                    (("1"
                                                      (replace
                                                       cpl_def
                                                       :dir
                                                       RL)
                                                      (("1"
                                                        (simplify)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (use
                                                       purePopDepth)
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (rewrite
                                                       purePopDepth)
                                                      (("5"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("6"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("7"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (lemma store_stillmatch)
                                              (("4"
                                                (inst?)
                                                (("1"
                                                  (inst? :where stm)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (simplify)
                                                      (("3"
                                                        (prop)
                                                        (("3"
                                                          (skeep)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (simplify)
                                                      (("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (use
                                                     pure_count_keep)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (use
                                                   ifReduce_correct_redex_else)
                                                  (("3"
                                                    (simplify
                                                     :let-reduce?
                                                     t)
                                                    (("3"
                                                      (prop)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (ground)
                                        (("2"
                                          (hide-all-but (- obj))
                                          (("2"
                                            (expand state_matches)
                                            (("2"
                                              (with-labels
                                               (flatten)
                                               ((trr unm stam stom)))
                                              (("2"
                                                (split)
                                                (("1"
                                                  (apply-eta
                                                   "grS`redex"
                                                   "(ift?)")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (lemma
                                                   stack_subvar_match)
                                                  (("3"
                                                    (inst
                                                     -1
                                                     gS
                                                     grS
                                                     cpl
                                                     translate)
                                                    (("3"
                                                      (split -1)
                                                      (("1"
                                                        (replace
                                                         cpl_def
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("4"
                                                        (rewrite
                                                         purePopDepth)
                                                        (("4"
                                                          (hide-all-but
                                                           (1 iftr))
                                                          (("4"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (rewrite
                                                         purePopDepth)
                                                        (("5"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (apply-eta
                                                         "grS`redex"
                                                         "(ift?)")
                                                        (("6"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("7"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (use
                                                   store_stillmatch)
                                                  (("4"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (expand state_matches?)
                            (("3" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (delete obj)
                    (("5" (expand ifReduce 1)
                      (("5" (assert)
                        (("5" (rewrite purePopDepth)
                          (("1" (replace cpl_def :dir RL)
                            (("1" (simplify)
                              (("1"
                                (assert)
                                (("1"
                                  (expand state_matches)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand stack_matches)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (flatten)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (expand union)
                                            (("2"
                                              (expand member)
                                              (("2"
                                                (apply-eta
                                                 "grS`redex"
                                                 "(ift?)")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand ifReduce 1)
                (("2" (replace cpl_def :dir RL)
                  (("2" (lift-if) (("2" (propax) nil nil)) nil)) nil))
                nil)
               ("3" (split)
                (("1" (rewrite purePopDepth)
                  (("1" (use ifReduce_correct_indexing)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (use ifReduce_correct_release_marked)
                  (("2" (grind) nil nil)) nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (flatten)
              (("2" (skeep)
                (("2" (use ifReduce_correct_count_then)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("3" (flatten)
              (("3" (use ifReduce_correct_redex_then)
                (("3" (simplify :let-reduce? t)
                  (("3" (split)
                    (("1" (propax) nil nil) ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (grind) nil nil)
             ("5" (flatten)
              (("5" (skeep)
                (("5" (use ifReduce_correct_count_else)
                  (("5" (prop) nil nil)) nil))
                nil))
              nil)
             ("6" (use ifReduce_correct_redex_else)
              (("6" (simplify :let-reduce? t) (("6" (prop) nil nil))
                nil))
              nil)
             ("7" (grind) nil nil)
             ("8" (use ifReduce_correct_indexing)
              (("8" (prop) nil nil)) nil)
             ("9" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ifReduce_correct_count_else formula-decl nil rreduction nil)
    (ifReduce_correct_redex_then formula-decl nil rreduction nil)
    (ifReduce_correct_count_then formula-decl nil rreduction nil)
    (pure? def-decl "bool" IL nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (ifReduce const-decl "rstate" rreduction nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (marked adt-accessor-decl "[(variable?) -> bool]" IExpression_adt
     nil)
    (member const-decl "bool" sets nil)
    (release_marked const-decl "rstate" rreduction nil)
    (ifReduce_correct_indexing formula-decl nil rreduction nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (union const-decl "set" sets nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (iftRedex? const-decl "bool" IL nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (purePopDepth formula-decl nil IL nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (ifReduce_correct_release_marked formula-decl nil rreduction nil)
    (store_stillmatch formula-decl nil reduction_props nil)
    (ifReduce_correct_redex_else formula-decl nil rreduction nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (refcountStack const-decl "nat" rreduction nil)
    (refcountStore const-decl "nat" rreduction nil)
    (allcount const-decl "nat" rreduction nil)
    (empty? const-decl "bool" sets nil)
    (refcountArray const-decl "nat" rreduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (pure_count_keep formula-decl nil rreduction nil)
    (i!2 skolem-const-decl "(union(cvars(elseexpr(grS`redex)),
       bumpn(cvars(grS`context), popDepth(elseexpr(grS`redex)))))"
     reduction_props nil)
    (i!2 skolem-const-decl "(union(cvars(elseexpr(grS`redex)),
       bumpn(cvars(grS`context), popDepth(elseexpr(grS`redex)))))"
     reduction_props nil)
    (i!1 skolem-const-decl "(union(cvars(elseexpr(grS`redex)),
       bumpn(cvars(grS`context), popDepth(elseexpr(grS`redex)))))"
     reduction_props nil)
    (i!1 skolem-const-decl "(union(cvars(elseexpr(grS`redex)),
       bumpn(cvars(grS`context), popDepth(elseexpr(grS`redex)))))"
     reduction_props nil)
    (stack_subvar_match formula-decl nil reduction_props nil)
    (unmark def-decl "IContext" preprocess nil)
    (IExpression_ift_eta formula-decl nil IExpression_adt nil)
    (ift_condtion_match formula-decl nil reduction_props nil)
    (ifReduce const-decl "estate" reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (Defs type-eq-decl nil reduction nil)
    (Definition type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (release_marked_match formula-decl nil reduction_props nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (release adt-constructor-decl
     "[[(variable?), IExpression] -> (release?)]" IExpression_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (get const-decl "(value?)" IL nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (condition adt-accessor-decl "[(ift?) -> (variable?)]"
               IExpression_adt nil)
    (constant? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (constant adt-constructor-decl "[int -> (constant?)]"
     IExpression_adt nil)
    (elseexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (thenexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)
  (ifReduce_match-2 nil 3700398730
   ("" (with-labels (skeep) ((iftr stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (inst obj translate)
          (("1"
            (with-labels
             (name "cpl"
                   "IF get(grS`stack)(condition(grS`redex)) = constant(0)
                                              THEN grS WITH [`redex := elseexpr(grS`redex)]
                                              ELSE grS WITH [`redex := thenexpr(grS`redex)]
                                              ENDIF")
             ((cpl_def)))
            (("1"
              (case-replace
               "ifReduce(D)(grS) = release_marked(cpl)(condition(grS`redex))")
              (("1" (use release_marked_match)
                (("1" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (delete obj)
                    (("2" (rewrite purePopDepth)
                      (("1" (use ifReduce_correct_indexing)
                        (("1" (rewrite cpl_def :dir RL)
                          (("1" (simplify) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace cpl_def :dir RL)
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (use ifReduce_correct_release_marked)
                    (("3" (grind) nil nil)) nil)
                   ("4" (delete obj)
                    (("4" (label obj 1)
                      (("4"
                        (case-replace
                         "(get(grS`stack)(condition(grS`redex)) = constant(0)) = (get(gS`stack)(condition(gS`redex)) = constant(0))")
                        (("1" (expand ifReduce obj)
                          (("1" (replace cpl_def :dir RL)
                            (("1" (lift-if)
                              (("1"
                                (split obj)
                                (("1" (postpone) nil nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand state_matches stm)
                          (("2"
                            (with-labels (flatten)
                             ((trr unm stam stom)))
                            (("2" (expand stack_matches)
                              (("2"
                                (with-labels (flatten) ((staml stamr)))
                                (("2"
                                  (inst
                                   stamr
                                   "index(condition(gS`redex))")
                                  (("1"
                                    (expand get)
                                    (("1"
                                      (replace staml :dir RL)
                                      (("1"
                                        (with-labels
                                         (flatten)
                                         ((stamrl stamrr)))
                                        (("1"
                                          (replace stamrr :dir RL)
                                          (("1"
                                            (case-replace
                                             "index(condition(gS`redex)) = index(condition(grS`redex))")
                                            (("1"
                                              (name-replace
                                               "cd"
                                               "(grS`stack`seq(grS`stack`length - 1 - index(condition(grS`redex))))")
                                              (("1"
                                                (typepred cd)
                                                (("1"
                                                  (iff)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand value?)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 ifReduce_correct_indexing)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace trr :dir RL)
                                              (("2"
                                                (apply-eta
                                                 "grS`redex"
                                                 "(ift?)")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply-eta "grS`redex" "(ift?)")
                                    (("2"
                                      (expand union)
                                      (("2"
                                        (expand member)
                                        (("2"
                                          (replace -1 :dir RL)
                                          (("2"
                                            (expand cvars)
                                            (("2"
                                              (expand vars)
                                              (("2"
                                                (expand add)
                                                (("2"
                                                  (case
                                                   "index(condition(grS`redex)) = index(condition(gS`redex))")
                                                  (("1" (prop) nil nil)
                                                   ("2"
                                                    (replace
                                                     trr
                                                     :dir
                                                     RL)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (postpone) nil nil)
                         ("4" (postpone) nil nil)
                         ("5" (use ifReduce_correct_indexing)
                          (("5" (prop) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (delete obj)
                    (("5" (expand ifReduce)
                      (("5" (simplify)
                        (("5" (expand extend)
                          (("5" (replace cpl_def :dir RL)
                            (("5" (simplify)
                              (("5"
                                (assert)
                                (("5"
                                  (rewrite purePopDepth)
                                  (("1"
                                    (rewrite purePopDepth)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand state_matches)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((trr unm stam stom)))
                                          (("1"
                                            (expand stack_matches)
                                            (("1"
                                              (with-labels
                                               (flatten)
                                               ((staml stamr)))
                                              (("1"
                                                (inst
                                                 stamr
                                                 "index(condition(grS`redex))")
                                                (("1"
                                                  (expand extend)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply-eta
                                                   "grS`redex"
                                                   "(ift?)")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (replace cpl_def :dir RL)
                    (("1" (delete obj)
                      (("1" (simplify) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand ifReduce) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (expand ifReduce)
                (("2" (replace cpl_def :dir RL)
                  (("2" (lift-if) (("2" (propax) nil nil)) nil)) nil))
                nil)
               ("3" (split)
                (("1" (rewrite purePopDepth)
                  (("1" (use ifReduce_correct_indexing)
                    (("1" (grind) nil nil)) nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (use ifReduce_correct_release_marked)
                  (("2" (grind) nil nil)) nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (flatten)
              (("2" (skeep)
                (("2" (use ifReduce_correct_count_then)
                  (("2" (prop) nil nil)) nil))
                nil))
              nil)
             ("3" (use ifReduce_correct_redex_then)
              (("3" (simplify :let-reduce? t) (("3" (prop) nil nil))
                nil))
              nil)
             ("4" (grind) nil nil)
             ("5" (flatten)
              (("5" (skeep)
                (("5" (use ifReduce_correct_count_else)
                  (("5" (prop) nil nil)) nil))
                nil))
              nil)
             ("6" (use ifReduce_correct_redex_else)
              (("6" (simplify :let-reduce? t) (("6" (prop) nil nil))
                nil))
              nil)
             ("7" (grind) nil nil)
             ("8" (use ifReduce_correct_indexing)
              (("8" (prop) nil nil)) nil)
             ("9" (grind) nil nil))
            nil)
           ("2" (expand ifReduce)
            (("2" (expand release_marked) (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (ifReduce_match-1 nil 3700318480
   ("" (with-labels (skeep) ((iftr stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (inst obj translate)
          (("1"
            (name "cpl"
                  "IF get(grS`stack)(condition(grS`redex)) = constant(0)
                                     THEN grS WITH [`redex := elseexpr(grS`redex)]
                                     ELSE grS WITH [`redex := thenexpr(grS`redex)]
                                     ENDIF")
            (("1"
              (case-replace
               "ifReduce(D)(grS) = release_marked(cpl)(condition(grS`redex))")
              (("1" (use release_marked_match)
                (("1" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (rewrite purePopDepth)
                    (("1" (use ifReduce_correct_indexing)
                      (("1" (prop)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("3" (use ifReduce_correct_release_marked)
                    (("3" (grind) nil nil)) nil)
                   ("4" (delete obj)
                    (("4" (expand ifReduce 1)
                      (("4" (lift-if)
                        (("4" (split)
                          (("1" (flatten)
                            (("1"
                              (case "get(grS`stack)(condition(grS`redex)) = constant(0)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand state_matches)
                                  (("1"
                                    (split 1)
                                    (("1" (postpone) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3" (postpone) nil nil)
                                     ("4" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (delete obj)
                    (("5" (expand ifReduce)
                      (("5" (simplify)
                        (("5" (case-replace "cpl`stack = grS`stack")
                          (("1" (rewrite purePopDepth)
                            (("1" (expand state_matches)
                              (("1"
                                (with-labels
                                 (flatten)
                                 ((trr unm stam stom)))
                                (("1"
                                  (expand stack_matches)
                                  (("1"
                                    (with-labels
                                     (flatten)
                                     ((staml stamr)))
                                    (("1"
                                      (inst
                                       stamr
                                       "index(condition(grS`redex))")
                                      (("1"
                                        (expand extend)
                                        (("1"
                                          (case-replace
                                           "cpl`domain = grS`domain")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case-replace
                                               "cpl`count = grS`count")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (case-replace
                                                   "cpl`domain = grS`domain")
                                                  (("2"
                                                    (prop)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand union)
                                        (("2"
                                          (expand member)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (apply-eta
                                               "grS`redex"
                                               "(ift?)")
                                              (("2"
                                                (replace -1 :dir RL)
                                                (("2"
                                                  (expand cvars)
                                                  (("2"
                                                    (expand vars)
                                                    (("2"
                                                      (expand add)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand ifReduce)
                  (("2" (simplify)
                    (("2" (delete obj) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (delete obj)
                (("2" (expand ifReduce)
                  (("2" (replace -1 :dir RL)
                    (("2" (lift-if) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (split)
                (("1" (rewrite purePopDepth)
                  (("1" (use ifReduce_correct_indexing)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (use ifReduce_correct_release_marked)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma ifReduce_correct_count_then)
                (("2" (inst?)
                  (("2" (skeep)
                    (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (use ifReduce_correct_redex_then)
              (("3" (simplify :let-reduce? t) (("3" (prop) nil nil))
                nil))
              nil)
             ("4" (grind) nil nil)
             ("5" (flatten)
              (("5" (skeep)
                (("5" (use ifReduce_correct_count_else)
                  (("5" (prop) nil nil)) nil))
                nil))
              nil)
             ("6" (use ifReduce_correct_redex_else)
              (("6" (simplify :let-reduce? t) (("6" (prop) nil nil))
                nil))
              nil)
             ("7" (grind) nil nil)
             ("8" (use ifReduce_correct_indexing)
              (("8" (prop) nil nil)) nil)
             ("9" (grind) nil nil))
            nil)
           ("2" (expand ifReduce)
            (("2" (expand release_marked)
              (("2" (simplify) (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (lookup_match 0
  (lookup_match-1 nil 3700857841
   ("" (with-labels (skeep) ((lup stm obj)))
    (("" (expand state_matches)
      (("" (flatten)
        (("" (replace stm :dir RL) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((state_matches const-decl "boolean" reduction_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (popDepth def-decl "nat" IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (lookupRedex? const-decl "bool" IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (arrayvalue_translate_TCC1 0
  (arrayvalue_translate_TCC1-1 nil 3700857840
   ("" (subtype-tcc) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cpure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (lookupRedex? const-decl "bool" IL nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (arrayvalue_translate subtype "grS`redex"
    "(IExpression_adt.lookup?)")))
 (arrayvalue_translate_TCC2 0
  (arrayvalue_translate_TCC2-1 nil 3700857840
   ("" (skeep*)
    (("" (use lookupRedex_arrayvalue_index) (("" (grind) nil nil))
      nil))
    nil)
   ((lookupRedex_arrayvalue_index formula-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (arrayvalue_translate subtype
    "IExpression_adt.arrayvalue(grS`redex)"
    "{x | IExpression_adt.index(IL.x) < grS`stack`length}")))
 (arrayvalue_translate_TCC3 0
  (arrayvalue_translate_TCC3-1 nil 3700857840 ("" (grind) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cpure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (lookupRedex? const-decl "bool" IL nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (arrayvalue_translate subtype "gS`redex"
    "(IExpression_adt.lookup?)")))
 (arrayvalue_translate_TCC4 0
  (arrayvalue_translate_TCC4-1 nil 3700857840
   ("" (skeep*)
    ((""
      (case "index(arrayvalue(gS`redex)) = index(arrayvalue(grS`redex))")
      (("1" (use lookupRedex_arrayvalue_index) (("1" (grind) nil nil))
        nil)
       ("2" (expand state_matches)
        (("2" (flatten)
          (("2" (replace -2 :dir RL) (("2" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (grind) nil nil))
      nil))
    nil)
   ((goodrstate type-eq-decl nil reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (goodstate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (estate type-eq-decl nil reduction nil)
    (Store type-eq-decl nil reduction nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (arrayvalue adt-accessor-decl "[(lookup?) -> (variable?)]"
     IExpression_adt nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (lookupRedex? const-decl "bool" IL nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (lookupRedex_arrayvalue_index formula-decl nil rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (arrayvalue_translate subtype "IExpression_adt.arrayvalue(gS`redex)"
    "{x | IExpression_adt.index(IL.x) < gS`stack`length}")))
 (arrayvalue_translate 0
  (arrayvalue_translate-1 nil 3700923396
   ("" (skeep*)
    (("" (expand state_matches)
      (("" (with-labels (flatten) ((trr unm stam stom)))
        (("" (expand stack_matches)
          (("" (with-labels (flatten) ((staml stamr)))
            (("" (inst stamr "index(arrayvalue(grS`redex))")
              (("1"
                (case "index(arrayvalue(gS`redex)) = index(arrayvalue(grS`redex))")
                (("1" (grind) nil nil)
                 ("2" (replace trr :dir RL) (("2" (grind) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (arrayvalue adt-accessor-decl "[(lookup?) -> (variable?)]"
     IExpression_adt nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IExpression type-decl nil IExpression_adt nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (get const-decl "(value?)" IL nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (lookupRedex? const-decl "bool" IL nil)
    (goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (position_translate_TCC1 0
  (position_translate_TCC1-1 nil 3700857840
   ("" (skeep*)
    (("" (use lookupRedex_position_index) (("" (grind) nil nil)) nil))
    nil)
   ((lookupRedex_position_index formula-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (position_translate subtype "IExpression_adt.position(grS`redex)"
    "{x | IExpression_adt.index(IL.x) < grS`stack`length}")))
 (position_translate_TCC2 0
  (position_translate_TCC2-1 nil 3700857840
   ("" (skeep*)
    ((""
      (case-replace
       "index(position(gS`redex)) = index(position(grS`redex))")
      (("1" (use lookupRedex_position_index) (("1" (grind) nil nil))
        nil)
       ("2" (expand state_matches)
        (("2" (flatten)
          (("2" (replace -2 :dir RL) (("2" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (grind) nil nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IExpression type-decl nil IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (position adt-accessor-decl "[(lookup?) -> (variable?)]"
      IExpression_adt nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (lookupRedex? const-decl "bool" IL nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (lookupRedex_position_index formula-decl nil rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (position_translate subtype "IExpression_adt.position(gS`redex)"
    "{x | IExpression_adt.index(IL.x) < gS`stack`length}")))
 (position_translate 0
  (position_translate-1 nil 3700923597
   ("" (skeep)
    (("" (expand state_matches)
      (("" (with-labels (flatten) ((trr unm stam stom)))
        (("" (expand stack_matches)
          (("" (with-labels (flatten) ((staml stamr)))
            (("" (inst stamr "index(position(grS`redex))")
              (("1"
                (case "index(position(gS`redex)) = index(position(grS`redex))")
                (("1" (grind) nil nil)
                 ("2" (replace trr :dir RL) (("2" (grind) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (position adt-accessor-decl "[(lookup?) -> (variable?)]"
      IExpression_adt nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IExpression type-decl nil IExpression_adt nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (get const-decl "(value?)" IL nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (lookupRedex? const-decl "bool" IL nil)
    (goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (lookupReduce_match_TCC1 0
  (lookupReduce_match_TCC1-1 nil 3700234159
   ("" (with-labels (skeep) (lrr stm obj))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (expand lookupRedex?)
          (("" (expand state_matches) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (lookupRedex? const-decl "bool" IL nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (popDepth def-decl "nat" IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (lookupReduce_match subtype "gS"
    "{gS | IL.lookupRedex?(reduction.gS`redex)}")))
 (lookupReduce_match 0
  (lookupReduce_match-2 "" 3710697607
   ("" (with-labels (skeep) ((lookup stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (inst obj translate)
          (("" (case "gS`redex = unmark(grS`redex)")
            (("1" (label redex_unm -1)
              (("1" (expand state_matches stm)
                (("1" (with-labels (flatten) ((trr unm stam stom)))
                  (("1"
                    (case "ref?(get(grS`stack)(arrayvalue(grS`redex)))")
                    (("1"
                      (case "constant?(get(grS`stack)(position(grS`redex)))")
                      (("1" (expand lookupReduce)
                        (("1"
                          (name "r"
                                "refindex(get(grS`stack)(arrayvalue(grS`redex)))")
                          (("1" (replace -1)
                            (("1" (lemma arrayvalue_translate)
                              (("1"
                                (inst -1 "gS" "grS" "translate")
                                (("1"
                                  (rewrite -1 :dir RL)
                                  (("1"
                                    (case-replace
                                     "get(grS`stack)(arrayvalue(grS`redex)) = ref(r)")
                                    (("1"
                                      (simplify)
                                      (("1"
                                        (expand translate_refs obj)
                                        (("1"
                                          (lemma position_translate)
                                          (("1"
                                            (inst
                                             -1
                                             "gS"
                                             "grS"
                                             "translate")
                                            (("1"
                                              (rewrite -1 :dir RL)
                                              (("1"
                                                (name
                                                 "i"
                                                 "value(get(grS`stack)(position(grS`redex)))")
                                                (("1"
                                                  (case-replace
                                                   "get(grS`stack)(position(grS`redex)) = constant(i)")
                                                  (("1"
                                                    (simplify)
                                                    (("1"
                                                      (expand
                                                       translate_refs
                                                       obj)
                                                      (("1"
                                                        (case
                                                         "grS`domain(r)")
                                                        (("1"
                                                          (expand
                                                           store_matches)
                                                          (("1"
                                                            (with-labels
                                                             (inst-cp
                                                              stom
                                                              r)
                                                             ((stomc
                                                               stom)))
                                                            (("1"
                                                              (split
                                                               stomc)
                                                              (("1"
                                                                (with-labels
                                                                 (flatten
                                                                  stomc)
                                                                 ((domtr
                                                                   doml
                                                                   domv)))
                                                                (("1"
                                                                  (replace
                                                                   doml)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (split
                                                                         obj)
                                                                        (("1"
                                                                          (with-labels
                                                                           (flatten
                                                                            obj)
                                                                           ((ipos
                                                                             ismall
                                                                             obj)))
                                                                          (("1"
                                                                            (use
                                                                             release_marked_match)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (case-replace
                                                                                 "popDepth(setRedex(grS, grS`store(r)`seq(i))`redex) = 0")
                                                                                (("1"
                                                                                  (use
                                                                                   lookupRedex_arrayvalue_index)
                                                                                  (("1"
                                                                                    (expand
                                                                                     setRedex)
                                                                                    (("1"
                                                                                      (simplify)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "grS`store(r)`seq(i)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     setRedex)
                                                                                    (("1"
                                                                                      (simplify)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          -1))
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (with-labels
                                                                                 (flatten
                                                                                  1)
                                                                                 ((mrk
                                                                                   vrs)))
                                                                                (("3"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("3"
                                                                                    (expand
                                                                                     member)
                                                                                    (("3"
                                                                                      (with-labels
                                                                                       (typepred
                                                                                        "grS`redex")
                                                                                       ((href
                                                                                         hvars
                                                                                         hcvars
                                                                                         hsl
                                                                                         hcp
                                                                                         hmark)))
                                                                                      (("3"
                                                                                        (replace
                                                                                         hmark
                                                                                         mrk
                                                                                         :dir
                                                                                         RL)
                                                                                        (("3"
                                                                                          (apply-eta
                                                                                           "grS`redex"
                                                                                           "(lookup?)")
                                                                                          (("3"
                                                                                            (replace
                                                                                             -1
                                                                                             :dir
                                                                                             RL)
                                                                                            (("3"
                                                                                              (expand
                                                                                               setRedex)
                                                                                              (("3"
                                                                                                (simplify)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   mark
                                                                                                   mrk)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     markv
                                                                                                     mrk)
                                                                                                    (("3"
                                                                                                      (split
                                                                                                       mrk)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         add)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           member)
                                                                                                          (("2"
                                                                                                            (flatten
                                                                                                             mrk)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               vrs)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "grS`store(r)`seq(i)")
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (delete
                                                                                 obj)
                                                                                (("4"
                                                                                  (expand
                                                                                   state_matches)
                                                                                  (("4"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       setRedex
                                                                                       1)
                                                                                      (("2"
                                                                                        (simplify)
                                                                                        (("2"
                                                                                          (inst
                                                                                           domv
                                                                                           i)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "unmark(grS`store(r)`seq(i)) = grS`store(r)`seq(i)")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "grS`store(r)`seq(i)")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "grS`store(r)`seq(i)")
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (reveal
                                                                                                   *)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("4"
                                                                                      (expand
                                                                                       setRedex)
                                                                                      (("4"
                                                                                        (simplify)
                                                                                        (("4"
                                                                                          (lemma
                                                                                           stack_subset_match)
                                                                                          (("4"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (inst?
                                                                                               :where
                                                                                               stam)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (with-labels
                                                                                                   (skeep
                                                                                                    :preds?
                                                                                                    t)
                                                                                                   ((ih
                                                                                                     obj)))
                                                                                                  (("2"
                                                                                                    (delete
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       bumpn)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         union)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           member)
                                                                                                          (("2"
                                                                                                            (case-replace
                                                                                                             "popDepth(grS`store(r)`seq(i)) = 0")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               purePopDepth
                                                                                                               obj)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 ih)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "grS`store(r)`seq(i)")
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "grS`store(r)`seq(i)")
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("5"
                                                                                      (use
                                                                                       store_stillmatch)
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (expand
                                                                                           setRedex)
                                                                                          (("3"
                                                                                            (delete
                                                                                             2)
                                                                                            (("3"
                                                                                              (skeep
                                                                                               :preds?
                                                                                               t)
                                                                                              (("3"
                                                                                                (lift-if)
                                                                                                (("3"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "grS`count(r_1)")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             refcount)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               refcountStore_ref)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind-with-ext)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("5"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (delete
                                                                                 obj)
                                                                                (("5"
                                                                                  (expand
                                                                                   setRedex)
                                                                                  (("5"
                                                                                    (simplify)
                                                                                    (("5"
                                                                                      (case-replace
                                                                                       "popDepth(grS`store(r)`seq(i)) = 0")
                                                                                      (("1"
                                                                                        (expand
                                                                                         stack_matches)
                                                                                        (("1"
                                                                                          (with-labels
                                                                                           (flatten)
                                                                                           ((staml
                                                                                             stamr)))
                                                                                          (("1"
                                                                                            (inst
                                                                                             stamr
                                                                                             "index(arrayvalue(grS`redex))")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (delete
                                                                                               2)
                                                                                              (("2"
                                                                                                (apply-eta
                                                                                                 "grS`redex"
                                                                                                 "(lookup?)")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "grS`store(r)`seq(i)")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (use
                                                                               set_redex_correct)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    -1))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           state_error_match)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (typepred
                                                                   "grS`count(r)")
                                                                  (("2"
                                                                    (rewrite
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       refcount)
                                                                      (("2"
                                                                        (expand
                                                                         refcountStack)
                                                                        (("2"
                                                                          (lemma
                                                                           "count_elem[(value?)]")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "get(grS`stack)(arrayvalue(grS`redex))")
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   get)
                                                                                  (("2"
                                                                                    (inst?
                                                                                     1
                                                                                     :where
                                                                                     1)
                                                                                    (("2"
                                                                                      (use
                                                                                       lookupRedex_arrayvalue_index)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (typepred
                                                             "grS`stack")
                                                            (("2"
                                                              (expand
                                                               every)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "grS`stack`length -1 - index(arrayvalue(grS`redex))")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (use
                                                                   lookupRedex_arrayvalue_index)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete obj)
                                                    (("2"
                                                      (grind-with-ext)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (delete obj)
                                      (("2" (grind-with-ext) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete obj)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand lookupReduce)
                        (("2" (assert)
                          (("2" (use position_translate)
                            (("2" (rewrite -1 :dir RL)
                              (("1"
                                (use value_translate_rev_constant)
                                (("1"
                                  (assert)
                                  (("1"
                                    (use state_error_match)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (use lookupRedex_position_index)
                        (("3" (grind) nil nil)) nil))
                      nil)
                     ("2" (expand lookupReduce)
                      (("2" (assert)
                        (("2" (use arrayvalue_translate)
                          (("2" (rewrite -1 :dir RL)
                            (("1" (use value_translate_rev_ref)
                              (("1"
                                (assert)
                                (("1"
                                  (use state_error_match)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (use lookupRedex_arrayvalue_index)
                      (("3" (grind) nil nil)) nil)
                     ("4" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand state_matches stm)
              (("2" (use translate_refs_pure_eq)
                (("2" (use unmark_pure)
                  (("1" (assert) nil nil)
                   ("2" (delete stm obj) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (translate_refs_pure_eq formula-decl nil reduction_props nil)
    (value_translate_rev_ref formula-decl nil reduction_props nil)
    (constant? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (position adt-accessor-decl "[(lookup?) -> (variable?)]"
      IExpression_adt nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (arrayvalue_translate formula-decl nil reduction_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (position_translate formula-decl nil reduction_props nil)
    (constant adt-constructor-decl "[int -> (constant?)]"
     IExpression_adt nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_error_match formula-decl nil reduction_props nil)
    (set_redex_correct formula-decl nil reduction nil)
    (lookupRedex_arrayvalue_index formula-decl nil rreduction nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (IExpression_lookup_eta formula-decl nil IExpression_adt nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (lookupRedex? const-decl "bool" IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (markv const-decl "(variable?)" preprocess nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (member const-decl "bool" sets nil)
    (store_stillmatch formula-decl nil reduction_props nil)
    (refcountStore_ref formula-decl nil rreduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IExpression_ref_extensionality formula-decl nil IExpression_adt
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count const-decl "nat" finseq_theorems nil)
    (refcountArray const-decl "nat" rreduction nil)
    (empty? const-decl "bool" sets nil)
    (allcount const-decl "nat" rreduction nil)
    (refcountStore const-decl "nat" rreduction nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (refcountStack const-decl "nat" rreduction nil)
    (stack_subset_match formula-decl nil reduction_props nil)
    (purePopDepth formula-decl nil IL nil)
    (union const-decl "set" sets nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (below type-eq-decl nil naturalnumbers nil)
    (unmark_value application-judgement "(value?)" preprocess nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i skolem-const-decl "int" reduction_props nil)
    (gS skolem-const-decl "goodstate" reduction_props nil)
    (translate skolem-const-decl "[nat -> nat]" reduction_props nil)
    (setRedex const-decl "rstate" rreduction nil)
    (pure? def-decl "bool" IL nil)
    (release_marked_match formula-decl nil reduction_props nil)
    (count_elem formula-decl nil finseq_theorems nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (r skolem-const-decl "nat" reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (nonempty? const-decl "bool" sets nil)
    (IExpression_constant_extensionality formula-decl nil
     IExpression_adt nil)
    (value adt-accessor-decl "[(constant?) -> int]" IExpression_adt
     nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (ref adt-constructor-decl "[nat -> (ref?)]" IExpression_adt nil)
    (lookupReduce const-decl "estate" reduction nil)
    (lookupReduce const-decl "rstate" rreduction nil)
    (value_translate_rev_constant formula-decl nil reduction_props nil)
    (lookupRedex_position_index formula-decl nil rreduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (arrayvalue adt-accessor-decl "[(lookup?) -> (variable?)]"
     IExpression_adt nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (get const-decl "(value?)" IL nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (IExpression type-decl nil IExpression_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (unmark def-decl "IExpression" preprocess nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)
  (lookupReduce_match-1 nil 3700505818
   ("" (with-labels (skeep) ((lookup stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (inst obj translate)
          (("" (case "gS`redex = unmark(grS`redex)")
            (("1" (label redex_unm -1)
              (("1" (expand state_matches stm)
                (("1" (with-labels (flatten) ((trr unm stam stom)))
                  (("1"
                    (case "ref?(get(grS`stack)(arrayvalue(grS`redex)))")
                    (("1"
                      (case "constant?(get(grS`stack)(position(grS`redex)))")
                      (("1" (expand lookupReduce)
                        (("1"
                          (name "r"
                                "refindex(get(grS`stack)(arrayvalue(grS`redex)))")
                          (("1" (replace -1)
                            (("1" (lemma arrayvalue_translate)
                              (("1"
                                (inst -1 "gS" "grS" "translate")
                                (("1"
                                  (rewrite -1 :dir RL)
                                  (("1"
                                    (case-replace
                                     "get(grS`stack)(arrayvalue(grS`redex)) = ref(r)")
                                    (("1"
                                      (simplify)
                                      (("1"
                                        (expand translate_refs obj)
                                        (("1"
                                          (lemma position_translate)
                                          (("1"
                                            (inst
                                             -1
                                             "gS"
                                             "grS"
                                             "translate")
                                            (("1"
                                              (rewrite -1 :dir RL)
                                              (("1"
                                                (name
                                                 "i"
                                                 "value(get(grS`stack)(position(grS`redex)))")
                                                (("1"
                                                  (case-replace
                                                   "get(grS`stack)(position(grS`redex)) = constant(i)")
                                                  (("1"
                                                    (simplify)
                                                    (("1"
                                                      (expand
                                                       translate_refs
                                                       obj)
                                                      (("1"
                                                        (case
                                                         "grS`domain(r)")
                                                        (("1"
                                                          (expand
                                                           store_matches)
                                                          (("1"
                                                            (with-labels
                                                             (inst-cp
                                                              stom
                                                              r)
                                                             ((stomc
                                                               stom)))
                                                            (("1"
                                                              (split
                                                               stomc)
                                                              (("1"
                                                                (with-labels
                                                                 (flatten
                                                                  stomc)
                                                                 ((domtr
                                                                   doml
                                                                   domv)))
                                                                (("1"
                                                                  (replace
                                                                   doml)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (split
                                                                         obj)
                                                                        (("1"
                                                                          (with-labels
                                                                           (flatten
                                                                            obj)
                                                                           ((ipos
                                                                             ismall
                                                                             obj)))
                                                                          (("1"
                                                                            (use
                                                                             release_marked_match)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (case-replace
                                                                                 "popDepth(setRedex(grS, grS`store(r)`seq(i))`redex) = 0")
                                                                                (("1"
                                                                                  (use
                                                                                   lookupRedex_arrayvalue_index)
                                                                                  (("1"
                                                                                    (expand
                                                                                     setRedex)
                                                                                    (("1"
                                                                                      (simplify)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "grS`store(r)`seq(i)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     setRedex)
                                                                                    (("1"
                                                                                      (simplify)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          -1))
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (with-labels
                                                                                 (flatten
                                                                                  1)
                                                                                 ((mrk
                                                                                   vrs)))
                                                                                (("3"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("3"
                                                                                    (expand
                                                                                     member)
                                                                                    (("3"
                                                                                      (with-labels
                                                                                       (typepred
                                                                                        "grS`redex")
                                                                                       ((href
                                                                                         hvars
                                                                                         hcvars
                                                                                         hsl
                                                                                         hcp
                                                                                         hmark)))
                                                                                      (("3"
                                                                                        (replace
                                                                                         hmark
                                                                                         mrk
                                                                                         :dir
                                                                                         RL)
                                                                                        (("3"
                                                                                          (apply-eta
                                                                                           "grS`redex"
                                                                                           "(lookup?)")
                                                                                          (("3"
                                                                                            (replace
                                                                                             -1
                                                                                             :dir
                                                                                             RL)
                                                                                            (("3"
                                                                                              (expand
                                                                                               setRedex)
                                                                                              (("3"
                                                                                                (simplify)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   mark
                                                                                                   mrk)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     markv
                                                                                                     mrk)
                                                                                                    (("3"
                                                                                                      (split
                                                                                                       mrk)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         add)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           member)
                                                                                                          (("2"
                                                                                                            (flatten
                                                                                                             mrk)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               vrs)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "grS`store(r)`seq(i)")
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (delete
                                                                                 obj)
                                                                                (("4"
                                                                                  (expand
                                                                                   state_matches)
                                                                                  (("4"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       setRedex
                                                                                       1)
                                                                                      (("2"
                                                                                        (simplify)
                                                                                        (("2"
                                                                                          (inst
                                                                                           domv
                                                                                           i)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "unmark(grS`store(r)`seq(i)) = grS`store(r)`seq(i)")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "grS`store(r)`seq(i)")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("4"
                                                                                      (expand
                                                                                       setRedex)
                                                                                      (("4"
                                                                                        (simplify)
                                                                                        (("4"
                                                                                          (lemma
                                                                                           stack_subset_match)
                                                                                          (("4"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (inst?
                                                                                               :where
                                                                                               stam)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (with-labels
                                                                                                   (skeep
                                                                                                    :preds?
                                                                                                    t)
                                                                                                   ((ih
                                                                                                     obj)))
                                                                                                  (("2"
                                                                                                    (delete
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       bumpn)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         union)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           member)
                                                                                                          (("2"
                                                                                                            (case-replace
                                                                                                             "popDepth(grS`store(r)`seq(i)) = 0")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               purePopDepth
                                                                                                               obj)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 ih)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "grS`store(r)`seq(i)")
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "grS`store(r)`seq(i)")
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("5"
                                                                                      (use
                                                                                       store_stillmatch)
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (expand
                                                                                           setRedex)
                                                                                          (("3"
                                                                                            (delete
                                                                                             2)
                                                                                            (("3"
                                                                                              (skeep
                                                                                               :preds?
                                                                                               t)
                                                                                              (("3"
                                                                                                (lift-if)
                                                                                                (("3"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "grS`count(r_1)")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             refcount)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               refcountStore_ref)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind-with-ext)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("5"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (delete
                                                                                 obj)
                                                                                (("5"
                                                                                  (expand
                                                                                   setRedex)
                                                                                  (("5"
                                                                                    (simplify)
                                                                                    (("5"
                                                                                      (case-replace
                                                                                       "popDepth(grS`store(r)`seq(i)) = 0")
                                                                                      (("1"
                                                                                        (expand
                                                                                         stack_matches)
                                                                                        (("1"
                                                                                          (with-labels
                                                                                           (flatten)
                                                                                           ((staml
                                                                                             stamr)))
                                                                                          (("1"
                                                                                            (inst
                                                                                             stamr
                                                                                             "index(arrayvalue(grS`redex))")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (delete
                                                                                               2)
                                                                                              (("2"
                                                                                                (apply-eta
                                                                                                 "grS`redex"
                                                                                                 "(lookup?)")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "grS`store(r)`seq(i)")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (use
                                                                               set_redex_correct)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    -1))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           state_error_match)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (typepred
                                                                   "grS`count(r)")
                                                                  (("2"
                                                                    (rewrite
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       refcount)
                                                                      (("2"
                                                                        (expand
                                                                         refcountStack)
                                                                        (("2"
                                                                          (lemma
                                                                           "count_elem[(value?)]")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "get(grS`stack)(arrayvalue(grS`redex))")
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   get)
                                                                                  (("2"
                                                                                    (inst?
                                                                                     1
                                                                                     :where
                                                                                     1)
                                                                                    (("2"
                                                                                      (use
                                                                                       lookupRedex_arrayvalue_index)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (typepred
                                                             "grS`stack")
                                                            (("2"
                                                              (expand
                                                               every)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "grS`stack`length -1 - index(arrayvalue(grS`redex))")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (use
                                                                   lookupRedex_arrayvalue_index)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete obj)
                                                    (("2"
                                                      (grind-with-ext)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (delete obj)
                                      (("2" (grind-with-ext) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete obj)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand lookupReduce)
                        (("2" (assert)
                          (("2" (use position_translate)
                            (("2" (rewrite -1 :dir RL)
                              (("1"
                                (use value_translate_rev_constant)
                                (("1"
                                  (assert)
                                  (("1"
                                    (use state_error_match)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (use lookupRedex_position_index)
                        (("3" (grind) nil nil)) nil))
                      nil)
                     ("2" (expand lookupReduce)
                      (("2" (assert)
                        (("2" (use arrayvalue_translate)
                          (("2" (rewrite -1 :dir RL)
                            (("1" (use value_translate_rev_ref)
                              (("1"
                                (assert)
                                (("1"
                                  (use state_error_match)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (use lookupRedex_arrayvalue_index)
                      (("3" (grind) nil nil)) nil)
                     ("4" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand state_matches stm)
              (("2" (use translate_refs_pure_eq)
                (("2" (use unmark_pure)
                  (("1" (assert) nil nil)
                   ("2" (delete stm obj) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil) nil
    (mark def-decl "IExpression" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (unmark def-decl "IExpression" preprocess nil)
    (goodstate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (estate type-eq-decl nil reduction nil)
    (Store type-eq-decl nil reduction nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) nil nil nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) nil (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IExpression type-decl nil IExpression_adt nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (get const-decl "(value?)" IL nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (arrayvalue adt-accessor-decl "[(lookup?) -> (variable?)]"
     IExpression_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lookupRedex_position_index formula-decl nil rreduction nil)
    (value_translate_rev_constant formula-decl nil reduction_props nil)
    (lookupReduce const-decl "rstate" rreduction nil)
    (lookupReduce const-decl "estate" reduction nil)
    (ref adt-constructor-decl "[nat -> (ref?)]" IExpression_adt nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (value adt-accessor-decl "[(constant?) -> int]" IExpression_adt
     nil)
    (IExpression_constant_extensionality formula-decl nil
     IExpression_adt nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (count_elem formula-decl nil finseq_theorems nil)
    (release_marked_match formula-decl nil reduction_props nil)
    (pure? def-decl "bool" IL nil)
    (setRedex const-decl "rstate" rreduction nil) nil nil nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (unmark_value application-judgement "(value?)" preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (union const-decl "set" sets nil)
    (purePopDepth formula-decl nil IL nil)
    (stack_subset_match formula-decl nil reduction_props nil)
    (refcountStack const-decl "nat" rreduction nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (refcountStore const-decl "nat" rreduction nil)
    (allcount const-decl "nat" rreduction nil)
    (empty? const-decl "bool" sets nil)
    (refcountArray const-decl "nat" rreduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IExpression_ref_extensionality formula-decl nil IExpression_adt
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (refcountStore_ref formula-decl nil rreduction nil)
    (store_stillmatch formula-decl nil reduction_props nil)
    (member const-decl "bool" sets nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (markv const-decl "(variable?)" preprocess nil)
    (add const-decl "(nonempty?)" sets nil)
    (stack_matches const-decl "boolean" reduction_props nil) nil
    (lookupRedex? const-decl "bool" IL nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (IExpression_lookup_eta formula-decl nil IExpression_adt nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (lookupRedex_arrayvalue_index formula-decl nil rreduction nil)
    (set_redex_correct formula-decl nil reduction nil)
    (state_error_match formula-decl nil reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (constant adt-constructor-decl "[int -> (constant?)]"
     IExpression_adt nil)
    (position_translate formula-decl nil reduction_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (arrayvalue_translate formula-decl nil reduction_props nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (position adt-accessor-decl "[(lookup?) -> (variable?)]"
      IExpression_adt nil)
    (constant? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (value_translate_rev_ref formula-decl nil reduction_props nil)
    (translate_refs_pure_eq formula-decl nil reduction_props nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (state_matches? const-decl "boolean" reduction_props nil))
   shostak))
 (newintReduce_match_TCC1 0
  (newintReduce_match_TCC1-1 nil 3700234159 ("" (grind) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cpure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (newintRedex? const-decl "bool" IL nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (newintReduce_match subtype "gS"
    "{gS | IL.newintRedex?(reduction.gS`redex)}")))
 (newintReduce_match 0
  (newintReduce_match-2 nil 3700589475
   ("" (with-labels (skeep) ((nir stm ndr obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        ((""
          (inst obj
           "translate WITH [(least_out(grS`domain)) := least_out(gS`domain)]")
          ((""
            (case "state_matches(gS, grS)(translate WITH [(least_out(grS`domain)) := least_out(gS`domain)])")
            (("1" (expand newintReduce)
              (("1" (label nstm -1)
                (("1" (expand state_matches (nstm obj))
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (grind) nil nil) ("2" (propax) nil nil)
                       ("3" (case-replace "popDepth(grS`redex) = 0")
                        (("1" (expand popDepth obj)
                          (("1"
                            (case-replace
                             "cvars(ref(least_out(grS`domain))) = cvars(grS`redex)")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("4" (expand store_matches)
                        (("4" (skeep :preds? t)
                          (("4"
                            (case-replace "r = least_out(grS`domain)")
                            (("1" (simplify) (("1" (grind) nil nil))
                              nil)
                             ("2" (simplify)
                              (("2"
                                (lift-if)
                                (("2"
                                  (simplify)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "gS`domain(translate(r))")
                                      (("1"
                                        (case
                                         "translate(r) = least_out(gS`domain)")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (split)
                                            (("1" (grind) nil nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (use match_domain)
                                          (("2"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil)
                                             ("4" (grind) nil nil)
                                             ("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma state_matches_eq)
              (("2" (inst?)
                (("2" (inst -1 translate)
                  (("2" (split -1)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)
                     ("3" (skeep :preds? t)
                      (("3" (lift-if) (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (state_matches_eq formula-decl nil reduction_props nil)
    (newintReduce const-decl "rstate" rreduction nil)
    (newintReduce const-decl "estate" reduction nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (newintRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (ref adt-constructor-decl "[nat -> (ref?)]" IExpression_adt nil)
    (constant adt-constructor-decl "[int -> (constant?)]"
     IExpression_adt nil)
    (constant? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size shared-adt-accessor-decl
          "[{x: IExpression | newint?(x) OR newref?(x)} -> nat]"
          IExpression_adt nil)
    (newref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (newint? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (r skolem-const-decl "(add(least_out(grS`domain), grS`domain))"
     reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (match_domain formula-decl nil reduction_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil)
  (newintReduce_match-1 nil 3700579735
   ("" (with-labels (skeep) ((nir stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        ((""
          (inst obj
           "translate WITH [(least_out(grS`domain)) := least_out(gS`domain)]")
          ((""
            (case "state_matches(gS, grS)(translate WITH [(least_out(grS`domain)) := least_out(gS`domain)])")
            (("1" (expand newintReduce)
              (("1" (label nstm -1)
                (("1" (expand state_matches (nstm obj))
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (grind) nil nil) ("2" (propax) nil nil)
                       ("3" (case-replace "popDepth(grS`redex) = 0")
                        (("1" (expand popDepth obj)
                          (("1"
                            (case-replace
                             "cvars(ref(least_out(grS`domain))) = cvars(grS`redex)")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("4" (expand store_matches)
                        (("4" (skeep :preds? t)
                          (("4"
                            (case-replace "r = least_out(grS`domain)")
                            (("1" (simplify) (("1" (grind) nil nil))
                              nil)
                             ("2" (simplify)
                              (("2"
                                (lift-if)
                                (("2"
                                  (simplify)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "gS`domain(translate(r))")
                                      (("1"
                                        (case
                                         "translate(r) = least_out(gS`domain)")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (split)
                                            (("1" (grind) nil nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (use match_domain)
                                          (("2"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2" (postpone) nil nil)
                                             ("3" (propax) nil nil)
                                             ("4" (grind) nil nil)
                                             ("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma state_matches_eq)
              (("2" (inst?)
                (("2" (inst -1 translate)
                  (("2" (split -1)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)
                     ("3" (skeep :preds? t)
                      (("3" (lift-if) (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (newrefReduce_match_TCC1 0
  (newrefReduce_match_TCC1-1 nil 3700234159 ("" (grind) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cpure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (newrefRedex? const-decl "bool" IL nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (newrefReduce_match subtype "gS"
    "{gS | IL.newrefRedex?(reduction.gS`redex)}")))
 (newrefReduce_match 0
  (newrefReduce_match-1 nil 3700589504
   ("" (with-labels (skeep) ((nir stm ndr obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        ((""
          (inst obj
           "translate WITH [(least_out(grS`domain)) := least_out(gS`domain)]")
          ((""
            (case "state_matches(gS, grS)(translate WITH [(least_out(grS`domain)) := least_out(gS`domain)])")
            (("1" (expand newrefReduce)
              (("1" (label nstm -1)
                (("1" (expand state_matches (nstm obj))
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (grind) nil nil) ("2" (propax) nil nil)
                       ("3" (case-replace "popDepth(grS`redex) = 0")
                        (("1" (expand popDepth obj)
                          (("1"
                            (case-replace
                             "cvars(ref(least_out(grS`domain))) = cvars(grS`redex)")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("4" (expand store_matches)
                        (("4" (skeep :preds? t)
                          (("4"
                            (case-replace "r = least_out(grS`domain)")
                            (("1" (simplify) (("1" (grind) nil nil))
                              nil)
                             ("2" (simplify)
                              (("2"
                                (lift-if)
                                (("2"
                                  (simplify)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "gS`domain(translate(r))")
                                      (("1"
                                        (case
                                         "translate(r) = least_out(gS`domain)")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (split)
                                            (("1" (grind) nil nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (use match_domain)
                                          (("2"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil)
                                             ("4" (grind) nil nil)
                                             ("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma state_matches_eq)
              (("2" (inst?)
                (("2" (inst -1 translate)
                  (("2" (split -1)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)
                     ("3" (skeep :preds? t)
                      (("3" (lift-if) (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (state_matches_eq formula-decl nil reduction_props nil)
    (newrefReduce const-decl "rstate" rreduction nil)
    (newrefReduce const-decl "estate" reduction nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (newrefRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (ref adt-constructor-decl "[nat -> (ref?)]" IExpression_adt nil)
    (nil adt-constructor-decl "(nil?)" IExpression_adt nil)
    (nil? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size shared-adt-accessor-decl
          "[{x: IExpression | newint?(x) OR newref?(x)} -> nat]"
          IExpression_adt nil)
    (newref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (newint? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (r skolem-const-decl "(add(least_out(grS`domain), grS`domain))"
     reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (match_domain formula-decl nil reduction_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (popReduce_match_TCC1 0
  (popReduce_match_TCC1-1 nil 3700234159
   ("" (with-labels (skeep) ((popr ndr stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (expand state_matches)
          (("" (with-labels (flatten) ((trr unm stam stom)))
            (("" (expand popRedex?)
              (("" (replace trr :dir RL)
                (("" (apply-eta "grS`redex" "(pop?)")
                  (("" (replace -1 :dir RL)
                    (("" (expand unmark)
                      (("" (expand translate_refs)
                        (("" (expand atom?)
                          (("" (expand value?) (("" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (popRedex? const-decl "bool" IL nil)
    (IExpression_pop_eta formula-decl nil IExpression_adt nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (unmark def-decl "IContext" preprocess nil)
    (unmark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (popReduce_match subtype "gS"
    "{gS | IL.popRedex?(reduction.gS`redex)}")))
 (popReduce_match_TCC2 0
  (popReduce_match_TCC2-1 nil 3700234159 ("" (subtype-tcc) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cpure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (value? const-decl "bool" IL nil)
    (popRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (popReduce_match subtype "grS"
    "{grS | IL.popRedex?(rreduction.grS`redex) AND rreduction.noDanglingRefs?(rreduction.grS)}")))
 (popReduce_match 0
  (popReduce_match-1 nil 3700847531
   ("" (with-labels (skeep) ((prx ndr stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (inst?)
          (("" (expand state_matches)
            (("" (with-labels (flatten) ((trr unm stam stom)))
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (expand popReduce)
                  (("2" (simplify)
                    (("2" (replace trr :dir RL)
                      (("2" (apply-eta "grS`redex" "(pop?)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil)
                 ("4" (expand popReduce)
                  (("4" (expand stack_matches)
                    (("4" (with-labels (flatten) ((staml stamr)))
                      (("4" (split)
                        (("1" (grind) nil nil)
                         ("2"
                          (with-labels (skeep :preds? t) ((ih obj)))
                          (("2" (split)
                            (("1" (expand bumpn)
                              (("1"
                                (typepred "grS`redex")
                                (("1"
                                  (inst -3 "i - popDepth(grS`context)")
                                  (("1"
                                    (split)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (rewrite cvars_vars_ctx)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst stamr "i+1")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand pop obj)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand union)
                                (("2"
                                  (expand bumpn)
                                  (("2"
                                    (case-replace
                                     "popDepth(grS`redex) = 1")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (apply-eta "grS`redex" "(pop?)")
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (lemma store_stillmatch)
                  (("5" (inst?)
                    (("5" (inst? :where stom)
                      (("5" (split -1)
                        (("1" (propax) nil nil)
                         ("2" (delete obj)
                          (("2" (expand popReduce)
                            (("2" (propax) nil nil)) nil))
                          nil)
                         ("3" (delete obj)
                          (("3" (expand popReduce)
                            (("3" (assert) (("3" (skeep) nil nil))
                              nil))
                            nil))
                          nil)
                         ("4" (delete obj)
                          (("4" (skeep)
                            (("4" (expand popReduce)
                              (("4" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("5" (expand popReduce)
                          (("5" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (store_stillmatch formula-decl nil reduction_props nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (Defs type-eq-decl nil reduction nil)
    (Definition type-eq-decl nil reduction nil)
    (pure? def-decl "bool" IL nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (union const-decl "set" sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (pbody adt-accessor-decl "[(pop?) -> IExpression]" IExpression_adt
     nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (i skolem-const-decl "(union(cvars(pbody(grS`redex)),
       bumpn(cvars(grS`context), popDepth(pbody(grS`redex)))))"
       reduction_props nil)
    (cvars_vars_ctx formula-decl nil preprocess nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (bump const-decl "finite_set[nat]" IL nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (drop const-decl "finite_set[nat]" IL nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (popRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (IExpression_pop_eta formula-decl nil IExpression_adt nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (popReduce const-decl "estate" reduction nil)
    (pop const-decl "Stack" IL nil)
    (popReduce const-decl "rstate" rreduction nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (letReduce_match_TCC1 0
  (letReduce_match_TCC1-1 nil 3700234159
   ("" (with-labels (skeep) ((plr stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (expand state_matches)
          (("" (with-labels (flatten) ((trr unm stam stom)))
            (("" (replace trr :dir RL)
              (("" (apply-eta "grS`redex" "(letexpr?)")
                (("1" (replace -1 :dir RL)
                  (("1" (expand unmark)
                    (("1" (expand translate_refs)
                      (("1" (expand pureLetRedex?)
                        (("1" (expand letRedex?)
                          (("1" (split obj)
                            (("1" (expand atom?)
                              (("1"
                                (expand value?)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (use translate_refs_pure)
                              (("2"
                                (use unmark_pure)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (letRedex? const-decl "bool" IL nil)
    (translate_refs_pure recursive-judgement-axiom nil reduction_props
     nil)
    (pure? def-decl "bool" IL nil)
    (body adt-accessor-decl "[(letexpr?) -> IExpression]"
          IExpression_adt nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmark def-decl "IContext" preprocess nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IExpression_letexpr_eta formula-decl nil IExpression_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (letReduce_match subtype "gS"
    "{gS | IL.pureLetRedex?(reduction.gS`redex)}")))
 (letReduce_match 0
  (letReduce_match-1 nil 3700837737
   ("" (with-labels (skeep*) ((plr stm obj)))
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (inst?)
          (("" (expand state_matches stm)
            (("" (with-labels (flatten) ((trr unm stam stom)))
              (("" (expand state_matches)
                (("" (split)
                  (("1" (grind) nil nil)
                   ("2" (expand letReduce)
                    (("2" (expand unmark obj)
                      (("2" (expand translate_refs obj)
                        (("2" (decompose-equality)
                          (("2" (replace trr :dir RL)
                            (("2" (apply-eta "grS`redex" "(letexpr?)")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil)
                   ("4"
                    (case-replace
                     "popDepth(letReduce(D)(grS)`redex) = 1")
                    (("1" (case-replace "popDepth(grS`redex) = 0")
                      (("1"
                        (case "stack_matches(translate)(letReduce(D)(grS)`stack, letReduce(D)(gS)`stack, add(0, bumpn(union(cvars(grS`redex), bumpn(cvars(grS`context), 0)), 1)))")
                        (("1" (delete stam)
                          (("1" (lemma stack_subset_match)
                            (("1" (inst? :where obj)
                              (("1"
                                (inst? :where -)
                                (("1"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (delete obj)
                                    (("2"
                                      (with-labels
                                       (skeep :preds? t)
                                       ((ih obj)))
                                      (("2"
                                        (expand add)
                                        (("2"
                                          (expand bumpn)
                                          (("2"
                                            (expand union)
                                            (("2"
                                              (expand member)
                                              (("2"
                                                (expand letReduce ih)
                                                (("2"
                                                  (simplify)
                                                  (("2"
                                                    (expand cvars ih 1)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (apply-eta
                                                         "grS`redex"
                                                         "(letexpr?)")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (expand
                                                             cvars
                                                             obj
                                                             1)
                                                            (("1"
                                                              (expand
                                                               bumpn)
                                                              (("1"
                                                                (expand
                                                                 drop)
                                                                (("1"
                                                                  (expand
                                                                   union)
                                                                  (("1"
                                                                    (expand
                                                                     member)
                                                                    (("1"
                                                                      (simplify)
                                                                      (("1"
                                                                        (case-replace
                                                                         "popDepth(letrhs(grS`redex)) = 0")
                                                                        (("1"
                                                                          (rewrite
                                                                           cvars_pure
                                                                           -)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete obj)
                          (("2" (expand letReduce)
                            (("2" (label obj 1)
                              (("2"
                                (name-replace
                                 "X"
                                 "union(cvars(grS`redex), bumpn(cvars(grS`context), 0))")
                                (("2"
                                  (expand stack_matches)
                                  (("2"
                                    (split obj)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (with-labels
                                       (skeep :preds? t)
                                       ((ih obj)))
                                      (("2"
                                        (split obj)
                                        (("1"
                                          (inst obj "i-1")
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (case-replace "i = 0")
                                          (("1"
                                            (expand push)
                                            (("1"
                                              (expand add)
                                              (("1"
                                                (replace trr :dir RL)
                                                (("1"
                                                  (apply-eta
                                                   "grS`redex"
                                                   "(letexpr?)")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst obj "i-1")
                                            (("1"
                                              (expand push)
                                              (("1"
                                                (expand add)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-eta "grS`redex" "(letexpr?)")
                        (("1" (replace -1 :dir RL)
                          (("1" (expand popDepth)
                            (("1" (hide-all-but (1 plr))
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (expand letReduce)
                      (("2" (expand popDepth)
                        (("2" (rewrite purePopDepth)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (lemma store_stillmatch)
                    (("5" (inst?)
                      (("5" (inst? :where stom)
                        (("5" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (expand letReduce)
                            (("2" (propax) nil nil)) nil)
                           ("3" (delete obj)
                            (("3" (expand letReduce)
                              (("3" (skeep) nil nil)) nil))
                            nil)
                           ("4" (expand letReduce)
                            (("4" (propax) nil nil)) nil)
                           ("5" (expand letReduce)
                            (("5" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (letReduce const-decl "rstate" rreduction nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (push const-decl "Stack" IL nil)
    (letReduce const-decl "estate" reduction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (unmark def-decl "IExpression" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (pop adt-constructor-decl "[IExpression -> (pop?)]" IExpression_adt
         nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (body adt-accessor-decl "[(letexpr?) -> IExpression]"
          IExpression_adt nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (estate type-eq-decl nil reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (IExpression_pop_extensionality formula-decl nil IExpression_adt
     nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IExpression_letexpr_eta formula-decl nil IExpression_adt nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (letRedex? const-decl "bool" IL nil)
    (purePopDepth formula-decl nil IL nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (X skolem-const-decl "finite_set[nat]" reduction_props nil)
    (i skolem-const-decl "(add(0, bumpn(X, 1)))" reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (cvars_pure formula-decl nil preprocess nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (letrhs adt-accessor-decl "[(letexpr?) -> IExpression]"
     IExpression_adt nil)
    (drop const-decl "finite_set[nat]" IL nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (stack_subset_match formula-decl nil reduction_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (stack_matches const-decl "boolean" reduction_props nil)
    (Definition type-eq-decl nil reduction nil)
    (Defs type-eq-decl nil reduction nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (union const-decl "set" sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (Definition type-eq-decl nil rreduction nil)
    (pure? def-decl "bool" IL nil)
    (store_stillmatch formula-decl nil reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (update_match 0
  (update_match-1 nil 3701021434
   ("" (skeep)
    (("" (expand state_matches)
      (("" (with-labels (flatten) ((trr unm stam stom)))
        (("" (replace trr :dir RL) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((state_matches const-decl "boolean" reduction_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (popDepth def-decl "nat" IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (updateRedex? const-decl "bool" IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (target_translate_TCC1 0
  (target_translate_TCC1-1 nil 3700940681 ("" (subtype-tcc) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cpure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (updateRedex? const-decl "bool" IL nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (target_translate subtype "grS`redex" "(IExpression_adt.update?)")))
 (target_translate_TCC2 0
  (target_translate_TCC2-1 nil 3700940681
   ("" (skeep) (("" (typepred "grS`redex") (("" (grind) nil nil)) nil))
    nil)
   ((goodrstate type-eq-decl nil reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (refs def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (markv const-decl "(variable?)" preprocess nil)
    (target adt-accessor-decl "[(update?) -> (variable?)]"
            IExpression_adt nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (updateRedex? const-decl "bool" IL nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (target_translate subtype "IExpression_adt.target(grS`redex)"
    "{x | IExpression_adt.index(IL.x) < grS`stack`length}")))
 (target_translate_TCC3 0
  (target_translate_TCC3-1 nil 3700940681
   ("" (skeep) (("" (use update_match) (("" (grind) nil nil)) nil))
    nil)
   ((update_match formula-decl nil reduction_props nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (goodstate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (estate type-eq-decl nil reduction nil)
    (Store type-eq-decl nil reduction nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cpure? def-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (target_translate subtype "gS`redex" "(IExpression_adt.update?)")))
 (target_translate_TCC4 0
  (target_translate_TCC4-1 nil 3700940681
   ("" (skeep) (("" (typepred "gS`redex") (("" (grind) nil nil)) nil))
    nil)
   ((goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (Store type-eq-decl nil reduction nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (refs def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (target adt-accessor-decl "[(update?) -> (variable?)]"
            IExpression_adt nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (updateRedex? const-decl "bool" IL nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (target_translate subtype "IExpression_adt.target(gS`redex)"
    "{x | IExpression_adt.index(IL.x) < gS`stack`length}")))
 (target_translate 0
  (target_translate-1 nil 3701110891
   ("" (skeep)
    (("" (expand state_matches)
      (("" (expand stack_matches)
        (("" (with-labels (flatten) ((trr unm staml stamr stom)))
          (("" (inst stamr "index(target(grS`redex))")
            (("1" (expand get)
              (("1"
                (case-replace
                 "index(target(gS`redex)) = index(target(grS`redex))")
                (("1" (grind) nil nil)
                 ("2" (replace trr :dir RL) (("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches const-decl "boolean" reduction_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (get const-decl "(value?)" IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (estate type-eq-decl nil reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (IExpression type-decl nil IExpression_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (target adt-accessor-decl "[(update?) -> (variable?)]"
            IExpression_adt nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (stack_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (lhs_translate_TCC1 0
  (lhs_translate_TCC1-1 nil 3700940681
   ("" (skeep) (("" (typepred "grS`redex") (("" (grind) nil nil)) nil))
    nil)
   ((goodrstate type-eq-decl nil reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (refs def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (markv const-decl "(variable?)" preprocess nil)
    (target adt-accessor-decl "[(update?) -> (variable?)]"
            IExpression_adt nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (lhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (updateRedex? const-decl "bool" IL nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (lhs_translate subtype "IExpression_adt.lhs(grS`redex)"
    "{x | IExpression_adt.index(IL.x) < grS`stack`length}")))
 (lhs_translate_TCC2 0
  (lhs_translate_TCC2-1 nil 3700940681
   ("" (skeep) (("" (typepred "gS`redex") (("" (grind) nil nil)) nil))
    nil)
   ((goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (Store type-eq-decl nil reduction nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (refs def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (updateRedex? const-decl "bool" IL nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (lhs_translate subtype "IExpression_adt.lhs(gS`redex)"
    "{x | IExpression_adt.index(IL.x) < gS`stack`length}")))
 (lhs_translate 0
  (lhs_translate-1 nil 3701111044
   ("" (skeep)
    (("" (expand state_matches)
      (("" (expand stack_matches)
        (("" (with-labels (flatten) ((trr unm staml stamr stom)))
          (("" (inst stamr "index(lhs(grS`redex))")
            (("1" (expand get)
              (("1"
                (case-replace
                 "index(lhs(gS`redex)) = index(lhs(grS`redex))")
                (("1" (grind) nil nil)
                 ("2" (replace trr :dir RL) (("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches const-decl "boolean" reduction_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (get const-decl "(value?)" IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (estate type-eq-decl nil reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (IExpression type-decl nil IExpression_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (lhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (stack_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (rhs_translate_TCC1 0
  (rhs_translate_TCC1-1 nil 3700940681
   ("" (skeep) (("" (typepred "grS`redex") (("" (grind) nil nil)) nil))
    nil)
   ((goodrstate type-eq-decl nil reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (refs def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (markv const-decl "(variable?)" preprocess nil)
    (target adt-accessor-decl "[(update?) -> (variable?)]"
            IExpression_adt nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (rhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (updateRedex? const-decl "bool" IL nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (rhs_translate subtype "IExpression_adt.rhs(grS`redex)"
    "{x | IExpression_adt.index(IL.x) < grS`stack`length}")))
 (rhs_translate_TCC2 0
  (rhs_translate_TCC2-1 nil 3700940681
   ("" (skeep) (("" (typepred "gS`redex") (("" (grind) nil nil)) nil))
    nil)
   ((goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (Store type-eq-decl nil reduction nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (refs def-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (updateRedex? const-decl "bool" IL nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (rhs_translate subtype "IExpression_adt.rhs(gS`redex)"
    "{x | IExpression_adt.index(IL.x) < gS`stack`length}")))
 (rhs_translate 0
  (rhs_translate-1 nil 3701111130
   ("" (skeep)
    (("" (expand state_matches)
      (("" (expand stack_matches)
        (("" (with-labels (flatten) ((trr unm staml stamr stom)))
          (("" (inst stamr "index(rhs(grS`redex))")
            (("1" (expand get)
              (("1"
                (case-replace
                 "index(rhs(gS`redex)) = index(rhs(grS`redex))")
                (("1" (grind) nil nil)
                 ("2" (replace trr :dir RL) (("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches const-decl "boolean" reduction_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (get const-decl "(value?)" IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (estate type-eq-decl nil reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (IExpression type-decl nil IExpression_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (rhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (stack_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (updateReduce_match_TCC1 0
  (updateReduce_match_TCC1-1 nil 3700234159 ("" (grind) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cpure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (updateRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (updateReduce_match subtype "gS"
    "{gS | IL.updateRedex?(reduction.gS`redex)}")))
 (updateReduce_match_TCC2 0
  (updateReduce_match_TCC2-1 nil 3700940681 ("" (subtype-tcc) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cpure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (domainValue? const-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (Store type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodstate type-eq-decl nil reduction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (updateRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (updateReduce_match subtype "grS"
    "{grS | IL.updateRedex?(rreduction.grS`redex) AND rreduction.noDanglingRefs?(rreduction.grS)}")))
 (updateReduce_match 0
  (updateReduce_match-5 "" 3706274624
   ("" (with-labels (skeep*) ((upr ndr stm obj)))
    (("" (expand state_matches? stm)
      (("" (skeep)
        (("" (expand updateReduce)
          (("" (assert)
            (("" (case "ref?(get(grS`stack)(target(grS`redex)))")
              (("1" (case "constant?(get(grS`stack)(lhs(grS`redex)))")
                (("1"
                  (name-replace "i"
                   "value(get(grS`stack)(lhs(grS`redex)))")
                  (("1" (use lhs_translate)
                    (("1" (rewrite -1 :dir RL)
                      (("1"
                        (case-replace
                         "get(grS`stack)(lhs(grS`redex)) = constant(i)")
                        (("1" (simplify)
                          (("1" (assert)
                            (("1" (expand translate_refs)
                              (("1"
                                (use target_translate)
                                (("1"
                                  (rewrite -1 :dir RL)
                                  (("1"
                                    (name-replace
                                     "r"
                                     "refindex(get(grS`stack)(target(grS`redex)))")
                                    (("1"
                                      (case-replace
                                       "get(grS`stack)(target(grS`redex)) = ref(r)")
                                      (("1"
                                        (expand translate_refs)
                                        (("1"
                                          (simplify)
                                          (("1"
                                            (case-replace
                                             "gS`store(translate(r))`length = grS`store(r)`length")
                                            (("1"
                                              (case
                                               "i >= 0 AND i < grS`store(r)`length")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (name-replace
                                                       "rval"
                                                       "get(grS`stack)(rhs(grS`redex))")
                                                      (("1"
                                                        (name-replace
                                                         copying
                                                         "maybe_clear_stack_at(grS`domain,
                                             grS`store,
                                             grS`stack,
                                             grS`redex,
                                             grS`count,
                                             rhs(grS`redex))`2
                            (r)
                         > 1
                         OR NOT marked(target(grS`redex)) OR rval = ref(r)")
                                                        (("1"
                                                          (case
                                                           copying)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               state_matches?)
                                                              (("1"
                                                                (inst
                                                                 obj
                                                                 "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]")
                                                                (("1"
                                                                  (expand
                                                                   state_matches)
                                                                  (("1"
                                                                    (split
                                                                     obj)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (with-labels
                                                                       (flatten
                                                                        stm)
                                                                       ((trr
                                                                         unm
                                                                         stam
                                                                         stom)))
                                                                      (("3"
                                                                        (rewrite
                                                                         maybe_clear_stack_at_match)
                                                                        (("1"
                                                                          (rewrite
                                                                           maybe_clear_stack_at_match)
                                                                          (("1"
                                                                            (delete
                                                                             2
                                                                             3)
                                                                            (("1"
                                                                              (lemma
                                                                               stack_subset_match)
                                                                              (("1"
                                                                                (inst?
                                                                                 :polarity?
                                                                                 t)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "union(cvars(grS`redex),
                          bumpn(cvars(grS`context), popDepth(grS`redex)))")
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skeep
                                                                                       :preds?
                                                                                       t)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (delete
                                                                                       2)
                                                                                      (("3"
                                                                                        (lemma
                                                                                         stack_stillmatch)
                                                                                        (("3"
                                                                                          (inst?)
                                                                                          (("3"
                                                                                            (inst?
                                                                                             :where
                                                                                             stam)
                                                                                            (("3"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skeep
                                                                                                 :preds?
                                                                                                 t)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "grS`stack")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     every)
                                                                                                    (("3"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         union
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           bumpn
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             member
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 cvars_pure
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "grS`redex")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -2
                                                                                                                     "i!1")
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "grS`redex")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -3
                                                                                                                     "i!1 - popDepth(grS`redex) - popDepth(grS`context)")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       cvars_vars_ctx)
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (delete
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (typepred
                                                                                 "grS`redex")
                                                                                (("2"
                                                                                  (expand
                                                                                   updateRedex?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       mark)
                                                                                      (("2"
                                                                                        (decompose-equality
                                                                                         -6)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -3
                                                                                           :dir
                                                                                           RL)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (delete
                                                                           2)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (typepred
                                                                               "grS`redex")
                                                                              (("2"
                                                                                (expand
                                                                                 updateRedex?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     mark)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       -6)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1
                                                                                         :dir
                                                                                         RL)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (with-labels
                                                                       (flatten
                                                                        stm)
                                                                       ((trr
                                                                         unm
                                                                         stam
                                                                         stom)))
                                                                      (("4"
                                                                        (expand
                                                                         store_matches)
                                                                        (("4"
                                                                          (with-labels
                                                                           (skeep
                                                                            :preds?
                                                                            t)
                                                                           ((r1dom
                                                                             r1cnt
                                                                             obj)))
                                                                          (("4"
                                                                            (name-replace
                                                                             r_2
                                                                             "IF r_1 = least_out(grS`domain) THEN r ELSE r_1 ENDIF")
                                                                            (("4"
                                                                              (inst
                                                                               stom
                                                                               r_2)
                                                                              (("1"
                                                                                (split
                                                                                 stom)
                                                                                (("1"
                                                                                  (delete
                                                                                   r1cnt)
                                                                                  (("1"
                                                                                    (split
                                                                                     obj)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skeep
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (expand
                                                                                         update_store)
                                                                                        (("3"
                                                                                          (case-replace
                                                                                           "r_1 = least_out(grS`domain)")
                                                                                          (("1"
                                                                                            (simplify)
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "j = i")
                                                                                              (("1"
                                                                                                (simplify)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   stack_matches)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     rval)
                                                                                                    (("1"
                                                                                                      (with-labels
                                                                                                       (flatten
                                                                                                        stam)
                                                                                                       ((staml
                                                                                                         stamr)))
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         stamr
                                                                                                         "index(rhs(grS`redex))")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           get)
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "index(rhs(gS`redex)) = index(rhs(grS`redex))")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               translate_refs_eq
                                                                                                               (A
                                                                                                                "grS`stack`seq(grS`stack`length - 1 - index(rhs(grS`redex)))"
                                                                                                                translate
                                                                                                                translate
                                                                                                                translate2
                                                                                                                "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]"))
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "grS`stack`seq
                                                                                                                                                                                       (grS`stack`length - 1 - index(rhs(grS`redex)))")
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (delete
                                                                                                                   obj)
                                                                                                                  (("3"
                                                                                                                    (skeep)
                                                                                                                    (("3"
                                                                                                                      (typepred
                                                                                                                       "grS`stack`seq(grS`stack`length - 1 - index(rhs(grS`redex)))")
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         "grS`stack")
                                                                                                                        (("3"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (use
                                                                                                                 updateRedex_rhs_index)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (delete
                                                                                                               obj)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 trr
                                                                                                                 :dir
                                                                                                                 RL)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (simplify)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     stom
                                                                                                     j)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       translate_refs_eq
                                                                                                       (A
                                                                                                        "grS`store(r)`seq(j)"
                                                                                                        translate
                                                                                                        translate
                                                                                                        translate2
                                                                                                        "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]"))
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "grS`store(r)`seq(j)")
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (typepred
                                                                                                           "grS`store(r)`seq(j)")
                                                                                                          (("3"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (simplify)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 stom
                                                                                                 j)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   r_2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       translate_refs_eq
                                                                                                       (A
                                                                                                        "grS`store(r_1)`seq(j)"
                                                                                                        translate
                                                                                                        translate
                                                                                                        translate2
                                                                                                        "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]"))
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "grS`store(r_1)`seq(j)")
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (typepred
                                                                                                           "grS`store(r_1)`seq(j)")
                                                                                                          (("3"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (case
                                                                                     "r_1 = least_out(grS`domain)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         r_2)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "grS`count(r)")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               refcount)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 refcountStack)
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   r1cnt)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "count_elem[(value?)]")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       r_2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (use
                                                                                           update_store_count)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               r1cnt)
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   rval)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "grS`count(r_1)")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         refcount)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           refcountStack)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "count_elem[(value?)]")
                                                                                                            (("1"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   count_copy_count)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "add(least_out(grS`domain), grS`domain)"
                                                                                                     _
                                                                                                     "grS`store(r)"
                                                                                                     "r_1")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "maybe_clear_stack_at(grS`domain,
                                      grS`store,
                                      maybe_clear_stack_at
                                      (grS`domain,
                                       grS`store,
                                       grS`stack,
                                       grS`redex,
                                       grS`count,
                                       rhs(grS`redex))`1,
                                      grS`redex,
                                      maybe_clear_stack_at
                                      (grS`domain,
                                       grS`store,
                                       grS`stack,
                                       grS`redex,
                                       grS`count,
                                       rhs(grS`redex))`2,
                                      target(grS`redex))`2
                   WITH [(least_out(grS`domain)) |-> 1]")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (split)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               maybe_clear_stack_at_count)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (use
                                                                                                                     maybe_clear_stack_at_count)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "grS`count(r_1)")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   refcount)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     refcountStore)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       allcount)
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         sigma_add)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "grS`domain(r)")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             member)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "grS`stack")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               every)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 get)
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (use
                                                                                                                                     updateRedex_target_index)
                                                                                                                                    (("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (delete
                                                                                 obj)
                                                                                (("2"
                                                                                  (expand
                                                                                   r_2)
                                                                                  (("2"
                                                                                    (delete
                                                                                     r1cnt)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "grS`stack")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               copying)
                                                              (("2"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((cnt
                                                                   mark
                                                                   rveq)))
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     state_matches?)
                                                                    (("2"
                                                                      (inst
                                                                       3
                                                                       "translate WITH [(r) := least_out(gS`domain)]")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           decref1_chk_stillmatch)
                                                                          (("1"
                                                                            (delete
                                                                             obj)
                                                                            (("1"
                                                                              (expand
                                                                               state_matches)
                                                                              (("1"
                                                                                (with-labels
                                                                                 (flatten
                                                                                  stm)
                                                                                 ((trr
                                                                                   unm
                                                                                   stam
                                                                                   stom)))
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (lemma
                                                                                     stack_stillmatch)
                                                                                    (("3"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "grS`stack"
                                                                                         "translate")
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (lemma
                                                                                             stack_subset_match)
                                                                                            (("3"
                                                                                              (inst?)
                                                                                              (("3"
                                                                                                (inst?
                                                                                                 :where
                                                                                                 stam)
                                                                                                (("3"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skeep
                                                                                                     :preds?
                                                                                                     t)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (skeep
                                                                                             :preds?
                                                                                             t)
                                                                                            (("4"
                                                                                              (case-replace
                                                                                               "i!1 = index(target(grS`redex))")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "grS`redex")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       updateRedex?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           mark)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             -6)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               mark
                                                                                                               :dir
                                                                                                               RL)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case-replace
                                                                                                 "i!1 = index(rhs(grS`redex))")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "marked(rhs(grS`redex))")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "grS`redex")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         updateRedex?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             mark)
                                                                                                            (("1"
                                                                                                              (decompose-equality
                                                                                                               -6)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -3
                                                                                                                 :dir
                                                                                                                 RL)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     maybe_clear_stack_at
                                                                                                     3)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           rval)
                                                                                                          (("2"
                                                                                                            (lift-if
                                                                                                             3)
                                                                                                            (("2"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   updateRedex_rhs_index)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide-all-but
                                                                                                                       (-1
                                                                                                                        -2
                                                                                                                        -5
                                                                                                                        rveq))
                                                                                                                      (("1"
                                                                                                                        (grind-with-ext)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (lift-if
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "grS`count(r) > 1")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               maybe_clear_stack_at
                                                                                                               cnt)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           rval)
                                                                                                                          (("1"
                                                                                                                            (use
                                                                                                                             updateRedex_rhs_index)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  cnt
                                                                                                                                  rveq))
                                                                                                                                (("1"
                                                                                                                                  (grind-with-ext)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2
                                                                                                               5)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "grS`count(r)")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     refcount)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       refcountStack)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "count_update[(value?)]")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           _
                                                                                                                           "grS`stack"
                                                                                                                           nil
                                                                                                                           "grS`stack`length-1-i!1")
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "count_elem[(value?)]")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 _
                                                                                                                                 _
                                                                                                                                 "ref(r)")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (inst
                                                                                                                                       1
                                                                                                                                       "grS`stack`length - 1 - index(target(grS`redex))")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         r)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           get)
                                                                                                                                          (("1"
                                                                                                                                            (lift-if
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (use
                                                                                                                                         updateRedex_target_index)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("4"
                                                                                                                                      (grind-with-ext)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (typepred
                                                                                                                                     "grS`redex")
                                                                                                                                    (("3"
                                                                                                                                      (inst
                                                                                                                                       -3
                                                                                                                                       "i!1")
                                                                                                                                      (("3"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "grS`redex")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -3
                                                                                                                               "i!1-popDepth(grS`context)")
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 cvars_vars_ctx)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (use
                                                                                         updateRedex_target_index)
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (expand
                                                                                     store_matches)
                                                                                    (("4"
                                                                                      (skeep*
                                                                                       :preds?
                                                                                       t)
                                                                                      (("4"
                                                                                        (inst
                                                                                         stom
                                                                                         "r_1")
                                                                                        (("4"
                                                                                          (use
                                                                                           update_store_count)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "r_1 = r")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     maybe_clear_stack_at_count)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           add)
                                                                                                          (("2"
                                                                                                            (skeep
                                                                                                             :preds?
                                                                                                             t)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               update_store)
                                                                                                              (("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       rval)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         rhs_translate)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           gS
                                                                                                                           grS
                                                                                                                           translate)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               :dir
                                                                                                                               RL)
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "get(grS`stack)(rhs(grS`redex))")
                                                                                                                                (("1"
                                                                                                                                  (grind-with-ext)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (case-replace
                                                                                                                       "grS`store(r)`seq(j) = ref(r)")
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "grS`count(r) > 1")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           maybe_clear_stack_at
                                                                                                                           cnt)
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (split)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       rval)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         updateRedex_rhs_index)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (hide-all-but
                                                                                                                                             (rveq
                                                                                                                                              -1
                                                                                                                                              -2
                                                                                                                                              -4))
                                                                                                                                            (("1"
                                                                                                                                              (grind-with-ext)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           cnt)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "grS`count(r)")
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 refcount)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   refcountStack)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "count_elem[(value?)]")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       _
                                                                                                                                       _
                                                                                                                                       "ref(r)")
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (use
                                                                                                                                             refcountStore_ref)
                                                                                                                                            (("1"
                                                                                                                                              (split)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             r)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               get)
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                (("2"
                                                                                                                                                  (use
                                                                                                                                                   updateRedex_target_index)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (typepred
                                                                                                                         "grS`store(r)`seq(j)")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (grind-with-ext)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "grS`count(r_1) > 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (skeep*
                                                                                                       :preds?
                                                                                                       t)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         update_store)
                                                                                                        (("3"
                                                                                                          (lift-if
                                                                                                           1)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (inst?
                                                                                                               stom)
                                                                                                              (("3"
                                                                                                                (case
                                                                                                                 "grS`store(r_1)`seq(j) = ref(r)")
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "grS`count(r) > 1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     maybe_clear_stack_at
                                                                                                                     cnt)
                                                                                                                    (("1"
                                                                                                                      (lift-if
                                                                                                                       cnt)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           cnt)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               cnt)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   rval)
                                                                                                                                  (("1"
                                                                                                                                    (use
                                                                                                                                     updateRedex_rhs_index)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (hide-all-but
                                                                                                                                         (rveq
                                                                                                                                          cnt
                                                                                                                                          -1))
                                                                                                                                        (("1"
                                                                                                                                          (grind-with-ext)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (typepred
                                                                                                                     "grS`count(r)")
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         refcount)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           refcountStack)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "count_elem[(value?)]")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               _
                                                                                                                               _
                                                                                                                               "ref(r)")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (use
                                                                                                                                     refcountStore_ref)
                                                                                                                                    (("1"
                                                                                                                                      (split)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (inst
                                                                                                                                     1
                                                                                                                                     "grS`stack`length-1-index(target(grS`redex))")
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (use
                                                                                                                                       updateRedex_target_index)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("4"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "gS`store(translate(r_1))`seq(j)")
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (stom
                                                                                                                      -1
                                                                                                                      +))
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "ref?(grS`store(r_1)`seq(j)) AND refindex(grS`store(r_1)`seq(j)) = r")
                                                                                                                      (("1"
                                                                                                                        (grind-with-ext)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "grS`store(r_1)`seq(j)")
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       rval)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "grS`count(r_1)")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             refcount)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               refcountStack)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "count_elem[(value?)]")
                                                                                                                (("1"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     get)
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         updateRedex_rhs_index)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (use
                                                                                                       maybe_clear_stack_at_count)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (use
                                                                                             updateRedex_target_index)
                                                                                            (("3"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (delete
                                                                             obj)
                                                                            (("2"
                                                                              (typepred
                                                                               "grS`redex")
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (case
                                                                                   "grS`domain(r)")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "grS`stack")
                                                                                    (("2"
                                                                                      (expand
                                                                                       every)
                                                                                      (("2"
                                                                                        (expand
                                                                                         get)
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             updateRedex_target_index)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("5"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("6"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (delete
                                                                             obj)
                                                                            (("3"
                                                                              (expand
                                                                               every)
                                                                              (("3"
                                                                                (skeep
                                                                                 :preds?
                                                                                 t)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "grS`stack")
                                                                                  (("3"
                                                                                    (use
                                                                                     updateRedex_target_index)
                                                                                    (("3"
                                                                                      (use
                                                                                       updateRedex_rhs_index)
                                                                                      (("3"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("3"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               every)
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (delete
                                                                             obj)
                                                                            (("4"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (delete
                                                                             obj)
                                                                            (("5"
                                                                              (use
                                                                               "updateRedex_target_index")
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("6"
                                                                            (delete
                                                                             obj)
                                                                            (("6"
                                                                              (typepred
                                                                               "gS`stack")
                                                                              (("6"
                                                                                (expand
                                                                                 every)
                                                                                (("6"
                                                                                  (expand
                                                                                   get)
                                                                                  (("6"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "gS`redex")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -2
                                                                                         "index(rhs(gS`redex))")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("7"
                                                                            (delete
                                                                             obj)
                                                                            (("7"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("8"
                                                                            (delete
                                                                             obj)
                                                                            (("8"
                                                                              (typepred
                                                                               "gS`redex")
                                                                              (("8"
                                                                                (assert)
                                                                                (("8"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("4"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("5"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("9"
                                                                            (delete
                                                                             obj)
                                                                            (("9"
                                                                              (typepred
                                                                               "gS`stack")
                                                                              (("9"
                                                                                (expand
                                                                                 every)
                                                                                (("9"
                                                                                  (skeep)
                                                                                  (("9"
                                                                                    (inst?)
                                                                                    (("9"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           updateRedex_rhs_index)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         updateRedex_rhs_index)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (replace 1)
                                                  (("2"
                                                    (expand
                                                     state_matches?)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete obj)
                                              (("2"
                                                (expand state_matches)
                                                (("2"
                                                  (with-labels
                                                   (flatten)
                                                   ((trr
                                                     unm
                                                     stam
                                                     stom)))
                                                  (("2"
                                                    (expand
                                                     store_matches)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "grS`count(r)")
                                                          (("2"
                                                            (rewrite
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               refcount)
                                                              (("2"
                                                                (expand
                                                                 refcountStack)
                                                                (("2"
                                                                  (use
                                                                   "count_elem[(value?)]")
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (delete obj)
                                              (("3"
                                                (typepred "grS`stack")
                                                (("3"
                                                  (expand get)
                                                  (("3"
                                                    (expand every)
                                                    (("3"
                                                      (inst?)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (use
                                                         updateRedex_target_index)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (delete obj)
                                              (("4"
                                                (use target_translate)
                                                (("4"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     translate_refs)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "gS`stack")
                                                          (("1"
                                                            (expand
                                                             every)
                                                            (("1"
                                                              (expand
                                                               get)
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   domainValue?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "gS`redex")
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "index(target(gS`redex))")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (apply-eta
                                           "get(grS`stack)(target(grS`redex))"
                                           "(ref?)")
                                          (("2"
                                            (expand r)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete obj)
                          (("2" (expand i)
                            (("2" (grind-with-ext) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2"
                    (case "constant?(get(gS`stack)(lhs(gS`redex)))")
                    (("1" (assert)
                      (("1" (delete obj)
                        (("1" (use lhs_translate)
                          (("1" (assert)
                            (("1" (use value_translate_rev_constant)
                              (("1"
                                (split)
                                (("1" (propax) nil nil)
                                 ("2" (assert) nil nil)
                                 ("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand state_matches?)
                        (("2" (inst?)
                          (("2" (use state_error_match)
                            (("2" (split)
                              (("1" (propax) nil nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (delete obj)
                      (("3" (typepred "gS`redex")
                        (("3" (inst -2 "index(lhs(gS`redex))")
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (delete obj)
                      (("4" (use update_match) (("4" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (delete obj)
                  (("3" (use updateRedex_lhs_index)
                    (("3" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (use target_translate)
                  (("2" (assert)
                    (("2"
                      (case "ref?(get(gS`stack)(target(gS`redex)))")
                      (("1" (delete obj)
                        (("1" (use value_translate_rev_ref)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (assert)
                        (("2" (use state_error_match)
                          (("2" (prop)
                            (("2" (expand state_matches?)
                              (("2" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (use updateRedex_target_index)
                (("3" (split -1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                nil)
               ("4" (expand updateRedex?) (("4" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (updateReduce const-decl "(noDanglingRefs?)" rreduction nil)
    (updateReduce const-decl "estate" reduction nil)
    (target adt-accessor-decl "[(update?) -> (variable?)]"
            IExpression_adt nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (get const-decl "(value?)" IL nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (updateRedex_lhs_index formula-decl nil rreduction nil)
    (update_match formula-decl nil reduction_props nil)
    (state_error_match formula-decl nil reduction_props nil)
    (value_translate_rev_constant formula-decl nil reduction_props nil)
    (value adt-accessor-decl "[(constant?) -> int]" IExpression_adt
     nil)
    (IExpression_constant_extensionality formula-decl nil
     IExpression_adt nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (ref adt-constructor-decl "[nat -> (ref?)]" IExpression_adt nil)
    (rhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (r_2 skolem-const-decl "nat" reduction_props nil)
    (update_store_count formula-decl nil reduction_props nil)
    (count_copy_count formula-decl nil reduction_props nil)
    (finite_remove application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (head const-decl "T" finseq_theorems nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (count def-decl "nat" finseq_theorems nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (updateRedex_target_index formula-decl nil rreduction nil)
    (sigma_add formula-decl nil finite_set_theorems nil)
    (maybe_clear_stack_at_count formula-decl nil reduction_props nil)
    (refcountStore const-decl "nat" rreduction nil)
    (allcount const-decl "nat" rreduction nil)
    (empty? const-decl "bool" sets nil)
    (refcountArray const-decl "nat" rreduction nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (count_elem formula-decl nil finseq_theorems nil)
    (refcountStack const-decl "nat" rreduction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (translate_refs_eq formula-decl nil reduction_props nil)
    (gS skolem-const-decl "goodstate" reduction_props nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (updateRedex_rhs_index formula-decl nil rreduction nil)
    (rval skolem-const-decl "(value?)" reduction_props nil)
    (update_store const-decl "{((newstr: Store(dom))),
 ((newcnt: [i: (dom) -> {j | j = refcount(dom, newstr, S, A)(i)}])) |
   newstr = str WITH [(r)`seq(i) := nv]}" rreduction nil)
    (count_copy def-decl "[(dom) -> nat]" rreduction nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (stack_subset_match formula-decl nil reduction_props nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (i!1 skolem-const-decl
     "(union(cvars(grS`redex), bumpn(cvars(grS`context), popDepth(grS`redex))))"
     reduction_props nil)
    (pure? def-decl "bool" IL nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (cvars_pure formula-decl nil preprocess nil)
    (cvars_vars_ctx formula-decl nil preprocess nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (stack_stillmatch formula-decl nil reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (add const-decl "(nonempty?)" sets nil)
    (updateRedex? const-decl "bool" IL nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (update adt-constructor-decl
     "[[(variable?), (variable?), (variable?)] -> (update?)]"
     IExpression_adt nil)
    (markv const-decl "(variable?)" preprocess nil)
    (nonempty? const-decl "bool" sets nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (maybe_clear_stack_at_match formula-decl nil reduction_props nil)
    (union const-decl "set" sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (unmark def-decl "IExpression" preprocess nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (copying skolem-const-decl "boolean" reduction_props nil)
    (nil adt-constructor-decl "(nil?)" IExpression_adt nil)
    (nil? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (decref1_chk_stillmatch formula-decl nil reduction_props nil)
    (r skolem-const-decl "nat" reduction_props nil)
    (i!1 skolem-const-decl
     "(union(cvars(ref(r)), bumpn(cvars(grS`context), popDepth(ref(r)))))"
     reduction_props nil)
    (count_update formula-decl nil finseq_theorems nil)
    (IExpression_ref_extensionality formula-decl nil IExpression_adt
     nil)
    (rhs_translate formula-decl nil reduction_props nil)
    (refcountStore_ref formula-decl nil rreduction nil)
    (j skolem-const-decl "below(update_store(grS`domain, grS`store,
                   maybe_clear_stack_at(grS`domain,
                                        grS`store,
                                        grS`stack,
                                        grS`redex,
                                        grS`count,
                                        rhs(grS`redex))`1
                     WITH [(seq)
                             (grS`stack`length - 1 -
                               index(target(grS`redex)))
                             := nil],
                   ref(r),
                   maybe_clear_stack_at(grS`domain,
                                        grS`store,
                                        grS`stack,
                                        grS`redex,
                                        grS`count,
                                        rhs(grS`redex))`2,
                   r, i, rval)`1
          (r_1)`length)" reduction_props nil)
    (r_1 skolem-const-decl "(grS`domain)" reduction_props nil)
    (i skolem-const-decl "int" reduction_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (marked adt-accessor-decl "[(variable?) -> bool]" IExpression_adt
     nil)
    (maybe_clear_stack_at const-decl "{((newStack: Stack
       | every(domainValue?(dom))(newStack) AND
          newStack`length = S`length)),
 ((newcnt: [i: (dom) -> {j | j = refcount(dom, str, newStack, A)(i)}])) |
   FORALL (i: below(S`length)):
     ref?(newStack`seq(newStack`length - 1 - i)) IMPLIES
      ref?(S`seq(S`length - 1 - i)) AND NOT (i = index(x) AND marked(x))}"
     rreduction nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IExpression_ref_eta formula-decl nil IExpression_adt nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (target_translate formula-decl nil reduction_props nil)
    (constant adt-constructor-decl "[int -> (constant?)]"
     IExpression_adt nil)
    (goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (lhs_translate formula-decl nil reduction_props nil)
    (lhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (constant? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (value_translate_rev_ref formula-decl nil reduction_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)
  (updateReduce_match-4 "" 3701012707
   ("" (with-labels (skeep*) ((upr ndr stm obj)))
    (("" (expand state_matches? stm)
      (("" (skeep)
        (("" (expand updateReduce)
          (("" (assert)
            (("" (case "ref?(get(grS`stack)(target(grS`redex)))")
              (("1" (case "constant?(get(grS`stack)(lhs(grS`redex)))")
                (("1"
                  (name-replace "i"
                   "value(get(grS`stack)(lhs(grS`redex)))")
                  (("1" (use lhs_translate)
                    (("1" (rewrite -1 :dir RL)
                      (("1"
                        (case-replace
                         "get(grS`stack)(lhs(grS`redex)) = constant(i)")
                        (("1" (simplify)
                          (("1" (assert)
                            (("1" (expand translate_refs)
                              (("1"
                                (use target_translate)
                                (("1"
                                  (rewrite -1 :dir RL)
                                  (("1"
                                    (name-replace
                                     "r"
                                     "refindex(get(grS`stack)(target(grS`redex)))")
                                    (("1"
                                      (case-replace
                                       "get(grS`stack)(target(grS`redex)) = ref(r)")
                                      (("1"
                                        (expand translate_refs)
                                        (("1"
                                          (simplify)
                                          (("1"
                                            (case-replace
                                             "gS`store(translate(r))`length = grS`store(r)`length")
                                            (("1"
                                              (case
                                               "i >= 0 AND i < grS`store(r)`length")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (name-replace
                                                       "rval"
                                                       "get(grS`stack)(rhs(grS`redex))")
                                                      (("1"
                                                        (name-replace
                                                         copying
                                                         "IF ref?(rval) AND marked(rhs(grS`redex))
                                                                          THEN (grS`count :: [(grS`domain) -> nat])
                                                                                 WITH [(refindex(rval))
                                                                                       := grS`count(refindex(rval)) - 1]
                                                                                   (r)
                                                                        ELSE grS`count(r)
                                                                        ENDIF
                                                                         > 1
                                                                         OR NOT marked(target(grS`redex)) OR rval = ref(r)")
                                                        (("1"
                                                          (case
                                                           copying)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               state_matches?)
                                                              (("1"
                                                                (inst
                                                                 obj
                                                                 "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]")
                                                                (("1"
                                                                  (expand
                                                                   state_matches)
                                                                  (("1"
                                                                    (split
                                                                     obj)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (with-labels
                                                                       (flatten
                                                                        stm)
                                                                       ((trr
                                                                         unm
                                                                         stam
                                                                         stom)))
                                                                      (("3"
                                                                        (lemma
                                                                         stack_stillmatch)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst?
                                                                             :where
                                                                             stam)
                                                                            (("1"
                                                                              (inst?
                                                                               :where
                                                                               stam)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (simplify)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     stack_subset_match)
                                                                                    (("3"
                                                                                      (inst?)
                                                                                      (("3"
                                                                                        (inst?
                                                                                         :where
                                                                                         stam)
                                                                                        (("3"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("4"
                                                                                    (simplify)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (assert)
                                                                                        (("4"
                                                                                          (with-labels
                                                                                           (skeep
                                                                                            :preds?
                                                                                            t)
                                                                                           ((ih
                                                                                             obj)))
                                                                                          (("4"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "i!1 = index(target(grS`redex))")
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    (("1"
                                                                                                      (with-labels
                                                                                                       (typepred
                                                                                                        "grS`redex")
                                                                                                       ((href
                                                                                                         hvar
                                                                                                         hcvar
                                                                                                         hsl
                                                                                                         hcp
                                                                                                         hmark)))
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         hmark
                                                                                                         obj
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (ih
                                                                                                            obj
                                                                                                            upr))
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (with-labels
                                                                                                       (typepred
                                                                                                        "grS`redex")
                                                                                                       ((href
                                                                                                         hvar
                                                                                                         hcvar
                                                                                                         hsl
                                                                                                         hcp
                                                                                                         hmark)))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         hmark
                                                                                                         obj
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (ih
                                                                                                            obj
                                                                                                            upr))
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    (("2"
                                                                                                      (with-labels
                                                                                                       (typepred
                                                                                                        "grS`redex")
                                                                                                       ((href
                                                                                                         hvar
                                                                                                         hcvar
                                                                                                         hsl
                                                                                                         hcp
                                                                                                         hmark)))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         hmark
                                                                                                         obj
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (ih
                                                                                                            obj
                                                                                                            upr))
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "grS`stack")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (delete
                                                                             obj)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (delete
                                                                             obj)
                                                                            (("3"
                                                                              (use
                                                                               updateRedex_rhs_index)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (delete
                                                                             obj)
                                                                            (("4"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (delete
                                                                             obj)
                                                                            (("5"
                                                                              (use
                                                                               updateRedex_target_index)
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("6"
                                                                            (delete
                                                                             obj)
                                                                            (("6"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("7"
                                                                            (delete
                                                                             obj)
                                                                            (("7"
                                                                              (use
                                                                               updateRedex_rhs_index)
                                                                              (("7"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (with-labels
                                                                       (flatten
                                                                        stm)
                                                                       ((trr
                                                                         unm
                                                                         stam
                                                                         stom)))
                                                                      (("4"
                                                                        (expand
                                                                         store_matches)
                                                                        (("4"
                                                                          (with-labels
                                                                           (skeep
                                                                            :preds?
                                                                            t)
                                                                           ((r1dom
                                                                             r1cnt
                                                                             obj)))
                                                                          (("4"
                                                                            (name-replace
                                                                             r_2
                                                                             "IF r_1 = least_out(grS`domain) THEN r ELSE r_1 ENDIF")
                                                                            (("4"
                                                                              (inst
                                                                               stom
                                                                               r_2)
                                                                              (("1"
                                                                                (split
                                                                                 stom)
                                                                                (("1"
                                                                                  (delete
                                                                                   r1cnt)
                                                                                  (("1"
                                                                                    (split
                                                                                     obj)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skeep
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (case-replace
                                                                                         "r_1 = least_out(grS`domain)")
                                                                                        (("1"
                                                                                          (simplify)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "j = i")
                                                                                            (("1"
                                                                                              (simplify)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 stack_matches)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   rval)
                                                                                                  (("1"
                                                                                                    (with-labels
                                                                                                     (flatten
                                                                                                      stam)
                                                                                                     ((staml
                                                                                                       stamr)))
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       stamr
                                                                                                       "index(rhs(grS`redex))")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         get)
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "index(rhs(gS`redex)) = index(rhs(grS`redex))")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             translate_refs_eq
                                                                                                             (A
                                                                                                              "grS`stack`seq(grS`stack`length - 1 - index(rhs(grS`redex)))"
                                                                                                              translate
                                                                                                              translate
                                                                                                              translate2
                                                                                                              "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]"))
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "grS`stack`seq
                                                                                                                                               (grS`stack`length - 1 - index(rhs(grS`redex)))")
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (delete
                                                                                                                 obj)
                                                                                                                (("3"
                                                                                                                  (skeep)
                                                                                                                  (("3"
                                                                                                                    (typepred
                                                                                                                     "grS`stack`seq(grS`stack`length - 1 - index(rhs(grS`redex)))")
                                                                                                                    (("3"
                                                                                                                      (typepred
                                                                                                                       "grS`stack")
                                                                                                                      (("3"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               updateRedex_rhs_index)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (delete
                                                                                                             obj)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               trr
                                                                                                               :dir
                                                                                                               RL)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (simplify)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   stom
                                                                                                   j)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     translate_refs_eq
                                                                                                     (A
                                                                                                      "grS`store(r)`seq(j)"
                                                                                                      translate
                                                                                                      translate
                                                                                                      translate2
                                                                                                      "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]"))
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "grS`store(r)`seq(j)")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (typepred
                                                                                                         "grS`store(r)`seq(j)")
                                                                                                        (("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (simplify)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               stom
                                                                                               j)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 r_2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     translate_refs_eq
                                                                                                     (A
                                                                                                      "grS`store(r_1)`seq(j)"
                                                                                                      translate
                                                                                                      translate
                                                                                                      translate2
                                                                                                      "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]"))
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "grS`store(r_1)`seq(j)")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (typepred
                                                                                                         "grS`store(r_1)`seq(j)")
                                                                                                        (("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (case
                                                                                     "r_1 = least_out(grS`domain)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         r_2)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "grS`count(r)")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               refcount)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 refcountStack)
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   r1cnt)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "count_elem[(value?)]")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       r_2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "updateReduce(D)(grS)`count(r_1) > 0")
                                                                                          (("1"
                                                                                            (delete
                                                                                             r1cnt)
                                                                                            (("1"
                                                                                              (label
                                                                                               r1cnt
                                                                                               -1)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "updateReduce(D)(grS)`count(r_1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand*
                                                                                                     copying
                                                                                                     rval
                                                                                                     r
                                                                                                     i)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       updateReduce)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (expand*
                                                                                                             rval
                                                                                                             r)
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "ref(refindex(get(grS`stack)(target(grS`redex)))) = get(grS`stack)(target(grS`redex))")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (name-replace
                                                                                                                   "copying2"
                                                                                                                   "IF ref?(get(grS`stack)(rhs(grS`redex))) AND marked(rhs(grS`redex))
        THEN (grS`count :: [(grS`domain) -> nat])
               WITH [(refindex(get(grS`stack)(rhs(grS`redex))))
                       := grS`count
                              (refindex(get(grS`stack)(rhs(grS`redex))))
                           - 1]
                 (refindex(get(grS`stack)(target(grS`redex))))
      ELSE grS`count(refindex(get(grS`stack)(target(grS`redex))))
      ENDIF
       > 1
       OR
       NOT marked(target(grS`redex)) OR
        get(grS`stack)(rhs(grS`redex)) = get(grS`stack)(target(grS`redex))")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       refcount)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         refcountExpr)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           refs)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             refcountStack)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               count_update)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 count_update)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "count(lambda u: ref?(u) AND refindex(u) = r_1, grS`stack) > 0")
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     "grS`count(r_1)")
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (case
                                                                                                                                       "refcountStore(add(least_out(grS`domain), grS`domain),
                    grS`store
                      WITH [(least_out(grS`domain))
                              |-> grS`store
                                      (refindex
                                       (get(grS`stack)(target(grS`redex))))
                                    WITH [`seq
                                          (value
                                           (get
                                            (grS`stack)(lhs(grS`redex))))
                                          := get
                                             (grS`stack)(rhs(grS`redex))]])
                   (r_1) > 0")
                                                                                                                                      (("1"
                                                                                                                                        (delete
                                                                                                                                         r1cnt)
                                                                                                                                        (("1"
                                                                                                                                          (label
                                                                                                                                           r1cnt
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             refcountStore)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               allcount)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 sigma_add)
                                                                                                                                                (("1"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "least_out(grS`domain)")
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (rewrite
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (delete
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (rewrite
                                                                                                                                                             remove_add_member)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               add)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 member)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case-replace
                                                                                                                                                                   " Sigma(grS`domain,
             lambda (j_1: nat):
               IF least_out(grS`domain) = j_1 OR grS`domain(j_1)
                 THEN refcountArray(grS`store
                                    WITH [(least_out(grS`domain))
                                          |-> grS`store
                                              (refindex
                                               (get
                                                (grS`stack)
                                                (target(grS`redex))))
                                              WITH [`seq
                                                    (value
                                                     (get
                                                      (grS`stack)
                                                      (lhs(grS`redex))))
                                                    := get
                                                       (grS`stack)
                                                       (rhs(grS`redex))]]
                                    (j_1))
                                   (r_1)
               ELSE 0
               ENDIF) =  Sigma(grS`domain,
             lambda (j_1: nat):
               IF grS`domain(j_1)
                 THEN refcountArray(grS`store
                                    (j_1))
                                   (r_1)
               ELSE 0
               ENDIF)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (delete
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "grS`count(r_1)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           refcount)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             "Sigma(grS`domain,
             lambda (j_1: nat):
               IF grS`domain(j_1) THEN refcountArray(grS`store(j_1))(r_1)
               ELSE 0
               ENDIF)
       > 0")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (case
                                                                                                                                                                               "refcountArray(grS`store(refindex(get(grS`stack)(target(grS`redex))))
                      WITH [`seq(value(get(grS`stack)(lhs(grS`redex))))
                              := get(grS`stack)(rhs(grS`redex))])
                   (r_1) > 0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (case
                                                                                                                                                                                 "refcountArray(grS`store(refindex(get(grS`stack)(target(grS`redex))))
                      WITH [`seq(value(get(grS`stack)(lhs(grS`redex))))
                              := get(grS`stack)(rhs(grS`redex))])
                   (r_1) = 0")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   refcountArray)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (rewrite
                                                                                                                                                                                     count_none_zero)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (skeep)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (case-replace
                                                                                                                                                                                           "i!1 = value(get(grS`stack)(lhs(grS`redex)))")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (use
                                                                                                                                                                                             "count_elem[(value?)]")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (split
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (propax)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 1
                                                                                                                                                                                                 "grS`stack`length - 1 - index(rhs(grS`redex))")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (use
                                                                                                                                                                                                   updateRedex_rhs_index)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("3"
                                                                                                                                                                                                (propax)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("4"
                                                                                                                                                                                                (propax)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (use
                                                                                                                                                                                               refcountStore_ref)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                                   (1
                                                                                                                                                                                                    -1
                                                                                                                                                                                                    -2
                                                                                                                                                                                                    upr))
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (grind-with-ext)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (use
                                                                                                                                                                                                       updateRedex_target_index)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (grind)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (grind)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (use
                                                                                                                                                                     sigma_eq)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (split
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (delete
                                                                                                                                                                         2)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (skeep
                                                                                                                                                                           :preds?
                                                                                                                                                                           t)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (delete
                                                                                                                                                                       2)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "grS`stack")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "grS`stack")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("4"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "grS`stack")
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (use
                                                                                                                                                     updateRedex_rhs_index)
                                                                                                                                                    (("3"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("4"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (r1cnt
                                                                                                                                          1
                                                                                                                                          2))
                                                                                                                                        (("2"
                                                                                                                                          (lift-if)
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             count_update)
                                                                                                                                            (("1"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (use
                                                                                                                                               updateRedex_rhs_index)
                                                                                                                                              (("2"
                                                                                                                                                (delete
                                                                                                                                                 r1cnt)
                                                                                                                                                (("2"
                                                                                                                                                  (reveal
                                                                                                                                                   upr)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (typepred
                                                                                                                                         "grS`stack")
                                                                                                                                        (("3"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("4"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (use
                                                                                                                                   updateRedex_rhs_index)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (use
                                                                                                                                 updateRedex_target_index)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("4"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("5"
                                                                                                                                (use
                                                                                                                                 updateRedex_rhs_index)
                                                                                                                                (("5"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (delete
                                                                                                                     r1cnt)
                                                                                                                    (("2"
                                                                                                                      (use
                                                                                                                       "updateRedex_rhs_index")
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (delete
                                                                                                                     r1cnt)
                                                                                                                    (("3"
                                                                                                                      (flatten)
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         "grS`count(refindex(get(grS`stack)(rhs(grS`redex))))")
                                                                                                                        (("3"
                                                                                                                          (rewrite
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             refcount)
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               refcountStack)
                                                                                                                              (("3"
                                                                                                                                (use
                                                                                                                                 "count_elem[(value?)]")
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (inst
                                                                                                                                     1
                                                                                                                                     "grS`stack`length - 1 - index(rhs(grS`redex))")
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (use
                                                                                                                                       updateRedex_rhs_index)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (typepred
                                                                                                                     "grS`stack")
                                                                                                                    (("4"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("5"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("6"
                                                                                                                    (use
                                                                                                                     updateRedex_rhs_index)
                                                                                                                    (("6"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (grind-with-ext)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             updateReduce)
                                                                                            (("2"
                                                                                              (expand
                                                                                               copying)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 rval)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   r)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       i)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (expand
                                                                                             updateReduce)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (expand*
                                                                                                 copying
                                                                                                 rval
                                                                                                 r
                                                                                                 i)
                                                                                                (("3"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (delete
                                                                                 obj)
                                                                                (("2"
                                                                                  (expand
                                                                                   r_2)
                                                                                  (("2"
                                                                                    (delete
                                                                                     r1cnt)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "grS`stack")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               copying)
                                                              (("2"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((cnt
                                                                   mark
                                                                   rveq)))
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (with-labels
                                                                     (case
                                                                      "grS`count(r) > 1")
                                                                     ((ccnt)))
                                                                    (("1"
                                                                      (delete
                                                                       obj)
                                                                      (("1"
                                                                        (grind-with-ext)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       cnt)
                                                                      (("2"
                                                                        (expand
                                                                         state_matches?)
                                                                        (("2"
                                                                          (inst
                                                                           obj
                                                                           "translate WITH [(r) |-> least_out(gS`domain)]")
                                                                          (("2"
                                                                            (name-replace
                                                                             nstack
                                                                             "IF ref?(rval)
                                                                      AND
                                                                      marked(rhs(grS`redex))
                                                                   THEN grS`stack
                                                                        WITH [`seq
                                                                              (grS`stack`length
                                                                               -
                                                                               1
                                                                               -
                                                                               index
                                                                               (rhs(grS`redex)))
                                                                              := nil]
                                                                   ELSE grS`stack
                                                                   ENDIF
                                                                   WITH [`seq
                                                                         (grS`stack`length - 1
                                                                          -
                                                                          index
                                                                          (target(grS`redex)))
                                                                         := nil]")
                                                                            (("1"
                                                                              (case
                                                                               "ref?(grS`store(r)`seq(i))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "oldref"
                                                                                   "refindex(grS`store(r)`seq(i))")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "ncount"
                                                                                     "IF ref?(rval)
                                        THEN IF marked(rhs(grS`redex))
                                             THEN (grS`count :: [(grS`domain) -> nat])
                                                  WITH [(refindex(rval))
                                                        := grS`count
                                                           (refindex(rval))
                                                           -
                                                           1]
                                             ELSE (grS`count :: [(grS`domain) -> nat])
                                             ENDIF
                                             WITH [(refindex(rval))
                                                   := IF marked
                                                         (rhs(grS`redex))
                                                      THEN grS`count
                                                           (refindex(rval))
                                                           -
                                                           1
                                                      ELSE grS`count
                                                           (refindex(rval))
                                                      ENDIF
                                                      +
                                                      1]
                                        ELSE (grS`count :: [(grS`domain) -> nat])
                                        ENDIF")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "IF ref?(rval)
                                        THEN IF marked(rhs(grS`redex))
                                             THEN (grS`count :: [(grS`domain) -> nat])
                                                  WITH [(refindex(rval))
                                                        := grS`count
                                                           (refindex(rval))
                                                           -
                                                           1]
                                             ELSE (grS`count :: [(grS`domain) -> nat])
                                             ENDIF
                                             WITH [(refindex(rval))
                                                   := IF marked
                                                         (rhs(grS`redex))
                                                      THEN grS`count
                                                           (refindex(rval))
                                                           -
                                                           1
                                                      ELSE grS`count
                                                           (refindex(rval))
                                                      ENDIF
                                                      +
                                                      1](oldref)
                                        ELSE grS`count(oldref)
                                        ENDIF = ncount(oldref)")
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "nncount"
                                                                                         "ncount
                                        WITH [(oldref)
                                              := ncount(oldref) - 1]")
                                                                                        (("1"
                                                                                          (use
                                                                                           decref_stillmatch)
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (delete
                                                                                               obj)
                                                                                              (("2"
                                                                                                (label
                                                                                                 obj
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   state_matches)
                                                                                                  (("2"
                                                                                                    (with-labels
                                                                                                     (flatten
                                                                                                      stm)
                                                                                                     ((trr
                                                                                                       unm
                                                                                                       stam
                                                                                                       stom)))
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       obj)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (lemma
                                                                                                         stack_stillmatch)
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (inst?
                                                                                                             :where
                                                                                                             stam)
                                                                                                            (("3"
                                                                                                              (inst?
                                                                                                               :where
                                                                                                               stam)
                                                                                                              (("3"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   nstack)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (delete
                                                                                                                   obj)
                                                                                                                  (("3"
                                                                                                                    (lemma
                                                                                                                     stack_subset_match)
                                                                                                                    (("3"
                                                                                                                      (inst?)
                                                                                                                      (("3"
                                                                                                                        (inst?
                                                                                                                         :where
                                                                                                                         stam)
                                                                                                                        (("3"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skeep
                                                                                                                             :preds?
                                                                                                                             t)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("4"
                                                                                                                  (delete
                                                                                                                   obj)
                                                                                                                  (("4"
                                                                                                                    (with-labels
                                                                                                                     (skeep
                                                                                                                      :preds?
                                                                                                                      t)
                                                                                                                     ((ih
                                                                                                                       obj)))
                                                                                                                    (("4"
                                                                                                                      (case
                                                                                                                       "i!1 = index(target(grS`redex))")
                                                                                                                      (("1"
                                                                                                                        (with-labels
                                                                                                                         (typepred
                                                                                                                          "grS`redex")
                                                                                                                         ((href
                                                                                                                           hvar
                                                                                                                           hcvar
                                                                                                                           hsl
                                                                                                                           hcp
                                                                                                                           hmark)))
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           hmark
                                                                                                                           mark
                                                                                                                           :dir
                                                                                                                           RL)
                                                                                                                          (("1"
                                                                                                                            (apply-eta
                                                                                                                             "grS`redex"
                                                                                                                             "(update?)")
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         nstack)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "marked(rhs(grS`redex)) AND i!1 = index(rhs(grS`redex))")
                                                                                                                            (("1"
                                                                                                                              (with-labels
                                                                                                                               (typepred
                                                                                                                                "grS`redex")
                                                                                                                               ((href
                                                                                                                                 hvar
                                                                                                                                 hcvar
                                                                                                                                 hsl
                                                                                                                                 hcp
                                                                                                                                 hmark)))
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 hmark
                                                                                                                                 -7
                                                                                                                                 :dir
                                                                                                                                 RL)
                                                                                                                                (("1"
                                                                                                                                  (apply-eta
                                                                                                                                   "grS`redex"
                                                                                                                                   "(update?)")
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 obj)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   stack_matches)
                                                                                                                                  (("2"
                                                                                                                                    (with-labels
                                                                                                                                     (flatten
                                                                                                                                      stam)
                                                                                                                                     ((staml
                                                                                                                                       stamr)))
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       stamr
                                                                                                                                       "i!1")
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "grS`stack`seq(grS`stack`length -1 - i!1) = ref(r)")
                                                                                                                                        (("1"
                                                                                                                                          (typepred
                                                                                                                                           "grS`count(r)")
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               refcount)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "refcountStack(grS`stack WITH [`seq(grS`stack`length - 1 - index(target(grS`redex))) := nil])(r) > 0")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   refcountStack)
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     count_update)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       get)
                                                                                                                                                      (("1"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (use
                                                                                                                                                       "updateRedex_target_index")
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "count_elem[(value?)]")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     refcountStack)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst?
                                                                                                                                                       -1
                                                                                                                                                       :where
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "grS`stack`seq(grS`stack`length - 1 - i!1)")
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (inst
                                                                                                                                                             1
                                                                                                                                                             "grS`stack`length - 1 - i!1")
                                                                                                                                                            (("1"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("4"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (use
                                                                                                                                                         updateRedex_target_index)
                                                                                                                                                        (("3"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("4"
                                                                                                                                                  (use
                                                                                                                                                   updateRedex_target_index)
                                                                                                                                                  (("4"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (grind-with-ext)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (expand
                                                                                                         store_matches)
                                                                                                        (("4"
                                                                                                          (with-labels
                                                                                                           (skeep
                                                                                                            :preds?
                                                                                                            t)
                                                                                                           ((r1dom
                                                                                                             r1cnt
                                                                                                             obj)))
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             stom
                                                                                                             r_1)
                                                                                                            (("4"
                                                                                                              (split
                                                                                                               stom)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 obj)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (skeep
                                                                                                                   :preds?
                                                                                                                   t)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     stom
                                                                                                                     j)
                                                                                                                    (("1"
                                                                                                                      (case-replace
                                                                                                                       "r_1 = r")
                                                                                                                      (("1"
                                                                                                                        (case-replace
                                                                                                                         "j = i")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "domainValue?(grS`domain)(rval)")
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               rval)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 stack_matches)
                                                                                                                                (("1"
                                                                                                                                  (with-labels
                                                                                                                                   (flatten
                                                                                                                                    stam)
                                                                                                                                   ((staml
                                                                                                                                     stamr)))
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     stamr
                                                                                                                                     "index(rhs(grS`redex))")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       get)
                                                                                                                                      (("1"
                                                                                                                                        (case-replace
                                                                                                                                         "index(rhs(gS`redex)) = index(rhs(grS`redex))")
                                                                                                                                        (("1"
                                                                                                                                          (hide-all-but
                                                                                                                                           (stamr
                                                                                                                                            obj
                                                                                                                                            rveq
                                                                                                                                            -2
                                                                                                                                            -3))
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             rval)
                                                                                                                                            (("1"
                                                                                                                                              (grind-with-ext)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (replace
                                                                                                                                           trr
                                                                                                                                           :dir
                                                                                                                                           RL)
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (typepred
                                                                                                                               "grS`stack")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 rval)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "grS`store(r)`seq(j) = ref(r)")
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               "grS`count(r)")
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   refcount)
                                                                                                                                  (("1"
                                                                                                                                    (use
                                                                                                                                     refcountStore_ref)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       refcountStack)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "count_elem[(value?)]")
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "ref(r)")
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (inst
                                                                                                                                                 1
                                                                                                                                                 "grS`stack`length - 1 - index(target(grS`redex))")
                                                                                                                                                (("1"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("4"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (typepred
                                                                                                                               "grS`store(r)`seq(j)")
                                                                                                                              (("2"
                                                                                                                                (grind-with-ext)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (case-replace
                                                                                                                           "translate(r_1) = least_out(gS`domain)")
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "grS`store(r_1)`seq(j) = ref(r)")
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "grS`count(r)")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     refcount)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       refcountStack)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         refcountStore_ref)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "count_elem[(value?)]")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "ref(r)")
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (inst
                                                                                                                                                   1
                                                                                                                                                   "grS`stack`length - 1 - index(target(grS`redex))")
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("4"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (typepred
                                                                                                                                 "grS`store(r_1)`seq(j)")
                                                                                                                                (("2"
                                                                                                                                  (grind-with-ext)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (delete
                                                                                                                 obj)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   nncount)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "ncount(r_1) > 0")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       ncount)
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "grS`count(refindex(rval))")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               refcount)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 refcountStack)
                                                                                                                                (("1"
                                                                                                                                  (use
                                                                                                                                   "count_elem[(value?)]")
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       rval)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "grS`stack`length - index(rhs(grS`redex)) - 1")
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (use
                                                                                                                                           updateRedex_rhs_index)
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (delete
                                                                                             obj)
                                                                                            (("2"
                                                                                              (expand
                                                                                               noDanglingRefs?)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   ndr
                                                                                                   "i_1")
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     ndr)
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "i_1 = index(target(grS`redex))")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         nstack)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (case-replace
                                                                                                         "i_1 = index(lhs(grS`redex))")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           nstack)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case-replace
                                                                                                           "i_1 = index(rhs(grS`redex))")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             nstack)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "index(target(grS`redex)) = index(rhs(grS`redex))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "ref?(rval)")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "marked(rhs(grS`redex))")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (with-labels
                                                                                                                         (typepred
                                                                                                                          "grS`redex")
                                                                                                                         ((href
                                                                                                                           hvar
                                                                                                                           hcvar
                                                                                                                           hsl
                                                                                                                           hcp
                                                                                                                           hmark)))
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           hmark
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           RL)
                                                                                                                          (("2"
                                                                                                                            (apply-eta
                                                                                                                             "grS`redex"
                                                                                                                             "(update?)")
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         rval)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       nstack)
                                                                                                      (("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "i_1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       nstack)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (delete
                                                                                             obj)
                                                                                            (("3"
                                                                                              (expand
                                                                                               nncount)
                                                                                              (("3"
                                                                                                (with-labels
                                                                                                 (skeep
                                                                                                  :preds?
                                                                                                  t)
                                                                                                 ((x1dom
                                                                                                   obj)))
                                                                                                (("3"
                                                                                                  (case-replace
                                                                                                   "x1 = oldref")
                                                                                                  (("1"
                                                                                                    (simplify)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       ncount)
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "rval = ref(oldref)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             nstack)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "grS`count(oldref)")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   refcount)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     refcountStack)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       count_update)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         rval)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           refcountStore_set)
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (split)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   count_update)
                                                                                                                                  (("1"
                                                                                                                                    (decompose-equality
                                                                                                                                     rveq)
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         oldref)
                                                                                                                                        (("1"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         oldref)
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (decompose-equality
                                                                                                                                     rveq)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       oldref)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (decompose-equality
                                                                                                                                 rveq)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   oldref)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             oldref)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "grS`store(r)`seq(i)")
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (use
                                                                                                                         updateRedex_target_index)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("5"
                                                                                                                        (use
                                                                                                                         updateRedex_rhs_index)
                                                                                                                        (("5"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (case-replace
                                                                                                             "refcount(grS`domain, grS`store WITH [(r)`seq(i) := rval], nstack,
                ref(r))
               (oldref) = grS`count(oldref) - 1")
                                                                                                            (("1"
                                                                                                              (grind-with-ext)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (delete
                                                                                                               obj)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "grS`count(oldref)")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     refcount)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       refcountStore_set)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         oldref)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           nstack)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             refcountStack)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               count_update)
                                                                                                                              (("1"
                                                                                                                                (lift-if)
                                                                                                                                (("1"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       count_update)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         rval)
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (use
                                                                                                                                         updateRedex_rhs_index)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     rval)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "grS`stack`seq(gS`stack`length - 1 - index(rhs(grS`redex)))")
                                                                                                                                      (("1"
                                                                                                                                        (grind-with-ext)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (use
                                                                                                                                         updateRedex_rhs_index)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (use
                                                                                                                                 updateRedex_target_index)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("4"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("5"
                                                                                                                                (use
                                                                                                                                 updateRedex_rhs_index)
                                                                                                                                (("5"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         rval)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "grS`stack")
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (expand
                                                                                                               rval)
                                                                                                              (("3"
                                                                                                                (typepred
                                                                                                                 "grS`stack")
                                                                                                                (("3"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       refcount)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         refcountStore_set)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           oldref)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               nstack)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 refcountStack)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   count_update)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     ncount)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "grS`count(x1)")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (case-replace
                                                                                                                               "index(target(grS`redex)) = index(rhs(grS`redex))")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 rval)
                                                                                                                                (("1"
                                                                                                                                  (delete
                                                                                                                                   obj)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (case-replace
                                                                                                                                   "refs(grS`store(r)`seq(i))(x1) = FALSE")
                                                                                                                                  (("1"
                                                                                                                                    (case-replace
                                                                                                                                     "x1 = r")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (split)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (split)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (delete
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   (obj
                                                                                                                                                    rveq))
                                                                                                                                                  (("1"
                                                                                                                                                    (grind-with-ext)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (split)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   count_update)
                                                                                                                                                  (("1"
                                                                                                                                                    (typepred
                                                                                                                                                     rval)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       rval)
                                                                                                                                                      (("1"
                                                                                                                                                        (typepred
                                                                                                                                                         "grS`count(r)")
                                                                                                                                                        (("1"
                                                                                                                                                          (rewrite
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             refcount)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               refcountStack)
                                                                                                                                                              (("1"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (use
                                                                                                                                                     updateRedex_rhs_index)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "grS`count(r)")
                                                                                                                                                  (("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (typepred
                                                                                                                                           rval)
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (split)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (split)
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               "grS`count(refindex(rval))")
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   count_update)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     rval)
                                                                                                                                                    (("1"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (use
                                                                                                                                                     updateRedex_rhs_index)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand
                                                                                                                                                 rval)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "grS`stack")
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 count_update)
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "grS`count(x1)")
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       rval)
                                                                                                                                                      (("1"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   updateRedex_rhs_index)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             rval)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (delete
                                                                                                                                     obj)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "grS`store(r)`seq(i)")
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (use
                                                                                                                     updateRedex_target_index)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("5"
                                                                                                                    (use
                                                                                                                     updateRedex_rhs_index)
                                                                                                                    (("5"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           rval)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "grS`stack")
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (delete
                                                                                             obj)
                                                                                            (("4"
                                                                                              (expand
                                                                                               rval)
                                                                                              (("4"
                                                                                                (typepred
                                                                                                 "grS`stack")
                                                                                                (("4"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("5"
                                                                                            (delete
                                                                                             obj)
                                                                                            (("5"
                                                                                              (typepred
                                                                                               "grS`redex")
                                                                                              (("5"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "grS`stack")
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "i!1 = r")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         every)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "grS`stack`length - 1 - index(target(grS`redex))")
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             updateRedex_target_index)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (skeep)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -4
                                                                                                     "i!1")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       nstack)
                                                                                                      (("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (expand
                                                                                                   nstack)
                                                                                                  (("4"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("5"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("6"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("6"
                                                                                            (delete
                                                                                             obj)
                                                                                            (("6"
                                                                                              (expand
                                                                                               nstack)
                                                                                              (("6"
                                                                                                (typepred
                                                                                                 "grS`stack")
                                                                                                (("6"
                                                                                                  (expand
                                                                                                   every)
                                                                                                  (("6"
                                                                                                    (skeep)
                                                                                                    (("6"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "i!1")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "i!1")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("7"
                                                                                            (delete
                                                                                             obj)
                                                                                            (("7"
                                                                                              (typepred
                                                                                               "gS`stack")
                                                                                              (("7"
                                                                                                (case
                                                                                                 "index(rhs(gS`redex)) < gS`stack`length")
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case-replace
                                                                                                   "index(rhs(gS`redex)) = index(rhs(grS`redex))")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     state_matches)
                                                                                                    (("2"
                                                                                                      (with-labels
                                                                                                       (flatten
                                                                                                        stm)
                                                                                                       ((trr
                                                                                                         unm
                                                                                                         stam
                                                                                                         stom)))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         trr
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("8"
                                                                                            (delete
                                                                                             obj)
                                                                                            (("8"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("9"
                                                                                            (delete
                                                                                             obj)
                                                                                            (("9"
                                                                                              (typepred
                                                                                               "gS`redex")
                                                                                              (("9"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("5"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("10"
                                                                                            (delete
                                                                                             obj)
                                                                                            (("10"
                                                                                              (typepred
                                                                                               "gS`stack")
                                                                                              (("10"
                                                                                                (expand
                                                                                                 every)
                                                                                                (("10"
                                                                                                  (skeep)
                                                                                                  (("10"
                                                                                                    (inst?)
                                                                                                    (("10"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (delete
                                                                                           obj)
                                                                                          (("2"
                                                                                            (expand
                                                                                             ncount)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (simplify)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "grS`count(oldref) > 0")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     refcountStore_ref)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "grS`count(oldref)")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           refcount)
                                                                                                          (("2"
                                                                                                            (delete
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               refcountStore_ref)
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 :where
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   r
                                                                                                                   i)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     oldref)
                                                                                                                    (("2"
                                                                                                                      (grind-with-ext)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (expand
                                                                                                     oldref)
                                                                                                    (("3"
                                                                                                      (typepred
                                                                                                       "grS`store(r)`seq(i)")
                                                                                                      (("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (delete
                                                                                         obj)
                                                                                        (("2"
                                                                                          (expand
                                                                                           ncount)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (delete
                                                                                         obj)
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (delete
                                                                                         obj)
                                                                                        (("4"
                                                                                          (expand
                                                                                           rval)
                                                                                          (("4"
                                                                                            (typepred
                                                                                             "grS`stack")
                                                                                            (("4"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (delete
                                                                                         obj)
                                                                                        (("5"
                                                                                          (expand
                                                                                           rval)
                                                                                          (("5"
                                                                                            (typepred
                                                                                             "grS`stack")
                                                                                            (("5"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("6"
                                                                                        (delete
                                                                                         obj)
                                                                                        (("6"
                                                                                          (flatten)
                                                                                          (("6"
                                                                                            (typepred
                                                                                             "grS`count(refindex(rval))")
                                                                                            (("6"
                                                                                              (rewrite
                                                                                               -1)
                                                                                              (("6"
                                                                                                (expand
                                                                                                 refcount)
                                                                                                (("6"
                                                                                                  (expand
                                                                                                   refcountStack)
                                                                                                  (("6"
                                                                                                    (use
                                                                                                     "count_elem[(value?)]")
                                                                                                    (("6"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         rval)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("7"
                                                                                        (delete
                                                                                         obj)
                                                                                        (("7"
                                                                                          (expand
                                                                                           rval)
                                                                                          (("7"
                                                                                            (typepred
                                                                                             "grS`stack")
                                                                                            (("7"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("3"
                                                                                        (expand
                                                                                         rval)
                                                                                        (("3"
                                                                                          (typepred
                                                                                           "grS`stack")
                                                                                          (("3"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("4"
                                                                                        (expand
                                                                                         rval)
                                                                                        (("4"
                                                                                          (typepred
                                                                                           "grS`stack")
                                                                                          (("4"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("5"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("5"
                                                                                        (flatten)
                                                                                        (("5"
                                                                                          (typepred
                                                                                           "grS`count(refindex(rval))")
                                                                                          (("5"
                                                                                            (rewrite
                                                                                             -1)
                                                                                            (("5"
                                                                                              (expand
                                                                                               refcount)
                                                                                              (("5"
                                                                                                (expand
                                                                                                 refcountStack)
                                                                                                (("5"
                                                                                                  (use
                                                                                                   "count_elem[(value?)]")
                                                                                                  (("5"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       rval)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("6"
                                                                                      (delete
                                                                                       obj)
                                                                                      (("6"
                                                                                        (expand
                                                                                         rval)
                                                                                        (("6"
                                                                                          (typepred
                                                                                           "grS`stack")
                                                                                          (("6"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   state_matches)
                                                                                  (("2"
                                                                                    (split
                                                                                     obj)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       stack_stillmatch)
                                                                                      (("3"
                                                                                        (inst?)
                                                                                        (("3"
                                                                                          (with-labels
                                                                                           (flatten
                                                                                            stm)
                                                                                           ((trr
                                                                                             unm
                                                                                             stam
                                                                                             stom)))
                                                                                          (("3"
                                                                                            (inst?
                                                                                             :where
                                                                                             stam)
                                                                                            (("3"
                                                                                              (inst?
                                                                                               :where
                                                                                               stam)
                                                                                              (("3"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     nstack)
                                                                                                    (("2"
                                                                                                      (simplify)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("3"
                                                                                                    (lemma
                                                                                                     stack_subset_match)
                                                                                                    (("3"
                                                                                                      (inst?)
                                                                                                      (("3"
                                                                                                        (inst?
                                                                                                         :where
                                                                                                         stam)
                                                                                                        (("3"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skeep
                                                                                                             :preds?
                                                                                                             t)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               union)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 bumpn)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   member)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (delete
                                                                                                   obj)
                                                                                                  (("4"
                                                                                                    (with-labels
                                                                                                     (skeep
                                                                                                      :preds?
                                                                                                      t)
                                                                                                     ((ih
                                                                                                       obj)))
                                                                                                    (("4"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         nstack)
                                                                                                        (("1"
                                                                                                          (simplify)
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (simplify)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "i!1 = index(target(grS`redex))")
                                                                                                                    (("1"
                                                                                                                      (delete
                                                                                                                       obj)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (with-labels
                                                                                                                           (typepred
                                                                                                                            "grS`redex")
                                                                                                                           ((href
                                                                                                                             hvar
                                                                                                                             hcvar
                                                                                                                             hsl
                                                                                                                             hcp
                                                                                                                             hmark)))
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             hmark
                                                                                                                             mark
                                                                                                                             :dir
                                                                                                                             RL)
                                                                                                                            (("1"
                                                                                                                              (hide-all-but
                                                                                                                               (mark
                                                                                                                                ih
                                                                                                                                upr))
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "marked(rhs(grS`redex)) AND i!1 = index(rhs(grS`redex))")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (simplify)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (label
                                                                                                                                   mmark
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (with-labels
                                                                                                                                     (typepred
                                                                                                                                      "grS`redex")
                                                                                                                                     ((href
                                                                                                                                       hvar
                                                                                                                                       hcvar
                                                                                                                                       hsl
                                                                                                                                       hcp
                                                                                                                                       hmark)))
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       hmark
                                                                                                                                       mmark
                                                                                                                                       :dir
                                                                                                                                       RL)
                                                                                                                                      (("1"
                                                                                                                                        (hide-all-but
                                                                                                                                         (mmark
                                                                                                                                          upr
                                                                                                                                          ih))
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (ground)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "grS`stack")
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "refindex(grS`stack`seq(grS`stack`length - i!1 - 1)) = r")
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "grS`count(r)")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   refcount)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "refcountStack(grS`stack WITH [`seq(grS`stack`length - 1 - index(target(grS`redex))) := nil])(r) > 0")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       refcountStack)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         count_update)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       refcountStack)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "count_elem[(value?)]")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "ref(r)")
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (inst
                                                                                                                                 1
                                                                                                                                 "grS`stack`length - 1 -i!1")
                                                                                                                                (("1"
                                                                                                                                  (simplify)
                                                                                                                                  (("1"
                                                                                                                                    (lift-if
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (with-labels
                                                                                                                                           (typepred
                                                                                                                                            "grS`redex")
                                                                                                                                           ((hrefs
                                                                                                                                             hvar
                                                                                                                                             hcvar
                                                                                                                                             hsl
                                                                                                                                             hcp
                                                                                                                                             hmark)))
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             hmark
                                                                                                                                             mark
                                                                                                                                             :dir
                                                                                                                                             RL)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               (ih
                                                                                                                                                mark
                                                                                                                                                -7
                                                                                                                                                upr))
                                                                                                                                              (("1"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (name-replace
                                                                                                                                         "u"
                                                                                                                                         "grS`stack`seq(grS`stack`length - 1 - i!1)")
                                                                                                                                        (("2"
                                                                                                                                          (hide-all-but
                                                                                                                                           (1
                                                                                                                                            -1
                                                                                                                                            obj))
                                                                                                                                          (("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (delete
                                                                                                                                               1
                                                                                                                                               3)
                                                                                                                                              (("2"
                                                                                                                                                (grind-with-ext)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (typepred
                                                                                                                                   "grS`redex")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -3
                                                                                                                                     "i!1 - popDepth(grS`context)")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       cvars_vars_ctx)
                                                                                                                                      (("1"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("4"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (use
                                                                                                                             updateRedex_target_index)
                                                                                                                            (("3"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (use
                                                                                                                       updateRedex_target_index)
                                                                                                                      (("4"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (hide-all-but
                                                                                                               (1
                                                                                                                ih))
                                                                                                              (("3"
                                                                                                                (typepred
                                                                                                                 "grS`redex")
                                                                                                                (("3"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "i!1 - popDepth(grS`context)")
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     cvars_vars_ctx)
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (with-labels
                                                                                       (flatten
                                                                                        stm)
                                                                                       ((trr
                                                                                         unm
                                                                                         stam
                                                                                         stom)))
                                                                                      (("4"
                                                                                        (expand
                                                                                         store_matches)
                                                                                        (("4"
                                                                                          (with-labels
                                                                                           (skeep
                                                                                            :preds?
                                                                                            t)
                                                                                           ((r1dom
                                                                                             r1cnt
                                                                                             obj)))
                                                                                          (("4"
                                                                                            (inst
                                                                                             stom
                                                                                             r_1)
                                                                                            (("4"
                                                                                              (split
                                                                                               stom)
                                                                                              (("1"
                                                                                                (split
                                                                                                 obj)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (case
                                                                                                   "FORALL (r_3: (grS`domain), k: below(grS`store(r_3)`length)): grS`store(r_3)`seq(k) /= ref(r)")
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "r_1 = r")
                                                                                                      (("1"
                                                                                                        (simplify)
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "j = i")
                                                                                                          (("1"
                                                                                                            (simplify)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               rval)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 stack_matches)
                                                                                                                (("1"
                                                                                                                  (with-labels
                                                                                                                   (flatten
                                                                                                                    stam)
                                                                                                                   ((staml
                                                                                                                     stamr)))
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     stamr
                                                                                                                     "index(rhs(grS`redex))")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       get)
                                                                                                                      (("1"
                                                                                                                        (case-replace
                                                                                                                         "index(rhs(gS`redex)) = index(rhs(grS`redex))")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           rval)
                                                                                                                          (("1"
                                                                                                                            (grind-with-ext)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replace
                                                                                                                           trr
                                                                                                                           :dir
                                                                                                                           RL)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (simplify)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 stom
                                                                                                                 j)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (obj
                                                                                                                    stom
                                                                                                                    -2))
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "grS`store(r)`seq(j)")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        (("1"
                                                                                                                          (grind-with-ext)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   j)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (simplify)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (obj
                                                                                                                    -1
                                                                                                                    stom))
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "grS`store(r_1)`seq(j)")
                                                                                                                      (("1"
                                                                                                                        (grind-with-ext)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   j)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (delete
                                                                                                     obj)
                                                                                                    (("2"
                                                                                                      (skeep)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "grS`count(r)")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             refcount)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               refcountStore_ref)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   refcountStack)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "count_elem[(value?)]")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "ref(r)")
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "grS`stack`length - 1 - index(target(grS`redex))")
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (use
                                                                                                                               updateRedex_target_index)
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("4"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (delete
                                                                                                 obj)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "grS`count(r_1)")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           refcount)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             refcountStack)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "count_elem[(value?)]")
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   rval)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("4"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (delete
                                                                               obj)
                                                                              (("2"
                                                                                (expand
                                                                                 every)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (simplify)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "grS`stack")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (delete
                                                                               obj)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (delete
                                                                               obj)
                                                                              (("4"
                                                                                (use
                                                                                 updateRedex_target_index)
                                                                                (("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (delete
                                                                               obj)
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (delete
                                                                               obj)
                                                                              (("6"
                                                                                (flatten)
                                                                                (("6"
                                                                                  (use
                                                                                   updateRedex_rhs_index)
                                                                                  (("6"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (typepred
                                                               "grS`count(refindex(rval))")
                                                              (("2"
                                                                (rewrite
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   refcount)
                                                                  (("2"
                                                                    (expand
                                                                     refcountStack)
                                                                    (("2"
                                                                      (use
                                                                       "count_elem[(value?)]")
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           rval)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (delete obj)
                                                          (("3"
                                                            (typepred
                                                             "grS`stack")
                                                            (("3"
                                                              (expand
                                                               rval)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (delete obj)
                                                        (("2"
                                                          (use
                                                           updateRedex_rhs_index)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case-replace
                                                   "(i >= 0 AND i < grS`store(r)`length) = FALSE")
                                                  (("1"
                                                    (expand
                                                     state_matches?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (use
                                                         state_error_match)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete obj)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete obj)
                                              (("2"
                                                (expand state_matches)
                                                (("2"
                                                  (with-labels
                                                   (flatten)
                                                   ((trr
                                                     unm
                                                     stam
                                                     stom)))
                                                  (("2"
                                                    (expand
                                                     store_matches)
                                                    (("2"
                                                      (inst stom r)
                                                      (("2"
                                                        (split stom)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "grS`count(r)")
                                                          (("2"
                                                            (rewrite
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               refcount)
                                                              (("2"
                                                                (expand
                                                                 refcountStack)
                                                                (("2"
                                                                  (use
                                                                   "count_elem[(value?)]")
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (delete obj)
                                              (("3"
                                                (typepred "grS`stack")
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (delete obj)
                                              (("4"
                                                (typepred "gS`stack")
                                                (("4"
                                                  (use
                                                   target_translate)
                                                  (("4"
                                                    (split -1)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (expand
                                                         translate_refs)
                                                        (("1"
                                                          (expand
                                                           every)
                                                          (("1"
                                                            (expand
                                                             get)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 domainValue?)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case-replace
                                                                 "index(target(gS`redex)) = index(target(grS`redex))")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   state_matches)
                                                                  (("2"
                                                                    (with-labels
                                                                     (flatten)
                                                                     ((trr
                                                                       unm
                                                                       stam
                                                                       stom)))
                                                                    (("2"
                                                                      (replace
                                                                       trr
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (expand r)
                                          (("2"
                                            (name-replace
                                             u
                                             "get(grS`stack)(target(grS`redex))")
                                            (("2"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete obj)
                          (("2" (expand i)
                            (("2"
                              (name-replace u
                               "get(grS`stack)(lhs(grS`redex))")
                              (("2" (grind-with-ext) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (use lhs_translate)
                    (("2" (rewrite -1 :dir RL)
                      (("2" (use value_translate_rev_constant)
                        (("2" (assert)
                          (("2" (expand state_matches?)
                            (("2" (inst?)
                              (("2"
                                (use state_error_match)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (delete obj)
                  (("3" (use updateRedex_lhs_index)
                    (("3" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (use target_translate)
                  (("2" (rewrite -1 :dir RL)
                    (("2" (use value_translate_rev_ref)
                      (("2" (assert)
                        (("2" (use state_error_match)
                          (("2" (expand state_matches?)
                            (("2" (inst?) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (delete obj)
                (("3" (use updateRedex_target_index)
                  (("3" (grind) nil nil)) nil))
                nil)
               ("4" (delete obj) (("4" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (updateReduce const-decl "(noDanglingRefs?)" rreduction nil)
    (updateReduce const-decl "estate" reduction nil)
    (target adt-accessor-decl "[(update?) -> (variable?)]"
            IExpression_adt nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (get const-decl "(value?)" IL nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (updateRedex_lhs_index formula-decl nil rreduction nil)
    (value_translate_rev_constant formula-decl nil reduction_props nil)
    (value adt-accessor-decl "[(constant?) -> int]" IExpression_adt
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IExpression_constant_extensionality formula-decl nil
     IExpression_adt nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (ref adt-constructor-decl "[nat -> (ref?)]" IExpression_adt nil)
    (rhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (pure? def-decl "bool" IL nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (count_update formula-decl nil finseq_theorems nil)
    (Sigma def-decl "nat" finite_set_theorems nil)
    (refcountStore_ref formula-decl nil rreduction nil)
    (IExpression_ref_extensionality formula-decl nil IExpression_adt
     nil)
    (count_none_zero formula-decl nil finseq_theorems nil)
    (count def-decl "nat" finseq_theorems nil)
    (finseqtolist def-decl "list[T]" finseq_theorems nil)
    (tail const-decl "finseq[T]" finseq_theorems nil)
    (head const-decl "T" finseq_theorems nil)
    (sigma_eq formula-decl nil finite_set_theorems nil)
    (remove_add_member formula-decl nil sets_lemmas nil)
    (finite_remove application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (remove_preserves_bounded application-judgement
     "(LAMBDA (S: set[nat]):
   (bounded?)(S, restrict[[real, real], [nat, nat], boolean](<=)))"
     countability "sets_aux/")
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (sigma_add formula-decl nil finite_set_theorems nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (decref_preserves_jdg application-judgement "{rS2 |
   rS2`redex = rS`redex AND
    rS2`stack = rS`stack AND
     rS2`context = rS`context AND rS2`error = rS`error}"
     reduction_props nil)
    (decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (count_copy def-decl "[(dom) -> nat]" rreduction nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (refcountStore const-decl "nat" rreduction nil)
    (allcount const-decl "nat" rreduction nil)
    (empty? const-decl "bool" sets nil)
    (refcountArray const-decl "nat" rreduction nil)
    (refcountExpr const-decl "nat" rreduction nil)
    (count const-decl "nat" finseq_theorems nil)
    (count_elem formula-decl nil finseq_theorems nil)
    (refcountStack const-decl "nat" rreduction nil)
    (translate_refs_eq formula-decl nil reduction_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (nil? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (nil adt-constructor-decl "(nil?)" IExpression_adt nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (union const-decl "set" sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (nonempty? const-decl "bool" sets nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (markv const-decl "(variable?)" preprocess nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (below type-eq-decl nil naturalnumbers nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (updateRedex? const-decl "bool" IL nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (stack_subset_match formula-decl nil reduction_props nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (updateRedex_rhs_index formula-decl nil rreduction nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (updateRedex_target_index formula-decl nil rreduction nil)
    (stack_stillmatch formula-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IExpression_update_eta formula-decl nil IExpression_adt nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (refcountStore_set formula-decl nil rreduction nil)
    (FALSE const-decl "bool" booleans nil)
    (cvars_vars_ctx formula-decl nil preprocess nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (marked adt-accessor-decl "[(variable?) -> bool]" IExpression_adt
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[nat]" countability "sets_aux/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_error_match formula-decl nil reduction_props nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (target_translate formula-decl nil reduction_props nil)
    (constant adt-constructor-decl "[int -> (constant?)]"
     IExpression_adt nil)
    (goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (lhs_translate formula-decl nil reduction_props nil)
    (lhs adt-accessor-decl "[(update?) -> (variable?)]" IExpression_adt
         nil)
    (constant? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (value_translate_rev_ref formula-decl nil reduction_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)
  (updateReduce_match-3 nil 3701004039
   ("" (with-labels (skeep*) ((upr ndr stm obj)))
    (("" (expand state_matches? stm)
      (("" (skeep)
        (("" (expand updateReduce)
          (("" (assert)
            (("" (case "ref?(get(grS`stack)(target(grS`redex)))")
              (("1" (case "constant?(get(grS`stack)(lhs(grS`redex)))")
                (("1"
                  (name-replace "i"
                   "value(get(grS`stack)(lhs(grS`redex)))")
                  (("1" (use lhs_translate)
                    (("1" (rewrite -1 :dir RL)
                      (("1"
                        (case-replace
                         "get(grS`stack)(lhs(grS`redex)) = constant(i)")
                        (("1" (simplify)
                          (("1" (assert)
                            (("1" (expand translate_refs)
                              (("1"
                                (use target_translate)
                                (("1"
                                  (rewrite -1 :dir RL)
                                  (("1"
                                    (name-replace
                                     "r"
                                     "refindex(get(grS`stack)(target(grS`redex)))")
                                    (("1"
                                      (case-replace
                                       "get(grS`stack)(target(grS`redex)) = ref(r)")
                                      (("1"
                                        (expand translate_refs)
                                        (("1"
                                          (simplify)
                                          (("1"
                                            (case-replace
                                             "gS`store(translate(r))`length = grS`store(r)`length")
                                            (("1"
                                              (case
                                               "i >= 0 AND i < grS`store(r)`length")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (name-replace
                                                       "rval"
                                                       "get(grS`stack)(rhs(grS`redex))")
                                                      (("1"
                                                        (name-replace
                                                         copying
                                                         "IF ref?(rval) AND marked(rhs(grS`redex))
                                                          THEN grS`count
                                                                 WITH [(refindex(rval))
                                                                       := grS`count(refindex(rval)) - 1]
                                                                   (r)
                                                        ELSE grS`count(r)
                                                        ENDIF
                                                         > 1
                                                         OR NOT marked(target(grS`redex)) OR rval = ref(r)")
                                                        (("1"
                                                          (case
                                                           copying)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               state_matches?)
                                                              (("1"
                                                                (inst
                                                                 obj
                                                                 "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]")
                                                                (("1"
                                                                  (expand
                                                                   state_matches)
                                                                  (("1"
                                                                    (split
                                                                     obj)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (postpone)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (with-labels
                                                                       (flatten
                                                                        stm)
                                                                       ((trr
                                                                         unm
                                                                         stam
                                                                         stom)))
                                                                      (("4"
                                                                        (expand
                                                                         store_matches)
                                                                        (("4"
                                                                          (with-labels
                                                                           (skeep
                                                                            :preds?
                                                                            t)
                                                                           ((r1dom
                                                                             r1cnt
                                                                             obj)))
                                                                          (("4"
                                                                            (name-replace
                                                                             r_2
                                                                             "IF r_1 = least_out(grS`domain) THEN r ELSE r_1 ENDIF")
                                                                            (("4"
                                                                              (inst
                                                                               stom
                                                                               r_2)
                                                                              (("1"
                                                                                (split
                                                                                 stom)
                                                                                (("1"
                                                                                  (delete
                                                                                   r1cnt)
                                                                                  (("1"
                                                                                    (split
                                                                                     obj)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skeep
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (case-replace
                                                                                         "r_1 = least_out(grS`domain)")
                                                                                        (("1"
                                                                                          (simplify)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "j = i")
                                                                                            (("1"
                                                                                              (simplify)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 stack_matches)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   rval)
                                                                                                  (("1"
                                                                                                    (with-labels
                                                                                                     (flatten
                                                                                                      stam)
                                                                                                     ((staml
                                                                                                       stamr)))
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       stamr
                                                                                                       "index(rhs(grS`redex))")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         get)
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "index(rhs(gS`redex)) = index(rhs(grS`redex))")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             translate_refs_eq
                                                                                                             (A
                                                                                                              "grS`stack`seq(grS`stack`length - 1 - index(rhs(grS`redex)))"
                                                                                                              translate
                                                                                                              translate
                                                                                                              translate2
                                                                                                              "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]"))
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "grS`stack`seq
                                                                                                       (grS`stack`length - 1 - index(rhs(grS`redex)))")
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (delete
                                                                                                                 obj)
                                                                                                                (("3"
                                                                                                                  (skeep)
                                                                                                                  (("3"
                                                                                                                    (typepred
                                                                                                                     "grS`stack`seq(grS`stack`length - 1 - index(rhs(grS`redex)))")
                                                                                                                    (("3"
                                                                                                                      (typepred
                                                                                                                       "grS`stack")
                                                                                                                      (("3"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               updateRedex_rhs_index)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (delete
                                                                                                             obj)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               trr
                                                                                                               :dir
                                                                                                               RL)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (simplify)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   stom
                                                                                                   j)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     translate_refs_eq
                                                                                                     (A
                                                                                                      "grS`store(r)`seq(j)"
                                                                                                      translate
                                                                                                      translate
                                                                                                      translate2
                                                                                                      "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]"))
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "grS`store(r)`seq(j)")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (typepred
                                                                                                         "grS`store(r)`seq(j)")
                                                                                                        (("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (simplify)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               stom
                                                                                               j)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 r_2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     translate_refs_eq
                                                                                                     (A
                                                                                                      "grS`store(r_1)`seq(j)"
                                                                                                      translate
                                                                                                      translate
                                                                                                      translate2
                                                                                                      "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]"))
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "grS`store(r_1)`seq(j)")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (typepred
                                                                                                         "grS`store(r_1)`seq(j)")
                                                                                                        (("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   obj)
                                                                                  (("2"
                                                                                    (case
                                                                                     "r_1 = least_out(grS`domain)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         r_2)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "grS`count(r)")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               refcount)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 refcountStack)
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   r1cnt)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "count_elem[(value?)]")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       r_2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (case
                                                                                             "ref?(rval) AND r_1 = refindex(rval)")
                                                                                            (("1"
                                                                                              (delete
                                                                                               r1cnt)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "grS`count(r_1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     refcount)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       refcountStack)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "count_elem[(value?)]")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             rval)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("4"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   r1cnt)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (simplify)
                                                                                                        (("1"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (postpone)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (delete
                                                                                 obj)
                                                                                (("2"
                                                                                  (expand
                                                                                   r_2)
                                                                                  (("2"
                                                                                    (delete
                                                                                     r1cnt)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "grS`stack")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               copying)
                                                              (("2"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((cnt
                                                                   mark
                                                                   rveq)))
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (with-labels
                                                                     (case
                                                                      "grS`count(r) > 1")
                                                                     ((ccnt)))
                                                                    (("1"
                                                                      (delete
                                                                       obj)
                                                                      (("1"
                                                                        (grind-with-ext)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       cnt)
                                                                      (("2"
                                                                        (expand
                                                                         state_matches?)
                                                                        (("2"
                                                                          (inst
                                                                           obj
                                                                           "translate WITH [(r) |-> least_out(gS`domain)]")
                                                                          (("2"
                                                                            (name-replace
                                                                             nstack
                                                                             "IF ref?(rval)
                                                AND
                                                marked(rhs(grS`redex))
                                             THEN grS`stack
                                                  WITH [`seq
                                                        (grS`stack`length
                                                         -
                                                         1
                                                         -
                                                         index
                                                         (rhs(grS`redex)))
                                                        := nil]
                                             ELSE grS`stack
                                             ENDIF
                                             WITH [`seq
                                                   (grS`stack`length - 1
                                                    -
                                                    index
                                                    (target(grS`redex)))
                                                   := nil]")
                                                                            (("1"
                                                                              (case
                                                                               "ref?(grS`store(r)`seq(i))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   state_matches)
                                                                                  (("2"
                                                                                    (split
                                                                                     obj)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil)
                                                                                     ("4"
                                                                                      (with-labels
                                                                                       (flatten
                                                                                        stm)
                                                                                       ((trr
                                                                                         unm
                                                                                         stam
                                                                                         stom)))
                                                                                      (("4"
                                                                                        (expand
                                                                                         store_matches)
                                                                                        (("4"
                                                                                          (with-labels
                                                                                           (skeep
                                                                                            :preds?
                                                                                            t)
                                                                                           ((r1dom
                                                                                             r1cnt
                                                                                             obj)))
                                                                                          (("4"
                                                                                            (inst
                                                                                             stom
                                                                                             r_1)
                                                                                            (("4"
                                                                                              (split
                                                                                               stom)
                                                                                              (("1"
                                                                                                (split
                                                                                                 obj)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (delete
                                                                                                 obj)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "grS`count(r_1)")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           refcount)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             refcountStack)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "count_elem[(value?)]")
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   rval)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("4"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (delete
                                                                               obj)
                                                                              (("2"
                                                                                (expand
                                                                                 every)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (simplify)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "grS`stack")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (delete
                                                                               obj)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (delete
                                                                               obj)
                                                                              (("4"
                                                                                (use
                                                                                 updateRedex_target_index)
                                                                                (("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (delete
                                                                               obj)
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (delete
                                                                               obj)
                                                                              (("6"
                                                                                (flatten)
                                                                                (("6"
                                                                                  (use
                                                                                   updateRedex_rhs_index)
                                                                                  (("6"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (delete obj)
                                                          (("3"
                                                            (typepred
                                                             "grS`stack")
                                                            (("3"
                                                              (expand
                                                               rval)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (delete obj)
                                                        (("2"
                                                          (use
                                                           updateRedex_rhs_index)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case-replace
                                                   "(i >= 0 AND i < grS`store(r)`length) = FALSE")
                                                  (("1"
                                                    (expand
                                                     state_matches?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (use
                                                         state_error_match)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete obj)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete obj)
                                              (("2"
                                                (expand state_matches)
                                                (("2"
                                                  (with-labels
                                                   (flatten)
                                                   ((trr
                                                     unm
                                                     stam
                                                     stom)))
                                                  (("2"
                                                    (expand
                                                     store_matches)
                                                    (("2"
                                                      (inst stom r)
                                                      (("2"
                                                        (split stom)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "grS`count(r)")
                                                          (("2"
                                                            (rewrite
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               refcount)
                                                              (("2"
                                                                (expand
                                                                 refcountStack)
                                                                (("2"
                                                                  (use
                                                                   "count_elem[(value?)]")
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (delete obj)
                                              (("3"
                                                (typepred "grS`stack")
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (delete obj)
                                              (("4"
                                                (typepred "gS`stack")
                                                (("4"
                                                  (use
                                                   target_translate)
                                                  (("4"
                                                    (split -1)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (expand
                                                         translate_refs)
                                                        (("1"
                                                          (expand
                                                           every)
                                                          (("1"
                                                            (expand
                                                             get)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 domainValue?)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case-replace
                                                                 "index(target(gS`redex)) = index(target(grS`redex))")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   state_matches)
                                                                  (("2"
                                                                    (with-labels
                                                                     (flatten)
                                                                     ((trr
                                                                       unm
                                                                       stam
                                                                       stom)))
                                                                    (("2"
                                                                      (replace
                                                                       trr
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (expand r)
                                          (("2"
                                            (name-replace
                                             u
                                             "get(grS`stack)(target(grS`redex))")
                                            (("2"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete obj)
                          (("2" (expand i)
                            (("2"
                              (name-replace u
                               "get(grS`stack)(lhs(grS`redex))")
                              (("2" (grind-with-ext) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (use lhs_translate)
                    (("2" (rewrite -1 :dir RL)
                      (("2" (use value_translate_rev_constant)
                        (("2" (assert)
                          (("2" (expand state_matches?)
                            (("2" (inst?)
                              (("2"
                                (use state_error_match)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (delete obj)
                  (("3" (use updateRedex_lhs_index)
                    (("3" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (use target_translate)
                  (("2" (rewrite -1 :dir RL)
                    (("2" (use value_translate_rev_ref)
                      (("2" (assert)
                        (("2" (use state_error_match)
                          (("2" (expand state_matches?)
                            (("2" (inst?) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (delete obj)
                (("3" (use updateRedex_target_index)
                  (("3" (grind) nil nil)) nil))
                nil)
               ("4" (delete obj) (("4" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (updateReduce_match-2 nil 3701003915
   ("" (with-labels (skeep*) ((upr ndr stm obj)))
    (("" (expand state_matches? stm)
      (("" (skeep)
        (("" (expand updateReduce)
          (("" (assert)
            (("" (case "ref?(get(grS`stack)(target(grS`redex)))")
              (("1" (case "constant?(get(grS`stack)(lhs(grS`redex)))")
                (("1"
                  (name-replace "i"
                   "value(get(grS`stack)(lhs(grS`redex)))")
                  (("1" (use lhs_translate)
                    (("1" (rewrite -1 :dir RL)
                      (("1"
                        (case-replace
                         "get(grS`stack)(lhs(grS`redex)) = constant(i)")
                        (("1" (simplify)
                          (("1" (assert)
                            (("1" (expand translate_refs)
                              (("1"
                                (use target_translate)
                                (("1"
                                  (rewrite -1 :dir RL)
                                  (("1"
                                    (name-replace
                                     "r"
                                     "refindex(get(grS`stack)(target(grS`redex)))")
                                    (("1"
                                      (case-replace
                                       "get(grS`stack)(target(grS`redex)) = ref(r)")
                                      (("1"
                                        (expand translate_refs)
                                        (("1"
                                          (simplify)
                                          (("1"
                                            (case-replace
                                             "gS`store(translate(r))`length = grS`store(r)`length")
                                            (("1"
                                              (case
                                               "i >= 0 AND i < grS`store(r)`length")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (name-replace
                                                       "rval"
                                                       "get(grS`stack)(rhs(grS`redex))")
                                                      (("1"
                                                        (name-replace
                                                         copying
                                                         "IF ref?(rval) AND marked(rhs(grS`redex))
                                          THEN grS`count
                                                 WITH [(refindex(rval))
                                                       := grS`count(refindex(rval)) - 1]
                                                   (r)
                                        ELSE grS`count(r)
                                        ENDIF
                                         > 1
                                         OR NOT marked(target(grS`redex)) OR rval = ref(r)")
                                                        (("1"
                                                          (case
                                                           copying)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               state_matches?)
                                                              (("1"
                                                                (inst
                                                                 obj
                                                                 "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]")
                                                                (("1"
                                                                  (expand
                                                                   state_matches)
                                                                  (("1"
                                                                    (split
                                                                     obj)
                                                                    (("1"
                                                                      (grind)
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil)
                                                                     ("3"
                                                                      (postpone)
                                                                      nil)
                                                                     ("4"
                                                                      (with-labels
                                                                       (flatten
                                                                        stm)
                                                                       ((trr
                                                                         unm
                                                                         stam
                                                                         stom)))
                                                                      (("4"
                                                                        (expand
                                                                         store_matches)
                                                                        (("4"
                                                                          (with-labels
                                                                           (skeep
                                                                            :preds?
                                                                            t)
                                                                           ((r1dom
                                                                             r1cnt
                                                                             obj)))
                                                                          (("4"
                                                                            (name-replace
                                                                             r_2
                                                                             "IF r_1 = least_out(grS`domain) THEN r ELSE r_1 END")
                                                                            (("4"
                                                                              (inst
                                                                               stom
                                                                               r_2)
                                                                              (("1"
                                                                                (split
                                                                                 stom)
                                                                                (("1"
                                                                                  (delete
                                                                                   r1cnt)
                                                                                  (("1"
                                                                                    (split
                                                                                     obj)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skeep
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (case-replace
                                                                                         "r_1 = least_out(grS`domain)")
                                                                                        (("1"
                                                                                          (simplify)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "j = i")
                                                                                            (("1"
                                                                                              (simplify)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 stack_matches)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   rval)
                                                                                                  (("1"
                                                                                                    (with-labels
                                                                                                     (flatten
                                                                                                      stam)
                                                                                                     ((staml
                                                                                                       stamr)))
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       stamr
                                                                                                       "index(rhs(grS`redex))")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         get)
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "index(rhs(gS`redex)) = index(rhs(grS`redex))")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             translate_refs_eq
                                                                                                             (A
                                                                                                              "grS`stack`seq(grS`stack`length - 1 - index(rhs(grS`redex)))"
                                                                                                              translate
                                                                                                              translate
                                                                                                              translate2
                                                                                                              "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]"))
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "grS`stack`seq
                                                               (grS`stack`length - 1 - index(rhs(grS`redex)))")
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil)))
                                                                                                               ("3"
                                                                                                                (delete
                                                                                                                 obj)
                                                                                                                (("3"
                                                                                                                  (skeep)
                                                                                                                  (("3"
                                                                                                                    (typepred
                                                                                                                     "grS`stack`seq(grS`stack`length - 1 - index(rhs(grS`redex)))")
                                                                                                                    (("3"
                                                                                                                      (typepred
                                                                                                                       "grS`stack")
                                                                                                                      (("3"
                                                                                                                        (grind)
                                                                                                                        nil)))))))))))
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               updateRedex_rhs_index)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))
                                                                                                           ("2"
                                                                                                            (delete
                                                                                                             obj)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               trr
                                                                                                               :dir
                                                                                                               RL)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil)))))))))))
                                                                                             ("2"
                                                                                              (simplify)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (postpone)
                                                                                                  nil)))))))))
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil)))))))))
                                                                                 ("2"
                                                                                  (postpone)
                                                                                  nil)))
                                                                               ("2"
                                                                                (postpone)
                                                                                nil)))))))))))))))))))))
                                                           ("2"
                                                            (postpone)
                                                            nil)))
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (postpone)
                                                            nil)))
                                                         ("3"
                                                          (delete obj)
                                                          (("3"
                                                            (typepred
                                                             "grS`stack")
                                                            (("3"
                                                              (expand
                                                               rval)
                                                              (("3"
                                                                (grind)
                                                                nil)))))))))
                                                       ("2"
                                                        (delete obj)
                                                        (("2"
                                                          (use
                                                           updateRedex_rhs_index)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case-replace
                                                   "(i >= 0 AND i < grS`store(r)`length) = FALSE")
                                                  (("1"
                                                    (expand
                                                     state_matches?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (use
                                                         state_error_match)
                                                        (("1"
                                                          (grind)
                                                          nil)))))))
                                                   ("2"
                                                    (delete obj)
                                                    (("2"
                                                      (grind)
                                                      nil)))))))))
                                             ("2"
                                              (delete obj)
                                              (("2"
                                                (expand state_matches)
                                                (("2"
                                                  (with-labels
                                                   (flatten)
                                                   ((trr
                                                     unm
                                                     stam
                                                     stom)))
                                                  (("2"
                                                    (expand
                                                     store_matches)
                                                    (("2"
                                                      (inst stom r)
                                                      (("2"
                                                        (split stom)
                                                        (("1"
                                                          (grind)
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "grS`count(r)")
                                                          (("2"
                                                            (rewrite
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               refcount)
                                                              (("2"
                                                                (expand
                                                                 refcountStack)
                                                                (("2"
                                                                  (use
                                                                   "count_elem[(value?)]")
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil)
                                                                     ("4"
                                                                      (grind)
                                                                      nil)))))))))))))))))))))))))
                                             ("3"
                                              (delete obj)
                                              (("3"
                                                (typepred "grS`stack")
                                                (("3" (grind) nil)))))
                                             ("4"
                                              (delete obj)
                                              (("4"
                                                (typepred "gS`stack")
                                                (("4"
                                                  (use
                                                   target_translate)
                                                  (("4"
                                                    (split -1)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (expand
                                                         translate_refs)
                                                        (("1"
                                                          (expand
                                                           every)
                                                          (("1"
                                                            (expand
                                                             get)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 domainValue?)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (grind)
                                                                    nil)))))
                                                               ("2"
                                                                (case-replace
                                                                 "index(target(gS`redex)) = index(target(grS`redex))")
                                                                (("1"
                                                                  (grind)
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   state_matches)
                                                                  (("2"
                                                                    (with-labels
                                                                     (flatten)
                                                                     ((trr
                                                                       unm
                                                                       stam
                                                                       stom)))
                                                                    (("2"
                                                                      (replace
                                                                       trr
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("2" (propax) nil)
                                                     ("3"
                                                      (propax)
                                                      nil)))))))))))))))
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (expand r)
                                          (("2"
                                            (name-replace
                                             u
                                             "get(grS`stack)(target(grS`redex))")
                                            (("2"
                                              (grind-with-ext)
                                              nil)))))))))))))))))))))
                         ("2" (delete obj)
                          (("2" (expand i)
                            (("2"
                              (name-replace u
                               "get(grS`stack)(lhs(grS`redex))")
                              (("2" (grind-with-ext) nil)))))))))))))))
                 ("2" (assert)
                  (("2" (use lhs_translate)
                    (("2" (rewrite -1 :dir RL)
                      (("2" (use value_translate_rev_constant)
                        (("2" (assert)
                          (("2" (expand state_matches?)
                            (("2" (inst?)
                              (("2"
                                (use state_error_match)
                                (("2" (grind) nil)))))))))))))))))
                 ("3" (delete obj)
                  (("3" (use updateRedex_lhs_index)
                    (("3" (grind) nil)))))))
               ("2" (assert)
                (("2" (use target_translate)
                  (("2" (rewrite -1 :dir RL)
                    (("2" (use value_translate_rev_ref)
                      (("2" (assert)
                        (("2" (use state_error_match)
                          (("2" (expand state_matches?)
                            (("2" (inst?)
                              (("2" (grind) nil)))))))))))))))))
               ("3" (delete obj)
                (("3" (use updateRedex_target_index)
                  (("3" (grind) nil)))))
               ("4" (delete obj) (("4" (grind) nil))))))))))))))
    nil)
   nil nil)
  (updateReduce_match-1 nil 3700923765
   ("" (with-labels (skeep*) ((upr ndr stm obj)))
    (("" (expand state_matches? stm)
      (("" (skeep)
        (("" (expand updateReduce)
          (("" (assert)
            (("" (case "ref?(get(grS`stack)(target(grS`redex)))")
              (("1" (case "constant?(get(grS`stack)(lhs(grS`redex)))")
                (("1"
                  (name-replace "i"
                   "value(get(grS`stack)(lhs(grS`redex)))")
                  (("1" (use lhs_translate)
                    (("1" (rewrite -1 :dir RL)
                      (("1"
                        (case-replace
                         "get(grS`stack)(lhs(grS`redex)) = constant(i)")
                        (("1" (simplify)
                          (("1" (assert)
                            (("1" (expand translate_refs)
                              (("1"
                                (use target_translate)
                                (("1"
                                  (rewrite -1 :dir RL)
                                  (("1"
                                    (name-replace
                                     "r"
                                     "refindex(get(grS`stack)(target(grS`redex)))")
                                    (("1"
                                      (case-replace
                                       "get(grS`stack)(target(grS`redex)) = ref(r)")
                                      (("1"
                                        (expand translate_refs)
                                        (("1"
                                          (simplify)
                                          (("1"
                                            (case-replace
                                             "gS`store(translate(r))`length = grS`store(r)`length")
                                            (("1"
                                              (case
                                               "i >= 0 AND i < grS`store(r)`length")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (name-replace
                                                       "rval"
                                                       "get(grS`stack)(rhs(grS`redex))")
                                                      (("1"
                                                        (name-replace
                                                         copying
                                                         "IF ref?(rval) AND marked(rhs(grS`redex))
                          THEN grS`count
                                 WITH [(refindex(rval))
                                       := grS`count(refindex(rval)) - 1]
                                   (r)
                        ELSE grS`count(r)
                        ENDIF
                         > 1
                         OR NOT marked(target(grS`redex)) OR rval = ref(r)")
                                                        (("1"
                                                          (case
                                                           copying)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               state_matches?)
                                                              (("1"
                                                                (inst
                                                                 obj
                                                                 "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]")
                                                                (("1"
                                                                  (expand
                                                                   state_matches)
                                                                  (("1"
                                                                    (split
                                                                     obj)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (postpone)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (with-labels
                                                                       (flatten
                                                                        stm)
                                                                       ((trr
                                                                         unm
                                                                         stam
                                                                         stom)))
                                                                      (("4"
                                                                        (expand
                                                                         store_matches)
                                                                        (("4"
                                                                          (with-labels
                                                                           (skeep
                                                                            :preds?
                                                                            t)
                                                                           ((r1dom
                                                                             r1cnt
                                                                             obj)))
                                                                          (("4"
                                                                            (inst
                                                                             stom
                                                                             r_1)
                                                                            (("1"
                                                                              (split
                                                                               stom)
                                                                              (("1"
                                                                                (delete
                                                                                 r1cnt)
                                                                                (("1"
                                                                                  (split
                                                                                   obj)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skeep
                                                                                     :preds?
                                                                                     t)
                                                                                    (("3"
                                                                                      (case-replace
                                                                                       "r_1 = least_out(grS`domain)")
                                                                                      (("1"
                                                                                        (simplify)
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "j = i")
                                                                                          (("1"
                                                                                            (simplify)
                                                                                            (("1"
                                                                                              (expand
                                                                                               stack_matches)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 rval)
                                                                                                (("1"
                                                                                                  (with-labels
                                                                                                   (flatten
                                                                                                    stam)
                                                                                                   ((staml
                                                                                                     stamr)))
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     stamr
                                                                                                     "index(rhs(grS`redex))")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       get)
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "index(rhs(gS`redex)) = index(rhs(grS`redex))")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           translate_refs_eq
                                                                                                           (A
                                                                                                            "grS`stack`seq(grS`stack`length - 1 - index(rhs(grS`redex)))"
                                                                                                            translate
                                                                                                            translate
                                                                                                            translate2
                                                                                                            "translate WITH [(least_out(grS`domain)) |-> least_out(gS`domain)]"))
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "grS`stack`seq
                       (grS`stack`length - 1 - index(rhs(grS`redex)))")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (delete
                                                                                                               obj)
                                                                                                              (("3"
                                                                                                                (skeep)
                                                                                                                (("3"
                                                                                                                  (typepred
                                                                                                                   "grS`stack`seq(grS`stack`length - 1 - index(rhs(grS`redex)))")
                                                                                                                  (("3"
                                                                                                                    (typepred
                                                                                                                     "grS`stack")
                                                                                                                    (("3"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             updateRedex_rhs_index)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (delete
                                                                                                           obj)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             trr
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (simplify)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (delete obj)
                                                          (("3"
                                                            (typepred
                                                             "grS`stack")
                                                            (("3"
                                                              (expand
                                                               rval)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (delete obj)
                                                        (("2"
                                                          (use
                                                           updateRedex_rhs_index)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case-replace
                                                   "(i >= 0 AND i < grS`store(r)`length) = FALSE")
                                                  (("1"
                                                    (expand
                                                     state_matches?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (use
                                                         state_error_match)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete obj)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete obj)
                                              (("2"
                                                (expand state_matches)
                                                (("2"
                                                  (with-labels
                                                   (flatten)
                                                   ((trr
                                                     unm
                                                     stam
                                                     stom)))
                                                  (("2"
                                                    (expand
                                                     store_matches)
                                                    (("2"
                                                      (inst stom r)
                                                      (("2"
                                                        (split stom)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "grS`count(r)")
                                                          (("2"
                                                            (rewrite
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               refcount)
                                                              (("2"
                                                                (expand
                                                                 refcountStack)
                                                                (("2"
                                                                  (use
                                                                   "count_elem[(value?)]")
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (delete obj)
                                              (("3"
                                                (typepred "grS`stack")
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (delete obj)
                                              (("4"
                                                (typepred "gS`stack")
                                                (("4"
                                                  (use
                                                   target_translate)
                                                  (("4"
                                                    (split -1)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (expand
                                                         translate_refs)
                                                        (("1"
                                                          (expand
                                                           every)
                                                          (("1"
                                                            (expand
                                                             get)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 domainValue?)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case-replace
                                                                 "index(target(gS`redex)) = index(target(grS`redex))")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   state_matches)
                                                                  (("2"
                                                                    (with-labels
                                                                     (flatten)
                                                                     ((trr
                                                                       unm
                                                                       stam
                                                                       stom)))
                                                                    (("2"
                                                                      (replace
                                                                       trr
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete obj)
                                        (("2"
                                          (expand r)
                                          (("2"
                                            (name-replace
                                             u
                                             "get(grS`stack)(target(grS`redex))")
                                            (("2"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete obj)
                          (("2" (expand i)
                            (("2"
                              (name-replace u
                               "get(grS`stack)(lhs(grS`redex))")
                              (("2" (grind-with-ext) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (use lhs_translate)
                    (("2" (rewrite -1 :dir RL)
                      (("2" (use value_translate_rev_constant)
                        (("2" (assert)
                          (("2" (expand state_matches?)
                            (("2" (inst?)
                              (("2"
                                (use state_error_match)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (delete obj)
                  (("3" (use updateRedex_lhs_index)
                    (("3" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (use target_translate)
                  (("2" (rewrite -1 :dir RL)
                    (("2" (use value_translate_rev_ref)
                      (("2" (assert)
                        (("2" (use state_error_match)
                          (("2" (expand state_matches?)
                            (("2" (inst?) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (delete obj)
                (("3" (use updateRedex_target_index)
                  (("3" (grind) nil nil)) nil))
                nil)
               ("4" (delete obj) (("4" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (arm_release_set 0
  (arm_release_set-1 nil 3701181101
   ("" (induct X :name finite_set_induction)
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand release_set +) (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (release adt-constructor-decl
     "[[(variable?), IExpression] -> (release?)]" IExpression_adt nil)
    (variable adt-constructor-decl "[[nat, bool] -> (variable?)]"
     IExpression_adt nil)
    (choose const-decl "(p)" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (nonempty? const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set_induction formula-decl nil finite_set_theorems nil)
    (release_set def-decl "IExpression" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (arm_mark_unmark 0
  (arm_mark_unmark-1 nil 3701180728
   ("" (induct A)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (simplify)
          (("6" (expand unmark +)
            (("6" (expand mark +)
              (("6" (expand allReleaseMarked? +)
                (("6" (split)
                  (("1" (use arm_release_set) (("1" (grind) nil nil))
                    nil)
                   ("2" (use arm_release_set) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil))
    nil)
   ((variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (add const-decl "(nonempty?)" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_difference application-judgement "finite_set[nat]"
     countability "sets_aux/")
    (difference const-decl "set" sets nil)
    (arm_release_set formula-decl nil reduction_props nil)
    (bump const-decl "finite_set[nat]" IL nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (injective? const-decl "bool" functions nil)
    (union const-decl "set" sets nil)
    (drop const-decl "finite_set[nat]" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (N!1 skolem-const-decl "nat" reduction_props nil)
    (X!1 skolem-const-decl "finite_set[nat]" reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (markv const-decl "(variable?)" preprocess nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (unmark def-decl "IExpression" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil))
   shostak))
 (arm_letApply 0
  (arm_letApply-1 nil 3701181322
   ("" (induct i)
    (("1" (skeep :preds? t) (("1" (grind) nil nil)) nil)
     ("2" (skeep* :preds? t) (("2" (grind) nil nil)) nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (letApply def-decl "IExpression" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (IExpression type-decl nil IExpression_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (variableReduce_arm 0
  (variableReduce_arm-1 nil 3706042208
   ("" (skeep* :preds? t)
    (("" (expand variableReduce)
      (("" (assert)
        (("" (typepred "get(grS`stack)(grS`redex)")
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (variableReduce const-decl "rstate" rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (get const-decl "(value?)" IL nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (Stack type-eq-decl nil IL nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (singleton const-decl "(singleton?)" sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (releaseReduce_arm_TCC1 0
  (releaseReduce_arm_TCC1-1 nil 3701175825 ("" (subtype-tcc) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (releaseRedex? const-decl "bool" IL nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (releaseReduce_arm subtype "grS"
    "{grS | IL.pureReleaseRedex?(rreduction.grS`redex) AND rreduction.noDanglingRefs?(rreduction.grS)}")))
 (releaseReduce_arm 0
  (releaseReduce_arm-1 nil 3701175825
   ("" (skeep)
    ((""
      (case-replace "releaseReduce(D)(grS)`redex = rexpr(grS`redex)")
      (("1" (apply-eta "grS`redex" "(release?)")
        (("1" (replace -1 :dir RL)
          (("1" (simplify)
            (("1"
              (case-replace
               "releaseReduce(D)(grS)`context = grS`context")
              (("1" (grind) nil nil)
               ("2" (delete 2)
                (("2" (delete -2)
                  (("2" (expand releaseReduce)
                    (("2" (lift-if) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (delete 2)
        (("2" (expand releaseReduce)
          (("2" (lift-if)
            (("2" (split)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil)
       ("4" (delete 2) (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (refs def-decl "bool" IL nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (releaseReduce const-decl "rstate" rreduction nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (rexpr adt-accessor-decl "[(release?) -> IExpression]"
     IExpression_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (releaseRedex? const-decl "bool" IL nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (decref1_preserves_context formula-decl nil reduction_props nil)
    (decref_preserves_jdg application-judgement "{rS2 |
   rS2`redex = rS`redex AND
    rS2`stack = rS`stack AND
     rS2`context = rS`context AND rS2`error = rS`error}"
     reduction_props nil)
    (IExpression_release_eta formula-decl nil IExpression_adt nil)
    (decref1_preserves_redex formula-decl nil reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (applyReduce_arm 0
  (applyReduce_arm-1 nil 3701176155
   ("" (skeep)
    (("" (expand applyReduce)
      (("" (ground)
        (("" (use arm_letApply)
          (("" (split -1)
            (("1" (propax) nil nil)
             ("2" (typepred "D`seq(fun(grS`redex))`body")
              (("2" (replace -3 :dir RL)
                (("2" (use arm_mark_unmark) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((applyReduce const-decl "rstate" rreduction nil)
    (arm_letApply formula-decl nil reduction_props nil)
    (args adt-accessor-decl "[(application?) -> list[(variable?)]]"
          IExpression_adt nil)
    (length def-decl "nat" list_props nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (refs def-decl "bool" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (fun adt-accessor-decl "[(application?) -> nat]" IExpression_adt
         nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (arm_mark_unmark formula-decl nil reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (ifReduce_arm 0
  (ifReduce_arm-1 nil 3701176167
   ("" (skeep)
    (("" (expand ifReduce)
      (("" (expand release_marked) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((ifReduce const-decl "rstate" rreduction nil)
    (iftRedex? const-decl "bool" IL nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (get const-decl "(value?)" IL nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (release_marked const-decl "rstate" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (lookupReduce_arm 0
  (lookupReduce_arm-1 nil 3701176196
   ("" (skeep)
    (("" (expand lookupReduce)
      (("" (split)
        (("1" (flatten)
          (("1"
            (typepred "grS`store
                                        (refindex
                                         (get
                                          (grS`stack)
                                          (arrayvalue(grS`redex))))`seq
                                        (value
                                         (get
                                          (grS`stack)
                                          (position(grS`redex))))")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil)
         ("2" (grind) nil nil) ("3" (grind) nil nil)
         ("4" (grind) nil nil))
        nil))
      nil))
    nil)
   ((lookupReduce const-decl "rstate" rreduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (setRedex const-decl "rstate" rreduction nil)
    (release_marked const-decl "rstate" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (lookupRedex? const-decl "bool" IL nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (refindex adt-accessor-decl "[(ref?) -> nat]" IExpression_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (get const-decl "(value?)" IL nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (arrayvalue adt-accessor-decl "[(lookup?) -> (variable?)]"
     IExpression_adt nil)
    (constant? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (value adt-accessor-decl "[(constant?) -> int]" IExpression_adt
     nil)
    (position adt-accessor-decl "[(lookup?) -> (variable?)]"
      IExpression_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (newintReduce_arm 0
  (newintReduce_arm-1 nil 3701176323 ("" (grind) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (newintRedex? const-decl "bool" IL nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (newintReduce const-decl "rstate" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (newrefReduce_arm 0
  (newrefReduce_arm-1 nil 3701176328 ("" (grind) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (newrefRedex? const-decl "bool" IL nil)
    (least_out const-decl "{n | NOT NS(n)}" finite_set_theorems nil)
    (newrefReduce const-decl "rstate" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (popReduce_arm_TCC1 0
  (popReduce_arm_TCC1-1 nil 3701175825 ("" (subtype-tcc) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (value? const-decl "bool" IL nil)
    (popRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (popReduce_arm subtype "grS"
    "{grS | IL.popRedex?(rreduction.grS`redex) AND rreduction.noDanglingRefs?(rreduction.grS)}")))
 (popReduce_arm 0
  (popReduce_arm-1 nil 3701176334
   ("" (skeep)
    (("" (expand popReduce) (("" (ground) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((popReduce const-decl "rstate" rreduction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (popRedex? const-decl "bool" IL nil)
    (value? const-decl "bool" IL nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (letReduce_arm 0
  (letReduce_arm-1 nil 3701176446
   ("" (skeep) (("" (expand letReduce) (("" (grind) nil nil)) nil))
    nil)
   ((letReduce const-decl "rstate" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (letRedex? const-decl "bool" IL nil)
    (value? const-decl "bool" IL nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (updateReduce_arm_TCC1 0
  (updateReduce_arm_TCC1-1 nil 3701175825 ("" (subtype-tcc) nil nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (updateRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (updateReduce_arm subtype "grS"
    "{grS | IL.updateRedex?(rreduction.grS`redex) AND rreduction.noDanglingRefs?(rreduction.grS)}")))
 (updateReduce_arm 0
  (updateReduce_arm-1 nil 3701176465
   ("" (skeep)
    (("" (case-replace "updateReduce(D)(grS)`context = grS`context")
      (("1" (assert)
        (("1" (delete -1)
          (("1" (case "ref?(updateReduce(D)(grS)`redex)")
            (("1" (expand allReleaseMarked?) (("1" (assert) nil nil))
              nil)
             ("2"
              (case-replace "updateReduce(D)(grS)`redex = grS`redex")
              (("2" (delete 3)
                (("2"
                  (name "isok"
                        "LAMBDA (A: IExpression): ref?(A) OR A = grS`redex")
                  (("2" (case "isok(updateReduce(D)(grS)`redex)")
                    (("1" (expand isok) (("1" (propax) nil nil)) nil)
                     ("2" (delete 2)
                      (("2" (delete 2)
                        (("2" (expand updateReduce)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (split)
                                (("1"
                                  (expand isok)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (case
                                     "isok(get(grS`stack)(target(grS`redex)))")
                                    (("1"
                                      (expand decref1_chk)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand isok)
                                      (("2" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand isok)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (delete 2)
        (("2" (expand updateReduce)
          (("2" (lift-if)
            (("2" (split)
              (("1" (flatten)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (flatten)
                    (("2" (expand decref1_chk)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (split) (("1" (propax) nil nil) ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   ((IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (cpure? def-decl "bool" IL nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (refs def-decl "bool" IL nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (updateRedex? const-decl "bool" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (updateReduce const-decl "(noDanglingRefs?)" rreduction nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (decref1_chk const-decl "{rS1 |
   rS1`domain = rS`domain AND
    (FORALL (s: (rS`domain)):
       rS1`store(s)`length = rS`store(s)`length AND
        rS1`count(s) <= rS`count(s) AND
         (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))}" rreduction
     nil)
    (decref1_preserves_redex formula-decl nil reduction_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (target adt-accessor-decl "[(update?) -> (variable?)]"
            IExpression_adt nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (get const-decl "(value?)" IL nil)
    (index adt-accessor-decl "[(variable?) -> nat]" IExpression_adt
           nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (isok skolem-const-decl "[IExpression -> boolean]" reduction_props
     nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (ref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (decref1_preserves_context formula-decl nil reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (reduce_arm 0
  (reduce_arm-2 nil 3706275756
   ("" (with-labels (skeep :preds? t) ((ndr arm armc obj)))
    (("" (expand reduce)
      (("" (case "value?(to_topstate(grS)`redex)")
        (("1" (assert) (("1" (grind) nil nil)) nil)
         ("2" (assert)
          (("2"
            (case "allReleaseMarked?(make_redex(to_topstate(grS))`redex) AND armc?(make_redex(to_topstate(grS))`context)")
            (("1" (lift-if)
              (("1" (case "make_redex(to_topstate(grS))`error")
                (("1" (delete obj) (("1" (grind) nil nil)) nil)
                 ("2"
                  (case "noDanglingRefs?(make_redex(to_topstate(grS)))")
                  (("1" (split)
                    (("1" (use variableReduce_arm)
                      (("1" (prop) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (use letReduce_arm)
                          (("1" (prop) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (split)
                            (("1" (use applyReduce_arm)
                              (("1" (prop) nil nil)) nil)
                             ("2" (flatten)
                              (("2"
                                (split)
                                (("1"
                                  (use ifReduce_arm)
                                  (("1" (prop) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split)
                                    (("1"
                                      (use updateReduce_arm)
                                      (("1" (prop) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split)
                                        (("1"
                                          (use lookupReduce_arm)
                                          (("1" (prop) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split)
                                            (("1"
                                              (use newintReduce_arm)
                                              (("1" (prop) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (use
                                                   newrefReduce_arm)
                                                  (("1"
                                                    (prop)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (use
                                                       popReduce_arm)
                                                      (("1"
                                                        (prop)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (case
                                                         "pureReleaseRedex?(make_redex(to_topstate(grS))`redex)")
                                                        (("1"
                                                          (use
                                                           releaseReduce_arm)
                                                          (("1"
                                                            (prop)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "pureRedex?(make_redex(to_topstate(grS))`redex)")
                                                          (("1"
                                                            (expand
                                                             pureRedex?)
                                                            (("1"
                                                              (prop)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "make_redex(to_topstate(grS))")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete obj)
                    (("2" (case "noDanglingRefs?(to_topstate(grS))")
                      (("1" (lemma make_redex_ndr)
                        (("1" (inst?) nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "allReleaseMarked?(to_topstate(grS)`redex)")
              (("1" (delete obj)
                (("1" (expand make_redex)
                  (("1" (typepred "buildRedex(to_topstate(grS)`redex)")
                    (("1" (replace -1 - :dir RL)
                      (("1" (rewrite arm_fill) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand to_topstate)
                (("2" (rewrite arm_fill) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reduce const-decl "rstate" rreduction nil)
    (arm_fill formula-decl nil preprocess nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (fill def-decl "IExpression" IL nil)
    (releaseReduce_arm formula-decl nil reduction_props nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (popReduce_arm formula-decl nil reduction_props nil)
    (newrefReduce_arm formula-decl nil reduction_props nil)
    (newintReduce_arm formula-decl nil reduction_props nil)
    (lookupReduce_arm formula-decl nil reduction_props nil)
    (updateReduce_arm formula-decl nil reduction_props nil)
    (ifReduce_arm formula-decl nil reduction_props nil)
    (applyReduce_arm formula-decl nil reduction_props nil)
    (letReduce_arm formula-decl nil reduction_props nil)
    (variableReduce_arm formula-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (pure? def-decl "bool" IL nil)
    (grS skolem-const-decl "{grS |
   noDanglingRefs?(grS) AND
    allReleaseMarked?(grS`redex) AND armc?(grS`context)}"
     reduction_props nil)
    (make_redex_ndr judgement-tcc nil rreduction nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (pureRedex? const-decl "bool" IL nil)
    (to_topstate_dangling application-judgement "(noDanglingRefs?)"
     rreduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (value? const-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (reduce_arm subtype "rreduction.reduce(D)(grS)"
    "{rS | preprocess.allReleaseMarked?(rS`redex) AND preprocess.armc?(rS`context)}"))
  (reduce_arm-1 nil 3701180728
   ("" (with-labels (skeep :preds? t) ((ndr arm armc obj)))
    (("" (expand reduce)
      (("" (case "atom?(to_topstate(grS)`redex)")
        (("1" (assert) (("1" (grind) nil nil)) nil)
         ("2" (assert)
          (("2"
            (case "allReleaseMarked?(make_redex(to_topstate(grS))`redex) AND armc?(make_redex(to_topstate(grS))`context)")
            (("1" (lift-if)
              (("1" (case "make_redex(to_topstate(grS))`error")
                (("1" (delete obj) (("1" (grind) nil nil)) nil)
                 ("2"
                  (case "noDanglingRefs?(make_redex(to_topstate(grS)))")
                  (("1" (split)
                    (("1" (use letReduce_arm) (("1" (prop) nil nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (use applyReduce_arm)
                          (("1" (prop) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (split)
                            (("1" (use ifReduce_arm)
                              (("1" (prop) nil nil)) nil)
                             ("2" (flatten)
                              (("2"
                                (split)
                                (("1"
                                  (use updateReduce_arm)
                                  (("1" (prop) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split)
                                    (("1"
                                      (use lookupReduce_arm)
                                      (("1" (prop) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split)
                                        (("1"
                                          (use newintReduce_arm)
                                          (("1" (prop) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split)
                                            (("1"
                                              (use newrefReduce_arm)
                                              (("1" (prop) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (use popReduce_arm)
                                                  (("1"
                                                    (prop)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (case
                                                     "pureReleaseRedex?(make_redex(to_topstate(grS))`redex)")
                                                    (("1"
                                                      (use
                                                       releaseReduce_arm)
                                                      (("1"
                                                        (prop)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "pureRedex?(make_redex(to_topstate(grS))`redex)")
                                                      (("1"
                                                        (expand
                                                         pureRedex?)
                                                        (("1"
                                                          (prop)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "make_redex(to_topstate(grS))")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete obj)
                    (("2" (case "noDanglingRefs?(to_topstate(grS))")
                      (("1" (lemma make_redex_ndr)
                        (("1" (inst?) nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "allReleaseMarked?(to_topstate(grS)`redex)")
              (("1" (delete obj)
                (("1" (expand make_redex)
                  (("1" (typepred "buildRedex(to_topstate(grS)`redex)")
                    (("1" (replace -1 - :dir RL)
                      (("1" (rewrite arm_fill) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand to_topstate)
                (("2" (rewrite arm_fill) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reduce const-decl "rstate" rreduction nil)
    (arm_fill formula-decl nil preprocess nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (fill def-decl "IExpression" IL nil)
    (releaseReduce_arm formula-decl nil reduction_props nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (popReduce_arm formula-decl nil reduction_props nil)
    (newrefReduce_arm formula-decl nil reduction_props nil)
    (newintReduce_arm formula-decl nil reduction_props nil)
    (lookupReduce_arm formula-decl nil reduction_props nil)
    (updateReduce_arm formula-decl nil reduction_props nil)
    (ifReduce_arm formula-decl nil reduction_props nil)
    (applyReduce_arm formula-decl nil reduction_props nil)
    (letReduce_arm formula-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (pure? def-decl "bool" IL nil)
    (make_redex_ndr judgement-tcc nil rreduction nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (pureRedex? const-decl "bool" IL nil)
    (to_topstate_dangling application-judgement "(noDanglingRefs?)"
     rreduction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (atom? const-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (reduce_arm subtype "rreduction.reduce(D)(grS)"
    "{rS | preprocess.allReleaseMarked?(rS`redex) AND preprocess.armc?(rS`context)}")))
 (rreduce_n_TCC1 0
  (rreduce_n_TCC1-1 nil 3701439191 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (rreduce_n subtype "n - 1" "nat")))
 (rreduce_n_TCC2 0
  (rreduce_n_TCC2-1 nil 3701439191 ("" (subtype-tcc) nil nil) nil nil
   (rreduce_n subtype "rS"
    "{grS | rreduction.noDanglingRefs?(rreduction.grS)}")))
 (rreduce_n_TCC3 0
  (rreduce_n_TCC3-1 nil 3701439191 ("" (termination-tcc) nil nil) nil
   nil
   (rreduce_n termination
    "rreduce_n(D)(n - 1, rreduction.reduce(D)(rS))" "nil")))
 (rreduce_n_err 0
  (rreduce_n_err-1 nil 3710697779
   ("" (induct n) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((bumpn const-decl "finite_set[nat]" IL nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (rreduce_n def-decl "rstate" reduction_props nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (refs def-decl "bool" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (rreduce_n_ndr 0
  (rreduce_n_ndr-1 nil 3710697616
   ("" (induct n)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand rreduce_n +)
        (("2" (split)
          (("1" (grind) nil nil)
           ("2" (flatten) (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((reduce const-decl "rstate" rreduction nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Defs type-eq-decl nil rreduction nil)
    (Definition type-eq-decl nil rreduction nil)
    (reduce_ndr application-judgement "(noDanglingRefs?)" rreduction
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (rreduce_n def-decl "rstate" reduction_props nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (refs def-decl "bool" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (rreduce_n_compose_TCC1 0
  (rreduce_n_compose_TCC1-1 nil 3710521854
   ("" (skeep* :preds? t) (("" (rewrite rreduce_n_ndr) nil nil)) nil)
   ((rreduce_n_ndr formula-decl nil reduction_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (IContext type-decl nil IL nil) (cpure? def-decl "bool" IL nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (refs def-decl "bool" IL nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (rreduce_n_compose subtype
    "reduction_props.rreduce_n(reduction_props.D)(reduction_props.j, reduction_props.rS)"
    "(rreduction.noDanglingRefs?)")))
 (rreduce_n_compose 0
  (rreduce_n_compose-1 nil 3710697659
   ("" (induct j)
    (("1" (grind) nil nil)
     ("2" (skeep* :preds? t)
      (("2" (expand rreduce_n + (2 3))
        (("2" (lift-if)
          (("2" (split)
            (("1" (flatten) (("1" (rewrite rreduce_n_err) nil nil))
              nil)
             ("2" (flatten) (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (rewrite rreduce_n_ndr) nil nil)) nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rreduce_n def-decl "rstate" reduction_props nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (refs def-decl "bool" IL nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (cpure? def-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rreduce_n_err formula-decl nil reduction_props nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (reduce const-decl "rstate" rreduction nil)
    (reduce_ndr application-judgement "(noDanglingRefs?)" rreduction
     nil)
    (rreduce_n_ndr formula-decl nil reduction_props nil))
   shostak))
 (build_redex_match 0
  (build_redex_match-2 nil 3706042406
   ("" (induct A)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep*)
      (("5" (expand unmark -5)
        (("5" (expand translate_refs -5)
          (("5" (replace -5 + :dir RL)
            (("5" (expand buildRedex +)
              (("5"
                (case "value?(translate_refs(translate)(unmark(letexpr1_var)))")
                (("1" (assert)
                  (("1" (case "value?(letexpr1_var)")
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (assert)
                      (("2" (induct-and-simplify letexpr1_var)
                        (("2" (generalize letexpr1_var letexpr1_var)
                          (("2" (induct-and-simplify letexpr1_var) nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "value?(letexpr1_var)")
                    (("1" (grind) nil nil)
                     ("2" (assert)
                      (("2" (expand unmark 4 3)
                        (("2" (split 4)
                          (("1" (inst?)
                            (("1" (split -1)
                              (("1" (flatten) nil nil)
                               ("2" (grind) nil nil)
                               ("3"
                                (use translate_refs_contextPure)
                                (("3"
                                  (use unmark_contextPure)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("4" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (decompose-equality)
                            (("1" (inst?)
                              (("1"
                                (inst
                                 -1
                                 "translate_refs(translate)(unmark(letexpr1_var))")
                                (("1"
                                  (split -1)
                                  (("1" (flatten) nil nil)
                                   ("2" (grind) nil nil)
                                   ("3"
                                    (use translate_refs_contextPure)
                                    (("3"
                                      (use unmark_contextPure)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use translate_refs_pure_eq)
                              (("2"
                                (split -1)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (use unmark_pure)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)
     ("9" (grind) nil nil) ("10" (grind) nil nil)
     ("11" (skeep*)
      (("11" (case "pop?(B)")
        (("1" (apply-eta B "(pop?)")
          (("1" (replace -1 :dir RL)
            (("1" (expand buildRedex 2)
              (("1" (case "value?(pop1_var)")
                (("1" (case "value?(pbody(B))")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (expand unmark -7)
                    (("2" (expand translate_refs -7)
                      (("2" (decompose-equality -7)
                        (("2" (replace -1 :dir RL)
                          (("2" (use translate_refs_value)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "value?(pbody(B))")
                  (("1" (expand unmark -7)
                    (("1" (expand translate_refs -7)
                      (("1" (decompose-equality -7)
                        (("1" (replace -1 :dir RL)
                          (("1" (expand buildRedex 2)
                            (("1" (assert)
                              (("1"
                                (generalize pop1_var pop1_var)
                                (("1"
                                  (induct-and-simplify pop1_var)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (split)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (grind) nil nil)
                           ("4" (expand unmark -5)
                            (("4" (expand translate_refs -5)
                              (("4" (decompose-equality -5) nil nil))
                              nil))
                            nil)
                           ("5" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (expand unmark 1)
                        (("2" (decompose-equality 1)
                          (("2" (inst?)
                            (("2" (inst -3 "pbody(B)")
                              (("2"
                                (split -3)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil)
                                 ("4"
                                  (expand unmark -5)
                                  (("4"
                                    (expand translate_refs -5)
                                    (("4"
                                      (decompose-equality -5)
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("5" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil))
    nil)
   ((IExpression_pop_eta formula-decl nil IExpression_adt nil)
    (B skolem-const-decl "IExpression" reduction_props nil)
    (popc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (popc adt-constructor-decl "[IContext -> (popc?)]" IL nil)
    (IContext_popc_extensionality formula-decl nil IL nil)
    (pbody adt-accessor-decl "[(pop?) -> IExpression]" IExpression_adt
     nil)
    (pop1_var skolem-const-decl "IExpression" reduction_props nil)
    (translate_refs_value judgement-tcc nil reduction_props nil)
    (pop adt-constructor-decl "[IExpression -> (pop?)]" IExpression_adt
         nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (unmark_contextPure recursive-judgement-axiom nil preprocess nil)
    (letexpr1_var skolem-const-decl "IExpression" reduction_props nil)
    (translate_refs_contextPure recursive-judgement-axiom nil
     reduction_props nil)
    (translate_refs_pure_eq formula-decl nil reduction_props nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (letexpr2_var skolem-const-decl "IExpression" reduction_props nil)
    (pure? def-decl "bool" IL nil)
    (IContext_letc_extensionality formula-decl nil IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (letc adt-constructor-decl "[[IContext, IExpression] -> (letc?)]"
     IL nil)
    (letc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (letexpr adt-constructor-decl
     "[[IExpression, IExpression] -> (letexpr?)]" IExpression_adt nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (value? const-decl "bool" IL nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (unmark def-decl "IContext" preprocess nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (fill def-decl "IExpression" IL nil)
    (IContext type-decl nil IL nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (contextPure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil))
   nil)
  (build_redex_match-1 nil 3701455957
   ("" (induct A)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep*)
      (("5" (expand unmark -5)
        (("5" (expand translate_refs -5)
          (("5" (replace -5 + :dir RL)
            (("5" (expand buildRedex +)
              (("5"
                (case "atom?(translate_refs(translate)(unmark(letexpr1_var)))")
                (("1" (assert)
                  (("1" (case "atom?(letexpr1_var)")
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (assert)
                      (("2" (induct-and-simplify letexpr1_var)
                        (("2" (generalize letexpr1_var letexpr1_var)
                          (("2" (induct-and-simplify letexpr1_var) nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "atom?(letexpr1_var)")
                    (("1" (grind) nil nil)
                     ("2" (assert)
                      (("2" (expand unmark 4 3)
                        (("2" (split 4)
                          (("1" (inst?)
                            (("1" (split -1)
                              (("1" (flatten) nil nil)
                               ("2" (grind) nil nil)
                               ("3"
                                (use translate_refs_contextPure)
                                (("3"
                                  (use unmark_contextPure)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("4" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (decompose-equality)
                            (("1" (inst?)
                              (("1"
                                (inst
                                 -1
                                 "translate_refs(translate)(unmark(letexpr1_var))")
                                (("1"
                                  (split -1)
                                  (("1" (flatten) nil nil)
                                   ("2" (grind) nil nil)
                                   ("3"
                                    (use translate_refs_contextPure)
                                    (("3"
                                      (use unmark_contextPure)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use translate_refs_pure_eq)
                              (("2"
                                (split -1)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (use unmark_pure)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)
     ("9" (grind) nil nil) ("10" (grind) nil nil)
     ("11" (skeep*)
      (("11" (case "pop?(B)")
        (("1" (apply-eta B "(pop?)")
          (("1" (replace -1 :dir RL)
            (("1" (expand buildRedex 2)
              (("1" (case "atom?(pop1_var)")
                (("1" (case "atom?(pbody(B))")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (expand unmark -7)
                    (("2" (expand translate_refs -7)
                      (("2" (decompose-equality -7)
                        (("2" (replace -1 :dir RL)
                          (("2" (use translate_refs_atom)
                            (("2" (use unmark_atom) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "atom?(pbody(B))")
                  (("1" (expand unmark -7)
                    (("1" (expand translate_refs -7)
                      (("1" (decompose-equality -7)
                        (("1" (replace -1 :dir RL)
                          (("1" (expand buildRedex 2)
                            (("1" (assert)
                              (("1"
                                (generalize pop1_var pop1_var)
                                (("1"
                                  (induct-and-simplify pop1_var)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (split)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (grind) nil nil)
                           ("4" (expand unmark -5)
                            (("4" (expand translate_refs -5)
                              (("4" (decompose-equality -5) nil nil))
                              nil))
                            nil)
                           ("5" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (expand unmark 1)
                        (("2" (decompose-equality 1)
                          (("2" (inst?)
                            (("2" (inst -3 "pbody(B)")
                              (("2"
                                (split -3)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil)
                                 ("4"
                                  (expand unmark -5)
                                  (("4"
                                    (expand translate_refs -5)
                                    (("4"
                                      (decompose-equality -5)
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("5" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil))
    nil)
   ((IExpression_pop_eta formula-decl nil IExpression_adt nil)
    (popc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (popc adt-constructor-decl "[IContext -> (popc?)]" IL nil)
    (IContext_popc_extensionality formula-decl nil IL nil)
    (pbody adt-accessor-decl "[(pop?) -> IExpression]" IExpression_adt
     nil)
    (unmark_atom judgement-tcc nil preprocess nil)
    (translate_refs_atom judgement-tcc nil reduction_props nil)
    (pop adt-constructor-decl "[IExpression -> (pop?)]" IExpression_adt
         nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (unmark_contextPure recursive-judgement-axiom nil preprocess nil)
    (translate_refs_contextPure recursive-judgement-axiom nil
     reduction_props nil)
    (translate_refs_pure_eq formula-decl nil reduction_props nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (pure? def-decl "bool" IL nil)
    (IContext_letc_extensionality formula-decl nil IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (letc adt-constructor-decl "[[IContext, IExpression] -> (letc?)]"
     IL nil)
    (letc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (letexpr adt-constructor-decl
     "[[IExpression, IExpression] -> (letexpr?)]" IExpression_adt nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (value? const-decl "bool" IL nil) (atom? const-decl "bool" IL nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (unmark def-decl "IContext" preprocess nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (fill def-decl "IExpression" IL nil)
    (IContext type-decl nil IL nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (contextPure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil))
   shostak))
 (make_redex_match 0
  (make_redex_match-1 nil 3701457302
   ("" (skeep :preds? t)
    (("" (expand state_matches?)
      (("" (skeep)
        (("" (inst?)
          (("" (expand state_matches)
            (("" (use build_redex_match)
              (("" (split -1)
                (("1" (split)
                  (("1" (grind) nil nil)
                   ("2" (flatten) (("2" (grind) nil nil)) nil)
                   ("3" (grind) nil nil)
                   ("4"
                    (case-replace "union(cvars(make_redex(rS)`redex),
                          bumpn(cvars(make_redex(rS)`context),
                                popDepth(make_redex(rS)`redex))) = union(cvars(rS`redex),
                               bumpn(cvars(rS`context),
                                     popDepth(rS`redex)))")
                    (("1" (assert)
                      (("1" (prop) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (apply-extensionality)
                      (("2" (expand union)
                        (("2" (expand member)
                          (("2" (delete 2 3)
                            (("2" (expand make_redex)
                              (("2"
                                (typepred "buildRedex(rS`redex)")
                                (("2"
                                  (replace -1 1 :dir RL)
                                  (("2"
                                    (rewrite cvars_fill)
                                    (("2"
                                      (rewrite -1 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (expand store_matches) (("5" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (typepred "rS`redex") (("2" (propax) nil nil))
                  nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state_matches? const-decl "boolean" reduction_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (build_redex_match formula-decl nil reduction_props nil)
    (topstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (make_redex_e const-decl "{eS | pureRedex?(eS`redex)}" reduction
     nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (releaseRedex? const-decl "bool" IL nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (member const-decl "bool" sets nil)
    (letRedex? const-decl "bool" IL nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (applyRedex? const-decl "bool" IL nil)
    (iftRedex? const-decl "bool" IL nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (lookupRedex? const-decl "bool" IL nil)
    (newintRedex? const-decl "bool" IL nil)
    (newrefRedex? const-decl "bool" IL nil)
    (popRedex? const-decl "bool" IL nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cvars_fill formula-decl nil preprocess nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (fill def-decl "IExpression" IL nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (unmark def-decl "IContext" preprocess nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (union const-decl "set" sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pureRedex? const-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (rS skolem-const-decl "rtopstate" reduction_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (to_topstate_match 0
  (to_topstate_match-1 nil 3701534959
   ("" (skeep)
    (("" (expand state_matches)
      (("" (with-labels (flatten) ((err trr unm stam stom)))
        (("" (split)
          (("1" (expand to_topstate) (("1" (propax) nil nil)) nil)
           ("2" (expand to_topstate)
            (("2" (rewrite unmark_fill)
              (("2" (rewrite translate_fill) (("2" (grind) nil nil))
                nil))
              nil))
            nil)
           ("3" (expand to_topstate) (("3" (grind) nil nil)) nil)
           ("4" (expand to_topstate)
            (("4"
              (case-replace "union(cvars(fill(rS`context, rS`redex)),
                          bumpn(cvars(hole),
                                popDepth(fill(rS`context, rS`redex)))) = union(cvars(rS`redex),
                          bumpn(cvars(rS`context), popDepth(rS`redex)))")
              (("4" (decompose-equality)
                (("4" (expand union)
                  (("4" (expand member)
                    (("4" (rewrite cvars_fill) (("4" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (expand to_topstate)
            (("5" (expand store_matches) (("5" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (to_topstate const-decl "topstate" reduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (unmark_fill formula-decl nil preprocess nil)
    (IExpression type-decl nil IExpression_adt nil)
    (IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (translate_fill formula-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmark def-decl "IContext" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (union const-decl "set" sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (fill def-decl "IExpression" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (cvars_fill formula-decl nil preprocess nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (store_matches const-decl "boolean" reduction_props nil))
   shostak))
 (releaseReduce_reduce_match 0
  (releaseReduce_reduce_match-3 "" 3710697929
   (""
    (with-labels (skeep* :preds? t)
     ((err1 err2 ndr arm armc stm tpr obj)))
    (("" (case "value?(to_topstate(grS)`redex)")
      (("1" (delete obj)
        (("1" (hide-all-but (-1 tpr))
          (("1" (case "value?(grS`redex)")
            (("1" (grind) nil nil)
             ("2" (case "grS`context = hole")
              (("1" (grind) nil nil)
               ("2" (case "letc?(grS`context)")
                (("1" (grind) nil nil)
                 ("2" (case "popc?(grS`context)")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (label atm 1)
        (("2"
          (name-replace rS "make_redex
                                                  (to_topstate(grS))")
          (("2"
            (name "nS"
                  "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
            (("1" (case "state_matches(nS, rS)(translate)")
              (("1"
                (case "state_matches(nS, releaseReduce(D)(rS))(translate)")
                (("1"
                  (case "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                  (("1"
                    (case-replace "to_topstate(gS) = to_topstate(nS)")
                    (("1" (delete obj)
                      (("1" (expand to_topstate)
                        (("1" (expand nS)
                          (("1"
                            (case-replace
                             "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                            (("1" (grind) nil nil)
                             ("2" (delete 2)
                              (("2"
                                (delete -1 -2 -3 -4)
                                (("2"
                                  (expand state_matches)
                                  (("2"
                                    (with-labels
                                     (flatten)
                                     ((trr unm stam stom)))
                                    (("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (case-replace
                                         "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                        (("1"
                                          (expand rS)
                                          (("1"
                                            (expand make_redex)
                                            (("1"
                                              (typepred
                                               "buildRedex(to_topstate(grS)`redex)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand to_topstate)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (delete 2)
                                          (("2"
                                            (rewrite unmark_fill)
                                            (("2"
                                              (rewrite translate_fill)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete obj)
                    (("2" (use to_topstate_match)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (delete obj)
                  (("2" (use releaseReduce_match)
                    (("2" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (typepred rS)
                        (("2" (case "releaseRedex?(rS`redex)")
                          (("1" (grind) nil nil)
                           ("2" (lemma top_releases_build_redex)
                            (("2" (expand rS)
                              (("2"
                                (inst -1 "to_topstate(grS)`redex")
                                (("2"
                                  (expand to_topstate)
                                  (("2"
                                    (rewrite top_releases_ct_fill)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand rS)
                        (("3" (lemma make_redex_ndr)
                          (("3" (lemma to_topstate_dangling)
                            (("3" (inst -1 grS)
                              (("3"
                                (inst?)
                                (("3"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (expand rS)
                        (("4" (expand make_redex)
                          (("4"
                            (case "allReleaseMarked?(to_topstate(grS)`redex)")
                            (("1"
                              (typepred
                               "buildRedex(to_topstate(grS)`redex)")
                              (("1"
                                (replace -1 -3 :dir RL)
                                (("1"
                                  (rewrite arm_fill)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand to_topstate)
                              (("2"
                                (rewrite arm_fill)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (delete obj)
                (("2" (expand state_matches)
                  (("2" (with-labels (flatten) ((trr unm stam stom)))
                    (("2" (split)
                      (("1" (expand* nS rS) (("1" (grind) nil nil))
                        nil)
                       ("2" (expand nS) (("2" (propax) nil nil)) nil)
                       ("3" (expand nS) (("3" (propax) nil nil)) nil)
                       ("4" (expand* nS to_topstate)
                        (("4"
                          (case-replace
                           "union(cvars(fill(grS`context, grS`redex)),
                                                                  bumpn(cvars(hole),
                                                                        popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                                                                  bumpn(cvars(rS`context), popDepth(rS`redex)))")
                          (("1" (expand rS) (("1" (grind) nil nil))
                            nil)
                           ("2" (delete 2)
                            (("2" (apply-extensionality)
                              (("2"
                                (delete 2)
                                (("2"
                                  (expand* union member rS make_redex)
                                  (("2"
                                    (typepred
                                     "buildRedex(to_topstate(grS)`redex)")
                                    (("2"
                                      (expand to_topstate)
                                      (("2"
                                        (name-replace
                                         A
                                         "fill(grS`context, grS`redex)")
                                        (("2"
                                          (name-replace
                                           redex
                                           "buildRedex(A)`2")
                                          (("2"
                                            (name-replace
                                             ctx
                                             "buildRedex(A)`1")
                                            (("2"
                                              (replace -1 1 :dir RL)
                                              (("2"
                                                (rewrite cvars_fill)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5"
                        (expand* store_matches nS rS make_redex
                         to_topstate)
                        (("5" (skeep)
                          (("5" (inst? stom)
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (inst?)
                                    (("1"
                                      (typepred j)
                                      (("1"
                                        (expand rS)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred j)
                                      (("2"
                                        (expand rS)
                                        (("2"
                                          (expand make_redex)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred r)
                              (("2"
                                (expand rS)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "rS`redex")
              (("2" (case-replace "gS`stack`length = rS`stack`length")
                (("1" (rewrite translate_popDepth)
                  (("1" (rewrite unmark_popDepth)
                    (("1" (rewrite unmark_popDepth_ctx)
                      (("1" (rewrite translate_vars)
                        (("1" (split)
                          (("1" (skeep)
                            (("1"
                              (case "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                              (("1"
                                (case-replace
                                 "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                (("1"
                                  (delete obj)
                                  (("1"
                                    (expand state_matches)
                                    (("1"
                                      (with-labels
                                       (flatten)
                                       ((err trr unm stam stom)))
                                      (("1"
                                        (replace trr)
                                        (("1"
                                          (typepred
                                           "to_topstate(gS)`redex")
                                          (("1"
                                            (inst -1 i)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand rS)
                                  (("2"
                                    (expand make_redex)
                                    (("2"
                                      (typepred
                                       "buildRedex(to_topstate(grS)`redex)")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite unmark_fill)
                                (("2"
                                  (rewrite translate_fill)
                                  (("2"
                                    (rewrite refs_fill)
                                    (("2"
                                      (rewrite contextPurefill)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma unmark_vars)
                            (("2" (skeep)
                              (("2"
                                (inst -1 "rS`redex" i)
                                (("2"
                                  (inst -5 i)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (lemma unmark_vars_ctx)
                              (("3"
                                (inst -1 "rS`context" i)
                                (("3"
                                  (inst -6 i)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 stm))
                  (("2" (expand rS) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (releaseReduce_reduce_match-2 nil 3706042595
   (""
    (with-labels (skeep* :preds? t)
     ((err1 err2 ndr arm armc stm tpr obj)))
    (("" (case "value?(to_topstate(grS)`redex)")
      (("1" (delete obj)
        (("1" (hide-all-but (-1 tpr))
          (("1" (case "value?(grS`redex)")
            (("1" (grind) nil nil)
             ("2" (case "grS`context = hole")
              (("1" (grind) nil nil)
               ("2" (case "letc?(grS`context)")
                (("1" (grind) nil nil)
                 ("2" (case "popc?(grS`context)")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (label atm 1)
        (("2"
          (name-replace rS "make_redex
                                                  (to_topstate(grS))")
          (("2"
            (name "nS"
                  "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
            (("1" (case "state_matches(nS, rS)(translate)")
              (("1"
                (case "state_matches(nS, releaseReduce(D)(rS))(translate)")
                (("1"
                  (case "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                  (("1"
                    (case-replace "to_topstate(gS) = to_topstate(nS)")
                    (("1" (delete obj)
                      (("1" (expand to_topstate)
                        (("1" (expand nS)
                          (("1"
                            (case-replace
                             "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                            (("1" (grind) nil nil)
                             ("2" (delete 2)
                              (("2"
                                (delete -1 -2 -3 -4)
                                (("2"
                                  (expand state_matches)
                                  (("2"
                                    (with-labels
                                     (flatten)
                                     ((trr unm stam stom)))
                                    (("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (case-replace
                                         "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                        (("1"
                                          (expand rS)
                                          (("1"
                                            (expand make_redex)
                                            (("1"
                                              (typepred
                                               "buildRedex(to_topstate(grS)`redex)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand to_topstate)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (delete 2)
                                          (("2"
                                            (rewrite unmark_fill)
                                            (("2"
                                              (rewrite translate_fill)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete obj)
                    (("2" (use to_topstate_match)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (delete obj)
                  (("2" (use releaseReduce_match)
                    (("2" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (typepred rS)
                        (("2" (case "releaseRedex?(rS`redex)")
                          (("1" (grind) nil nil)
                           ("2" (lemma top_releases_build_redex)
                            (("2" (expand rS)
                              (("2"
                                (inst -1 "to_topstate(grS)`redex")
                                (("2"
                                  (expand to_topstate)
                                  (("2"
                                    (rewrite top_releases_ct_fill)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand rS)
                        (("3" (lemma make_redex_ndr)
                          (("3" (lemma to_topstate_dangling)
                            (("3" (inst -1 grS)
                              (("3"
                                (inst?)
                                (("3"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (expand rS)
                        (("4" (expand make_redex)
                          (("4"
                            (case "allReleaseMarked?(to_topstate(grS)`redex)")
                            (("1"
                              (typepred
                               "buildRedex(to_topstate(grS)`redex)")
                              (("1"
                                (replace -1 -3 :dir RL)
                                (("1"
                                  (rewrite arm_fill)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand to_topstate)
                              (("2"
                                (rewrite arm_fill)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (delete obj)
                (("2" (expand state_matches)
                  (("2" (with-labels (flatten) ((trr unm stam stom)))
                    (("2" (split)
                      (("1" (expand* nS rS) (("1" (grind) nil nil))
                        nil)
                       ("2" (expand nS) (("2" (propax) nil nil)) nil)
                       ("3" (expand nS) (("3" (propax) nil nil)) nil)
                       ("4" (expand* nS to_topstate)
                        (("4"
                          (case-replace
                           "union(cvars(fill(grS`context, grS`redex)),
                                                                  bumpn(cvars(hole),
                                                                        popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                                                                  bumpn(cvars(rS`context), popDepth(rS`redex)))")
                          (("1" (expand rS) (("1" (grind) nil nil))
                            nil)
                           ("2" (delete 2)
                            (("2" (apply-extensionality)
                              (("2"
                                (delete 2)
                                (("2"
                                  (expand* union member rS make_redex)
                                  (("2"
                                    (typepred
                                     "buildRedex(to_topstate(grS)`redex)")
                                    (("2"
                                      (expand to_topstate)
                                      (("2"
                                        (name-replace
                                         A
                                         "fill(grS`context, grS`redex)")
                                        (("2"
                                          (name-replace
                                           redex
                                           "buildRedex(A)`2")
                                          (("2"
                                            (name-replace
                                             ctx
                                             "buildRedex(A)`1")
                                            (("2"
                                              (replace -1 1 :dir RL)
                                              (("2"
                                                (rewrite cvars_fill)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5"
                        (expand* store_matches nS rS make_redex
                         to_topstate)
                        (("5" (skeep)
                          (("5" (inst? stom)
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (typepred j)
                                      (("3"
                                        (expand rS)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred r)
                              (("2"
                                (expand rS)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "rS`redex")
              (("2" (case-replace "gS`stack`length = rS`stack`length")
                (("1" (rewrite translate_popDepth)
                  (("1" (rewrite unmark_popDepth)
                    (("1" (rewrite unmark_popDepth_ctx)
                      (("1" (rewrite translate_vars)
                        (("1" (split)
                          (("1" (skeep)
                            (("1"
                              (case "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                              (("1"
                                (case-replace
                                 "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                (("1"
                                  (delete obj)
                                  (("1"
                                    (expand state_matches)
                                    (("1"
                                      (with-labels
                                       (flatten)
                                       ((err trr unm stam stom)))
                                      (("1"
                                        (replace trr)
                                        (("1"
                                          (typepred
                                           "to_topstate(gS)`redex")
                                          (("1"
                                            (inst -1 i)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand rS)
                                  (("2"
                                    (expand make_redex)
                                    (("2"
                                      (typepred
                                       "buildRedex(to_topstate(grS)`redex)")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite unmark_fill)
                                (("2"
                                  (rewrite translate_fill)
                                  (("2"
                                    (rewrite refs_fill)
                                    (("2"
                                      (rewrite contextPurefill)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma unmark_vars)
                            (("2" (skeep)
                              (("2"
                                (inst -1 "rS`redex" i)
                                (("2"
                                  (inst -5 i)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (lemma unmark_vars_ctx)
                              (("3"
                                (inst -1 "rS`context" i)
                                (("3"
                                  (inst -6 i)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 stm))
                  (("2" (expand rS) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (estate type-eq-decl nil reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (unmark def-decl "IContext" preprocess nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (r skolem-const-decl "(rS`domain)" reduction_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (j skolem-const-decl "below(rS`store(r)`length)" reduction_props
     nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (cvars_fill formula-decl nil preprocess nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (union const-decl "set" sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (pure? def-decl "bool" IL nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (releaseReduce const-decl "rstate" rreduction nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (to_topstate_match formula-decl nil reduction_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (rS skolem-const-decl "{rS | pureRedex?(rS`redex)}" reduction_props
     nil)
    (unmark_fill formula-decl nil preprocess nil)
    (translate_fill formula-decl nil reduction_props nil)
    (nS skolem-const-decl "estate" reduction_props nil)
    (to_topstate const-decl "topstate" reduction nil)
    (topstate type-eq-decl nil reduction nil)
    (releaseReduce_match formula-decl nil reduction_props nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (arm_fill formula-decl nil preprocess nil)
    (to_topstate_dangling judgement-tcc nil rreduction nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (make_redex_ndr judgement-tcc nil rreduction nil)
    (top_releases_build_redex formula-decl nil reduction_props nil)
    (top_releases_ct_fill formula-decl nil reduction_props nil)
    (letRedex? const-decl "bool" IL nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (applyRedex? const-decl "bool" IL nil)
    (iftRedex? const-decl "bool" IL nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (lookupRedex? const-decl "bool" IL nil)
    (newintRedex? const-decl "bool" IL nil)
    (newrefRedex? const-decl "bool" IL nil)
    (popRedex? const-decl "bool" IL nil)
    (releaseRedex? const-decl "bool" IL nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (unmark_popDepth formula-decl nil preprocess nil)
    (translate_vars formula-decl nil reduction_props nil)
    (unmark_vars_ctx formula-decl nil preprocess nil)
    (unmark_vars formula-decl nil preprocess nil)
    (refs_fill formula-decl nil IL nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (contextPurefill formula-decl nil IL nil)
    (unmark_popDepth_ctx formula-decl nil preprocess nil)
    (translate_popDepth formula-decl nil reduction_props nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (pureRedex? const-decl "bool" IL nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (letc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (popc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (fill def-decl "IExpression" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (value? const-decl "bool" IL nil) (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil))
   nil)
  (releaseReduce_reduce_match-1 nil 3703360181
   (""
    (with-labels (skeep* :preds? t)
     ((err1 err2 ndr arm armc stm tpr obj)))
    (("" (case "atom?(to_topstate(grS)`redex)")
      (("1" (delete obj)
        (("1" (hide-all-but (-1 tpr))
          (("1" (case "atom?(grS`redex)")
            (("1" (grind) nil nil)
             ("2" (case "grS`context = hole")
              (("1" (grind) nil nil)
               ("2" (case "letc?(grS`context)")
                (("1" (grind) nil nil)
                 ("2" (case "popc?(grS`context)")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (label atm 1)
        (("2"
          (name-replace rS "make_redex
                                              (to_topstate(grS))")
          (("2"
            (name "nS"
                  "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
            (("1" (case "state_matches(nS, rS)(translate)")
              (("1"
                (case "state_matches(nS, releaseReduce(D)(rS))(translate)")
                (("1"
                  (case "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                  (("1"
                    (case-replace "to_topstate(gS) = to_topstate(nS)")
                    (("1" (delete obj)
                      (("1" (expand to_topstate)
                        (("1" (expand nS)
                          (("1"
                            (case-replace
                             "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                            (("1" (grind) nil nil)
                             ("2" (delete 2)
                              (("2"
                                (delete -1 -2 -3 -4)
                                (("2"
                                  (expand state_matches)
                                  (("2"
                                    (with-labels
                                     (flatten)
                                     ((trr unm stam stom)))
                                    (("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (case-replace
                                         "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                        (("1"
                                          (expand rS)
                                          (("1"
                                            (expand make_redex)
                                            (("1"
                                              (typepred
                                               "buildRedex(to_topstate(grS)`redex)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand to_topstate)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (delete 2)
                                          (("2"
                                            (rewrite unmark_fill)
                                            (("2"
                                              (rewrite translate_fill)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete obj)
                    (("2" (use to_topstate_match)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (delete obj)
                  (("2" (use releaseReduce_match)
                    (("2" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (typepred rS)
                        (("2" (case "releaseRedex?(rS`redex)")
                          (("1" (grind) nil nil)
                           ("2" (lemma top_releases_build_redex)
                            (("2" (expand rS)
                              (("2"
                                (inst -1 "to_topstate(grS)`redex")
                                (("2"
                                  (expand to_topstate)
                                  (("2"
                                    (rewrite top_releases_ct_fill)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand rS)
                        (("3" (lemma make_redex_ndr)
                          (("3" (lemma to_topstate_dangling)
                            (("3" (inst -1 grS)
                              (("3"
                                (inst?)
                                (("3"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (expand rS)
                        (("4" (expand make_redex)
                          (("4"
                            (case "allReleaseMarked?(to_topstate(grS)`redex)")
                            (("1"
                              (typepred
                               "buildRedex(to_topstate(grS)`redex)")
                              (("1"
                                (replace -1 -3 :dir RL)
                                (("1"
                                  (rewrite arm_fill)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand to_topstate)
                              (("2"
                                (rewrite arm_fill)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (delete obj)
                (("2" (expand state_matches)
                  (("2" (with-labels (flatten) ((trr unm stam stom)))
                    (("2" (split)
                      (("1" (expand* nS rS) (("1" (grind) nil nil))
                        nil)
                       ("2" (expand nS) (("2" (propax) nil nil)) nil)
                       ("3" (expand nS) (("3" (propax) nil nil)) nil)
                       ("4" (expand* nS to_topstate)
                        (("4"
                          (case-replace
                           "union(cvars(fill(grS`context, grS`redex)),
                                                        bumpn(cvars(hole),
                                                              popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                                                        bumpn(cvars(rS`context), popDepth(rS`redex)))")
                          (("1" (expand rS) (("1" (grind) nil nil))
                            nil)
                           ("2" (delete 2)
                            (("2" (apply-extensionality)
                              (("2"
                                (delete 2)
                                (("2"
                                  (expand* union member rS make_redex)
                                  (("2"
                                    (typepred
                                     "buildRedex(to_topstate(grS)`redex)")
                                    (("2"
                                      (expand to_topstate)
                                      (("2"
                                        (name-replace
                                         A
                                         "fill(grS`context, grS`redex)")
                                        (("2"
                                          (name-replace
                                           redex
                                           "buildRedex(A)`2")
                                          (("2"
                                            (name-replace
                                             ctx
                                             "buildRedex(A)`1")
                                            (("2"
                                              (replace -1 1 :dir RL)
                                              (("2"
                                                (rewrite cvars_fill)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5"
                        (expand* store_matches nS rS make_redex
                         to_topstate)
                        (("5" (skeep)
                          (("5" (inst? stom)
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (typepred j)
                                      (("3"
                                        (expand rS)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred r)
                              (("2"
                                (expand rS)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "rS`redex")
              (("2" (case-replace "gS`stack`length = rS`stack`length")
                (("1" (rewrite translate_popDepth)
                  (("1" (rewrite unmark_popDepth)
                    (("1" (rewrite unmark_popDepth_ctx)
                      (("1" (rewrite translate_vars)
                        (("1" (split)
                          (("1" (skeep)
                            (("1"
                              (case "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                              (("1"
                                (case-replace
                                 "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                (("1"
                                  (delete obj)
                                  (("1"
                                    (expand state_matches)
                                    (("1"
                                      (with-labels
                                       (flatten)
                                       ((err trr unm stam stom)))
                                      (("1"
                                        (replace trr)
                                        (("1"
                                          (typepred
                                           "to_topstate(gS)`redex")
                                          (("1"
                                            (inst -1 i)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand rS)
                                  (("2"
                                    (expand make_redex)
                                    (("2"
                                      (typepred
                                       "buildRedex(to_topstate(grS)`redex)")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite unmark_fill)
                                (("2"
                                  (rewrite translate_fill)
                                  (("2"
                                    (rewrite refs_fill)
                                    (("2"
                                      (rewrite contextPurefill)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma unmark_vars)
                            (("2" (skeep)
                              (("2"
                                (inst -1 "rS`redex" i)
                                (("2"
                                  (inst -5 i)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (lemma unmark_vars_ctx)
                              (("3"
                                (inst -1 "rS`context" i)
                                (("3"
                                  (inst -6 i)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 stm))
                  (("2" (expand rS) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((goodrstate type-eq-decl nil reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IContext type-decl nil IL nil) (atom? const-decl "bool" IL nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IExpression type-decl nil IExpression_adt nil)
    (fill def-decl "IExpression" IL nil)
    (popc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (letc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (pureRedex? const-decl "bool" IL nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (translate_popDepth formula-decl nil reduction_props nil)
    (unmark_popDepth_ctx formula-decl nil preprocess nil)
    (contextPurefill formula-decl nil IL nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (refs_fill formula-decl nil IL nil)
    (unmark_vars formula-decl nil preprocess nil)
    (unmark_vars_ctx formula-decl nil preprocess nil)
    (translate_vars formula-decl nil reduction_props nil)
    (unmark_popDepth formula-decl nil preprocess nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (releaseRedex? const-decl "bool" IL nil)
    (popRedex? const-decl "bool" IL nil)
    (newrefRedex? const-decl "bool" IL nil)
    (newintRedex? const-decl "bool" IL nil)
    (lookupRedex? const-decl "bool" IL nil)
    (updateRedex? const-decl "bool" IL nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (iftRedex? const-decl "bool" IL nil)
    (applyRedex? const-decl "bool" IL nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (letRedex? const-decl "bool" IL nil)
    (top_releases_ct_fill formula-decl nil reduction_props nil)
    (top_releases_build_redex formula-decl nil reduction_props nil)
    (make_redex_ndr judgement-tcc nil rreduction nil)
    (to_topstate_dangling judgement-tcc nil rreduction nil)
    (arm_fill formula-decl nil preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (releaseReduce_match formula-decl nil reduction_props nil)
    (topstate type-eq-decl nil reduction nil)
    (to_topstate const-decl "topstate" reduction nil)
    (translate_fill formula-decl nil reduction_props nil)
    (unmark_fill formula-decl nil preprocess nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (to_topstate_match formula-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (releaseReduce const-decl "rstate" rreduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (Definition type-eq-decl nil rreduction nil)
    (pure? def-decl "bool" IL nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cvars_fill formula-decl nil preprocess nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unmark def-decl "IContext" preprocess nil)
    (unmark def-decl "IExpression" preprocess nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (bisimulation_lemma 0
  (bisimulation_lemma-10 "" 3710698058
   ("" (measure-induct+ "top_releases_ct(grS`redex)" ("grS"))
    (("" (name-replace grS "x!1")
      (("" (with-labels (skeep) ((ndr arm armc stm obj)))
        (("" (label hrec -1)
          (("" (case-replace "top_releases_ct(grS`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand rreduce_n)
                (("1" (expand rreduce_n)
                  (("1" (typepred grS)
                    (("1" (assert)
                      (("1"
                        (with-labels
                         (case "NOT value?(to_topstate(gS)`redex)")
                         ((atom1)))
                        (("1"
                          (with-labels
                           (case "NOT value?(to_topstate(grS)`redex)")
                           ((atom2)))
                          (("1" (expand reduce)
                            (("1"
                              (name-replace rS
                               "make_redex(to_topstate(grS))")
                              (("1"
                                (name-replace
                                 eS
                                 "make_redex_e(to_topstate(gS))")
                                (("1"
                                  (with-labels
                                   (case "state_matches?(eS, rS)")
                                   ((stm2)))
                                  (("1"
                                    (with-labels (copy stm2) ((stm3)))
                                    (("1"
                                      (expand state_matches? stm2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand state_matches stm2)
                                          (("1"
                                            (with-labels
                                             (flatten)
                                             ((err trr unm stam stom)))
                                            (("1"
                                              (with-labels
                                               (case
                                                "noDanglingRefs?(rS)")
                                               ((ndr2)))
                                              (("1"
                                                (with-labels
                                                 (case
                                                  "allReleaseMarked?(rS`redex) AND armc?(rS`context)")
                                                 ((arm2)))
                                                (("1"
                                                  (case
                                                   "variable?(rS`redex)")
                                                  (("1"
                                                    (case
                                                     "variable?(eS`redex)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         variableReduce_match)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       variable_match)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "pureLetRedex?(rS`redex)")
                                                    (("1"
                                                      (case
                                                       "pureLetRedex?(eS`redex)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "NOT variable?(eS`redex)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (use
                                                               letReduce_match)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand*
                                                             pureLetRedex?
                                                             letRedex?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (delete obj)
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (apply-eta
                                                             "rS`redex"
                                                             "(letexpr?)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               +
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (expand
                                                                 unmark
                                                                 +)
                                                                (("1"
                                                                  (expand
                                                                   translate_refs
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     pureLetRedex?)
                                                                    (("1"
                                                                      (expand
                                                                       letRedex?)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (use
                                                                           translate_refs_value)
                                                                          (("1"
                                                                            (use
                                                                             unmark_value)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           translate_refs_pure)
                                                                          (("2"
                                                                            (rewrite
                                                                             unmark_pure)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "applyRedex?(rS`redex)")
                                                      (("1"
                                                        (case
                                                         "applyRedex?(eS`redex)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             applyReduce_match)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               D
                                                               eS
                                                               rS)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand*
                                                                     pureLetRedex?
                                                                     letRedex?
                                                                     applyRedex?)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 eS)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (replace
                                                             trr
                                                             +
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (apply-eta
                                                               "rS`redex"
                                                               "(application?)")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "pureIftRedex?(rS`redex)")
                                                        (("1"
                                                          (case
                                                           "pureIftRedex?(eS`redex)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     ifReduce_match)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand*
                                                                 pureLetRedex?
                                                                 letRedex?
                                                                 applyRedex?
                                                                 pureIftRedex?)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (delete
                                                             obj)
                                                            (("2"
                                                              (replace
                                                               trr
                                                               +
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (apply-eta
                                                                 "rS`redex"
                                                                 "(ift?)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   +
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (expand
                                                                     unmark
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       translate_refs
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         pureIftRedex?)
                                                                        (("1"
                                                                          (expand
                                                                           iftRedex?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("1"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("2"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "updateRedex?(rS`redex)")
                                                          (("1"
                                                            (case
                                                             "updateRedex?(eS`redex)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       updateReduce_match)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("4"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (replace
                                                                     trr
                                                                     +
                                                                     :dir
                                                                     RL)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(update?)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (delete
                                                               obj)
                                                              (("2"
                                                                (replace
                                                                 trr
                                                                 +
                                                                 :dir
                                                                 RL)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(update?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "lookupRedex?(rS`redex)")
                                                            (("1"
                                                              (case
                                                               "lookupRedex?(eS`redex)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         lookupReduce_match)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (replace
                                                                       trr
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(lookup?)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(lookup?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "newintRedex?(rS`redex)")
                                                              (("1"
                                                                (case
                                                                 "newintRedex?(eS`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex)")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           newintReduce_match)
                                                                          (("1"
                                                                            (prop)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(newint?)")
                                                                        (("1"
                                                                          (replace
                                                                           trr
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (apply-eta
                                                                     "rS`redex"
                                                                     "(newint?)")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "newrefRedex?(rS`redex)")
                                                                (("1"
                                                                  (case
                                                                   "newrefRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex)")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             newrefReduce_match)
                                                                            (("1"
                                                                              (prop)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (replace
                                                                           trr
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("2"
                                                                            (apply-eta
                                                                             "rS`redex"
                                                                             "(newref?)")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(newref?)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "popRedex?(rS`redex)")
                                                                  (("1"
                                                                    (case
                                                                     "popRedex?(eS`redex)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex) AND NOT newrefRedex?(eS`redex)")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               popReduce_match)
                                                                              (("1"
                                                                                (prop)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (replace
                                                                             trr
                                                                             :dir
                                                                             RL)
                                                                            (("2"
                                                                              (apply-eta
                                                                               "rS`redex"
                                                                               "(pop?)")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (replace
                                                                         trr
                                                                         +
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (apply-eta
                                                                           "rS`redex"
                                                                           "(pop?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (expand
                                                                               unmark)
                                                                              (("1"
                                                                                (expand
                                                                                 translate_refs)
                                                                                (("1"
                                                                                  (expand
                                                                                   popRedex?)
                                                                                  (("1"
                                                                                    (use
                                                                                     translate_refs_value)
                                                                                    (("1"
                                                                                      (use
                                                                                       unmark_value)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "pureReleaseRedex?(rS`redex)")
                                                                    (("1"
                                                                      (delete
                                                                       obj)
                                                                      (("1"
                                                                        (expand
                                                                         rS)
                                                                        (("1"
                                                                          (expand
                                                                           make_redex)
                                                                          (("1"
                                                                            (lemma
                                                                             top_releases_build_redex)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "to_topstate(grS)`redex")
                                                                              (("1"
                                                                                (expand
                                                                                 to_topstate)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   top_releases_ct_fill)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "pureRedex?(rS`redex)")
                                                                      (("1"
                                                                        (expand
                                                                         pureRedex?)
                                                                        (("1"
                                                                          (prop)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         rS)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (delete obj)
                                                  (("2"
                                                    (expand rS)
                                                    (("2"
                                                      (case
                                                       "allReleaseMarked?(to_topstate(grS)`redex)")
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         to_topstate)
                                                        (("2"
                                                          (rewrite
                                                           arm_fill)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (delete obj)
                                                (("2"
                                                  (expand rS)
                                                  (("2"
                                                    (lemma
                                                     make_redex_ndr)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete obj)
                                    (("2"
                                      (expand eS)
                                      (("2"
                                        (expand rS)
                                        (("2"
                                          (use make_redex_match)
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil)
                                             ("4"
                                              (expand make_redex)
                                              (("4"
                                                (lemma
                                                 top_releases_build_redex)
                                                (("4"
                                                  (inst
                                                   -1
                                                   "to_topstate(grS)`redex")
                                                  (("4"
                                                    (expand
                                                     to_topstate)
                                                    (("4"
                                                      (rewrite
                                                       top_releases_ct_fill)
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (delete obj)
                            (("2" (expand state_matches?)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand state_matches)
                                  (("2"
                                    (with-labels
                                     (flatten)
                                     ((err trr unm stam stom)))
                                    (("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (use translate_refs_value)
                                        (("2"
                                          (use unmark_value)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "value?(to_topstate(grS)`redex)")
                          (("1" (expand reduce)
                            (("1" (assert) nil nil)) nil)
                           ("2"
                            (case "top_releases_ct(to_topstate(grS)`redex) = 0")
                            (("1" (delete obj)
                              (("1"
                                (expand state_matches?)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand state_matches)
                                    (("1"
                                      (with-labels
                                       (flatten)
                                       ((err trr unm stam stom)))
                                      (("1"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("1"
                                          (name-replace
                                           B
                                           "to_topstate(gS)`redex")
                                          (("1"
                                            (hide-all-but
                                             (1 -1 atom1 trr))
                                            (("1"
                                              (generalize
                                               B
                                               B
                                               IExpression)
                                              (("1"
                                                (generalize
                                                 A
                                                 A
                                                 IExpression)
                                                (("1"
                                                  (induct-and-simplify
                                                   A)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand to_topstate)
                              (("2"
                                (rewrite top_releases_ct_fill)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand rreduce_n obj)
              (("2" (typepred "grS")
                (("2" (assert)
                  (("2" (inst hrec "reduce(D)(grS)")
                    (("1" (inst hrec D gS)
                      (("1" (split hrec)
                        (("1" (rewrite top_releases_reduce)
                          (("1" (assert) nil nil)) nil)
                         ("2" (use reduce_ndr) nil nil)
                         ("3" (use reduce_arm) (("3" (assert) nil nil))
                          nil)
                         ("4" (use reduce_arm) (("4" (assert) nil nil))
                          nil)
                         ("5" (delete obj)
                          (("5" (rewrite top_release_reduce)
                            (("5"
                              (with-labels
                               (case
                                "NOT value?(to_topstate(grS)`redex)")
                               ((atom2)))
                              (("1"
                                (name-replace
                                 rS
                                 "make_redex(to_topstate(grS))")
                                (("1"
                                  (expand state_matches?)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (name
                                         "nS"
                                         "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
                                        (("1"
                                          (case
                                           "state_matches(nS, rS)(translate)")
                                          (("1"
                                            (case
                                             "state_matches(nS, releaseReduce(D)(rS))(translate)")
                                            (("1"
                                              (case
                                               "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                                              (("1"
                                                (case-replace
                                                 "to_topstate(gS) = to_topstate(nS)")
                                                (("1"
                                                  (delete hrec)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (expand nS)
                                                      (("1"
                                                        (case-replace
                                                         "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -2
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (expand
                                                               state_matches)
                                                              (("2"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((trr
                                                                   unm
                                                                   stam
                                                                   stom)))
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (case-replace
                                                                     "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                                                    (("1"
                                                                      (expand
                                                                       rS)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (typepred
                                                                           "buildRedex(to_topstate(grS)`redex)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               to_topstate)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         unmark_fill)
                                                                        (("2"
                                                                          (rewrite
                                                                           translate_fill)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (delete hrec)
                                                (("2"
                                                  (use
                                                   to_topstate_match)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete hrec)
                                              (("2"
                                                (use
                                                 releaseReduce_match)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred rS)
                                                    (("2"
                                                      (case
                                                       "releaseRedex?(rS`redex)")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         top_releases_build_redex)
                                                        (("2"
                                                          (expand rS)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "to_topstate(grS)`redex")
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand rS)
                                                    (("3"
                                                      (lemma
                                                       make_redex_ndr)
                                                      (("3"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("3"
                                                          (hide-all-but
                                                           (1
                                                            ndr
                                                            atom2))
                                                          (("3"
                                                            (lemma
                                                             to_topstate_dangling)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               grS)
                                                              (("3"
                                                                (lemma
                                                                 make_redex_ndr)
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (case
                                                     "allReleaseMarked?(to_topstate(grS)`redex)")
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (rewrite
                                                         arm_fill)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (delete hrec)
                                            (("2"
                                              (expand state_matches)
                                              (("2"
                                                (with-labels
                                                 (flatten)
                                                 ((trr unm stam stom)))
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand nS)
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand nS)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand nS)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (expand nS)
                                                    (("4"
                                                      (expand
                                                       to_topstate)
                                                      (("4"
                                                        (case-replace
                                                         "union(cvars(fill(grS`context, grS`redex)),
                                                                        bumpn(cvars(hole),
                                                                              popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                                                                        bumpn(cvars(rS`context), popDepth(rS`redex)))")
                                                        (("1"
                                                          (expand rS)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (apply-extensionality)
                                                            (("2"
                                                              (delete
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 union)
                                                                (("2"
                                                                  (expand
                                                                   member)
                                                                  (("2"
                                                                    (expand
                                                                     rS)
                                                                    (("2"
                                                                      (expand
                                                                       make_redex)
                                                                      (("2"
                                                                        (typepred
                                                                         "buildRedex(to_topstate(grS)`redex)")
                                                                        (("2"
                                                                          (expand
                                                                           to_topstate)
                                                                          (("2"
                                                                            (name-replace
                                                                             A
                                                                             "fill(grS`context, grS`redex)")
                                                                            (("2"
                                                                              (name-replace
                                                                               redex
                                                                               "buildRedex(A)`2")
                                                                              (("2"
                                                                                (name-replace
                                                                                 ctx
                                                                                 "buildRedex(A)`1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   RL)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     cvars_fill)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (expand
                                                     store_matches)
                                                    (("5"
                                                      (expand nS)
                                                      (("5"
                                                        (expand
                                                         to_topstate)
                                                        (("5"
                                                          (expand rS)
                                                          (("5"
                                                            (expand
                                                             make_redex)
                                                            (("5"
                                                              (expand
                                                               to_topstate)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (inst?
                                                                   stom)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("1"
                                                                            (typepred
                                                                             j)
                                                                            (("1"
                                                                              (expand
                                                                               rS)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             j)
                                                                            (("2"
                                                                              (expand
                                                                               rS)
                                                                              (("2"
                                                                                (expand
                                                                                 make_redex)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     r)
                                                                    (("2"
                                                                      (expand
                                                                       rS)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "rS`redex")
                                          (("2"
                                            (case-replace
                                             "gS`stack`length = rS`stack`length")
                                            (("1"
                                              (rewrite
                                               translate_popDepth)
                                              (("1"
                                                (rewrite
                                                 unmark_popDepth)
                                                (("1"
                                                  (rewrite
                                                   unmark_popDepth_ctx)
                                                  (("1"
                                                    (rewrite
                                                     translate_vars)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                                                          (("1"
                                                            (case-replace
                                                             "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                                            (("1"
                                                              (delete
                                                               hrec)
                                                              (("1"
                                                                (expand
                                                                 state_matches)
                                                                (("1"
                                                                  (with-labels
                                                                   (flatten)
                                                                   ((err
                                                                     trr
                                                                     unm
                                                                     stam
                                                                     stom)))
                                                                  (("1"
                                                                    (replace
                                                                     trr)
                                                                    (("1"
                                                                      (typepred
                                                                       "to_topstate(gS)`redex")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         i)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               rS)
                                                              (("2"
                                                                (expand
                                                                 make_redex)
                                                                (("2"
                                                                  (typepred
                                                                   "buildRedex(to_topstate(grS)`redex)")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             unmark_fill)
                                                            (("2"
                                                              (rewrite
                                                               translate_fill)
                                                              (("2"
                                                                (rewrite
                                                                 refs_fill)
                                                                (("2"
                                                                  (rewrite
                                                                   contextPurefill)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         unmark_vars)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "rS`redex"
                                                             i)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               i)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skeep)
                                                        (("3"
                                                          (lemma
                                                           unmark_vars_ctx)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "rS`context"
                                                             i)
                                                            (("3"
                                                              (inst
                                                               -6
                                                               i)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 stm))
                                              (("2"
                                                (expand rS)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (delete hrec)
                                  (("2"
                                    (case
                                     "top_releases_ct(to_topstate(grS)`redex) = 0")
                                    (("1"
                                      (expand to_topstate)
                                      (("1"
                                        (rewrite top_releases_ct_fill)
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 atom2))
                                      (("2"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("2"
                                          (generalize A A IExpression)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (delete obj)
                          (("6" (rewrite top_releases_reduce)
                            (("6" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete obj)
                      (("2" (rewrite top_release_reduce)
                        (("2"
                          (name-replace "rS"
                           "make_redex(to_topstate(grS))")
                          (("2" (case "rS`error")
                            (("1" (hide-all-but (1 -1))
                              (("1"
                                (expand rS)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 -1))
                              (("2"
                                (case-replace
                                 "releaseReduce(D)(rS)`error = rS`error")
                                (("2"
                                  (delete -1)
                                  (("2"
                                    (expand releaseReduce)
                                    (("2"
                                      (lift-if)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (bisimulation_lemma-9 "" 3706301033
   ("" (measure-induct+ "top_releases_ct(grS`redex)" ("grS"))
    (("" (name-replace grS "x!1")
      (("" (with-labels (skeep) ((ndr arm armc stm obj)))
        (("" (label hrec -1)
          (("" (case-replace "top_releases_ct(grS`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand rreduce_n)
                (("1" (expand rreduce_n)
                  (("1" (typepred grS)
                    (("1" (assert)
                      (("1"
                        (with-labels
                         (case "NOT value?(to_topstate(gS)`redex)")
                         ((atom1)))
                        (("1"
                          (with-labels
                           (case "NOT value?(to_topstate(grS)`redex)")
                           ((atom2)))
                          (("1" (expand reduce)
                            (("1"
                              (name-replace rS
                               "make_redex(to_topstate(grS))")
                              (("1"
                                (name-replace
                                 eS
                                 "make_redex_e(to_topstate(gS))")
                                (("1"
                                  (with-labels
                                   (case "state_matches?(eS, rS)")
                                   ((stm2)))
                                  (("1"
                                    (with-labels (copy stm2) ((stm3)))
                                    (("1"
                                      (expand state_matches? stm2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand state_matches stm2)
                                          (("1"
                                            (with-labels
                                             (flatten)
                                             ((err trr unm stam stom)))
                                            (("1"
                                              (with-labels
                                               (case
                                                "noDanglingRefs?(rS)")
                                               ((ndr2)))
                                              (("1"
                                                (with-labels
                                                 (case
                                                  "allReleaseMarked?(rS`redex) AND armc?(rS`context)")
                                                 ((arm2)))
                                                (("1"
                                                  (case
                                                   "variable?(rS`redex)")
                                                  (("1"
                                                    (case
                                                     "variable?(eS`redex)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         variableReduce_match)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       variable_match)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "pureLetRedex?(rS`redex)")
                                                    (("1"
                                                      (case
                                                       "pureLetRedex?(eS`redex)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "NOT variable?(eS`redex)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (use
                                                               letReduce_match)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand*
                                                             pureLetRedex?
                                                             letRedex?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (delete obj)
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (apply-eta
                                                             "rS`redex"
                                                             "(letexpr?)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               +
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (expand
                                                                 unmark
                                                                 +)
                                                                (("1"
                                                                  (expand
                                                                   translate_refs
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     pureLetRedex?)
                                                                    (("1"
                                                                      (expand
                                                                       letRedex?)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (use
                                                                           translate_refs_value)
                                                                          (("1"
                                                                            (use
                                                                             unmark_value)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           translate_refs_pure)
                                                                          (("2"
                                                                            (rewrite
                                                                             unmark_pure)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "applyRedex?(rS`redex)")
                                                      (("1"
                                                        (case
                                                         "applyRedex?(eS`redex)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             applyReduce_match)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               D
                                                               eS
                                                               rS)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand*
                                                                     pureLetRedex?
                                                                     letRedex?
                                                                     applyRedex?)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 eS)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (replace
                                                             trr
                                                             +
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (apply-eta
                                                               "rS`redex"
                                                               "(application?)")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "pureIftRedex?(rS`redex)")
                                                        (("1"
                                                          (case
                                                           "pureIftRedex?(eS`redex)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     ifReduce_match)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand*
                                                                 pureLetRedex?
                                                                 letRedex?
                                                                 applyRedex?
                                                                 pureIftRedex?)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (delete
                                                             obj)
                                                            (("2"
                                                              (replace
                                                               trr
                                                               +
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (apply-eta
                                                                 "rS`redex"
                                                                 "(ift?)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   +
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (expand
                                                                     unmark
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       translate_refs
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         pureIftRedex?)
                                                                        (("1"
                                                                          (expand
                                                                           iftRedex?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("1"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("2"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "updateRedex?(rS`redex)")
                                                          (("1"
                                                            (case
                                                             "updateRedex?(eS`redex)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       updateReduce_match)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("4"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (replace
                                                                     trr
                                                                     +
                                                                     :dir
                                                                     RL)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(update?)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (delete
                                                               obj)
                                                              (("2"
                                                                (replace
                                                                 trr
                                                                 +
                                                                 :dir
                                                                 RL)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(update?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "lookupRedex?(rS`redex)")
                                                            (("1"
                                                              (case
                                                               "lookupRedex?(eS`redex)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         lookupReduce_match)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (replace
                                                                       trr
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(lookup?)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(lookup?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "newintRedex?(rS`redex)")
                                                              (("1"
                                                                (case
                                                                 "newintRedex?(eS`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex)")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           newintReduce_match)
                                                                          (("1"
                                                                            (prop)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(newint?)")
                                                                        (("1"
                                                                          (replace
                                                                           trr
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (apply-eta
                                                                     "rS`redex"
                                                                     "(newint?)")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "newrefRedex?(rS`redex)")
                                                                (("1"
                                                                  (case
                                                                   "newrefRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex)")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             newrefReduce_match)
                                                                            (("1"
                                                                              (prop)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (replace
                                                                           trr
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("2"
                                                                            (apply-eta
                                                                             "rS`redex"
                                                                             "(newref?)")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(newref?)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "popRedex?(rS`redex)")
                                                                  (("1"
                                                                    (case
                                                                     "popRedex?(eS`redex)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex) AND NOT newrefRedex?(eS`redex)")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               popReduce_match)
                                                                              (("1"
                                                                                (prop)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (replace
                                                                             trr
                                                                             :dir
                                                                             RL)
                                                                            (("2"
                                                                              (apply-eta
                                                                               "rS`redex"
                                                                               "(pop?)")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (replace
                                                                         trr
                                                                         +
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (apply-eta
                                                                           "rS`redex"
                                                                           "(pop?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (expand
                                                                               unmark)
                                                                              (("1"
                                                                                (expand
                                                                                 translate_refs)
                                                                                (("1"
                                                                                  (expand
                                                                                   popRedex?)
                                                                                  (("1"
                                                                                    (use
                                                                                     translate_refs_value)
                                                                                    (("1"
                                                                                      (use
                                                                                       unmark_value)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "pureReleaseRedex?(rS`redex)")
                                                                    (("1"
                                                                      (delete
                                                                       obj)
                                                                      (("1"
                                                                        (expand
                                                                         rS)
                                                                        (("1"
                                                                          (expand
                                                                           make_redex)
                                                                          (("1"
                                                                            (lemma
                                                                             top_releases_build_redex)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "to_topstate(grS)`redex")
                                                                              (("1"
                                                                                (expand
                                                                                 to_topstate)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   top_releases_ct_fill)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "pureRedex?(rS`redex)")
                                                                      (("1"
                                                                        (expand
                                                                         pureRedex?)
                                                                        (("1"
                                                                          (prop)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         rS)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (delete obj)
                                                  (("2"
                                                    (expand rS)
                                                    (("2"
                                                      (case
                                                       "allReleaseMarked?(to_topstate(grS)`redex)")
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         to_topstate)
                                                        (("2"
                                                          (rewrite
                                                           arm_fill)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (delete obj)
                                                (("2"
                                                  (expand rS)
                                                  (("2"
                                                    (lemma
                                                     make_redex_ndr)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete obj)
                                    (("2"
                                      (expand eS)
                                      (("2"
                                        (expand rS)
                                        (("2"
                                          (use make_redex_match)
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil)
                                             ("4"
                                              (expand make_redex)
                                              (("4"
                                                (lemma
                                                 top_releases_build_redex)
                                                (("4"
                                                  (inst
                                                   -1
                                                   "to_topstate(grS)`redex")
                                                  (("4"
                                                    (expand
                                                     to_topstate)
                                                    (("4"
                                                      (rewrite
                                                       top_releases_ct_fill)
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (delete obj)
                            (("2" (expand state_matches?)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand state_matches)
                                  (("2"
                                    (with-labels
                                     (flatten)
                                     ((err trr unm stam stom)))
                                    (("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (use translate_refs_value)
                                        (("2"
                                          (use unmark_value)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "value?(to_topstate(grS)`redex)")
                          (("1" (expand reduce)
                            (("1" (assert) nil nil)) nil)
                           ("2"
                            (case "top_releases_ct(to_topstate(grS)`redex) = 0")
                            (("1" (delete obj)
                              (("1"
                                (expand state_matches?)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand state_matches)
                                    (("1"
                                      (with-labels
                                       (flatten)
                                       ((err trr unm stam stom)))
                                      (("1"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("1"
                                          (name-replace
                                           B
                                           "to_topstate(gS)`redex")
                                          (("1"
                                            (hide-all-but
                                             (1 -1 atom1 trr))
                                            (("1"
                                              (generalize
                                               B
                                               B
                                               IExpression)
                                              (("1"
                                                (generalize
                                                 A
                                                 A
                                                 IExpression)
                                                (("1"
                                                  (induct-and-simplify
                                                   A)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand to_topstate)
                              (("2"
                                (rewrite top_releases_ct_fill)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand rreduce_n obj)
              (("2" (typepred "grS")
                (("2" (assert)
                  (("2" (inst hrec "reduce(D)(grS)")
                    (("1" (inst hrec D gS)
                      (("1" (split hrec)
                        (("1" (rewrite top_releases_reduce)
                          (("1" (assert) nil nil)) nil)
                         ("2" (use reduce_ndr) nil nil)
                         ("3" (use reduce_arm) (("3" (assert) nil nil))
                          nil)
                         ("4" (use reduce_arm) (("4" (assert) nil nil))
                          nil)
                         ("5" (delete obj)
                          (("5" (rewrite top_release_reduce)
                            (("5"
                              (with-labels
                               (case
                                "NOT value?(to_topstate(grS)`redex)")
                               ((atom2)))
                              (("1"
                                (name-replace
                                 rS
                                 "make_redex(to_topstate(grS))")
                                (("1"
                                  (expand state_matches?)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (name
                                         "nS"
                                         "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
                                        (("1"
                                          (case
                                           "state_matches(nS, rS)(translate)")
                                          (("1"
                                            (case
                                             "state_matches(nS, releaseReduce(D)(rS))(translate)")
                                            (("1"
                                              (case
                                               "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                                              (("1"
                                                (case-replace
                                                 "to_topstate(gS) = to_topstate(nS)")
                                                (("1"
                                                  (delete hrec)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (expand nS)
                                                      (("1"
                                                        (case-replace
                                                         "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -2
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (expand
                                                               state_matches)
                                                              (("2"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((trr
                                                                   unm
                                                                   stam
                                                                   stom)))
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (case-replace
                                                                     "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                                                    (("1"
                                                                      (expand
                                                                       rS)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (typepred
                                                                           "buildRedex(to_topstate(grS)`redex)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               to_topstate)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         unmark_fill)
                                                                        (("2"
                                                                          (rewrite
                                                                           translate_fill)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (delete hrec)
                                                (("2"
                                                  (use
                                                   to_topstate_match)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete hrec)
                                              (("2"
                                                (use
                                                 releaseReduce_match)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred rS)
                                                    (("2"
                                                      (case
                                                       "releaseRedex?(rS`redex)")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         top_releases_build_redex)
                                                        (("2"
                                                          (expand rS)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "to_topstate(grS)`redex")
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand rS)
                                                    (("3"
                                                      (lemma
                                                       make_redex_ndr)
                                                      (("3"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("3"
                                                          (hide-all-but
                                                           (1
                                                            ndr
                                                            atom2))
                                                          (("3"
                                                            (lemma
                                                             to_topstate_dangling)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               grS)
                                                              (("3"
                                                                (lemma
                                                                 make_redex_ndr)
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (case
                                                     "allReleaseMarked?(to_topstate(grS)`redex)")
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (rewrite
                                                         arm_fill)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (delete hrec)
                                            (("2"
                                              (expand state_matches)
                                              (("2"
                                                (with-labels
                                                 (flatten)
                                                 ((trr unm stam stom)))
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand nS)
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand nS)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand nS)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (expand nS)
                                                    (("4"
                                                      (expand
                                                       to_topstate)
                                                      (("4"
                                                        (case-replace
                                                         "union(cvars(fill(grS`context, grS`redex)),
                                                                        bumpn(cvars(hole),
                                                                              popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                                                                        bumpn(cvars(rS`context), popDepth(rS`redex)))")
                                                        (("1"
                                                          (expand rS)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (apply-extensionality)
                                                            (("2"
                                                              (delete
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 union)
                                                                (("2"
                                                                  (expand
                                                                   member)
                                                                  (("2"
                                                                    (expand
                                                                     rS)
                                                                    (("2"
                                                                      (expand
                                                                       make_redex)
                                                                      (("2"
                                                                        (typepred
                                                                         "buildRedex(to_topstate(grS)`redex)")
                                                                        (("2"
                                                                          (expand
                                                                           to_topstate)
                                                                          (("2"
                                                                            (name-replace
                                                                             A
                                                                             "fill(grS`context, grS`redex)")
                                                                            (("2"
                                                                              (name-replace
                                                                               redex
                                                                               "buildRedex(A)`2")
                                                                              (("2"
                                                                                (name-replace
                                                                                 ctx
                                                                                 "buildRedex(A)`1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   RL)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     cvars_fill)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (expand
                                                     store_matches)
                                                    (("5"
                                                      (expand nS)
                                                      (("5"
                                                        (expand
                                                         to_topstate)
                                                        (("5"
                                                          (expand rS)
                                                          (("5"
                                                            (expand
                                                             make_redex)
                                                            (("5"
                                                              (expand
                                                               to_topstate)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (inst?
                                                                   stom)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (typepred
                                                                             j)
                                                                            (("3"
                                                                              (expand
                                                                               rS)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     r)
                                                                    (("2"
                                                                      (expand
                                                                       rS)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "rS`redex")
                                          (("2"
                                            (case-replace
                                             "gS`stack`length = rS`stack`length")
                                            (("1"
                                              (rewrite
                                               translate_popDepth)
                                              (("1"
                                                (rewrite
                                                 unmark_popDepth)
                                                (("1"
                                                  (rewrite
                                                   unmark_popDepth_ctx)
                                                  (("1"
                                                    (rewrite
                                                     translate_vars)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                                                          (("1"
                                                            (case-replace
                                                             "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                                            (("1"
                                                              (delete
                                                               hrec)
                                                              (("1"
                                                                (expand
                                                                 state_matches)
                                                                (("1"
                                                                  (with-labels
                                                                   (flatten)
                                                                   ((err
                                                                     trr
                                                                     unm
                                                                     stam
                                                                     stom)))
                                                                  (("1"
                                                                    (replace
                                                                     trr)
                                                                    (("1"
                                                                      (typepred
                                                                       "to_topstate(gS)`redex")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         i)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               rS)
                                                              (("2"
                                                                (expand
                                                                 make_redex)
                                                                (("2"
                                                                  (typepred
                                                                   "buildRedex(to_topstate(grS)`redex)")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             unmark_fill)
                                                            (("2"
                                                              (rewrite
                                                               translate_fill)
                                                              (("2"
                                                                (rewrite
                                                                 refs_fill)
                                                                (("2"
                                                                  (rewrite
                                                                   contextPurefill)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         unmark_vars)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "rS`redex"
                                                             i)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               i)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skeep)
                                                        (("3"
                                                          (lemma
                                                           unmark_vars_ctx)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "rS`context"
                                                             i)
                                                            (("3"
                                                              (inst
                                                               -6
                                                               i)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 stm))
                                              (("2"
                                                (expand rS)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (delete hrec)
                                  (("2"
                                    (case
                                     "top_releases_ct(to_topstate(grS)`redex) = 0")
                                    (("1"
                                      (expand to_topstate)
                                      (("1"
                                        (rewrite top_releases_ct_fill)
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 atom2))
                                      (("2"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("2"
                                          (generalize A A IExpression)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (delete obj)
                          (("6" (rewrite top_releases_reduce)
                            (("6" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete obj)
                      (("2" (rewrite top_release_reduce)
                        (("2"
                          (name-replace "rS"
                           "make_redex(to_topstate(grS))")
                          (("2" (case "rS`error")
                            (("1" (hide-all-but (1 -1))
                              (("1"
                                (expand rS)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 -1))
                              (("2"
                                (case-replace
                                 "releaseReduce(D)(rS)`error = rS`error")
                                (("2"
                                  (delete -1)
                                  (("2"
                                    (expand releaseReduce)
                                    (("2"
                                      (lift-if)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pure? def-decl "bool" IL nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (estate type-eq-decl nil reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (topstate type-eq-decl nil reduction nil)
    (to_topstate const-decl "topstate" reduction nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (Definition type-eq-decl nil reduction nil)
    (Defs type-eq-decl nil reduction nil)
    (reduce const-decl "estate" reduction nil)
    (rreduce_n def-decl "rstate" reduction_props nil)
    (reduce const-decl "rstate" rreduction nil)
    (make_redex_e const-decl "{eS | pureRedex?(eS`redex)}" reduction
     nil)
    (make_redex_match formula-decl nil reduction_props nil)
    (make_redex_ndr judgement-tcc nil rreduction nil)
    (to_topstate_dangling judgement-tcc nil rreduction nil)
    (grS skolem-const-decl "goodrstate" reduction_props nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (IExpression_letexpr_eta formula-decl nil IExpression_adt nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (unmark_value judgement-tcc nil preprocess nil)
    (letrhs adt-accessor-decl "[(letexpr?) -> IExpression]"
     IExpression_adt nil)
    (translate_refs_value judgement-tcc nil reduction_props nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (body adt-accessor-decl "[(letexpr?) -> IExpression]"
          IExpression_adt nil)
    (translate_refs_pure recursive-judgement-axiom nil reduction_props
     nil)
    (letRedex? const-decl "bool" IL nil)
    (letReduce_match formula-decl nil reduction_props nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (IExpression_ift_eta formula-decl nil IExpression_adt nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (thenexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (elseexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (iftRedex? const-decl "bool" IL nil)
    (ifReduce_match formula-decl nil reduction_props nil)
    (lookupRedex? const-decl "bool" IL nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (IExpression_lookup_eta formula-decl nil IExpression_adt nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (lookupReduce_match formula-decl nil reduction_props nil)
    (newrefRedex? const-decl "bool" IL nil)
    (IExpression_newref_eta formula-decl nil IExpression_adt nil)
    (newref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (newrefReduce_match formula-decl nil reduction_props nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (top_releases_build_redex formula-decl nil reduction_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (releaseRedex? const-decl "bool" IL nil)
    (top_releases_ct_fill formula-decl nil reduction_props nil)
    (popReduce_match formula-decl nil reduction_props nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IExpression_pop_eta formula-decl nil IExpression_adt nil)
    (pbody adt-accessor-decl "[(pop?) -> IExpression]" IExpression_adt
     nil)
    (unmark def-decl "IContext" preprocess nil)
    (popRedex? const-decl "bool" IL nil)
    (newintReduce_match formula-decl nil reduction_props nil)
    (IExpression_newint_eta formula-decl nil IExpression_adt nil)
    (newint? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (newintRedex? const-decl "bool" IL nil)
    (updateReduce_match formula-decl nil reduction_props nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IExpression_update_eta formula-decl nil IExpression_adt nil)
    (updateRedex? const-decl "bool" IL nil)
    (applyReduce_match formula-decl nil reduction_props nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (IExpression_application_eta formula-decl nil IExpression_adt nil)
    (applyRedex? const-decl "bool" IL nil)
    (variableReduce_match formula-decl nil reduction_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (singleton const-decl "(singleton?)" sets nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (eS skolem-const-decl "{eS | pureRedex?(eS`redex)}" reduction_props
     nil)
    (rS skolem-const-decl "{rS | pureRedex?(rS`redex)}" reduction_props
     nil)
    (variable_match formula-decl nil reduction_props nil)
    (variable? adt-recognizer-decl "[IExpression -> boolean]"
               IExpression_adt nil)
    (arm_fill formula-decl nil preprocess nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (fill def-decl "IExpression" IL nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (pureRedex? const-decl "bool" IL nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (reduce_ndr application-judgement "(noDanglingRefs?)" rreduction
     nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (D skolem-const-decl "Defs" reduction_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (top_releases_reduce formula-decl nil reduction_props nil)
    (reduce_ndr judgement-tcc nil rreduction nil)
    (reduce_arm judgement-tcc nil reduction_props nil)
    (top_release_reduce formula-decl nil reduction_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (translate_refs_value application-judgement "(value?)"
     reduction_props nil)
    (j skolem-const-decl "below(rS`store(r)`length)" reduction_props
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (r skolem-const-decl "(rS`domain)" reduction_props nil)
    (union const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (cvars_fill formula-decl nil preprocess nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (releaseReduce const-decl "rstate" rreduction nil)
    (to_topstate_match formula-decl nil reduction_props nil)
    (rS skolem-const-decl "{rS | pureRedex?(rS`redex)}" reduction_props
     nil)
    (unmark_fill formula-decl nil preprocess nil)
    (translate_fill formula-decl nil reduction_props nil)
    (nS skolem-const-decl "estate" reduction_props nil)
    (releaseReduce_match formula-decl nil reduction_props nil)
    (unmark_popDepth formula-decl nil preprocess nil)
    (translate_vars formula-decl nil reduction_props nil)
    (unmark_vars_ctx formula-decl nil preprocess nil)
    (unmark_vars formula-decl nil preprocess nil)
    (refs_fill formula-decl nil IL nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (contextPurefill formula-decl nil IL nil)
    (unmark_popDepth_ctx formula-decl nil preprocess nil)
    (translate_popDepth formula-decl nil reduction_props nil)
    (rS skolem-const-decl "{rS | pureRedex?(rS`redex)}" reduction_props
     nil)
    (decref_preserves_jdg application-judgement "{rS2 |
   rS2`redex = rS`redex AND
    rS2`stack = rS`stack AND
     rS2`context = rS`context AND rS2`error = rS`error}"
     reduction_props nil)
    (decref1_preserves_error formula-decl nil reduction_props nil)
    (decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil))
   nil)
  (bisimulation_lemma-8 "" 3706300996
   ("" (measure-induct+ "top_releases_ct(grS`redex)" ("grS"))
    (("" (name-replace grS "x!1")
      (("" (with-labels (skeep) ((ndr arm armc stm obj)))
        (("" (label hrec -1)
          (("" (case-replace "top_releases_ct(grS`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand rreduce_n)
                (("1" (expand rreduce_n)
                  (("1" (typepred grS)
                    (("1" (assert)
                      (("1"
                        (with-labels
                         (case "NOT value?(to_topstate(gS)`redex)")
                         ((atom1)))
                        (("1"
                          (with-labels
                           (case "NOT value?(to_topstate(grS)`redex)")
                           ((atom2)))
                          (("1" (expand reduce)
                            (("1"
                              (name-replace rS
                               "make_redex(to_topstate(grS))")
                              (("1"
                                (name-replace
                                 eS
                                 "make_redex_e(to_topstate(gS))")
                                (("1"
                                  (with-labels
                                   (case "state_matches?(eS, rS)")
                                   ((stm2)))
                                  (("1"
                                    (with-labels (copy stm2) ((stm3)))
                                    (("1"
                                      (expand state_matches? stm2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand state_matches stm2)
                                          (("1"
                                            (with-labels
                                             (flatten)
                                             ((err trr unm stam stom)))
                                            (("1"
                                              (with-labels
                                               (case
                                                "noDanglingRefs?(rS)")
                                               ((ndr2)))
                                              (("1"
                                                (with-labels
                                                 (case
                                                  "allReleaseMarked?(rS`redex) AND armc?(rS`context)")
                                                 ((arm2)))
                                                (("1"
                                                  (case
                                                   "variable?(rS`redex)")
                                                  (("1" (postpone) nil)
                                                   ("2"
                                                    (case
                                                     "pureLetRedex?(rS`redex)")
                                                    (("1"
                                                      (case
                                                       "pureLetRedex?(eS`redex)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "NOT variable?(eS`redex)"
                                                           ("1"
                                                            (assert)
                                                            (use
                                                             letReduce_match)
                                                            (grind))
                                                           ("2"
                                                            (postpone)))
                                                          nil)))
                                                       ("2"
                                                        (delete obj)
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (apply-eta
                                                             "rS`redex"
                                                             "(letexpr?)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               +
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (expand
                                                                 unmark
                                                                 +)
                                                                (("1"
                                                                  (expand
                                                                   translate_refs
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     pureLetRedex?)
                                                                    (("1"
                                                                      (expand
                                                                       letRedex?)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (use
                                                                           translate_refs_value)
                                                                          (("1"
                                                                            (use
                                                                             unmark_value)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))
                                                                         ("2"
                                                                          (use
                                                                           translate_refs_pure)
                                                                          (("2"
                                                                            (rewrite
                                                                             unmark_pure)
                                                                            nil)))))))))))))))
                                                             ("2"
                                                              (grind)
                                                              nil)))))))))
                                                     ("2"
                                                      (case
                                                       "applyRedex?(rS`redex)")
                                                      (("1"
                                                        (case
                                                         "applyRedex?(eS`redex)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             applyReduce_match)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               D
                                                               eS
                                                               rS)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)
                                                                   ("2"
                                                                    (expand*
                                                                     pureLetRedex?
                                                                     letRedex?
                                                                     applyRedex?)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))
                                                                 ("2"
                                                                  (propax)
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil)))
                                                               ("2"
                                                                (expand
                                                                 eS)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (replace
                                                             trr
                                                             +
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (apply-eta
                                                               "rS`redex"
                                                               "(application?)")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil)))))))))
                                                       ("2"
                                                        (case
                                                         "pureIftRedex?(rS`redex)")
                                                        (("1"
                                                          (case
                                                           "pureIftRedex?(eS`redex)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     ifReduce_match)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil)
                                                                       ("3"
                                                                        (propax)
                                                                        nil)))))))))
                                                               ("2"
                                                                (expand*
                                                                 pureLetRedex?
                                                                 letRedex?
                                                                 applyRedex?
                                                                 pureIftRedex?)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))
                                                           ("2"
                                                            (delete
                                                             obj)
                                                            (("2"
                                                              (replace
                                                               trr
                                                               +
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (apply-eta
                                                                 "rS`redex"
                                                                 "(ift?)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   +
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (expand
                                                                     unmark
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       translate_refs
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         pureIftRedex?)
                                                                        (("1"
                                                                          (expand
                                                                           iftRedex?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("1"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil)))
                                                                             ("2"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("2"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil)))))))))))))))
                                                                 ("2"
                                                                  (grind)
                                                                  nil)))))))))
                                                         ("2"
                                                          (case
                                                           "updateRedex?(rS`redex)")
                                                          (("1"
                                                            (case
                                                             "updateRedex?(eS`redex)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       updateReduce_match)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil)
                                                                         ("3"
                                                                          (propax)
                                                                          nil)
                                                                         ("4"
                                                                          (propax)
                                                                          nil)))))))))
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (replace
                                                                     trr
                                                                     +
                                                                     :dir
                                                                     RL)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(update?)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))))))
                                                             ("2"
                                                              (delete
                                                               obj)
                                                              (("2"
                                                                (replace
                                                                 trr
                                                                 +
                                                                 :dir
                                                                 RL)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(update?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil)))))))))
                                                           ("2"
                                                            (case
                                                             "lookupRedex?(rS`redex)")
                                                            (("1"
                                                              (case
                                                               "lookupRedex?(eS`redex)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         lookupReduce_match)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))))))
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (replace
                                                                       trr
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(lookup?)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))))))
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(lookup?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil)))))))
                                                             ("2"
                                                              (case
                                                               "newintRedex?(rS`redex)")
                                                              (("1"
                                                                (case
                                                                 "newintRedex?(eS`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex)")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           newintReduce_match)
                                                                          (("1"
                                                                            (prop)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(newint?)")
                                                                        (("1"
                                                                          (replace
                                                                           trr
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))))
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (apply-eta
                                                                     "rS`redex"
                                                                     "(newint?)")
                                                                    (("1"
                                                                      (grind)
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil)))))))
                                                               ("2"
                                                                (case
                                                                 "newrefRedex?(rS`redex)")
                                                                (("1"
                                                                  (case
                                                                   "newrefRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex)")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             newrefReduce_match)
                                                                            (("1"
                                                                              (prop)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (replace
                                                                           trr
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("2"
                                                                            (apply-eta
                                                                             "rS`redex"
                                                                             "(newref?)")
                                                                            (("1"
                                                                              (grind)
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil)))))))))))
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(newref?)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (case
                                                                   "popRedex?(rS`redex)")
                                                                  (("1"
                                                                    (case
                                                                     "popRedex?(eS`redex)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex) AND NOT newrefRedex?(eS`redex)")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               popReduce_match)
                                                                              (("1"
                                                                                (prop)
                                                                                nil)))))))
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (replace
                                                                             trr
                                                                             :dir
                                                                             RL)
                                                                            (("2"
                                                                              (apply-eta
                                                                               "rS`redex"
                                                                               "(pop?)")
                                                                              (("1"
                                                                                (grind)
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (replace
                                                                         trr
                                                                         +
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (apply-eta
                                                                           "rS`redex"
                                                                           "(pop?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (expand
                                                                               unmark)
                                                                              (("1"
                                                                                (expand
                                                                                 translate_refs)
                                                                                (("1"
                                                                                  (expand
                                                                                   popRedex?)
                                                                                  (("1"
                                                                                    (use
                                                                                     translate_refs_value)
                                                                                    (("1"
                                                                                      (use
                                                                                       unmark_value)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil)))))))))))))
                                                                           ("2"
                                                                            (grind)
                                                                            nil)))))))))
                                                                   ("2"
                                                                    (case
                                                                     "pureReleaseRedex?(rS`redex)")
                                                                    (("1"
                                                                      (delete
                                                                       obj)
                                                                      (("1"
                                                                        (expand
                                                                         rS)
                                                                        (("1"
                                                                          (expand
                                                                           make_redex)
                                                                          (("1"
                                                                            (lemma
                                                                             top_releases_build_redex)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "to_topstate(grS)`redex")
                                                                              (("1"
                                                                                (expand
                                                                                 to_topstate)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   top_releases_ct_fill)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (case
                                                                       "pureRedex?(rS`redex)")
                                                                      (("1"
                                                                        (expand
                                                                         pureRedex?)
                                                                        (("1"
                                                                          (prop)
                                                                          nil)))
                                                                       ("2"
                                                                        (typepred
                                                                         rS)
                                                                        (("2"
                                                                          (propax)
                                                                          nil)))))))))))))))))))))))))
                                                 ("2"
                                                  (delete obj)
                                                  (("2"
                                                    (expand rS)
                                                    (("2"
                                                      (case
                                                       "allReleaseMarked?(to_topstate(grS)`redex)")
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              nil)))))))
                                                       ("2"
                                                        (expand
                                                         to_topstate)
                                                        (("2"
                                                          (rewrite
                                                           arm_fill)
                                                          nil)))))))))))
                                               ("2"
                                                (delete obj)
                                                (("2"
                                                  (expand rS)
                                                  (("2"
                                                    (lemma
                                                     make_redex_ndr)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))
                                   ("2"
                                    (delete obj)
                                    (("2"
                                      (expand eS)
                                      (("2"
                                        (expand rS)
                                        (("2"
                                          (use make_redex_match)
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil)
                                             ("2" (propax) nil)
                                             ("3" (propax) nil)
                                             ("4"
                                              (expand make_redex)
                                              (("4"
                                                (lemma
                                                 top_releases_build_redex)
                                                (("4"
                                                  (inst
                                                   -1
                                                   "to_topstate(grS)`redex")
                                                  (("4"
                                                    (expand
                                                     to_topstate)
                                                    (("4"
                                                      (rewrite
                                                       top_releases_ct_fill)
                                                      (("4"
                                                        (grind)
                                                        nil)))))))))))
                                             ("5"
                                              (propax)
                                              nil)))))))))))))))))))
                           ("2" (delete obj)
                            (("2" (expand state_matches?)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand state_matches)
                                  (("2"
                                    (with-labels
                                     (flatten)
                                     ((err trr unm stam stom)))
                                    (("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (use translate_refs_value)
                                        (("2"
                                          (use unmark_value)
                                          nil)))))))))))))))))
                         ("2" (case "value?(to_topstate(grS)`redex)")
                          (("1" (expand reduce) (("1" (assert) nil)))
                           ("2"
                            (case "top_releases_ct(to_topstate(grS)`redex) = 0")
                            (("1" (delete obj)
                              (("1"
                                (expand state_matches?)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand state_matches)
                                    (("1"
                                      (with-labels
                                       (flatten)
                                       ((err trr unm stam stom)))
                                      (("1"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("1"
                                          (name-replace
                                           B
                                           "to_topstate(gS)`redex")
                                          (("1"
                                            (hide-all-but
                                             (1 -1 atom1 trr))
                                            (("1"
                                              (generalize
                                               B
                                               B
                                               IExpression)
                                              (("1"
                                                (generalize
                                                 A
                                                 A
                                                 IExpression)
                                                (("1"
                                                  (induct-and-simplify
                                                   A)
                                                  nil)))))))))))))))))))))
                             ("2" (expand to_topstate)
                              (("2"
                                (rewrite top_releases_ct_fill)
                                nil)))))))))))))))))))
             ("2" (expand rreduce_n obj)
              (("2" (typepred "grS")
                (("2" (assert)
                  (("2" (inst hrec "reduce(D)(grS)")
                    (("1" (inst hrec D gS)
                      (("1" (split hrec)
                        (("1" (rewrite top_releases_reduce)
                          (("1" (assert) nil)))
                         ("2" (use reduce_ndr) nil)
                         ("3" (use reduce_arm) (("3" (assert) nil)))
                         ("4" (use reduce_arm) (("4" (assert) nil)))
                         ("5" (delete obj)
                          (("5" (rewrite top_release_reduce)
                            (("5"
                              (with-labels
                               (case
                                "NOT value?(to_topstate(grS)`redex)")
                               ((atom2)))
                              (("1"
                                (name-replace
                                 rS
                                 "make_redex(to_topstate(grS))")
                                (("1"
                                  (expand state_matches?)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (name
                                         "nS"
                                         "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
                                        (("1"
                                          (case
                                           "state_matches(nS, rS)(translate)")
                                          (("1"
                                            (case
                                             "state_matches(nS, releaseReduce(D)(rS))(translate)")
                                            (("1"
                                              (case
                                               "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                                              (("1"
                                                (case-replace
                                                 "to_topstate(gS) = to_topstate(nS)")
                                                (("1"
                                                  (delete hrec)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (expand nS)
                                                      (("1"
                                                        (case-replace
                                                         "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                                                        (("1"
                                                          (grind)
                                                          nil)
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -2
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (expand
                                                               state_matches)
                                                              (("2"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((trr
                                                                   unm
                                                                   stam
                                                                   stom)))
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (case-replace
                                                                     "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                                                    (("1"
                                                                      (expand
                                                                       rS)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (typepred
                                                                           "buildRedex(to_topstate(grS)`redex)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               to_topstate)
                                                                              (("1"
                                                                                (propax)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (delete
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         unmark_fill)
                                                                        (("2"
                                                                          (rewrite
                                                                           translate_fill)
                                                                          nil)))))))))))))))))))))))))))
                                               ("2"
                                                (delete hrec)
                                                (("2"
                                                  (use
                                                   to_topstate_match)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))
                                             ("2"
                                              (delete hrec)
                                              (("2"
                                                (use
                                                 releaseReduce_match)
                                                (("2"
                                                  (split -1)
                                                  (("1" (propax) nil)
                                                   ("2"
                                                    (typepred rS)
                                                    (("2"
                                                      (case
                                                       "releaseRedex?(rS`redex)")
                                                      (("1"
                                                        (grind)
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         top_releases_build_redex)
                                                        (("2"
                                                          (expand rS)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "to_topstate(grS)`redex")
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))
                                                   ("3"
                                                    (expand rS)
                                                    (("3"
                                                      (lemma
                                                       make_redex_ndr)
                                                      (("3"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("3"
                                                          (hide-all-but
                                                           (1
                                                            ndr
                                                            atom2))
                                                          (("3"
                                                            (lemma
                                                             to_topstate_dangling)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               grS)
                                                              (("3"
                                                                (lemma
                                                                 make_redex_ndr)
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (prop)
                                                                    nil)))))))))))))))))
                                                   ("4"
                                                    (case
                                                     "allReleaseMarked?(to_topstate(grS)`redex)")
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              (("1"
                                                                (grind)
                                                                nil)))))))))))
                                                     ("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (rewrite
                                                         arm_fill)
                                                        nil)))))
                                                   ("5"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (delete hrec)
                                            (("2"
                                              (expand state_matches)
                                              (("2"
                                                (with-labels
                                                 (flatten)
                                                 ((trr unm stam stom)))
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand nS)
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (grind)
                                                        nil)))))
                                                   ("2"
                                                    (expand nS)
                                                    (("2"
                                                      (propax)
                                                      nil)))
                                                   ("3"
                                                    (expand nS)
                                                    (("3"
                                                      (propax)
                                                      nil)))
                                                   ("4"
                                                    (expand nS)
                                                    (("4"
                                                      (expand
                                                       to_topstate)
                                                      (("4"
                                                        (case-replace
                                                         "union(cvars(fill(grS`context, grS`redex)),
                                                                        bumpn(cvars(hole),
                                                                              popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                                                                        bumpn(cvars(rS`context), popDepth(rS`redex)))")
                                                        (("1"
                                                          (expand rS)
                                                          (("1"
                                                            (grind)
                                                            nil)))
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (apply-extensionality)
                                                            (("2"
                                                              (delete
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 union)
                                                                (("2"
                                                                  (expand
                                                                   member)
                                                                  (("2"
                                                                    (expand
                                                                     rS)
                                                                    (("2"
                                                                      (expand
                                                                       make_redex)
                                                                      (("2"
                                                                        (typepred
                                                                         "buildRedex(to_topstate(grS)`redex)")
                                                                        (("2"
                                                                          (expand
                                                                           to_topstate)
                                                                          (("2"
                                                                            (name-replace
                                                                             A
                                                                             "fill(grS`context, grS`redex)")
                                                                            (("2"
                                                                              (name-replace
                                                                               redex
                                                                               "buildRedex(A)`2")
                                                                              (("2"
                                                                                (name-replace
                                                                                 ctx
                                                                                 "buildRedex(A)`1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   RL)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     cvars_fill)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil)))))))))))))))))))))))))))))))))))
                                                   ("5"
                                                    (expand
                                                     store_matches)
                                                    (("5"
                                                      (expand nS)
                                                      (("5"
                                                        (expand
                                                         to_topstate)
                                                        (("5"
                                                          (expand rS)
                                                          (("5"
                                                            (expand
                                                             make_redex)
                                                            (("5"
                                                              (expand
                                                               to_topstate)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (inst?
                                                                   stom)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (typepred
                                                                             j)
                                                                            (("3"
                                                                              (expand
                                                                               rS)
                                                                              (("3"
                                                                                (grind)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (typepred
                                                                     r)
                                                                    (("2"
                                                                      (expand
                                                                       rS)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))))))))
                                         ("2"
                                          (typepred "rS`redex")
                                          (("2"
                                            (case-replace
                                             "gS`stack`length = rS`stack`length")
                                            (("1"
                                              (rewrite
                                               translate_popDepth)
                                              (("1"
                                                (rewrite
                                                 unmark_popDepth)
                                                (("1"
                                                  (rewrite
                                                   unmark_popDepth_ctx)
                                                  (("1"
                                                    (rewrite
                                                     translate_vars)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                                                          (("1"
                                                            (case-replace
                                                             "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                                            (("1"
                                                              (delete
                                                               hrec)
                                                              (("1"
                                                                (expand
                                                                 state_matches)
                                                                (("1"
                                                                  (with-labels
                                                                   (flatten)
                                                                   ((err
                                                                     trr
                                                                     unm
                                                                     stam
                                                                     stom)))
                                                                  (("1"
                                                                    (replace
                                                                     trr)
                                                                    (("1"
                                                                      (typepred
                                                                       "to_topstate(gS)`redex")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         i)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))))))))))))
                                                             ("2"
                                                              (expand
                                                               rS)
                                                              (("2"
                                                                (expand
                                                                 make_redex)
                                                                (("2"
                                                                  (typepred
                                                                   "buildRedex(to_topstate(grS)`redex)")
                                                                  (("2"
                                                                    (propax)
                                                                    nil)))))))))
                                                           ("2"
                                                            (rewrite
                                                             unmark_fill)
                                                            (("2"
                                                              (rewrite
                                                               translate_fill)
                                                              (("2"
                                                                (rewrite
                                                                 refs_fill)
                                                                (("2"
                                                                  (rewrite
                                                                   contextPurefill)
                                                                  nil)))))))))))
                                                       ("2"
                                                        (lemma
                                                         unmark_vars)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "rS`redex"
                                                             i)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               i)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))
                                                       ("3"
                                                        (skeep)
                                                        (("3"
                                                          (lemma
                                                           unmark_vars_ctx)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "rS`context"
                                                             i)
                                                            (("3"
                                                              (inst
                                                               -6
                                                               i)
                                                              (("3"
                                                                (grind)
                                                                nil)))))))))
                                                       ("4"
                                                        (propax)
                                                        nil)))))))))))
                                             ("2"
                                              (hide-all-but (1 stm))
                                              (("2"
                                                (expand rS)
                                                (("2"
                                                  (grind)
                                                  nil)))))))))))))))))))
                               ("2"
                                (assert)
                                (("2"
                                  (delete hrec)
                                  (("2"
                                    (case
                                     "top_releases_ct(to_topstate(grS)`redex) = 0")
                                    (("1"
                                      (expand to_topstate)
                                      (("1"
                                        (rewrite top_releases_ct_fill)
                                        nil)))
                                     ("2"
                                      (hide-all-but (1 atom2))
                                      (("2"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("2"
                                          (generalize A A IExpression)
                                          (("2"
                                            (grind)
                                            nil)))))))))))))))))))
                         ("6" (delete obj)
                          (("6" (rewrite top_releases_reduce)
                            (("6" (assert) nil)))))))))
                     ("2" (delete obj)
                      (("2" (rewrite top_release_reduce)
                        (("2"
                          (name-replace "rS"
                           "make_redex(to_topstate(grS))")
                          (("2" (case "rS`error")
                            (("1" (hide-all-but (1 -1))
                              (("1" (expand rS) (("1" (grind) nil)))))
                             ("2" (hide-all-but (1 -1))
                              (("2"
                                (case-replace
                                 "releaseReduce(D)(rS)`error = rS`error")
                                (("2"
                                  (delete -1)
                                  (("2"
                                    (expand releaseReduce)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (grind)
                                        nil))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (bisimulation_lemma-7 "" 3706300343
   ("" (measure-induct+ "top_releases_ct(grS`redex)" ("grS"))
    (("" (name-replace grS "x!1")
      (("" (with-labels (skeep) ((ndr arm armc stm obj)))
        (("" (label hrec -1)
          (("" (case-replace "top_releases_ct(grS`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand rreduce_n)
                (("1" (expand rreduce_n)
                  (("1" (typepred grS)
                    (("1" (assert)
                      (("1"
                        (with-labels
                         (case "NOT value?(to_topstate(gS)`redex)")
                         ((atom1)))
                        (("1"
                          (with-labels
                           (case "NOT value?(to_topstate(grS)`redex)")
                           ((atom2)))
                          (("1" (expand reduce)
                            (("1"
                              (name-replace rS
                               "make_redex(to_topstate(grS))")
                              (("1"
                                (name-replace
                                 eS
                                 "make_redex_e(to_topstate(gS))")
                                (("1"
                                  (with-labels
                                   (case "state_matches?(eS, rS)")
                                   ((stm2)))
                                  (("1"
                                    (with-labels (copy stm2) ((stm3)))
                                    (("1"
                                      (expand state_matches? stm2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand state_matches stm2)
                                          (("1"
                                            (with-labels
                                             (flatten)
                                             ((err trr unm stam stom)))
                                            (("1"
                                              (with-labels
                                               (case
                                                "noDanglingRefs?(rS)")
                                               ((ndr2)))
                                              (("1"
                                                (with-labels
                                                 (case
                                                  "allReleaseMarked?(rS`redex) AND armc?(rS`context)")
                                                 ((arm2)))
                                                (("1"
                                                  (case
                                                   "variable?(rS`redex)")
                                                  (("1" (postpone) nil)
                                                   ("2"
                                                    (case
                                                     "pureLetRedex?(rS`redex)")
                                                    (("1"
                                                      (case
                                                       "pureLetRedex?(eS`redex)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           letReduce_match)
                                                          (("1"
                                                            (grind)
                                                            nil)))))
                                                       ("2"
                                                        (delete obj)
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (apply-eta
                                                             "rS`redex"
                                                             "(letexpr?)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               +
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (expand
                                                                 unmark
                                                                 +)
                                                                (("1"
                                                                  (expand
                                                                   translate_refs
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     pureLetRedex?)
                                                                    (("1"
                                                                      (expand
                                                                       letRedex?)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (use
                                                                           translate_refs_value)
                                                                          (("1"
                                                                            (use
                                                                             unmark_value)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))
                                                                         ("2"
                                                                          (use
                                                                           translate_refs_pure)
                                                                          (("2"
                                                                            (rewrite
                                                                             unmark_pure)
                                                                            nil)))))))))))))))
                                                             ("2"
                                                              (grind)
                                                              nil)))))))))
                                                     ("2"
                                                      (case
                                                       "applyRedex?(rS`redex)")
                                                      (("1"
                                                        (case
                                                         "applyRedex?(eS`redex)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             applyReduce_match)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               D
                                                               eS
                                                               rS)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)
                                                                   ("2"
                                                                    (expand*
                                                                     pureLetRedex?
                                                                     letRedex?
                                                                     applyRedex?)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))
                                                                 ("2"
                                                                  (propax)
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil)))
                                                               ("2"
                                                                (expand
                                                                 eS)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (replace
                                                             trr
                                                             +
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (apply-eta
                                                               "rS`redex"
                                                               "(application?)")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil)))))))))
                                                       ("2"
                                                        (case
                                                         "pureIftRedex?(rS`redex)")
                                                        (("1"
                                                          (case
                                                           "pureIftRedex?(eS`redex)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "NOT variable?(eS`redex) NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     ifReduce_match)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil)
                                                                       ("3"
                                                                        (propax)
                                                                        nil)))))))))
                                                               ("2"
                                                                (expand*
                                                                 pureLetRedex?
                                                                 letRedex?
                                                                 applyRedex?
                                                                 pureIftRedex?)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))
                                                           ("2"
                                                            (delete
                                                             obj)
                                                            (("2"
                                                              (replace
                                                               trr
                                                               +
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (apply-eta
                                                                 "rS`redex"
                                                                 "(ift?)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   +
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (expand
                                                                     unmark
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       translate_refs
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         pureIftRedex?)
                                                                        (("1"
                                                                          (expand
                                                                           iftRedex?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("1"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil)))
                                                                             ("2"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("2"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil)))))))))))))))
                                                                 ("2"
                                                                  (grind)
                                                                  nil)))))))))
                                                         ("2"
                                                          (case
                                                           "updateRedex?(rS`redex)")
                                                          (("1"
                                                            (case
                                                             "updateRedex?(eS`redex)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       updateReduce_match)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil)
                                                                         ("3"
                                                                          (propax)
                                                                          nil)
                                                                         ("4"
                                                                          (propax)
                                                                          nil)))))))))
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (replace
                                                                     trr
                                                                     +
                                                                     :dir
                                                                     RL)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(update?)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))))))
                                                             ("2"
                                                              (delete
                                                               obj)
                                                              (("2"
                                                                (replace
                                                                 trr
                                                                 +
                                                                 :dir
                                                                 RL)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(update?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil)))))))))
                                                           ("2"
                                                            (case
                                                             "lookupRedex?(rS`redex)")
                                                            (("1"
                                                              (case
                                                               "lookupRedex?(eS`redex)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         lookupReduce_match)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))))))
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (replace
                                                                       trr
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(lookup?)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))))))
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(lookup?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil)))))))
                                                             ("2"
                                                              (case
                                                               "newintRedex?(rS`redex)")
                                                              (("1"
                                                                (case
                                                                 "newintRedex?(eS`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex)")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           newintReduce_match)
                                                                          (("1"
                                                                            (prop)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(newint?)")
                                                                        (("1"
                                                                          (replace
                                                                           trr
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))))
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (apply-eta
                                                                     "rS`redex"
                                                                     "(newint?)")
                                                                    (("1"
                                                                      (grind)
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil)))))))
                                                               ("2"
                                                                (case
                                                                 "newrefRedex?(rS`redex)")
                                                                (("1"
                                                                  (case
                                                                   "newrefRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex)")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             newrefReduce_match)
                                                                            (("1"
                                                                              (prop)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (replace
                                                                           trr
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("2"
                                                                            (apply-eta
                                                                             "rS`redex"
                                                                             "(newref?)")
                                                                            (("1"
                                                                              (grind)
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil)))))))))))
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(newref?)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (case
                                                                   "popRedex?(rS`redex)")
                                                                  (("1"
                                                                    (case
                                                                     "popRedex?(eS`redex)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex) AND NOT newrefRedex?(eS`redex)")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               popReduce_match)
                                                                              (("1"
                                                                                (prop)
                                                                                nil)))))))
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (replace
                                                                             trr
                                                                             :dir
                                                                             RL)
                                                                            (("2"
                                                                              (apply-eta
                                                                               "rS`redex"
                                                                               "(pop?)")
                                                                              (("1"
                                                                                (grind)
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (replace
                                                                         trr
                                                                         +
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (apply-eta
                                                                           "rS`redex"
                                                                           "(pop?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (expand
                                                                               unmark)
                                                                              (("1"
                                                                                (expand
                                                                                 translate_refs)
                                                                                (("1"
                                                                                  (expand
                                                                                   popRedex?)
                                                                                  (("1"
                                                                                    (use
                                                                                     translate_refs_value)
                                                                                    (("1"
                                                                                      (use
                                                                                       unmark_value)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil)))))))))))))
                                                                           ("2"
                                                                            (grind)
                                                                            nil)))))))))
                                                                   ("2"
                                                                    (case
                                                                     "pureReleaseRedex?(rS`redex)")
                                                                    (("1"
                                                                      (delete
                                                                       obj)
                                                                      (("1"
                                                                        (expand
                                                                         rS)
                                                                        (("1"
                                                                          (expand
                                                                           make_redex)
                                                                          (("1"
                                                                            (lemma
                                                                             top_releases_build_redex)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "to_topstate(grS)`redex")
                                                                              (("1"
                                                                                (expand
                                                                                 to_topstate)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   top_releases_ct_fill)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (case
                                                                       "pureRedex?(rS`redex)")
                                                                      (("1"
                                                                        (expand
                                                                         pureRedex?)
                                                                        (("1"
                                                                          (prop)
                                                                          nil)))
                                                                       ("2"
                                                                        (typepred
                                                                         rS)
                                                                        (("2"
                                                                          (propax)
                                                                          nil)))))))))))))))))))))))))
                                                 ("2"
                                                  (delete obj)
                                                  (("2"
                                                    (expand rS)
                                                    (("2"
                                                      (case
                                                       "allReleaseMarked?(to_topstate(grS)`redex)")
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              nil)))))))
                                                       ("2"
                                                        (expand
                                                         to_topstate)
                                                        (("2"
                                                          (rewrite
                                                           arm_fill)
                                                          nil)))))))))))
                                               ("2"
                                                (delete obj)
                                                (("2"
                                                  (expand rS)
                                                  (("2"
                                                    (lemma
                                                     make_redex_ndr)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))
                                   ("2"
                                    (delete obj)
                                    (("2"
                                      (expand eS)
                                      (("2"
                                        (expand rS)
                                        (("2"
                                          (use make_redex_match)
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil)
                                             ("2" (propax) nil)
                                             ("3" (propax) nil)
                                             ("4"
                                              (expand make_redex)
                                              (("4"
                                                (lemma
                                                 top_releases_build_redex)
                                                (("4"
                                                  (inst
                                                   -1
                                                   "to_topstate(grS)`redex")
                                                  (("4"
                                                    (expand
                                                     to_topstate)
                                                    (("4"
                                                      (rewrite
                                                       top_releases_ct_fill)
                                                      (("4"
                                                        (grind)
                                                        nil)))))))))))
                                             ("5"
                                              (propax)
                                              nil)))))))))))))))))))
                           ("2" (delete obj)
                            (("2" (expand state_matches?)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand state_matches)
                                  (("2"
                                    (with-labels
                                     (flatten)
                                     ((err trr unm stam stom)))
                                    (("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (use translate_refs_value)
                                        (("2"
                                          (use unmark_value)
                                          nil)))))))))))))))))
                         ("2" (case "value?(to_topstate(grS)`redex)")
                          (("1" (expand reduce) (("1" (assert) nil)))
                           ("2"
                            (case "top_releases_ct(to_topstate(grS)`redex) = 0")
                            (("1" (delete obj)
                              (("1"
                                (expand state_matches?)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand state_matches)
                                    (("1"
                                      (with-labels
                                       (flatten)
                                       ((err trr unm stam stom)))
                                      (("1"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("1"
                                          (name-replace
                                           B
                                           "to_topstate(gS)`redex")
                                          (("1"
                                            (hide-all-but
                                             (1 -1 atom1 trr))
                                            (("1"
                                              (generalize
                                               B
                                               B
                                               IExpression)
                                              (("1"
                                                (generalize
                                                 A
                                                 A
                                                 IExpression)
                                                (("1"
                                                  (induct-and-simplify
                                                   A)
                                                  nil)))))))))))))))))))))
                             ("2" (expand to_topstate)
                              (("2"
                                (rewrite top_releases_ct_fill)
                                nil)))))))))))))))))))
             ("2" (expand rreduce_n obj)
              (("2" (typepred "grS")
                (("2" (assert)
                  (("2" (inst hrec "reduce(D)(grS)")
                    (("1" (inst hrec D gS)
                      (("1" (split hrec)
                        (("1" (rewrite top_releases_reduce)
                          (("1" (assert) nil)))
                         ("2" (use reduce_ndr) nil)
                         ("3" (use reduce_arm) (("3" (assert) nil)))
                         ("4" (use reduce_arm) (("4" (assert) nil)))
                         ("5" (delete obj)
                          (("5" (rewrite top_release_reduce)
                            (("5"
                              (with-labels
                               (case
                                "NOT value?(to_topstate(grS)`redex)")
                               ((atom2)))
                              (("1"
                                (name-replace
                                 rS
                                 "make_redex(to_topstate(grS))")
                                (("1"
                                  (expand state_matches?)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (name
                                         "nS"
                                         "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
                                        (("1"
                                          (case
                                           "state_matches(nS, rS)(translate)")
                                          (("1"
                                            (case
                                             "state_matches(nS, releaseReduce(D)(rS))(translate)")
                                            (("1"
                                              (case
                                               "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                                              (("1"
                                                (case-replace
                                                 "to_topstate(gS) = to_topstate(nS)")
                                                (("1"
                                                  (delete hrec)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (expand nS)
                                                      (("1"
                                                        (case-replace
                                                         "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                                                        (("1"
                                                          (grind)
                                                          nil)
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -2
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (expand
                                                               state_matches)
                                                              (("2"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((trr
                                                                   unm
                                                                   stam
                                                                   stom)))
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (case-replace
                                                                     "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                                                    (("1"
                                                                      (expand
                                                                       rS)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (typepred
                                                                           "buildRedex(to_topstate(grS)`redex)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               to_topstate)
                                                                              (("1"
                                                                                (propax)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (delete
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         unmark_fill)
                                                                        (("2"
                                                                          (rewrite
                                                                           translate_fill)
                                                                          nil)))))))))))))))))))))))))))
                                               ("2"
                                                (delete hrec)
                                                (("2"
                                                  (use
                                                   to_topstate_match)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))
                                             ("2"
                                              (delete hrec)
                                              (("2"
                                                (use
                                                 releaseReduce_match)
                                                (("2"
                                                  (split -1)
                                                  (("1" (propax) nil)
                                                   ("2"
                                                    (typepred rS)
                                                    (("2"
                                                      (case
                                                       "releaseRedex?(rS`redex)")
                                                      (("1"
                                                        (grind)
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         top_releases_build_redex)
                                                        (("2"
                                                          (expand rS)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "to_topstate(grS)`redex")
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))
                                                   ("3"
                                                    (expand rS)
                                                    (("3"
                                                      (lemma
                                                       make_redex_ndr)
                                                      (("3"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("3"
                                                          (hide-all-but
                                                           (1
                                                            ndr
                                                            atom2))
                                                          (("3"
                                                            (lemma
                                                             to_topstate_dangling)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               grS)
                                                              (("3"
                                                                (lemma
                                                                 make_redex_ndr)
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (prop)
                                                                    nil)))))))))))))))))
                                                   ("4"
                                                    (case
                                                     "allReleaseMarked?(to_topstate(grS)`redex)")
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              (("1"
                                                                (grind)
                                                                nil)))))))))))
                                                     ("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (rewrite
                                                         arm_fill)
                                                        nil)))))
                                                   ("5"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (delete hrec)
                                            (("2"
                                              (expand state_matches)
                                              (("2"
                                                (with-labels
                                                 (flatten)
                                                 ((trr unm stam stom)))
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand nS)
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (grind)
                                                        nil)))))
                                                   ("2"
                                                    (expand nS)
                                                    (("2"
                                                      (propax)
                                                      nil)))
                                                   ("3"
                                                    (expand nS)
                                                    (("3"
                                                      (propax)
                                                      nil)))
                                                   ("4"
                                                    (expand nS)
                                                    (("4"
                                                      (expand
                                                       to_topstate)
                                                      (("4"
                                                        (case-replace
                                                         "union(cvars(fill(grS`context, grS`redex)),
                                                        bumpn(cvars(hole),
                                                              popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                                                        bumpn(cvars(rS`context), popDepth(rS`redex)))")
                                                        (("1"
                                                          (expand rS)
                                                          (("1"
                                                            (grind)
                                                            nil)))
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (apply-extensionality)
                                                            (("2"
                                                              (delete
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 union)
                                                                (("2"
                                                                  (expand
                                                                   member)
                                                                  (("2"
                                                                    (expand
                                                                     rS)
                                                                    (("2"
                                                                      (expand
                                                                       make_redex)
                                                                      (("2"
                                                                        (typepred
                                                                         "buildRedex(to_topstate(grS)`redex)")
                                                                        (("2"
                                                                          (expand
                                                                           to_topstate)
                                                                          (("2"
                                                                            (name-replace
                                                                             A
                                                                             "fill(grS`context, grS`redex)")
                                                                            (("2"
                                                                              (name-replace
                                                                               redex
                                                                               "buildRedex(A)`2")
                                                                              (("2"
                                                                                (name-replace
                                                                                 ctx
                                                                                 "buildRedex(A)`1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   RL)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     cvars_fill)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil)))))))))))))))))))))))))))))))))))
                                                   ("5"
                                                    (expand
                                                     store_matches)
                                                    (("5"
                                                      (expand nS)
                                                      (("5"
                                                        (expand
                                                         to_topstate)
                                                        (("5"
                                                          (expand rS)
                                                          (("5"
                                                            (expand
                                                             make_redex)
                                                            (("5"
                                                              (expand
                                                               to_topstate)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (inst?
                                                                   stom)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (typepred
                                                                             j)
                                                                            (("3"
                                                                              (expand
                                                                               rS)
                                                                              (("3"
                                                                                (grind)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (typepred
                                                                     r)
                                                                    (("2"
                                                                      (expand
                                                                       rS)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))))))))
                                         ("2"
                                          (typepred "rS`redex")
                                          (("2"
                                            (case-replace
                                             "gS`stack`length = rS`stack`length")
                                            (("1"
                                              (rewrite
                                               translate_popDepth)
                                              (("1"
                                                (rewrite
                                                 unmark_popDepth)
                                                (("1"
                                                  (rewrite
                                                   unmark_popDepth_ctx)
                                                  (("1"
                                                    (rewrite
                                                     translate_vars)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                                                          (("1"
                                                            (case-replace
                                                             "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                                            (("1"
                                                              (delete
                                                               hrec)
                                                              (("1"
                                                                (expand
                                                                 state_matches)
                                                                (("1"
                                                                  (with-labels
                                                                   (flatten)
                                                                   ((err
                                                                     trr
                                                                     unm
                                                                     stam
                                                                     stom)))
                                                                  (("1"
                                                                    (replace
                                                                     trr)
                                                                    (("1"
                                                                      (typepred
                                                                       "to_topstate(gS)`redex")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         i)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))))))))))))
                                                             ("2"
                                                              (expand
                                                               rS)
                                                              (("2"
                                                                (expand
                                                                 make_redex)
                                                                (("2"
                                                                  (typepred
                                                                   "buildRedex(to_topstate(grS)`redex)")
                                                                  (("2"
                                                                    (propax)
                                                                    nil)))))))))
                                                           ("2"
                                                            (rewrite
                                                             unmark_fill)
                                                            (("2"
                                                              (rewrite
                                                               translate_fill)
                                                              (("2"
                                                                (rewrite
                                                                 refs_fill)
                                                                (("2"
                                                                  (rewrite
                                                                   contextPurefill)
                                                                  nil)))))))))))
                                                       ("2"
                                                        (lemma
                                                         unmark_vars)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "rS`redex"
                                                             i)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               i)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))
                                                       ("3"
                                                        (skeep)
                                                        (("3"
                                                          (lemma
                                                           unmark_vars_ctx)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "rS`context"
                                                             i)
                                                            (("3"
                                                              (inst
                                                               -6
                                                               i)
                                                              (("3"
                                                                (grind)
                                                                nil)))))))))
                                                       ("4"
                                                        (propax)
                                                        nil)))))))))))
                                             ("2"
                                              (hide-all-but (1 stm))
                                              (("2"
                                                (expand rS)
                                                (("2"
                                                  (grind)
                                                  nil)))))))))))))))))))
                               ("2"
                                (assert)
                                (("2"
                                  (delete hrec)
                                  (("2"
                                    (case
                                     "top_releases_ct(to_topstate(grS)`redex) = 0")
                                    (("1"
                                      (expand to_topstate)
                                      (("1"
                                        (rewrite top_releases_ct_fill)
                                        nil)))
                                     ("2"
                                      (hide-all-but (1 atom2))
                                      (("2"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("2"
                                          (generalize A A IExpression)
                                          (("2"
                                            (grind)
                                            nil)))))))))))))))))))
                         ("6" (delete obj)
                          (("6" (rewrite top_releases_reduce)
                            (("6" (assert) nil)))))))))
                     ("2" (delete obj)
                      (("2" (rewrite top_release_reduce)
                        (("2"
                          (name-replace "rS"
                           "make_redex(to_topstate(grS))")
                          (("2" (case "rS`error")
                            (("1" (hide-all-but (1 -1))
                              (("1" (expand rS) (("1" (grind) nil)))))
                             ("2" (hide-all-but (1 -1))
                              (("2"
                                (case-replace
                                 "releaseReduce(D)(rS)`error = rS`error")
                                (("2"
                                  (delete -1)
                                  (("2"
                                    (expand releaseReduce)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (grind)
                                        nil))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (bisimulation_lemma-6 "" 3706300033
   ("" (measure-induct+ "top_releases_ct(grS`redex)" ("grS"))
    (("" (name-replace grS "x!1")
      (("" (with-labels (skeep) ((ndr arm armc stm obj)))
        (("" (label hrec -1)
          (("" (case-replace "top_releases_ct(grS`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand rreduce_n)
                (("1" (expand rreduce_n)
                  (("1" (typepred grS)
                    (("1" (assert)
                      (("1"
                        (with-labels
                         (case "NOT value?(to_topstate(gS)`redex)")
                         ((atom1)))
                        (("1"
                          (with-labels
                           (case "NOT value?(to_topstate(grS)`redex)")
                           ((atom2)))
                          (("1" (expand reduce)
                            (("1"
                              (name-replace rS
                               "make_redex(to_topstate(grS))")
                              (("1"
                                (name-replace
                                 eS
                                 "make_redex_e(to_topstate(gS))")
                                (("1"
                                  (with-labels
                                   (case "state_matches?(eS, rS)")
                                   ((stm2)))
                                  (("1"
                                    (with-labels (copy stm2) ((stm3)))
                                    (("1"
                                      (expand state_matches? stm2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand state_matches stm2)
                                          (("1"
                                            (with-labels
                                             (flatten)
                                             ((err trr unm stam stom)))
                                            (("1"
                                              (with-labels
                                               (case
                                                "noDanglingRefs?(rS)")
                                               ((ndr2)))
                                              (("1"
                                                (with-labels
                                                 (case
                                                  "allReleaseMarked?(rS`redex) AND armc?(rS`context)")
                                                 ((arm2)))
                                                (("1"
                                                  (case
                                                   "variable?(rS`redex)")
                                                  (("1" (postpone) nil)
                                                   ("2"
                                                    (case
                                                     "pureLetRedex?(rS`redex)")
                                                    (("1"
                                                      (case
                                                       "pureLetRedex?(eS`redex)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           letReduce_match)
                                                          (("1"
                                                            (grind)
                                                            nil)))))
                                                       ("2"
                                                        (delete obj)
                                                        (("2"
                                                          (replace
                                                           trr
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (apply-eta
                                                             "rS`redex"
                                                             "(letexpr?)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               +
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (expand
                                                                 unmark
                                                                 +)
                                                                (("1"
                                                                  (expand
                                                                   translate_refs
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     pureLetRedex?)
                                                                    (("1"
                                                                      (expand
                                                                       letRedex?)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (use
                                                                           translate_refs_value)
                                                                          (("1"
                                                                            (use
                                                                             unmark_value)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))
                                                                         ("2"
                                                                          (use
                                                                           translate_refs_pure)
                                                                          (("2"
                                                                            (rewrite
                                                                             unmark_pure)
                                                                            nil)))))))))))))))
                                                             ("2"
                                                              (grind)
                                                              nil)))))))))
                                                     ("2"
                                                      (case
                                                       "applyRedex?(rS`redex)")
                                                      (("1"
                                                        (case
                                                         "applyRedex?(eS`redex)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             applyReduce_match)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               D
                                                               eS
                                                               rS)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)
                                                                   ("2"
                                                                    (expand*
                                                                     pureLetRedex?
                                                                     letRedex?
                                                                     applyRedex?)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))
                                                                 ("2"
                                                                  (propax)
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil)))
                                                               ("2"
                                                                (expand
                                                                 eS)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (replace
                                                             trr
                                                             +
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (apply-eta
                                                               "rS`redex"
                                                               "(application?)")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil)))))))))
                                                       ("2"
                                                        (case
                                                         "pureIftRedex?(rS`redex)")
                                                        (("1"
                                                          (case
                                                           "pureIftRedex?(eS`redex)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "NOT variable?(eS`redex) NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     ifReduce_match)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil)
                                                                       ("3"
                                                                        (propax)
                                                                        nil)))))))))
                                                               ("2"
                                                                (expand*
                                                                 pureLetRedex?
                                                                 letRedex?
                                                                 applyRedex?
                                                                 pureIftRedex?)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))
                                                           ("2"
                                                            (delete
                                                             obj)
                                                            (("2"
                                                              (replace
                                                               trr
                                                               +
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (apply-eta
                                                                 "rS`redex"
                                                                 "(ift?)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   +
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (expand
                                                                     unmark
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       translate_refs
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         pureIftRedex?)
                                                                        (("1"
                                                                          (expand
                                                                           iftRedex?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("1"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil)))
                                                                             ("2"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("2"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil)))))))))))))))
                                                                 ("2"
                                                                  (grind)
                                                                  nil)))))))))
                                                         ("2"
                                                          (case
                                                           "updateRedex?(rS`redex)")
                                                          (("1"
                                                            (case
                                                             "updateRedex?(eS`redex)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       updateReduce_match)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil)
                                                                         ("3"
                                                                          (propax)
                                                                          nil)
                                                                         ("4"
                                                                          (propax)
                                                                          nil)))))))))
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (replace
                                                                     trr
                                                                     +
                                                                     :dir
                                                                     RL)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(update?)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))))))
                                                             ("2"
                                                              (delete
                                                               obj)
                                                              (("2"
                                                                (replace
                                                                 trr
                                                                 +
                                                                 :dir
                                                                 RL)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(update?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil)))))))))
                                                           ("2"
                                                            (case
                                                             "lookupRedex?(rS`redex)")
                                                            (("1"
                                                              (case
                                                               "lookupRedex?(eS`redex)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         lookupReduce_match)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))))))
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (replace
                                                                       trr
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(lookup?)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))))))
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(lookup?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil)))))))
                                                             ("2"
                                                              (case
                                                               "newintRedex?(rS`redex)")
                                                              (("1"
                                                                (case
                                                                 "newintRedex?(eS`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex)")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           newintReduce_match)
                                                                          (("1"
                                                                            (prop)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(newint?)")
                                                                        (("1"
                                                                          (replace
                                                                           trr
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))))
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (apply-eta
                                                                     "rS`redex"
                                                                     "(newint?)")
                                                                    (("1"
                                                                      (grind)
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil)))))))
                                                               ("2"
                                                                (case
                                                                 "newrefRedex?(rS`redex)")
                                                                (("1"
                                                                  (case
                                                                   "newrefRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex)")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             newrefReduce_match)
                                                                            (("1"
                                                                              (prop)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (replace
                                                                           trr
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("2"
                                                                            (apply-eta
                                                                             "rS`redex"
                                                                             "(newref?)")
                                                                            (("1"
                                                                              (grind)
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil)))))))))))
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(newref?)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (case
                                                                   "popRedex?(rS`redex)")
                                                                  (("1"
                                                                    (case
                                                                     "popRedex?(eS`redex)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "NOT variable?(eS`redex) AND NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex) AND NOT newrefRedex?(eS`redex)")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               popReduce_match)
                                                                              (("1"
                                                                                (prop)
                                                                                nil)))))))
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (replace
                                                                             trr
                                                                             :dir
                                                                             RL)
                                                                            (("2"
                                                                              (apply-eta
                                                                               "rS`redex"
                                                                               "(pop?)")
                                                                              (("1"
                                                                                (grind)
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (replace
                                                                         trr
                                                                         +
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (apply-eta
                                                                           "rS`redex"
                                                                           "(pop?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (expand
                                                                               unmark)
                                                                              (("1"
                                                                                (expand
                                                                                 translate_refs)
                                                                                (("1"
                                                                                  (expand
                                                                                   popRedex?)
                                                                                  (("1"
                                                                                    (use
                                                                                     translate_refs_value)
                                                                                    (("1"
                                                                                      (use
                                                                                       unmark_value)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil)))))))))))))
                                                                           ("2"
                                                                            (grind)
                                                                            nil)))))))))
                                                                   ("2"
                                                                    (case
                                                                     "pureReleaseRedex?(rS`redex)")
                                                                    (("1"
                                                                      (delete
                                                                       obj)
                                                                      (("1"
                                                                        (expand
                                                                         rS)
                                                                        (("1"
                                                                          (expand
                                                                           make_redex)
                                                                          (("1"
                                                                            (lemma
                                                                             top_releases_build_redex)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "to_topstate(grS)`redex")
                                                                              (("1"
                                                                                (expand
                                                                                 to_topstate)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   top_releases_ct_fill)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (case
                                                                       "pureRedex?(rS`redex)")
                                                                      (("1"
                                                                        (expand
                                                                         pureRedex?)
                                                                        (("1"
                                                                          (prop)
                                                                          nil)))
                                                                       ("2"
                                                                        (typepred
                                                                         rS)
                                                                        (("2"
                                                                          (propax)
                                                                          nil)))))))))))))))))))))))))
                                                 ("2"
                                                  (delete obj)
                                                  (("2"
                                                    (expand rS)
                                                    (("2"
                                                      (case
                                                       "allReleaseMarked?(to_topstate(grS)`redex)")
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              nil)))))))
                                                       ("2"
                                                        (expand
                                                         to_topstate)
                                                        (("2"
                                                          (rewrite
                                                           arm_fill)
                                                          nil)))))))))))
                                               ("2"
                                                (delete obj)
                                                (("2"
                                                  (expand rS)
                                                  (("2"
                                                    (lemma
                                                     make_redex_ndr)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))
                                   ("2"
                                    (delete obj)
                                    (("2"
                                      (expand eS)
                                      (("2"
                                        (expand rS)
                                        (("2"
                                          (use make_redex_match)
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil)
                                             ("2" (propax) nil)
                                             ("3" (propax) nil)
                                             ("4"
                                              (expand make_redex)
                                              (("4"
                                                (lemma
                                                 top_releases_build_redex)
                                                (("4"
                                                  (inst
                                                   -1
                                                   "to_topstate(grS)`redex")
                                                  (("4"
                                                    (expand
                                                     to_topstate)
                                                    (("4"
                                                      (rewrite
                                                       top_releases_ct_fill)
                                                      (("4"
                                                        (grind)
                                                        nil)))))))))))
                                             ("5"
                                              (propax)
                                              nil)))))))))))))))))))
                           ("2" (delete obj)
                            (("2" (expand state_matches?)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand state_matches)
                                  (("2"
                                    (with-labels
                                     (flatten)
                                     ((err trr unm stam stom)))
                                    (("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (use translate_refs_value)
                                        (("2"
                                          (use unmark_value)
                                          nil)))))))))))))))))
                         ("2" (case "value?(to_topstate(grS)`redex)")
                          (("1" (expand reduce) (("1" (assert) nil)))
                           ("2"
                            (case "top_releases_ct(to_topstate(grS)`redex) = 0")
                            (("1" (delete obj)
                              (("1"
                                (expand state_matches?)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand state_matches)
                                    (("1"
                                      (with-labels
                                       (flatten)
                                       ((err trr unm stam stom)))
                                      (("1"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("1"
                                          (name-replace
                                           B
                                           "to_topstate(gS)`redex")
                                          (("1"
                                            (hide-all-but
                                             (1 -1 atom1 trr))
                                            (("1"
                                              (generalize
                                               B
                                               B
                                               IExpression)
                                              (("1"
                                                (generalize
                                                 A
                                                 A
                                                 IExpression)
                                                (("1"
                                                  (induct-and-simplify
                                                   A)
                                                  nil)))))))))))))))))))))
                             ("2" (expand to_topstate)
                              (("2"
                                (rewrite top_releases_ct_fill)
                                nil)))))))))))))))))))
             ("2" (expand rreduce_n obj)
              (("2" (typepred "grS")
                (("2" (assert)
                  (("2" (inst hrec "reduce(D)(grS)")
                    (("1" (inst hrec D gS)
                      (("1" (split hrec)
                        (("1" (rewrite top_releases_reduce)
                          (("1" (assert) nil)))
                         ("2" (use reduce_ndr) nil)
                         ("3" (use reduce_arm) (("3" (assert) nil)))
                         ("4" (use reduce_arm) (("4" (assert) nil)))
                         ("5" (delete obj)
                          (("5" (rewrite top_release_reduce)
                            (("5"
                              (with-labels
                               (case
                                "NOT value?(to_topstate(grS)`redex)")
                               ((atom2)))
                              (("1"
                                (name-replace
                                 rS
                                 "make_redex(to_topstate(grS))")
                                (("1"
                                  (expand state_matches?)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (name
                                         "nS"
                                         "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
                                        (("1"
                                          (case
                                           "state_matches(nS, rS)(translate)")
                                          (("1"
                                            (case
                                             "state_matches(nS, releaseReduce(D)(rS))(translate)")
                                            (("1"
                                              (case
                                               "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                                              (("1"
                                                (case-replace
                                                 "to_topstate(gS) = to_topstate(nS)")
                                                (("1"
                                                  (delete hrec)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (expand nS)
                                                      (("1"
                                                        (case-replace
                                                         "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                                                        (("1"
                                                          (grind)
                                                          nil)
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -2
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (expand
                                                               state_matches)
                                                              (("2"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((trr
                                                                   unm
                                                                   stam
                                                                   stom)))
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (case-replace
                                                                     "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                                                    (("1"
                                                                      (expand
                                                                       rS)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (typepred
                                                                           "buildRedex(to_topstate(grS)`redex)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               to_topstate)
                                                                              (("1"
                                                                                (propax)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (delete
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         unmark_fill)
                                                                        (("2"
                                                                          (rewrite
                                                                           translate_fill)
                                                                          nil)))))))))))))))))))))))))))
                                               ("2"
                                                (delete hrec)
                                                (("2"
                                                  (use
                                                   to_topstate_match)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))
                                             ("2"
                                              (delete hrec)
                                              (("2"
                                                (use
                                                 releaseReduce_match)
                                                (("2"
                                                  (split -1)
                                                  (("1" (propax) nil)
                                                   ("2"
                                                    (typepred rS)
                                                    (("2"
                                                      (case
                                                       "releaseRedex?(rS`redex)")
                                                      (("1"
                                                        (grind)
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         top_releases_build_redex)
                                                        (("2"
                                                          (expand rS)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "to_topstate(grS)`redex")
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))
                                                   ("3"
                                                    (expand rS)
                                                    (("3"
                                                      (lemma
                                                       make_redex_ndr)
                                                      (("3"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("3"
                                                          (hide-all-but
                                                           (1
                                                            ndr
                                                            atom2))
                                                          (("3"
                                                            (lemma
                                                             to_topstate_dangling)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               grS)
                                                              (("3"
                                                                (lemma
                                                                 make_redex_ndr)
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (prop)
                                                                    nil)))))))))))))))))
                                                   ("4"
                                                    (case
                                                     "allReleaseMarked?(to_topstate(grS)`redex)")
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              (("1"
                                                                (grind)
                                                                nil)))))))))))
                                                     ("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (rewrite
                                                         arm_fill)
                                                        nil)))))
                                                   ("5"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (delete hrec)
                                            (("2"
                                              (expand state_matches)
                                              (("2"
                                                (with-labels
                                                 (flatten)
                                                 ((trr unm stam stom)))
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand nS)
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (grind)
                                                        nil)))))
                                                   ("2"
                                                    (expand nS)
                                                    (("2"
                                                      (propax)
                                                      nil)))
                                                   ("3"
                                                    (expand nS)
                                                    (("3"
                                                      (propax)
                                                      nil)))
                                                   ("4"
                                                    (expand nS)
                                                    (("4"
                                                      (expand
                                                       to_topstate)
                                                      (("4"
                                                        (case-replace
                                                         "union(cvars(fill(grS`context, grS`redex)),
                                                        bumpn(cvars(hole),
                                                              popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                                                        bumpn(cvars(rS`context), popDepth(rS`redex)))")
                                                        (("1"
                                                          (expand rS)
                                                          (("1"
                                                            (grind)
                                                            nil)))
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (apply-extensionality)
                                                            (("2"
                                                              (delete
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 union)
                                                                (("2"
                                                                  (expand
                                                                   member)
                                                                  (("2"
                                                                    (expand
                                                                     rS)
                                                                    (("2"
                                                                      (expand
                                                                       make_redex)
                                                                      (("2"
                                                                        (typepred
                                                                         "buildRedex(to_topstate(grS)`redex)")
                                                                        (("2"
                                                                          (expand
                                                                           to_topstate)
                                                                          (("2"
                                                                            (name-replace
                                                                             A
                                                                             "fill(grS`context, grS`redex)")
                                                                            (("2"
                                                                              (name-replace
                                                                               redex
                                                                               "buildRedex(A)`2")
                                                                              (("2"
                                                                                (name-replace
                                                                                 ctx
                                                                                 "buildRedex(A)`1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   RL)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     cvars_fill)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil)))))))))))))))))))))))))))))))))))
                                                   ("5"
                                                    (expand
                                                     store_matches)
                                                    (("5"
                                                      (expand nS)
                                                      (("5"
                                                        (expand
                                                         to_topstate)
                                                        (("5"
                                                          (expand rS)
                                                          (("5"
                                                            (expand
                                                             make_redex)
                                                            (("5"
                                                              (expand
                                                               to_topstate)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (inst?
                                                                   stom)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (typepred
                                                                             j)
                                                                            (("3"
                                                                              (expand
                                                                               rS)
                                                                              (("3"
                                                                                (grind)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (typepred
                                                                     r)
                                                                    (("2"
                                                                      (expand
                                                                       rS)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))))))))
                                         ("2"
                                          (typepred "rS`redex")
                                          (("2"
                                            (case-replace
                                             "gS`stack`length = rS`stack`length")
                                            (("1"
                                              (rewrite
                                               translate_popDepth)
                                              (("1"
                                                (rewrite
                                                 unmark_popDepth)
                                                (("1"
                                                  (rewrite
                                                   unmark_popDepth_ctx)
                                                  (("1"
                                                    (rewrite
                                                     translate_vars)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                                                          (("1"
                                                            (case-replace
                                                             "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                                            (("1"
                                                              (delete
                                                               hrec)
                                                              (("1"
                                                                (expand
                                                                 state_matches)
                                                                (("1"
                                                                  (with-labels
                                                                   (flatten)
                                                                   ((err
                                                                     trr
                                                                     unm
                                                                     stam
                                                                     stom)))
                                                                  (("1"
                                                                    (replace
                                                                     trr)
                                                                    (("1"
                                                                      (typepred
                                                                       "to_topstate(gS)`redex")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         i)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))))))))))))
                                                             ("2"
                                                              (expand
                                                               rS)
                                                              (("2"
                                                                (expand
                                                                 make_redex)
                                                                (("2"
                                                                  (typepred
                                                                   "buildRedex(to_topstate(grS)`redex)")
                                                                  (("2"
                                                                    (propax)
                                                                    nil)))))))))
                                                           ("2"
                                                            (rewrite
                                                             unmark_fill)
                                                            (("2"
                                                              (rewrite
                                                               translate_fill)
                                                              (("2"
                                                                (rewrite
                                                                 refs_fill)
                                                                (("2"
                                                                  (rewrite
                                                                   contextPurefill)
                                                                  nil)))))))))))
                                                       ("2"
                                                        (lemma
                                                         unmark_vars)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "rS`redex"
                                                             i)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               i)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))
                                                       ("3"
                                                        (skeep)
                                                        (("3"
                                                          (lemma
                                                           unmark_vars_ctx)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "rS`context"
                                                             i)
                                                            (("3"
                                                              (inst
                                                               -6
                                                               i)
                                                              (("3"
                                                                (grind)
                                                                nil)))))))))
                                                       ("4"
                                                        (propax)
                                                        nil)))))))))))
                                             ("2"
                                              (hide-all-but (1 stm))
                                              (("2"
                                                (expand rS)
                                                (("2"
                                                  (grind)
                                                  nil)))))))))))))))))))
                               ("2"
                                (assert)
                                (("2"
                                  (delete hrec)
                                  (("2"
                                    (case
                                     "top_releases_ct(to_topstate(grS)`redex) = 0")
                                    (("1"
                                      (expand to_topstate)
                                      (("1"
                                        (rewrite top_releases_ct_fill)
                                        nil)))
                                     ("2"
                                      (hide-all-but (1 atom2))
                                      (("2"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("2"
                                          (generalize A A IExpression)
                                          (("2"
                                            (grind)
                                            nil)))))))))))))))))))
                         ("6" (delete obj)
                          (("6" (rewrite top_releases_reduce)
                            (("6" (assert) nil)))))))))
                     ("2" (delete obj)
                      (("2" (rewrite top_release_reduce)
                        (("2"
                          (name-replace "rS"
                           "make_redex(to_topstate(grS))")
                          (("2" (case "rS`error")
                            (("1" (hide-all-but (1 -1))
                              (("1" (expand rS) (("1" (grind) nil)))))
                             ("2" (hide-all-but (1 -1))
                              (("2"
                                (case-replace
                                 "releaseReduce(D)(rS)`error = rS`error")
                                (("2"
                                  (delete -1)
                                  (("2"
                                    (expand releaseReduce)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (grind)
                                        nil))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (bisimulation_lemma-5 "" 3706299569
   ("" (measure-induct+ "top_releases_ct(grS`redex)" ("grS"))
    (("" (name-replace grS "x!1")
      (("" (with-labels (skeep) ((ndr arm armc stm obj)))
        (("" (label hrec -1)
          (("" (case-replace "top_releases_ct(grS`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand rreduce_n)
                (("1" (expand rreduce_n)
                  (("1" (typepred grS)
                    (("1" (assert)
                      (("1"
                        (with-labels
                         (case "NOT value?(to_topstate(gS)`redex)")
                         ((atom1)))
                        (("1"
                          (with-labels
                           (case "NOT value?(to_topstate(grS)`redex)")
                           ((atom2)))
                          (("1" (expand reduce)
                            (("1"
                              (name-replace rS
                               "make_redex(to_topstate(grS))")
                              (("1"
                                (name-replace
                                 eS
                                 "make_redex_e(to_topstate(gS))")
                                (("1"
                                  (with-labels
                                   (case "state_matches?(eS, rS)")
                                   ((stm2)))
                                  (("1"
                                    (with-labels (copy stm2) ((stm3)))
                                    (("1"
                                      (expand state_matches? stm2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand state_matches stm2)
                                          (("1"
                                            (with-labels
                                             (flatten)
                                             ((err trr unm stam stom)))
                                            (("1"
                                              (with-labels
                                               (case
                                                "noDanglingRefs?(rS)")
                                               ((ndr2)))
                                              (("1"
                                                (with-labels
                                                 (case
                                                  "allReleaseMarked?(rS`redex) AND armc?(rS`context)")
                                                 ((arm2)))
                                                (("1"
                                                  (case
                                                   "variable?(rS`redex)")
                                                  (("1" (postpone) nil)
                                                   ("2"
                                                    (case
                                                     "variable?(eS`redex)")
                                                    (("1"
                                                      (postpone)
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "pureLetRedex?(rS`redex)")
                                                        (("1"
                                                          (case
                                                           "pureLetRedex?(eS`redex)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (use
                                                               letReduce_match)
                                                              (("1"
                                                                (grind)
                                                                nil)))))
                                                           ("2"
                                                            (delete
                                                             obj)
                                                            (("2"
                                                              (replace
                                                               trr
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (apply-eta
                                                                 "rS`redex"
                                                                 "(letexpr?)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   +
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (expand
                                                                     unmark
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       translate_refs
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         pureLetRedex?)
                                                                        (("1"
                                                                          (expand
                                                                           letRedex?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (use
                                                                               translate_refs_value)
                                                                              (("1"
                                                                                (use
                                                                                 unmark_value)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("2"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil)))))))))))))))
                                                                 ("2"
                                                                  (grind)
                                                                  nil)))))))))
                                                         ("2"
                                                          (case
                                                           "applyRedex?(rS`redex)")
                                                          (("1"
                                                            (case
                                                             "applyRedex?(eS`redex)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 applyReduce_match)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   D
                                                                   eS
                                                                   rS)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "NOT pureLetRedex?(eS`redex)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil)
                                                                       ("2"
                                                                        (expand*
                                                                         pureLetRedex?
                                                                         letRedex?
                                                                         applyRedex?)
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))
                                                                     ("2"
                                                                      (propax)
                                                                      nil)
                                                                     ("3"
                                                                      (propax)
                                                                      nil)))
                                                                   ("2"
                                                                    (expand
                                                                     eS)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))))
                                                             ("2"
                                                              (delete
                                                               obj)
                                                              (("2"
                                                                (replace
                                                                 trr
                                                                 +
                                                                 :dir
                                                                 RL)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(application?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil)))))))))
                                                           ("2"
                                                            (case
                                                             "pureIftRedex?(rS`redex)")
                                                            (("1"
                                                              (case
                                                               "pureIftRedex?(eS`redex)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         ifReduce_match)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil)
                                                                           ("3"
                                                                            (propax)
                                                                            nil)))))))))
                                                                   ("2"
                                                                    (expand*
                                                                     pureLetRedex?
                                                                     letRedex?
                                                                     applyRedex?
                                                                     pureIftRedex?)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   +
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (apply-eta
                                                                     "rS`redex"
                                                                     "(ift?)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       +
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (expand
                                                                         unmark
                                                                         +)
                                                                        (("1"
                                                                          (expand
                                                                           translate_refs
                                                                           +)
                                                                          (("1"
                                                                            (expand
                                                                             pureIftRedex?)
                                                                            (("1"
                                                                              (expand
                                                                               iftRedex?)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (use
                                                                                   translate_refs_pure)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     unmark_pure)
                                                                                    nil)))
                                                                                 ("2"
                                                                                  (use
                                                                                   translate_refs_pure)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     unmark_pure)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (grind)
                                                                      nil)))))))))
                                                             ("2"
                                                              (case
                                                               "updateRedex?(rS`redex)")
                                                              (("1"
                                                                (case
                                                                 "updateRedex?(eS`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex)")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           updateReduce_match)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil)
                                                                             ("3"
                                                                              (propax)
                                                                              nil)
                                                                             ("4"
                                                                              (propax)
                                                                              nil)))))))))
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (replace
                                                                         trr
                                                                         +
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (apply-eta
                                                                           "rS`redex"
                                                                           "(update?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))
                                                                           ("2"
                                                                            (grind)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (replace
                                                                     trr
                                                                     +
                                                                     :dir
                                                                     RL)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(update?)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))))
                                                               ("2"
                                                                (case
                                                                 "lookupRedex?(rS`redex)")
                                                                (("1"
                                                                  (case
                                                                   "lookupRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex)")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             lookupReduce_match)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (replace
                                                                           trr
                                                                           :dir
                                                                           RL)
                                                                          (("2"
                                                                            (apply-eta
                                                                             "rS`redex"
                                                                             "(lookup?)")
                                                                            (("1"
                                                                              (grind)
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil)))))))))))
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(lookup?)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (case
                                                                   "newintRedex?(rS`redex)")
                                                                  (("1"
                                                                    (case
                                                                     "newintRedex?(eS`redex)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex)")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               newintReduce_match)
                                                                              (("1"
                                                                                (prop)
                                                                                nil)))))))
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (apply-eta
                                                                             "rS`redex"
                                                                             "(newint?)")
                                                                            (("1"
                                                                              (replace
                                                                               trr
                                                                               +
                                                                               :dir
                                                                               RL)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 +
                                                                                 :dir
                                                                                 RL)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (grind)
                                                                              nil)))))))))
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(newint?)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))
                                                                   ("2"
                                                                    (case
                                                                     "newrefRedex?(rS`redex)")
                                                                    (("1"
                                                                      (case
                                                                       "newrefRedex?(eS`redex)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex)")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 newrefReduce_match)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil)))))))
                                                                           ("2"
                                                                            (delete
                                                                             obj)
                                                                            (("2"
                                                                              (replace
                                                                               trr
                                                                               +
                                                                               :dir
                                                                               RL)
                                                                              (("2"
                                                                                (apply-eta
                                                                                 "rS`redex"
                                                                                 "(newref?)")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil)))))))))))
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (apply-eta
                                                                           "rS`redex"
                                                                           "(newref?)")
                                                                          (("1"
                                                                            (grind)
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (case
                                                                       "popRedex?(rS`redex)")
                                                                      (("1"
                                                                        (case
                                                                         "popRedex?(eS`redex)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex) AND NOT newrefRedex?(eS`redex)")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (use
                                                                                   popReduce_match)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (delete
                                                                               obj)
                                                                              (("2"
                                                                                (replace
                                                                                 trr
                                                                                 :dir
                                                                                 RL)
                                                                                (("2"
                                                                                  (apply-eta
                                                                                   "rS`redex"
                                                                                   "(pop?)")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil)))))))))))
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (replace
                                                                             trr
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("2"
                                                                              (apply-eta
                                                                               "rS`redex"
                                                                               "(pop?)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 +
                                                                                 :dir
                                                                                 RL)
                                                                                (("1"
                                                                                  (expand
                                                                                   unmark)
                                                                                  (("1"
                                                                                    (expand
                                                                                     translate_refs)
                                                                                    (("1"
                                                                                      (expand
                                                                                       popRedex?)
                                                                                      (("1"
                                                                                        (use
                                                                                         translate_refs_value)
                                                                                        (("1"
                                                                                          (use
                                                                                           unmark_value)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil)))))))))))))
                                                                               ("2"
                                                                                (grind)
                                                                                nil)))))))))
                                                                       ("2"
                                                                        (case
                                                                         "pureReleaseRedex?(rS`redex)")
                                                                        (("1"
                                                                          (delete
                                                                           obj)
                                                                          (("1"
                                                                            (expand
                                                                             rS)
                                                                            (("1"
                                                                              (expand
                                                                               make_redex)
                                                                              (("1"
                                                                                (lemma
                                                                                 top_releases_build_redex)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "to_topstate(grS)`redex")
                                                                                  (("1"
                                                                                    (expand
                                                                                     to_topstate)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       top_releases_ct_fill)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil)))))))))))))))
                                                                         ("2"
                                                                          (case
                                                                           "pureRedex?(rS`redex)")
                                                                          (("1"
                                                                            (expand
                                                                             pureRedex?)
                                                                            (("1"
                                                                              (prop)
                                                                              nil)))
                                                                           ("2"
                                                                            (typepred
                                                                             rS)
                                                                            (("2"
                                                                              (propax)
                                                                              nil)))))))))))))))))))))))))))))
                                                 ("2"
                                                  (delete obj)
                                                  (("2"
                                                    (expand rS)
                                                    (("2"
                                                      (case
                                                       "allReleaseMarked?(to_topstate(grS)`redex)")
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              nil)))))))
                                                       ("2"
                                                        (expand
                                                         to_topstate)
                                                        (("2"
                                                          (rewrite
                                                           arm_fill)
                                                          nil)))))))))))
                                               ("2"
                                                (delete obj)
                                                (("2"
                                                  (expand rS)
                                                  (("2"
                                                    (lemma
                                                     make_redex_ndr)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))
                                   ("2"
                                    (delete obj)
                                    (("2"
                                      (expand eS)
                                      (("2"
                                        (expand rS)
                                        (("2"
                                          (use make_redex_match)
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil)
                                             ("2" (propax) nil)
                                             ("3" (propax) nil)
                                             ("4"
                                              (expand make_redex)
                                              (("4"
                                                (lemma
                                                 top_releases_build_redex)
                                                (("4"
                                                  (inst
                                                   -1
                                                   "to_topstate(grS)`redex")
                                                  (("4"
                                                    (expand
                                                     to_topstate)
                                                    (("4"
                                                      (rewrite
                                                       top_releases_ct_fill)
                                                      (("4"
                                                        (grind)
                                                        nil)))))))))))
                                             ("5"
                                              (propax)
                                              nil)))))))))))))))))))
                           ("2" (delete obj)
                            (("2" (expand state_matches?)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand state_matches)
                                  (("2"
                                    (with-labels
                                     (flatten)
                                     ((err trr unm stam stom)))
                                    (("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (use translate_refs_value)
                                        (("2"
                                          (use unmark_value)
                                          nil)))))))))))))))))
                         ("2" (case "value?(to_topstate(grS)`redex)")
                          (("1" (expand reduce) (("1" (assert) nil)))
                           ("2"
                            (case "top_releases_ct(to_topstate(grS)`redex) = 0")
                            (("1" (delete obj)
                              (("1"
                                (expand state_matches?)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand state_matches)
                                    (("1"
                                      (with-labels
                                       (flatten)
                                       ((err trr unm stam stom)))
                                      (("1"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("1"
                                          (name-replace
                                           B
                                           "to_topstate(gS)`redex")
                                          (("1"
                                            (hide-all-but
                                             (1 -1 atom1 trr))
                                            (("1"
                                              (generalize
                                               B
                                               B
                                               IExpression)
                                              (("1"
                                                (generalize
                                                 A
                                                 A
                                                 IExpression)
                                                (("1"
                                                  (induct-and-simplify
                                                   A)
                                                  nil)))))))))))))))))))))
                             ("2" (expand to_topstate)
                              (("2"
                                (rewrite top_releases_ct_fill)
                                nil)))))))))))))))))))
             ("2" (expand rreduce_n obj)
              (("2" (typepred "grS")
                (("2" (assert)
                  (("2" (inst hrec "reduce(D)(grS)")
                    (("1" (inst hrec D gS)
                      (("1" (split hrec)
                        (("1" (rewrite top_releases_reduce)
                          (("1" (assert) nil)))
                         ("2" (use reduce_ndr) nil)
                         ("3" (use reduce_arm) (("3" (assert) nil)))
                         ("4" (use reduce_arm) (("4" (assert) nil)))
                         ("5" (delete obj)
                          (("5" (rewrite top_release_reduce)
                            (("5"
                              (with-labels
                               (case
                                "NOT value?(to_topstate(grS)`redex)")
                               ((atom2)))
                              (("1"
                                (name-replace
                                 rS
                                 "make_redex(to_topstate(grS))")
                                (("1"
                                  (expand state_matches?)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (name
                                         "nS"
                                         "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
                                        (("1"
                                          (case
                                           "state_matches(nS, rS)(translate)")
                                          (("1"
                                            (case
                                             "state_matches(nS, releaseReduce(D)(rS))(translate)")
                                            (("1"
                                              (case
                                               "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                                              (("1"
                                                (case-replace
                                                 "to_topstate(gS) = to_topstate(nS)")
                                                (("1"
                                                  (delete hrec)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (expand nS)
                                                      (("1"
                                                        (case-replace
                                                         "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                                                        (("1"
                                                          (grind)
                                                          nil)
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -2
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (expand
                                                               state_matches)
                                                              (("2"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((trr
                                                                   unm
                                                                   stam
                                                                   stom)))
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (case-replace
                                                                     "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                                                    (("1"
                                                                      (expand
                                                                       rS)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (typepred
                                                                           "buildRedex(to_topstate(grS)`redex)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               to_topstate)
                                                                              (("1"
                                                                                (propax)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (delete
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         unmark_fill)
                                                                        (("2"
                                                                          (rewrite
                                                                           translate_fill)
                                                                          nil)))))))))))))))))))))))))))
                                               ("2"
                                                (delete hrec)
                                                (("2"
                                                  (use
                                                   to_topstate_match)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))
                                             ("2"
                                              (delete hrec)
                                              (("2"
                                                (use
                                                 releaseReduce_match)
                                                (("2"
                                                  (split -1)
                                                  (("1" (propax) nil)
                                                   ("2"
                                                    (typepred rS)
                                                    (("2"
                                                      (case
                                                       "releaseRedex?(rS`redex)")
                                                      (("1"
                                                        (grind)
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         top_releases_build_redex)
                                                        (("2"
                                                          (expand rS)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "to_topstate(grS)`redex")
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))
                                                   ("3"
                                                    (expand rS)
                                                    (("3"
                                                      (lemma
                                                       make_redex_ndr)
                                                      (("3"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("3"
                                                          (hide-all-but
                                                           (1
                                                            ndr
                                                            atom2))
                                                          (("3"
                                                            (lemma
                                                             to_topstate_dangling)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               grS)
                                                              (("3"
                                                                (lemma
                                                                 make_redex_ndr)
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (prop)
                                                                    nil)))))))))))))))))
                                                   ("4"
                                                    (case
                                                     "allReleaseMarked?(to_topstate(grS)`redex)")
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              (("1"
                                                                (grind)
                                                                nil)))))))))))
                                                     ("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (rewrite
                                                         arm_fill)
                                                        nil)))))
                                                   ("5"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (delete hrec)
                                            (("2"
                                              (expand state_matches)
                                              (("2"
                                                (with-labels
                                                 (flatten)
                                                 ((trr unm stam stom)))
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand nS)
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (grind)
                                                        nil)))))
                                                   ("2"
                                                    (expand nS)
                                                    (("2"
                                                      (propax)
                                                      nil)))
                                                   ("3"
                                                    (expand nS)
                                                    (("3"
                                                      (propax)
                                                      nil)))
                                                   ("4"
                                                    (expand nS)
                                                    (("4"
                                                      (expand
                                                       to_topstate)
                                                      (("4"
                                                        (case-replace
                                                         "union(cvars(fill(grS`context, grS`redex)),
                                                        bumpn(cvars(hole),
                                                              popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                                                        bumpn(cvars(rS`context), popDepth(rS`redex)))")
                                                        (("1"
                                                          (expand rS)
                                                          (("1"
                                                            (grind)
                                                            nil)))
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (apply-extensionality)
                                                            (("2"
                                                              (delete
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 union)
                                                                (("2"
                                                                  (expand
                                                                   member)
                                                                  (("2"
                                                                    (expand
                                                                     rS)
                                                                    (("2"
                                                                      (expand
                                                                       make_redex)
                                                                      (("2"
                                                                        (typepred
                                                                         "buildRedex(to_topstate(grS)`redex)")
                                                                        (("2"
                                                                          (expand
                                                                           to_topstate)
                                                                          (("2"
                                                                            (name-replace
                                                                             A
                                                                             "fill(grS`context, grS`redex)")
                                                                            (("2"
                                                                              (name-replace
                                                                               redex
                                                                               "buildRedex(A)`2")
                                                                              (("2"
                                                                                (name-replace
                                                                                 ctx
                                                                                 "buildRedex(A)`1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   RL)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     cvars_fill)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil)))))))))))))))))))))))))))))))))))
                                                   ("5"
                                                    (expand
                                                     store_matches)
                                                    (("5"
                                                      (expand nS)
                                                      (("5"
                                                        (expand
                                                         to_topstate)
                                                        (("5"
                                                          (expand rS)
                                                          (("5"
                                                            (expand
                                                             make_redex)
                                                            (("5"
                                                              (expand
                                                               to_topstate)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (inst?
                                                                   stom)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (typepred
                                                                             j)
                                                                            (("3"
                                                                              (expand
                                                                               rS)
                                                                              (("3"
                                                                                (grind)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (typepred
                                                                     r)
                                                                    (("2"
                                                                      (expand
                                                                       rS)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))))))))
                                         ("2"
                                          (typepred "rS`redex")
                                          (("2"
                                            (case-replace
                                             "gS`stack`length = rS`stack`length")
                                            (("1"
                                              (rewrite
                                               translate_popDepth)
                                              (("1"
                                                (rewrite
                                                 unmark_popDepth)
                                                (("1"
                                                  (rewrite
                                                   unmark_popDepth_ctx)
                                                  (("1"
                                                    (rewrite
                                                     translate_vars)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                                                          (("1"
                                                            (case-replace
                                                             "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                                            (("1"
                                                              (delete
                                                               hrec)
                                                              (("1"
                                                                (expand
                                                                 state_matches)
                                                                (("1"
                                                                  (with-labels
                                                                   (flatten)
                                                                   ((err
                                                                     trr
                                                                     unm
                                                                     stam
                                                                     stom)))
                                                                  (("1"
                                                                    (replace
                                                                     trr)
                                                                    (("1"
                                                                      (typepred
                                                                       "to_topstate(gS)`redex")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         i)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))))))))))))
                                                             ("2"
                                                              (expand
                                                               rS)
                                                              (("2"
                                                                (expand
                                                                 make_redex)
                                                                (("2"
                                                                  (typepred
                                                                   "buildRedex(to_topstate(grS)`redex)")
                                                                  (("2"
                                                                    (propax)
                                                                    nil)))))))))
                                                           ("2"
                                                            (rewrite
                                                             unmark_fill)
                                                            (("2"
                                                              (rewrite
                                                               translate_fill)
                                                              (("2"
                                                                (rewrite
                                                                 refs_fill)
                                                                (("2"
                                                                  (rewrite
                                                                   contextPurefill)
                                                                  nil)))))))))))
                                                       ("2"
                                                        (lemma
                                                         unmark_vars)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "rS`redex"
                                                             i)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               i)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))
                                                       ("3"
                                                        (skeep)
                                                        (("3"
                                                          (lemma
                                                           unmark_vars_ctx)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "rS`context"
                                                             i)
                                                            (("3"
                                                              (inst
                                                               -6
                                                               i)
                                                              (("3"
                                                                (grind)
                                                                nil)))))))))
                                                       ("4"
                                                        (propax)
                                                        nil)))))))))))
                                             ("2"
                                              (hide-all-but (1 stm))
                                              (("2"
                                                (expand rS)
                                                (("2"
                                                  (grind)
                                                  nil)))))))))))))))))))
                               ("2"
                                (assert)
                                (("2"
                                  (delete hrec)
                                  (("2"
                                    (case
                                     "top_releases_ct(to_topstate(grS)`redex) = 0")
                                    (("1"
                                      (expand to_topstate)
                                      (("1"
                                        (rewrite top_releases_ct_fill)
                                        nil)))
                                     ("2"
                                      (hide-all-but (1 atom2))
                                      (("2"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("2"
                                          (generalize A A IExpression)
                                          (("2"
                                            (grind)
                                            nil)))))))))))))))))))
                         ("6" (delete obj)
                          (("6" (rewrite top_releases_reduce)
                            (("6" (assert) nil)))))))))
                     ("2" (delete obj)
                      (("2" (rewrite top_release_reduce)
                        (("2"
                          (name-replace "rS"
                           "make_redex(to_topstate(grS))")
                          (("2" (case "rS`error")
                            (("1" (hide-all-but (1 -1))
                              (("1" (expand rS) (("1" (grind) nil)))))
                             ("2" (hide-all-but (1 -1))
                              (("2"
                                (case-replace
                                 "releaseReduce(D)(rS)`error = rS`error")
                                (("2"
                                  (delete -1)
                                  (("2"
                                    (expand releaseReduce)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (grind)
                                        nil))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (bisimulation_lemma-4 "" 3706299224
   ("" (measure-induct+ "top_releases_ct(grS`redex)" ("grS"))
    (("" (name-replace grS "x!1")
      (("" (with-labels (skeep) ((ndr arm armc stm obj)))
        (("" (label hrec -1)
          (("" (case-replace "top_releases_ct(grS`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand rreduce_n)
                (("1" (expand rreduce_n)
                  (("1" (typepred grS)
                    (("1" (assert)
                      (("1"
                        (with-labels
                         (case "NOT atom?(to_topstate(gS)`redex)")
                         ((atom1)))
                        (("1"
                          (with-labels
                           (case "NOT atom?(to_topstate(grS)`redex)")
                           ((atom2)))
                          (("1" (expand reduce)
                            (("1"
                              (name-replace rS
                               "make_redex(to_topstate(grS))")
                              (("1"
                                (name-replace
                                 eS
                                 "make_redex_e(to_topstate(gS))")
                                (("1"
                                  (with-labels
                                   (case "state_matches?(eS, rS)")
                                   ((stm2)))
                                  (("1"
                                    (with-labels (copy stm2) ((stm3)))
                                    (("1"
                                      (expand state_matches? stm2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand state_matches stm2)
                                          (("1"
                                            (with-labels
                                             (flatten)
                                             ((err trr unm stam stom)))
                                            (("1"
                                              (with-labels
                                               (case
                                                "noDanglingRefs?(rS)")
                                               ((ndr2)))
                                              (("1"
                                                (with-labels
                                                 (case
                                                  "allReleaseMarked?(rS`redex) AND armc?(rS`context)")
                                                 ((arm2)))
                                                (("1"
                                                  (case
                                                   "variable?(rS`redex)")
                                                  (("1" (postpone) nil)
                                                   ("2"
                                                    (case
                                                     "variable?(eS`redex)")
                                                    (("1"
                                                      (postpone)
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "pureLetRedex?(rS`redex)")
                                                        (("1"
                                                          (case
                                                           "pureLetRedex?(eS`redex)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (use
                                                               letReduce_match)
                                                              (("1"
                                                                (grind)
                                                                nil)))))
                                                           ("2"
                                                            (delete
                                                             obj)
                                                            (("2"
                                                              (replace
                                                               trr
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (apply-eta
                                                                 "rS`redex"
                                                                 "(letexpr?)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   +
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (expand
                                                                     unmark
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       translate_refs
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         pureLetRedex?)
                                                                        (("1"
                                                                          (expand
                                                                           letRedex?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (use
                                                                               translate_refs_atom)
                                                                              (("1"
                                                                                (use
                                                                                 unmark_atom)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (use
                                                                               translate_refs_pure)
                                                                              (("2"
                                                                                (rewrite
                                                                                 unmark_pure)
                                                                                nil)))))))))))))))
                                                                 ("2"
                                                                  (grind)
                                                                  nil)))))))))
                                                         ("2"
                                                          (case
                                                           "applyRedex?(rS`redex)")
                                                          (("1"
                                                            (case
                                                             "applyRedex?(eS`redex)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 applyReduce_match)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   D
                                                                   eS
                                                                   rS)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "NOT pureLetRedex?(eS`redex)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil)
                                                                       ("2"
                                                                        (expand*
                                                                         pureLetRedex?
                                                                         letRedex?
                                                                         applyRedex?)
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))
                                                                     ("2"
                                                                      (propax)
                                                                      nil)
                                                                     ("3"
                                                                      (propax)
                                                                      nil)))
                                                                   ("2"
                                                                    (expand
                                                                     eS)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))))
                                                             ("2"
                                                              (delete
                                                               obj)
                                                              (("2"
                                                                (replace
                                                                 trr
                                                                 +
                                                                 :dir
                                                                 RL)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(application?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil)))))))))
                                                           ("2"
                                                            (case
                                                             "pureIftRedex?(rS`redex)")
                                                            (("1"
                                                              (case
                                                               "pureIftRedex?(eS`redex)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         ifReduce_match)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil)
                                                                           ("3"
                                                                            (propax)
                                                                            nil)))))))))
                                                                   ("2"
                                                                    (expand*
                                                                     pureLetRedex?
                                                                     letRedex?
                                                                     applyRedex?
                                                                     pureIftRedex?)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   +
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (apply-eta
                                                                     "rS`redex"
                                                                     "(ift?)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       +
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (expand
                                                                         unmark
                                                                         +)
                                                                        (("1"
                                                                          (expand
                                                                           translate_refs
                                                                           +)
                                                                          (("1"
                                                                            (expand
                                                                             pureIftRedex?)
                                                                            (("1"
                                                                              (expand
                                                                               iftRedex?)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (use
                                                                                   translate_refs_pure)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     unmark_pure)
                                                                                    nil)))
                                                                                 ("2"
                                                                                  (use
                                                                                   translate_refs_pure)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     unmark_pure)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (grind)
                                                                      nil)))))))))
                                                             ("2"
                                                              (case
                                                               "updateRedex?(rS`redex)")
                                                              (("1"
                                                                (case
                                                                 "updateRedex?(eS`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex)")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           updateReduce_match)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil)
                                                                             ("3"
                                                                              (propax)
                                                                              nil)
                                                                             ("4"
                                                                              (propax)
                                                                              nil)))))))))
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (replace
                                                                         trr
                                                                         +
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (apply-eta
                                                                           "rS`redex"
                                                                           "(update?)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))
                                                                           ("2"
                                                                            (grind)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (replace
                                                                     trr
                                                                     +
                                                                     :dir
                                                                     RL)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(update?)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))))
                                                               ("2"
                                                                (case
                                                                 "lookupRedex?(rS`redex)")
                                                                (("1"
                                                                  (case
                                                                   "lookupRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex)")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             lookupReduce_match)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (replace
                                                                           trr
                                                                           :dir
                                                                           RL)
                                                                          (("2"
                                                                            (apply-eta
                                                                             "rS`redex"
                                                                             "(lookup?)")
                                                                            (("1"
                                                                              (grind)
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil)))))))))))
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(lookup?)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (case
                                                                   "newintRedex?(rS`redex)")
                                                                  (("1"
                                                                    (case
                                                                     "newintRedex?(eS`redex)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex)")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               newintReduce_match)
                                                                              (("1"
                                                                                (prop)
                                                                                nil)))))))
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (apply-eta
                                                                             "rS`redex"
                                                                             "(newint?)")
                                                                            (("1"
                                                                              (replace
                                                                               trr
                                                                               +
                                                                               :dir
                                                                               RL)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 +
                                                                                 :dir
                                                                                 RL)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (grind)
                                                                              nil)))))))))
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(newint?)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))
                                                                   ("2"
                                                                    (case
                                                                     "newrefRedex?(rS`redex)")
                                                                    (("1"
                                                                      (case
                                                                       "newrefRedex?(eS`redex)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex)")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 newrefReduce_match)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil)))))))
                                                                           ("2"
                                                                            (delete
                                                                             obj)
                                                                            (("2"
                                                                              (replace
                                                                               trr
                                                                               +
                                                                               :dir
                                                                               RL)
                                                                              (("2"
                                                                                (apply-eta
                                                                                 "rS`redex"
                                                                                 "(newref?)")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil)))))))))))
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (apply-eta
                                                                           "rS`redex"
                                                                           "(newref?)")
                                                                          (("1"
                                                                            (grind)
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (case
                                                                       "popRedex?(rS`redex)")
                                                                      (("1"
                                                                        (case
                                                                         "popRedex?(eS`redex)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex) AND NOT newrefRedex?(eS`redex)")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (use
                                                                                   popReduce_match)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (delete
                                                                               obj)
                                                                              (("2"
                                                                                (replace
                                                                                 trr
                                                                                 :dir
                                                                                 RL)
                                                                                (("2"
                                                                                  (apply-eta
                                                                                   "rS`redex"
                                                                                   "(pop?)")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil)))))))))))
                                                                         ("2"
                                                                          (delete
                                                                           obj)
                                                                          (("2"
                                                                            (replace
                                                                             trr
                                                                             +
                                                                             :dir
                                                                             RL)
                                                                            (("2"
                                                                              (apply-eta
                                                                               "rS`redex"
                                                                               "(pop?)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 +
                                                                                 :dir
                                                                                 RL)
                                                                                (("1"
                                                                                  (expand
                                                                                   unmark)
                                                                                  (("1"
                                                                                    (expand
                                                                                     translate_refs)
                                                                                    (("1"
                                                                                      (expand
                                                                                       popRedex?)
                                                                                      (("1"
                                                                                        (use
                                                                                         translate_refs_atom)
                                                                                        (("1"
                                                                                          (use
                                                                                           unmark_atom)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil)))))))))))))
                                                                               ("2"
                                                                                (grind)
                                                                                nil)))))))))
                                                                       ("2"
                                                                        (case
                                                                         "pureReleaseRedex?(rS`redex)")
                                                                        (("1"
                                                                          (delete
                                                                           obj)
                                                                          (("1"
                                                                            (expand
                                                                             rS)
                                                                            (("1"
                                                                              (expand
                                                                               make_redex)
                                                                              (("1"
                                                                                (lemma
                                                                                 top_releases_build_redex)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "to_topstate(grS)`redex")
                                                                                  (("1"
                                                                                    (expand
                                                                                     to_topstate)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       top_releases_ct_fill)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil)))))))))))))))
                                                                         ("2"
                                                                          (case
                                                                           "pureRedex?(rS`redex)")
                                                                          (("1"
                                                                            (expand
                                                                             pureRedex?)
                                                                            (("1"
                                                                              (prop)
                                                                              nil)))
                                                                           ("2"
                                                                            (typepred
                                                                             rS)
                                                                            (("2"
                                                                              (propax)
                                                                              nil)))))))))))))))))))))))))))))
                                                 ("2"
                                                  (delete obj)
                                                  (("2"
                                                    (expand rS)
                                                    (("2"
                                                      (case
                                                       "allReleaseMarked?(to_topstate(grS)`redex)")
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              nil)))))))
                                                       ("2"
                                                        (expand
                                                         to_topstate)
                                                        (("2"
                                                          (rewrite
                                                           arm_fill)
                                                          nil)))))))))))
                                               ("2"
                                                (delete obj)
                                                (("2"
                                                  (expand rS)
                                                  (("2"
                                                    (lemma
                                                     make_redex_ndr)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))
                                   ("2"
                                    (delete obj)
                                    (("2"
                                      (expand eS)
                                      (("2"
                                        (expand rS)
                                        (("2"
                                          (use make_redex_match)
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil)
                                             ("2" (propax) nil)
                                             ("3" (propax) nil)
                                             ("4"
                                              (expand make_redex)
                                              (("4"
                                                (lemma
                                                 top_releases_build_redex)
                                                (("4"
                                                  (inst
                                                   -1
                                                   "to_topstate(grS)`redex")
                                                  (("4"
                                                    (expand
                                                     to_topstate)
                                                    (("4"
                                                      (rewrite
                                                       top_releases_ct_fill)
                                                      (("4"
                                                        (grind)
                                                        nil)))))))))))
                                             ("5"
                                              (propax)
                                              nil)))))))))))))))))))
                           ("2" (delete obj)
                            (("2" (expand state_matches?)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand state_matches)
                                  (("2"
                                    (with-labels
                                     (flatten)
                                     ((err trr unm stam stom)))
                                    (("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (use translate_refs_atom)
                                        (("2"
                                          (use unmark_atom)
                                          nil)))))))))))))))))
                         ("2" (case "atom?(to_topstate(grS)`redex)")
                          (("1" (expand reduce) (("1" (assert) nil)))
                           ("2"
                            (case "top_releases_ct(to_topstate(grS)`redex) = 0")
                            (("1" (delete obj)
                              (("1"
                                (expand state_matches?)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand state_matches)
                                    (("1"
                                      (with-labels
                                       (flatten)
                                       ((err trr unm stam stom)))
                                      (("1"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("1"
                                          (name-replace
                                           B
                                           "to_topstate(gS)`redex")
                                          (("1"
                                            (hide-all-but
                                             (1 -1 atom1 trr))
                                            (("1"
                                              (generalize
                                               B
                                               B
                                               IExpression)
                                              (("1"
                                                (generalize
                                                 A
                                                 A
                                                 IExpression)
                                                (("1"
                                                  (induct-and-simplify
                                                   A)
                                                  nil)))))))))))))))))))))
                             ("2" (expand to_topstate)
                              (("2"
                                (rewrite top_releases_ct_fill)
                                nil)))))))))))))))))))
             ("2" (expand rreduce_n obj)
              (("2" (typepred "grS")
                (("2" (assert)
                  (("2" (inst hrec "reduce(D)(grS)")
                    (("1" (inst hrec D gS)
                      (("1" (split hrec)
                        (("1" (rewrite top_releases_reduce)
                          (("1" (assert) nil)))
                         ("2" (use reduce_ndr) nil)
                         ("3" (use reduce_arm) (("3" (assert) nil)))
                         ("4" (use reduce_arm) (("4" (assert) nil)))
                         ("5" (delete obj)
                          (("5" (rewrite top_release_reduce)
                            (("5"
                              (with-labels
                               (case
                                "NOT atom?(to_topstate(grS)`redex)")
                               ((atom2)))
                              (("1"
                                (name-replace
                                 rS
                                 "make_redex(to_topstate(grS))")
                                (("1"
                                  (expand state_matches?)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (name
                                         "nS"
                                         "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
                                        (("1"
                                          (case
                                           "state_matches(nS, rS)(translate)")
                                          (("1"
                                            (case
                                             "state_matches(nS, releaseReduce(D)(rS))(translate)")
                                            (("1"
                                              (case
                                               "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                                              (("1"
                                                (case-replace
                                                 "to_topstate(gS) = to_topstate(nS)")
                                                (("1"
                                                  (delete hrec)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (expand nS)
                                                      (("1"
                                                        (case-replace
                                                         "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                                                        (("1"
                                                          (grind)
                                                          nil)
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -2
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (expand
                                                               state_matches)
                                                              (("2"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((trr
                                                                   unm
                                                                   stam
                                                                   stom)))
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (case-replace
                                                                     "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                                                    (("1"
                                                                      (expand
                                                                       rS)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (typepred
                                                                           "buildRedex(to_topstate(grS)`redex)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               to_topstate)
                                                                              (("1"
                                                                                (propax)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (delete
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         unmark_fill)
                                                                        (("2"
                                                                          (rewrite
                                                                           translate_fill)
                                                                          nil)))))))))))))))))))))))))))
                                               ("2"
                                                (delete hrec)
                                                (("2"
                                                  (use
                                                   to_topstate_match)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))
                                             ("2"
                                              (delete hrec)
                                              (("2"
                                                (use
                                                 releaseReduce_match)
                                                (("2"
                                                  (split -1)
                                                  (("1" (propax) nil)
                                                   ("2"
                                                    (typepred rS)
                                                    (("2"
                                                      (case
                                                       "releaseRedex?(rS`redex)")
                                                      (("1"
                                                        (grind)
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         top_releases_build_redex)
                                                        (("2"
                                                          (expand rS)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "to_topstate(grS)`redex")
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))
                                                   ("3"
                                                    (expand rS)
                                                    (("3"
                                                      (lemma
                                                       make_redex_ndr)
                                                      (("3"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("3"
                                                          (hide-all-but
                                                           (1
                                                            ndr
                                                            atom2))
                                                          (("3"
                                                            (lemma
                                                             to_topstate_dangling)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               grS)
                                                              (("3"
                                                                (lemma
                                                                 make_redex_ndr)
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (prop)
                                                                    nil)))))))))))))))))
                                                   ("4"
                                                    (case
                                                     "allReleaseMarked?(to_topstate(grS)`redex)")
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              (("1"
                                                                (grind)
                                                                nil)))))))))))
                                                     ("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (rewrite
                                                         arm_fill)
                                                        nil)))))
                                                   ("5"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (delete hrec)
                                            (("2"
                                              (expand state_matches)
                                              (("2"
                                                (with-labels
                                                 (flatten)
                                                 ((trr unm stam stom)))
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand nS)
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (grind)
                                                        nil)))))
                                                   ("2"
                                                    (expand nS)
                                                    (("2"
                                                      (propax)
                                                      nil)))
                                                   ("3"
                                                    (expand nS)
                                                    (("3"
                                                      (propax)
                                                      nil)))
                                                   ("4"
                                                    (expand nS)
                                                    (("4"
                                                      (expand
                                                       to_topstate)
                                                      (("4"
                                                        (case-replace
                                                         "union(cvars(fill(grS`context, grS`redex)),
                                                        bumpn(cvars(hole),
                                                              popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                                                        bumpn(cvars(rS`context), popDepth(rS`redex)))")
                                                        (("1"
                                                          (expand rS)
                                                          (("1"
                                                            (grind)
                                                            nil)))
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (apply-extensionality)
                                                            (("2"
                                                              (delete
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 union)
                                                                (("2"
                                                                  (expand
                                                                   member)
                                                                  (("2"
                                                                    (expand
                                                                     rS)
                                                                    (("2"
                                                                      (expand
                                                                       make_redex)
                                                                      (("2"
                                                                        (typepred
                                                                         "buildRedex(to_topstate(grS)`redex)")
                                                                        (("2"
                                                                          (expand
                                                                           to_topstate)
                                                                          (("2"
                                                                            (name-replace
                                                                             A
                                                                             "fill(grS`context, grS`redex)")
                                                                            (("2"
                                                                              (name-replace
                                                                               redex
                                                                               "buildRedex(A)`2")
                                                                              (("2"
                                                                                (name-replace
                                                                                 ctx
                                                                                 "buildRedex(A)`1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   RL)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     cvars_fill)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil)))))))))))))))))))))))))))))))))))
                                                   ("5"
                                                    (expand
                                                     store_matches)
                                                    (("5"
                                                      (expand nS)
                                                      (("5"
                                                        (expand
                                                         to_topstate)
                                                        (("5"
                                                          (expand rS)
                                                          (("5"
                                                            (expand
                                                             make_redex)
                                                            (("5"
                                                              (expand
                                                               to_topstate)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (inst?
                                                                   stom)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (typepred
                                                                             j)
                                                                            (("3"
                                                                              (expand
                                                                               rS)
                                                                              (("3"
                                                                                (grind)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (typepred
                                                                     r)
                                                                    (("2"
                                                                      (expand
                                                                       rS)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))))))))
                                         ("2"
                                          (typepred "rS`redex")
                                          (("2"
                                            (case-replace
                                             "gS`stack`length = rS`stack`length")
                                            (("1"
                                              (rewrite
                                               translate_popDepth)
                                              (("1"
                                                (rewrite
                                                 unmark_popDepth)
                                                (("1"
                                                  (rewrite
                                                   unmark_popDepth_ctx)
                                                  (("1"
                                                    (rewrite
                                                     translate_vars)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                                                          (("1"
                                                            (case-replace
                                                             "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                                            (("1"
                                                              (delete
                                                               hrec)
                                                              (("1"
                                                                (expand
                                                                 state_matches)
                                                                (("1"
                                                                  (with-labels
                                                                   (flatten)
                                                                   ((err
                                                                     trr
                                                                     unm
                                                                     stam
                                                                     stom)))
                                                                  (("1"
                                                                    (replace
                                                                     trr)
                                                                    (("1"
                                                                      (typepred
                                                                       "to_topstate(gS)`redex")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         i)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))))))))))))
                                                             ("2"
                                                              (expand
                                                               rS)
                                                              (("2"
                                                                (expand
                                                                 make_redex)
                                                                (("2"
                                                                  (typepred
                                                                   "buildRedex(to_topstate(grS)`redex)")
                                                                  (("2"
                                                                    (propax)
                                                                    nil)))))))))
                                                           ("2"
                                                            (rewrite
                                                             unmark_fill)
                                                            (("2"
                                                              (rewrite
                                                               translate_fill)
                                                              (("2"
                                                                (rewrite
                                                                 refs_fill)
                                                                (("2"
                                                                  (rewrite
                                                                   contextPurefill)
                                                                  nil)))))))))))
                                                       ("2"
                                                        (lemma
                                                         unmark_vars)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "rS`redex"
                                                             i)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               i)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))
                                                       ("3"
                                                        (skeep)
                                                        (("3"
                                                          (lemma
                                                           unmark_vars_ctx)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "rS`context"
                                                             i)
                                                            (("3"
                                                              (inst
                                                               -6
                                                               i)
                                                              (("3"
                                                                (grind)
                                                                nil)))))))))
                                                       ("4"
                                                        (propax)
                                                        nil)))))))))))
                                             ("2"
                                              (hide-all-but (1 stm))
                                              (("2"
                                                (expand rS)
                                                (("2"
                                                  (grind)
                                                  nil)))))))))))))))))))
                               ("2"
                                (assert)
                                (("2"
                                  (delete hrec)
                                  (("2"
                                    (case
                                     "top_releases_ct(to_topstate(grS)`redex) = 0")
                                    (("1"
                                      (expand to_topstate)
                                      (("1"
                                        (rewrite top_releases_ct_fill)
                                        nil)))
                                     ("2"
                                      (hide-all-but (1 atom2))
                                      (("2"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("2"
                                          (generalize A A IExpression)
                                          (("2"
                                            (grind)
                                            nil)))))))))))))))))))
                         ("6" (delete obj)
                          (("6" (rewrite top_releases_reduce)
                            (("6" (assert) nil)))))))))
                     ("2" (delete obj)
                      (("2" (rewrite top_release_reduce)
                        (("2"
                          (name-replace "rS"
                           "make_redex(to_topstate(grS))")
                          (("2" (case "rS`error")
                            (("1" (hide-all-but (1 -1))
                              (("1" (expand rS) (("1" (grind) nil)))))
                             ("2" (hide-all-but (1 -1))
                              (("2"
                                (case-replace
                                 "releaseReduce(D)(rS)`error = rS`error")
                                (("2"
                                  (delete -1)
                                  (("2"
                                    (expand releaseReduce)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (grind)
                                        nil))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (bisimulation_lemma-3 "" 3701531234
   ("" (measure-induct+ "top_releases_ct(grS`redex)" ("grS"))
    (("" (name-replace grS "x!1")
      (("" (with-labels (skeep) ((ndr arm armc stm obj)))
        (("" (label hrec -1)
          (("" (case-replace "top_releases_ct(grS`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand rreduce_n)
                (("1" (expand rreduce_n)
                  (("1" (typepred grS)
                    (("1" (assert)
                      (("1"
                        (with-labels
                         (case "NOT atom?(to_topstate(gS)`redex)")
                         ((atom1)))
                        (("1"
                          (with-labels
                           (case "NOT atom?(to_topstate(grS)`redex)")
                           ((atom2)))
                          (("1" (expand reduce)
                            (("1"
                              (name-replace rS
                               "make_redex(to_topstate(grS))")
                              (("1"
                                (name-replace
                                 eS
                                 "make_redex_e(to_topstate(gS))")
                                (("1"
                                  (with-labels
                                   (case "state_matches?(eS, rS)")
                                   ((stm2)))
                                  (("1"
                                    (with-labels (copy stm2) ((stm3)))
                                    (("1"
                                      (expand state_matches? stm2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand state_matches stm2)
                                          (("1"
                                            (with-labels
                                             (flatten)
                                             ((err trr unm stam stom)))
                                            (("1"
                                              (with-labels
                                               (case
                                                "noDanglingRefs?(rS)")
                                               ((ndr2)))
                                              (("1"
                                                (with-labels
                                                 (case
                                                  "allReleaseMarked?(rS`redex) AND armc?(rS`context)")
                                                 ((arm2)))
                                                (("1"
                                                  (case
                                                   "pureLetRedex?(rS`redex)")
                                                  (("1"
                                                    (case
                                                     "pureLetRedex?(eS`redex)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         letReduce_match)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (delete obj)
                                                      (("2"
                                                        (replace
                                                         trr
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (apply-eta
                                                           "rS`redex"
                                                           "(letexpr?)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             +
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (expand
                                                               unmark
                                                               +)
                                                              (("1"
                                                                (expand
                                                                 translate_refs
                                                                 +)
                                                                (("1"
                                                                  (expand
                                                                   pureLetRedex?)
                                                                  (("1"
                                                                    (expand
                                                                     letRedex?)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (use
                                                                         translate_refs_atom)
                                                                        (("1"
                                                                          (use
                                                                           unmark_atom)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         translate_refs_pure)
                                                                        (("2"
                                                                          (rewrite
                                                                           unmark_pure)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "applyRedex?(rS`redex)")
                                                    (("1"
                                                      (case
                                                       "applyRedex?(eS`redex)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           applyReduce_match)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             D
                                                             eS
                                                             rS)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "NOT pureLetRedex?(eS`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand*
                                                                   pureLetRedex?
                                                                   letRedex?
                                                                   applyRedex?)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               eS)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (delete obj)
                                                        (("2"
                                                          (replace
                                                           trr
                                                           +
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (apply-eta
                                                             "rS`redex"
                                                             "(application?)")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "pureIftRedex?(rS`redex)")
                                                      (("1"
                                                        (case
                                                         "pureIftRedex?(eS`redex)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex)")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (use
                                                                   ifReduce_match)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand*
                                                               pureLetRedex?
                                                               letRedex?
                                                               applyRedex?
                                                               pureIftRedex?)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (replace
                                                             trr
                                                             +
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (apply-eta
                                                               "rS`redex"
                                                               "(ift?)")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 +
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (expand
                                                                   unmark
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     translate_refs
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       pureIftRedex?)
                                                                      (("1"
                                                                        (expand
                                                                         iftRedex?)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (use
                                                                             translate_refs_pure)
                                                                            (("1"
                                                                              (rewrite
                                                                               unmark_pure)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             translate_refs_pure)
                                                                            (("2"
                                                                              (rewrite
                                                                               unmark_pure)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "updateRedex?(rS`redex)")
                                                        (("1"
                                                          (case
                                                           "updateRedex?(eS`redex)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     updateReduce_match)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("4"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   +
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (apply-eta
                                                                     "rS`redex"
                                                                     "(update?)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (delete
                                                             obj)
                                                            (("2"
                                                              (replace
                                                               trr
                                                               +
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (apply-eta
                                                                 "rS`redex"
                                                                 "(update?)")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "lookupRedex?(rS`redex)")
                                                          (("1"
                                                            (case
                                                             "lookupRedex?(eS`redex)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       lookupReduce_match)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (replace
                                                                     trr
                                                                     :dir
                                                                     RL)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(lookup?)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (delete
                                                               obj)
                                                              (("2"
                                                                (apply-eta
                                                                 "rS`redex"
                                                                 "(lookup?)")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "newintRedex?(rS`redex)")
                                                            (("1"
                                                              (case
                                                               "newintRedex?(eS`redex)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         newintReduce_match)
                                                                        (("1"
                                                                          (prop)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(newint?)")
                                                                      (("1"
                                                                        (replace
                                                                         trr
                                                                         +
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(newint?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "newrefRedex?(rS`redex)")
                                                              (("1"
                                                                (case
                                                                 "newrefRedex?(eS`redex)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex)")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           newrefReduce_match)
                                                                          (("1"
                                                                            (prop)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       obj)
                                                                      (("2"
                                                                        (replace
                                                                         trr
                                                                         +
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (apply-eta
                                                                           "rS`redex"
                                                                           "(newref?)")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (apply-eta
                                                                     "rS`redex"
                                                                     "(newref?)")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "popRedex?(rS`redex)")
                                                                (("1"
                                                                  (case
                                                                   "popRedex?(eS`redex)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex) AND NOT newrefRedex?(eS`redex)")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             popReduce_match)
                                                                            (("1"
                                                                              (prop)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         obj)
                                                                        (("2"
                                                                          (replace
                                                                           trr
                                                                           :dir
                                                                           RL)
                                                                          (("2"
                                                                            (apply-eta
                                                                             "rS`redex"
                                                                             "(pop?)")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (replace
                                                                       trr
                                                                       +
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(pop?)")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           +
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (expand
                                                                             unmark)
                                                                            (("1"
                                                                              (expand
                                                                               translate_refs)
                                                                              (("1"
                                                                                (expand
                                                                                 popRedex?)
                                                                                (("1"
                                                                                  (use
                                                                                   translate_refs_atom)
                                                                                  (("1"
                                                                                    (use
                                                                                     unmark_atom)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "pureReleaseRedex?(rS`redex)")
                                                                  (("1"
                                                                    (delete
                                                                     obj)
                                                                    (("1"
                                                                      (expand
                                                                       rS)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (lemma
                                                                           top_releases_build_redex)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "to_topstate(grS)`redex")
                                                                            (("1"
                                                                              (expand
                                                                               to_topstate)
                                                                              (("1"
                                                                                (rewrite
                                                                                 top_releases_ct_fill)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "pureRedex?(rS`redex)")
                                                                    (("1"
                                                                      (expand
                                                                       pureRedex?)
                                                                      (("1"
                                                                        (prop)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       rS)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (delete obj)
                                                  (("2"
                                                    (expand rS)
                                                    (("2"
                                                      (case
                                                       "allReleaseMarked?(to_topstate(grS)`redex)")
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         to_topstate)
                                                        (("2"
                                                          (rewrite
                                                           arm_fill)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (delete obj)
                                                (("2"
                                                  (expand rS)
                                                  (("2"
                                                    (lemma
                                                     make_redex_ndr)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete obj)
                                    (("2"
                                      (expand eS)
                                      (("2"
                                        (expand rS)
                                        (("2"
                                          (use make_redex_match)
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil)
                                             ("4"
                                              (expand make_redex)
                                              (("4"
                                                (lemma
                                                 top_releases_build_redex)
                                                (("4"
                                                  (inst
                                                   -1
                                                   "to_topstate(grS)`redex")
                                                  (("4"
                                                    (expand
                                                     to_topstate)
                                                    (("4"
                                                      (rewrite
                                                       top_releases_ct_fill)
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (delete obj)
                            (("2" (expand state_matches?)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand state_matches)
                                  (("2"
                                    (with-labels
                                     (flatten)
                                     ((err trr unm stam stom)))
                                    (("2"
                                      (replace trr :dir RL)
                                      (("2"
                                        (use translate_refs_atom)
                                        (("2"
                                          (use unmark_atom)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "atom?(to_topstate(grS)`redex)")
                          (("1" (expand reduce)
                            (("1" (assert) nil nil)) nil)
                           ("2"
                            (case "top_releases_ct(to_topstate(grS)`redex) = 0")
                            (("1" (delete obj)
                              (("1"
                                (expand state_matches?)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand state_matches)
                                    (("1"
                                      (with-labels
                                       (flatten)
                                       ((err trr unm stam stom)))
                                      (("1"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("1"
                                          (name-replace
                                           B
                                           "to_topstate(gS)`redex")
                                          (("1"
                                            (hide-all-but
                                             (1 -1 atom1 trr))
                                            (("1"
                                              (generalize
                                               B
                                               B
                                               IExpression)
                                              (("1"
                                                (generalize
                                                 A
                                                 A
                                                 IExpression)
                                                (("1"
                                                  (induct-and-simplify
                                                   A)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand to_topstate)
                              (("2"
                                (rewrite top_releases_ct_fill)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand rreduce_n obj)
              (("2" (typepred "grS")
                (("2" (assert)
                  (("2" (inst hrec "reduce(D)(grS)")
                    (("1" (inst hrec D gS)
                      (("1" (split hrec)
                        (("1" (rewrite top_releases_reduce)
                          (("1" (assert) nil nil)) nil)
                         ("2" (use reduce_ndr) nil nil)
                         ("3" (use reduce_arm) (("3" (assert) nil nil))
                          nil)
                         ("4" (use reduce_arm) (("4" (assert) nil nil))
                          nil)
                         ("5" (delete obj)
                          (("5" (rewrite top_release_reduce)
                            (("5"
                              (with-labels
                               (case
                                "NOT atom?(to_topstate(grS)`redex)")
                               ((atom2)))
                              (("1"
                                (name-replace
                                 rS
                                 "make_redex(to_topstate(grS))")
                                (("1"
                                  (expand state_matches?)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (name
                                         "nS"
                                         "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
                                        (("1"
                                          (case
                                           "state_matches(nS, rS)(translate)")
                                          (("1"
                                            (case
                                             "state_matches(nS, releaseReduce(D)(rS))(translate)")
                                            (("1"
                                              (case
                                               "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                                              (("1"
                                                (case-replace
                                                 "to_topstate(gS) = to_topstate(nS)")
                                                (("1"
                                                  (delete hrec)
                                                  (("1"
                                                    (expand
                                                     to_topstate)
                                                    (("1"
                                                      (expand nS)
                                                      (("1"
                                                        (case-replace
                                                         "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -2
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (expand
                                                               state_matches)
                                                              (("2"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((trr
                                                                   unm
                                                                   stam
                                                                   stom)))
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (case-replace
                                                                     "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                                                    (("1"
                                                                      (expand
                                                                       rS)
                                                                      (("1"
                                                                        (expand
                                                                         make_redex)
                                                                        (("1"
                                                                          (typepred
                                                                           "buildRedex(to_topstate(grS)`redex)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               to_topstate)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         unmark_fill)
                                                                        (("2"
                                                                          (rewrite
                                                                           translate_fill)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (delete hrec)
                                                (("2"
                                                  (use
                                                   to_topstate_match)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete hrec)
                                              (("2"
                                                (use
                                                 releaseReduce_match)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred rS)
                                                    (("2"
                                                      (case
                                                       "releaseRedex?(rS`redex)")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         top_releases_build_redex)
                                                        (("2"
                                                          (expand rS)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "to_topstate(grS)`redex")
                                                            (("2"
                                                              (expand
                                                               to_topstate)
                                                              (("2"
                                                                (rewrite
                                                                 top_releases_ct_fill)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand rS)
                                                    (("3"
                                                      (lemma
                                                       make_redex_ndr)
                                                      (("3"
                                                        (lemma
                                                         to_topstate_dangling)
                                                        (("3"
                                                          (hide-all-but
                                                           (1
                                                            ndr
                                                            atom2))
                                                          (("3"
                                                            (lemma
                                                             to_topstate_dangling)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               grS)
                                                              (("3"
                                                                (lemma
                                                                 make_redex_ndr)
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (case
                                                     "allReleaseMarked?(to_topstate(grS)`redex)")
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (expand
                                                         make_redex)
                                                        (("1"
                                                          (typepred
                                                           "buildRedex(to_topstate(grS)`redex)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (rewrite
                                                               arm_fill)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       to_topstate)
                                                      (("2"
                                                        (rewrite
                                                         arm_fill)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (delete hrec)
                                            (("2"
                                              (expand state_matches)
                                              (("2"
                                                (with-labels
                                                 (flatten)
                                                 ((trr unm stam stom)))
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand nS)
                                                    (("1"
                                                      (expand rS)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand nS)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand nS)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (expand nS)
                                                    (("4"
                                                      (expand
                                                       to_topstate)
                                                      (("4"
                                                        (case-replace
                                                         "union(cvars(fill(grS`context, grS`redex)),
                                        bumpn(cvars(hole),
                                              popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                                        bumpn(cvars(rS`context), popDepth(rS`redex)))")
                                                        (("1"
                                                          (expand rS)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete 2)
                                                          (("2"
                                                            (apply-extensionality)
                                                            (("2"
                                                              (delete
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 union)
                                                                (("2"
                                                                  (expand
                                                                   member)
                                                                  (("2"
                                                                    (expand
                                                                     rS)
                                                                    (("2"
                                                                      (expand
                                                                       make_redex)
                                                                      (("2"
                                                                        (typepred
                                                                         "buildRedex(to_topstate(grS)`redex)")
                                                                        (("2"
                                                                          (expand
                                                                           to_topstate)
                                                                          (("2"
                                                                            (name-replace
                                                                             A
                                                                             "fill(grS`context, grS`redex)")
                                                                            (("2"
                                                                              (name-replace
                                                                               redex
                                                                               "buildRedex(A)`2")
                                                                              (("2"
                                                                                (name-replace
                                                                                 ctx
                                                                                 "buildRedex(A)`1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   RL)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     cvars_fill)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (expand
                                                     store_matches)
                                                    (("5"
                                                      (expand nS)
                                                      (("5"
                                                        (expand
                                                         to_topstate)
                                                        (("5"
                                                          (expand rS)
                                                          (("5"
                                                            (expand
                                                             make_redex)
                                                            (("5"
                                                              (expand
                                                               to_topstate)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (inst?
                                                                   stom)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (typepred
                                                                             j)
                                                                            (("3"
                                                                              (expand
                                                                               rS)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     r)
                                                                    (("2"
                                                                      (expand
                                                                       rS)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "rS`redex")
                                          (("2"
                                            (case-replace
                                             "gS`stack`length = rS`stack`length")
                                            (("1"
                                              (rewrite
                                               translate_popDepth)
                                              (("1"
                                                (rewrite
                                                 unmark_popDepth)
                                                (("1"
                                                  (rewrite
                                                   unmark_popDepth_ctx)
                                                  (("1"
                                                    (rewrite
                                                     translate_vars)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                                                          (("1"
                                                            (case-replace
                                                             "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                                            (("1"
                                                              (delete
                                                               hrec)
                                                              (("1"
                                                                (expand
                                                                 state_matches)
                                                                (("1"
                                                                  (with-labels
                                                                   (flatten)
                                                                   ((err
                                                                     trr
                                                                     unm
                                                                     stam
                                                                     stom)))
                                                                  (("1"
                                                                    (replace
                                                                     trr)
                                                                    (("1"
                                                                      (typepred
                                                                       "to_topstate(gS)`redex")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         i)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               rS)
                                                              (("2"
                                                                (expand
                                                                 make_redex)
                                                                (("2"
                                                                  (typepred
                                                                   "buildRedex(to_topstate(grS)`redex)")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             unmark_fill)
                                                            (("2"
                                                              (rewrite
                                                               translate_fill)
                                                              (("2"
                                                                (rewrite
                                                                 refs_fill)
                                                                (("2"
                                                                  (rewrite
                                                                   contextPurefill)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         unmark_vars)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "rS`redex"
                                                             i)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               i)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skeep)
                                                        (("3"
                                                          (lemma
                                                           unmark_vars_ctx)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "rS`context"
                                                             i)
                                                            (("3"
                                                              (inst
                                                               -6
                                                               i)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 stm))
                                              (("2"
                                                (expand rS)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (delete hrec)
                                  (("2"
                                    (case
                                     "top_releases_ct(to_topstate(grS)`redex) = 0")
                                    (("1"
                                      (expand to_topstate)
                                      (("1"
                                        (rewrite top_releases_ct_fill)
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 atom2))
                                      (("2"
                                        (name-replace
                                         A
                                         "to_topstate(grS)`redex")
                                        (("2"
                                          (generalize A A IExpression)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (delete obj)
                          (("6" (rewrite top_releases_reduce)
                            (("6" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete obj)
                      (("2" (rewrite top_release_reduce)
                        (("2"
                          (name-replace "rS"
                           "make_redex(to_topstate(grS))")
                          (("2" (case "rS`error")
                            (("1" (hide-all-but (1 -1))
                              (("1"
                                (expand rS)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 -1))
                              (("2"
                                (case-replace
                                 "releaseReduce(D)(rS)`error = rS`error")
                                (("2"
                                  (delete -1)
                                  (("2"
                                    (expand releaseReduce)
                                    (("2"
                                      (lift-if)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decref const-decl "{rS1 |
   allcountStore(rS1) <= allcountStore(rS) AND
    rS1`domain = rS`domain AND
     (FORALL (s: (rS`domain)):
        rS1`store(s)`length = rS`store(s)`length AND
         rS1`count(s) <= rS`count(s) AND
          (rS1`count(s) = 0 OR rS1`store(s) = rS`store(s)))
      AND noDanglingRefs?(rS1)}" rreduction nil)
    (decref1_preserves_error formula-decl nil reduction_props nil)
    (decref_preserves_jdg application-judgement "{rS2 |
   rS2`redex = rS`redex AND
    rS2`stack = rS`stack AND
     rS2`context = rS`context AND rS2`error = rS`error}"
     reduction_props nil)
    (translate_popDepth formula-decl nil reduction_props nil)
    (unmark_popDepth_ctx formula-decl nil preprocess nil)
    (contextPurefill formula-decl nil IL nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (refs_fill formula-decl nil IL nil)
    (unmark_vars formula-decl nil preprocess nil)
    (unmark_vars_ctx formula-decl nil preprocess nil)
    (translate_vars formula-decl nil reduction_props nil)
    (unmark_popDepth formula-decl nil preprocess nil)
    (releaseReduce_match formula-decl nil reduction_props nil)
    (translate_fill formula-decl nil reduction_props nil)
    (unmark_fill formula-decl nil preprocess nil)
    (to_topstate_match formula-decl nil reduction_props nil)
    (releaseReduce const-decl "rstate" rreduction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cvars_fill formula-decl nil preprocess nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (top_release_reduce formula-decl nil reduction_props nil)
    (reduce_arm judgement-tcc nil reduction_props nil)
    (reduce_ndr judgement-tcc nil rreduction nil)
    (top_releases_reduce formula-decl nil reduction_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (Definition type-eq-decl nil rreduction nil)
    (reduce_ndr application-judgement "(noDanglingRefs?)" rreduction
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IExpression_induction formula-decl nil IExpression_adt nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (pureRedex? const-decl "bool" IL nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (fill def-decl "IExpression" IL nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (arm_fill formula-decl nil preprocess nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (IExpression_letexpr_eta formula-decl nil IExpression_adt nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (unmark_atom judgement-tcc nil preprocess nil)
    (letrhs adt-accessor-decl "[(letexpr?) -> IExpression]"
     IExpression_adt nil)
    (translate_refs_atom judgement-tcc nil reduction_props nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (body adt-accessor-decl "[(letexpr?) -> IExpression]"
          IExpression_adt nil)
    (translate_refs_pure recursive-judgement-axiom nil reduction_props
     nil)
    (letRedex? const-decl "bool" IL nil)
    (translate_refs def-decl "IExpression" reduction_props nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (letReduce_match formula-decl nil reduction_props nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (IExpression_ift_eta formula-decl nil IExpression_adt nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (thenexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (elseexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (iftRedex? const-decl "bool" IL nil)
    (ifReduce_match formula-decl nil reduction_props nil)
    (lookupRedex? const-decl "bool" IL nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (IExpression_lookup_eta formula-decl nil IExpression_adt nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (lookupReduce_match formula-decl nil reduction_props nil)
    (newrefRedex? const-decl "bool" IL nil)
    (IExpression_newref_eta formula-decl nil IExpression_adt nil)
    (newref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (newrefReduce_match formula-decl nil reduction_props nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (top_releases_build_redex formula-decl nil reduction_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (releaseRedex? const-decl "bool" IL nil)
    (top_releases_ct_fill formula-decl nil reduction_props nil)
    (popReduce_match formula-decl nil reduction_props nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IExpression_pop_eta formula-decl nil IExpression_adt nil)
    (pbody adt-accessor-decl "[(pop?) -> IExpression]" IExpression_adt
     nil)
    (unmark def-decl "IContext" preprocess nil)
    (popRedex? const-decl "bool" IL nil)
    (newintReduce_match formula-decl nil reduction_props nil)
    (IExpression_newint_eta formula-decl nil IExpression_adt nil)
    (newint? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (newintRedex? const-decl "bool" IL nil)
    (updateReduce_match formula-decl nil reduction_props nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IExpression_update_eta formula-decl nil IExpression_adt nil)
    (updateRedex? const-decl "bool" IL nil)
    (applyReduce_match formula-decl nil reduction_props nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (IExpression_application_eta formula-decl nil IExpression_adt nil)
    (applyRedex? const-decl "bool" IL nil)
    (to_topstate_dangling judgement-tcc nil rreduction nil)
    (make_redex_ndr judgement-tcc nil rreduction nil)
    (make_redex_match formula-decl nil reduction_props nil)
    (make_redex_e const-decl "{eS | pureRedex?(eS`redex)}" reduction
     nil)
    (reduce const-decl "rstate" rreduction nil)
    (atom? const-decl "bool" IL nil)
    (rreduce_n def-decl "rstate" reduction_props nil)
    (reduce const-decl "estate" reduction nil)
    (Defs type-eq-decl nil reduction nil)
    (Definition type-eq-decl nil reduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (to_topstate const-decl "topstate" reduction nil)
    (topstate type-eq-decl nil reduction nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (armc? def-decl "bool" preprocess nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (pure? def-decl "bool" IL nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rstate type-eq-decl nil rreduction nil)
    (refcount const-decl "nat" rreduction nil)
    (Store type-eq-decl nil reduction nil)
    (mark def-decl "IExpression" preprocess nil)
    (contextPure? def-decl "bool" IL nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (refs def-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (domainValue? const-decl "bool" IL nil)
    (every const-decl "bool" finseq_theorems nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Stack type-eq-decl nil IL nil) (value? const-decl "bool" IL nil)
    (IExpression type-decl nil IExpression_adt nil)
    (below type-eq-decl nil nat_types nil)
    (emptyset const-decl "set" sets nil)
    (markc def-decl "IContext" preprocess nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cpure? def-decl "bool" IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IContext type-decl nil IL nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)
  (bisimulation_lemma-2 "" 3701448254
   ("" (measure-induct+ "top_releases_ct(grS`redex)" ("grS"))
    (("" (name-replace grS "x!1")
      (("" (with-labels (skeep) ((ndr arm armc atom1 atom2 stm obj)))
        (("" (label hrec -1)
          (("" (case-replace "top_releases_ct(grS`redex) = 0")
            (("1" (delete hrec)
              (("1" (expand rreduce_n)
                (("1" (expand rreduce_n)
                  (("1" (typepred grS)
                    (("1" (assert)
                      (("1" (expand reduce)
                        (("1"
                          (name-replace rS
                           "make_redex(to_topstate(grS))")
                          (("1"
                            (name-replace eS
                             "make_redex_e(to_topstate(gS))")
                            (("1"
                              (with-labels
                               (case "state_matches?(eS, rS)")
                               ((stm2)))
                              (("1"
                                (with-labels (copy stm2) ((stm3)))
                                (("1"
                                  (expand state_matches? stm2)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand state_matches stm2)
                                      (("1"
                                        (with-labels
                                         (flatten)
                                         ((err trr unm stam stom)))
                                        (("1"
                                          (with-labels
                                           (case "noDanglingRefs?(rS)")
                                           ((ndr2)))
                                          (("1"
                                            (with-labels
                                             (case
                                              "allReleaseMarked?(rS`redex) AND armc?(rS`context)")
                                             ((arm2)))
                                            (("1"
                                              (case
                                               "pureLetRedex?(rS`redex)")
                                              (("1"
                                                (case
                                                 "pureLetRedex?(eS`redex)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     letReduce_match)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (delete obj)
                                                  (("2"
                                                    (replace
                                                     trr
                                                     :dir
                                                     RL)
                                                    (("2"
                                                      (apply-eta
                                                       "rS`redex"
                                                       "(letexpr?)")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         +
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (expand
                                                           unmark
                                                           +)
                                                          (("1"
                                                            (expand
                                                             translate_refs
                                                             +)
                                                            (("1"
                                                              (expand
                                                               pureLetRedex?)
                                                              (("1"
                                                                (expand
                                                                 letRedex?)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (use
                                                                     translate_refs_atom)
                                                                    (("1"
                                                                      (use
                                                                       unmark_atom)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     translate_refs_pure)
                                                                    (("2"
                                                                      (rewrite
                                                                       unmark_pure)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "applyRedex?(rS`redex)")
                                                (("1"
                                                  (case
                                                   "applyRedex?(eS`redex)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       applyReduce_match)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         D
                                                         eS
                                                         rS)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (case
                                                             "NOT pureLetRedex?(eS`redex)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand*
                                                               pureLetRedex?
                                                               letRedex?
                                                               applyRedex?)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand eS)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete obj)
                                                    (("2"
                                                      (replace
                                                       trr
                                                       +
                                                       :dir
                                                       RL)
                                                      (("2"
                                                        (apply-eta
                                                         "rS`redex"
                                                         "(application?)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "pureIftRedex?(rS`redex)")
                                                  (("1"
                                                    (case
                                                     "pureIftRedex?(eS`redex)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex)")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (use
                                                               ifReduce_match)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           pureLetRedex?
                                                           letRedex?
                                                           applyRedex?
                                                           pureIftRedex?)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (delete obj)
                                                      (("2"
                                                        (replace
                                                         trr
                                                         +
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (apply-eta
                                                           "rS`redex"
                                                           "(ift?)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             +
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (expand
                                                               unmark
                                                               +)
                                                              (("1"
                                                                (expand
                                                                 translate_refs
                                                                 +)
                                                                (("1"
                                                                  (expand
                                                                   pureIftRedex?)
                                                                  (("1"
                                                                    (expand
                                                                     iftRedex?)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (use
                                                                         translate_refs_pure)
                                                                        (("1"
                                                                          (rewrite
                                                                           unmark_pure)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         translate_refs_pure)
                                                                        (("2"
                                                                          (rewrite
                                                                           unmark_pure)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "updateRedex?(rS`redex)")
                                                    (("1"
                                                      (case
                                                       "updateRedex?(eS`redex)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex)")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 updateReduce_match)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (delete
                                                             obj)
                                                            (("2"
                                                              (replace
                                                               trr
                                                               +
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (apply-eta
                                                                 "rS`redex"
                                                                 "(update?)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (delete obj)
                                                        (("2"
                                                          (replace
                                                           trr
                                                           +
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (apply-eta
                                                             "rS`redex"
                                                             "(update?)")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "lookupRedex?(rS`redex)")
                                                      (("1"
                                                        (case
                                                         "lookupRedex?(eS`redex)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex)")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (use
                                                                   lookupReduce_match)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (delete
                                                               obj)
                                                              (("2"
                                                                (replace
                                                                 trr
                                                                 :dir
                                                                 RL)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(lookup?)")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete obj)
                                                          (("2"
                                                            (apply-eta
                                                             "rS`redex"
                                                             "(lookup?)")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "newintRedex?(rS`redex)")
                                                        (("1"
                                                          (case
                                                           "newintRedex?(eS`redex)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     newintReduce_match)
                                                                    (("1"
                                                                      (prop)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (apply-eta
                                                                   "rS`redex"
                                                                   "(newint?)")
                                                                  (("1"
                                                                    (replace
                                                                     trr
                                                                     +
                                                                     :dir
                                                                     RL)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       +
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (delete
                                                             obj)
                                                            (("2"
                                                              (apply-eta
                                                               "rS`redex"
                                                               "(newint?)")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "newrefRedex?(rS`redex)")
                                                          (("1"
                                                            (case
                                                             "newrefRedex?(eS`redex)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       newrefReduce_match)
                                                                      (("1"
                                                                        (prop)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (delete
                                                                   obj)
                                                                  (("2"
                                                                    (replace
                                                                     trr
                                                                     +
                                                                     :dir
                                                                     RL)
                                                                    (("2"
                                                                      (apply-eta
                                                                       "rS`redex"
                                                                       "(newref?)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (delete
                                                               obj)
                                                              (("2"
                                                                (apply-eta
                                                                 "rS`redex"
                                                                 "(newref?)")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "popRedex?(rS`redex)")
                                                            (("1"
                                                              (case
                                                               "popRedex?(eS`redex)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT pureLetRedex?(eS`redex) AND NOT applyRedex?(eS`redex) AND NOT pureIftRedex?(eS`redex) AND NOT updateRedex?(eS`redex) AND NOT lookupRedex?(eS`redex) AND NOT newintRedex?(eS`redex) AND NOT newrefRedex?(eS`redex)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         popReduce_match)
                                                                        (("1"
                                                                          (prop)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (delete
                                                                     obj)
                                                                    (("2"
                                                                      (replace
                                                                       trr
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (apply-eta
                                                                         "rS`redex"
                                                                         "(pop?)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 obj)
                                                                (("2"
                                                                  (replace
                                                                   trr
                                                                   +
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (apply-eta
                                                                     "rS`redex"
                                                                     "(pop?)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       +
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (expand
                                                                         unmark)
                                                                        (("1"
                                                                          (expand
                                                                           translate_refs)
                                                                          (("1"
                                                                            (expand
                                                                             popRedex?)
                                                                            (("1"
                                                                              (use
                                                                               translate_refs_atom)
                                                                              (("1"
                                                                                (use
                                                                                 unmark_atom)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "pureReleaseRedex?(rS`redex)")
                                                              (("1"
                                                                (delete
                                                                 obj)
                                                                (("1"
                                                                  (expand
                                                                   rS)
                                                                  (("1"
                                                                    (expand
                                                                     make_redex)
                                                                    (("1"
                                                                      (lemma
                                                                       top_releases_build_redex)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "to_topstate(grS)`redex")
                                                                        (("1"
                                                                          (expand
                                                                           to_topstate)
                                                                          (("1"
                                                                            (rewrite
                                                                             top_releases_ct_fill)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "pureRedex?(rS`redex)")
                                                                (("1"
                                                                  (expand
                                                                   pureRedex?)
                                                                  (("1"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   rS)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete obj)
                                              (("2"
                                                (expand rS)
                                                (("2"
                                                  (case
                                                   "allReleaseMarked?(to_topstate(grS)`redex)")
                                                  (("1"
                                                    (expand make_redex)
                                                    (("1"
                                                      (typepred
                                                       "buildRedex(to_topstate(grS)`redex)")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         -3
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (rewrite
                                                           arm_fill)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     to_topstate)
                                                    (("2"
                                                      (rewrite
                                                       arm_fill)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (delete obj)
                                            (("2"
                                              (expand rS)
                                              (("2"
                                                (lemma make_redex_ndr)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (lemma
                                                     to_topstate_dangling)
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (delete obj)
                                (("2"
                                  (expand eS)
                                  (("2"
                                    (expand rS)
                                    (("2"
                                      (use make_redex_match)
                                      (("2"
                                        (split -1)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4"
                                          (expand make_redex)
                                          (("4"
                                            (lemma
                                             top_releases_build_redex)
                                            (("4"
                                              (inst
                                               -1
                                               "to_topstate(grS)`redex")
                                              (("4"
                                                (expand to_topstate)
                                                (("4"
                                                  (rewrite
                                                   top_releases_ct_fill)
                                                  (("4"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand rreduce_n obj)
              (("2" (typepred "grS")
                (("2" (assert)
                  (("2" (inst hrec "reduce(D)(grS)")
                    (("1" (inst hrec D gS)
                      (("1" (split hrec)
                        (("1" (rewrite top_releases_reduce)
                          (("1" (assert) nil nil)) nil)
                         ("2" (use reduce_ndr) nil nil)
                         ("3" (use reduce_arm) (("3" (assert) nil nil))
                          nil)
                         ("4" (use reduce_arm) (("4" (assert) nil nil))
                          nil)
                         ("5" (propax) nil nil)
                         ("6" (rewrite top_release_reduce)
                          (("6" (delete obj)
                            (("6"
                              (case-replace
                               "to_topstate(releaseReduce(D)(make_redex(to_topstate(grS))))`redex = fill(make_redex(to_topstate(grS))`context, rexpr(make_redex(to_topstate(grS))`redex))")
                              (("1"
                                (case-replace
                                 "make_redex(to_topstate(grS))`context = hole")
                                (("1"
                                  (expand fill)
                                  (("1"
                                    (expand state_matches?)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand state_matches)
                                        (("1"
                                          (with-labels
                                           (flatten)
                                           ((err trr unm stam stom)))
                                          (("1"
                                            (name-replace
                                             rS
                                             "make_redex(to_topstate(grS))")
                                            (("1"
                                              (case-replace
                                               "to_topstate(grS)`redex = rS`redex")
                                              (("1"
                                                (replace
                                                 trr
                                                 atom1
                                                 :dir
                                                 RL)
                                                (("1"
                                                  (apply-eta
                                                   "rS`redex"
                                                   "(release?)")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (expand
                                                       unmark
                                                       atom1)
                                                      (("1"
                                                        (use
                                                         translate_refs_atom)
                                                        (("1"
                                                          (use
                                                           unmark_atom)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand rS)
                                                (("2"
                                                  (expand make_redex)
                                                  (("2"
                                                    (typepred
                                                     "buildRedex(to_topstate(grS)`redex)")
                                                    (("2"
                                                      (rewrite -3)
                                                      (("2"
                                                        (expand fill)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply-eta
                                   "make_redex(to_topstate(grS))`context"
                                   "(letc?)")
                                  (("1"
                                    (replace -1 :dir RL)
                                    (("1"
                                      (hide-all-but hrec)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply-eta
                                     "make_redex(to_topstate(grS))`context"
                                     "(popc?)")
                                    (("1"
                                      (replace -1 :dir RL)
                                      (("1"
                                        (hide-all-but hrec)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand to_topstate 1 1)
                                (("2"
                                  (case-replace
                                   "releaseReduce(D)(make_redex(to_topstate(grS)))`context = make_redex(to_topstate(grS))`context")
                                  (("1"
                                    (case-replace
                                     " releaseReduce(D)(make_redex(to_topstate(grS)))`redex =  rexpr(make_redex(to_topstate(grS))`redex)")
                                    (("1"
                                      (hide-all-but (1 ndr))
                                      (("1"
                                        (expand releaseReduce)
                                        (("1"
                                          (lift-if)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (1 ndr))
                                    (("2"
                                      (expand releaseReduce)
                                      (("2"
                                        (lift-if)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand make_redex)
                                (("3"
                                  (lemma top_releases_build_redex)
                                  (("3"
                                    (inst -1 "to_topstate(grS)`redex")
                                    (("3"
                                      (expand releaseRedex?)
                                      (("3"
                                        (expand to_topstate)
                                        (("3"
                                          (rewrite
                                           top_releases_ct_fill)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("7" (delete obj)
                          (("7" (rewrite top_release_reduce)
                            (("7"
                              (name-replace rS
                               "make_redex(to_topstate(grS))")
                              (("7"
                                (expand state_matches?)
                                (("7"
                                  (skeep)
                                  (("7"
                                    (inst?)
                                    (("7"
                                      (name
                                       "nS"
                                       "gS WITH [`redex := translate_refs(translate)(unmark(rS`redex)), `context := unmark(rS`context)]")
                                      (("1"
                                        (case
                                         "state_matches(nS, rS)(translate)")
                                        (("1"
                                          (case
                                           "state_matches(nS, releaseReduce(D)(rS))(translate)")
                                          (("1"
                                            (case
                                             "state_matches(to_topstate(nS), to_topstate(releaseReduce(D)(rS)))(translate)")
                                            (("1"
                                              (case-replace
                                               "to_topstate(gS) = to_topstate(nS)")
                                              (("1"
                                                (delete hrec)
                                                (("1"
                                                  (expand to_topstate)
                                                  (("1"
                                                    (expand nS)
                                                    (("1"
                                                      (case-replace
                                                       "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = fill(gS`context, gS`redex)")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (delete 2)
                                                        (("2"
                                                          (delete
                                                           -1
                                                           -2
                                                           -3
                                                           -4)
                                                          (("2"
                                                            (expand
                                                             state_matches)
                                                            (("2"
                                                              (with-labels
                                                               (flatten)
                                                               ((trr
                                                                 unm
                                                                 stam
                                                                 stom)))
                                                              (("2"
                                                                (replace
                                                                 trr
                                                                 :dir
                                                                 RL)
                                                                (("2"
                                                                  (case-replace
                                                                   "fill(unmark(rS`context), translate_refs(translate)(unmark(rS`redex))) = translate_refs(translate)(unmark(fill(rS`context, rS`redex)))")
                                                                  (("1"
                                                                    (expand
                                                                     rS)
                                                                    (("1"
                                                                      (expand
                                                                       make_redex)
                                                                      (("1"
                                                                        (typepred
                                                                         "buildRedex(to_topstate(grS)`redex)")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             to_topstate)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (delete
                                                                     2)
                                                                    (("2"
                                                                      (rewrite
                                                                       unmark_fill)
                                                                      (("2"
                                                                        (rewrite
                                                                         translate_fill)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete hrec)
                                              (("2"
                                                (use to_topstate_match)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (delete hrec)
                                            (("2"
                                              (use releaseReduce_match)
                                              (("2"
                                                (split -1)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (typepred rS)
                                                  (("2"
                                                    (case
                                                     "releaseRedex?(rS`redex)")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       top_releases_build_redex)
                                                      (("2"
                                                        (expand rS)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "to_topstate(grS)`redex")
                                                          (("2"
                                                            (expand
                                                             to_topstate)
                                                            (("2"
                                                              (rewrite
                                                               top_releases_ct_fill)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand rS)
                                                  (("3"
                                                    (lemma
                                                     make_redex_ndr)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (hide-all-but
                                                         (1 ndr))
                                                        (("3"
                                                          (lemma
                                                           to_topstate_dangling)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (case
                                                   "allReleaseMarked?(to_topstate(grS)`redex)")
                                                  (("1"
                                                    (expand rS)
                                                    (("1"
                                                      (expand
                                                       make_redex)
                                                      (("1"
                                                        (typepred
                                                         "buildRedex(to_topstate(grS)`redex)")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -3
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (rewrite
                                                             arm_fill)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     to_topstate)
                                                    (("2"
                                                      (rewrite
                                                       arm_fill)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (delete hrec)
                                          (("2"
                                            (expand state_matches)
                                            (("2"
                                              (with-labels
                                               (flatten)
                                               ((trr unm stam stom)))
                                              (("2"
                                                (split)
                                                (("1"
                                                  (expand nS)
                                                  (("1"
                                                    (expand rS)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand nS)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand nS)
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand nS)
                                                  (("4"
                                                    (expand
                                                     to_topstate)
                                                    (("4"
                                                      (case-replace
                                                       "union(cvars(fill(grS`context, grS`redex)),
                          bumpn(cvars(hole),
                                popDepth(fill(grS`context, grS`redex)))) = union(cvars(rS`redex),
                          bumpn(cvars(rS`context), popDepth(rS`redex)))")
                                                      (("1"
                                                        (expand rS)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (delete 2)
                                                        (("2"
                                                          (apply-extensionality)
                                                          (("2"
                                                            (delete 2)
                                                            (("2"
                                                              (expand
                                                               union)
                                                              (("2"
                                                                (expand
                                                                 member)
                                                                (("2"
                                                                  (expand
                                                                   rS)
                                                                  (("2"
                                                                    (expand
                                                                     make_redex)
                                                                    (("2"
                                                                      (typepred
                                                                       "buildRedex(to_topstate(grS)`redex)")
                                                                      (("2"
                                                                        (expand
                                                                         to_topstate)
                                                                        (("2"
                                                                          (name-replace
                                                                           A
                                                                           "fill(grS`context, grS`redex)")
                                                                          (("2"
                                                                            (name-replace
                                                                             redex
                                                                             "buildRedex(A)`2")
                                                                            (("2"
                                                                              (name-replace
                                                                               ctx
                                                                               "buildRedex(A)`1")
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 :dir
                                                                                 RL)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   cvars_fill)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (expand
                                                   store_matches)
                                                  (("5"
                                                    (expand nS)
                                                    (("5"
                                                      (expand
                                                       to_topstate)
                                                      (("5"
                                                        (expand rS)
                                                        (("5"
                                                          (expand
                                                           make_redex)
                                                          (("5"
                                                            (expand
                                                             to_topstate)
                                                            (("5"
                                                              (skeep)
                                                              (("5"
                                                                (inst?
                                                                 stom)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (typepred
                                                                           j)
                                                                          (("3"
                                                                            (expand
                                                                             rS)
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   r)
                                                                  (("2"
                                                                    (expand
                                                                     rS)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "rS`redex")
                                        (("2"
                                          (case-replace
                                           "gS`stack`length = rS`stack`length")
                                          (("1"
                                            (rewrite
                                             translate_popDepth)
                                            (("1"
                                              (rewrite unmark_popDepth)
                                              (("1"
                                                (rewrite
                                                 unmark_popDepth_ctx)
                                                (("1"
                                                  (rewrite
                                                   translate_vars)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case
                                                         "refs(translate_refs(translate)(unmark(fill(rS`context, rS`redex))))(i)")
                                                        (("1"
                                                          (case-replace
                                                           "fill(rS`context, rS`redex) = to_topstate(grS)`redex")
                                                          (("1"
                                                            (delete
                                                             hrec)
                                                            (("1"
                                                              (expand
                                                               state_matches)
                                                              (("1"
                                                                (with-labels
                                                                 (flatten)
                                                                 ((err
                                                                   trr
                                                                   unm
                                                                   stam
                                                                   stom)))
                                                                (("1"
                                                                  (replace
                                                                   trr)
                                                                  (("1"
                                                                    (typepred
                                                                     "to_topstate(gS)`redex")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       i)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand rS)
                                                            (("2"
                                                              (expand
                                                               make_redex)
                                                              (("2"
                                                                (typepred
                                                                 "buildRedex(to_topstate(grS)`redex)")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           unmark_fill)
                                                          (("2"
                                                            (rewrite
                                                             translate_fill)
                                                            (("2"
                                                              (rewrite
                                                               refs_fill)
                                                              (("2"
                                                                (rewrite
                                                                 contextPurefill)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       unmark_vars)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "rS`redex"
                                                           i)
                                                          (("2"
                                                            (inst -5 i)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (lemma
                                                         unmark_vars_ctx)
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "rS`context"
                                                           i)
                                                          (("3"
                                                            (inst -6 i)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 stm))
                                            (("2"
                                              (expand rS)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("8" (rewrite top_releases_reduce)
                          (("8" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (delete obj)
                      (("2" (rewrite top_release_reduce)
                        (("2"
                          (name-replace "rS"
                           "make_redex(to_topstate(grS))")
                          (("2" (case "rS`error")
                            (("1" (hide-all-but (1 -1))
                              (("1"
                                (expand rS)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 -1))
                              (("2"
                                (case-replace
                                 "releaseReduce(D)(rS)`error = rS`error")
                                (("2"
                                  (delete -1)
                                  (("2"
                                    (expand releaseReduce)
                                    (("2"
                                      (lift-if)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (IContext type-decl nil IL nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (IExpression type-decl nil IExpression_adt nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pure? def-decl "bool" IL nil)
    (unmark def-decl "IExpression" preprocess nil)
    (Definition type-eq-decl nil reduction_props nil)
    (Defs type-eq-decl nil reduction_props nil)
    (estate type-eq-decl nil reduction nil)
    (goodstate type-eq-decl nil reduction nil)
    (noDanglingRefs? const-decl "bool" rreduction nil)
    (allReleaseMarked? def-decl "bool" preprocess nil)
    (armc? def-decl "bool" preprocess nil)
    (atom? const-decl "bool" IL nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (topstate type-eq-decl nil reduction nil)
    (to_topstate const-decl "topstate" reduction nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (Definition type-eq-decl nil reduction nil)
    (Defs type-eq-decl nil reduction nil)
    (reduce const-decl "estate" reduction nil)
    (rreduce_n def-decl "rstate" reduction_props nil)
    (reduce const-decl "rstate" rreduction nil)
    (make_redex_e const-decl "{eS | pureRedex?(eS`redex)}" reduction
     nil)
    (make_redex_match formula-decl nil reduction_props nil)
    (make_redex_ndr judgement-tcc nil rreduction nil)
    (to_topstate_dangling judgement-tcc nil rreduction nil)
    (applyRedex? const-decl "bool" IL nil)
    (IExpression_application_eta formula-decl nil IExpression_adt nil)
    (application? adt-recognizer-decl "[IExpression -> boolean]"
                  IExpression_adt nil)
    (unmarkvars_length rec-application-judgement
     "{J | length(J) = length(L)}" preprocess nil)
    (buildRedexPure rec-application-judgement "{K, B |
   fill(K, B) = A AND
    ((cpure?(K) AND pureRedex?(B)) OR (K = hole AND value?(B)))}" IL
     nil)
    (applyReduce_match formula-decl nil reduction_props nil)
    (updateRedex? const-decl "bool" IL nil)
    (IExpression_update_eta formula-decl nil IExpression_adt nil)
    (update? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (unmarkvar const-decl "(variable?)" preprocess nil)
    (updateReduce_match formula-decl nil reduction_props nil)
    (newintRedex? const-decl "bool" IL nil)
    (newint? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IExpression_newint_eta formula-decl nil IExpression_adt nil)
    (newintReduce_match formula-decl nil reduction_props nil)
    (popRedex? const-decl "bool" IL nil)
    (unmark def-decl "IContext" preprocess nil)
    (pbody adt-accessor-decl "[(pop?) -> IExpression]" IExpression_adt
     nil)
    (IExpression_pop_eta formula-decl nil IExpression_adt nil)
    (pop? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (popReduce_match formula-decl nil reduction_props nil)
    (top_releases_ct_fill formula-decl nil reduction_props nil)
    (releaseRedex? const-decl "bool" IL nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (top_releases_build_redex formula-decl nil reduction_props nil)
    (pureReleaseRedex? const-decl "bool" IL nil)
    (newrefReduce_match formula-decl nil reduction_props nil)
    (newref? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IExpression_newref_eta formula-decl nil IExpression_adt nil)
    (newrefRedex? const-decl "bool" IL nil)
    (lookupReduce_match formula-decl nil reduction_props nil)
    (lookup? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IExpression_lookup_eta formula-decl nil IExpression_adt nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (bumpn const-decl "finite_set[nat]" IL nil)
    (stack_matches const-decl "boolean" reduction_props nil)
    (store_matches const-decl "boolean" reduction_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lookupRedex? const-decl "bool" IL nil)
    (ifReduce_match formula-decl nil reduction_props nil)
    (iftRedex? const-decl "bool" IL nil)
    (elseexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (thenexpr adt-accessor-decl "[(ift?) -> IExpression]"
     IExpression_adt nil)
    (ift? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IExpression_ift_eta formula-decl nil IExpression_adt nil)
    (pureIftRedex? const-decl "bool" IL nil)
    (letReduce_match formula-decl nil reduction_props nil)
    (translate_refs_contextPure rec-application-judgement
     "(contextPure?)" reduction_props nil)
    (unmark_contextPure rec-application-judgement "(contextPure?)"
     preprocess nil)
    (unmark_cpure rec-application-judgement "(cpure?)" preprocess nil)
    (finite_union application-judgement "finite_set[nat]" countability
     "sets_aux/")
    (translate_refs def-decl "IExpression" reduction_props nil)
    (letRedex? const-decl "bool" IL nil)
    (translate_refs_pure recursive-judgement-axiom nil reduction_props
     nil)
    (body adt-accessor-decl "[(letexpr?) -> IExpression]"
          IExpression_adt nil)
    (unmark_pure recursive-judgement-axiom nil preprocess nil)
    (translate_refs_atom judgement-tcc nil reduction_props nil)
    (letrhs adt-accessor-decl "[(letexpr?) -> IExpression]"
     IExpression_adt nil)
    (unmark_atom judgement-tcc nil preprocess nil)
    (letexpr? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (IExpression_letexpr_eta formula-decl nil IExpression_adt nil)
    (pureLetRedex? const-decl "bool" IL nil)
    (arm_fill formula-decl nil preprocess nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (buildRedex def-decl "{K, B | fill(K, B) = A}" IL nil)
    (fill def-decl "IExpression" IL nil)
    (state_matches const-decl "boolean" reduction_props nil)
    (pureRedex? const-decl "bool" IL nil)
    (make_redex const-decl "{rS | pureRedex?(rS`redex)}" rreduction
     nil)
    (Definition type-eq-decl nil rreduction nil)
    (Defs type-eq-decl nil rreduction nil)
    (goodrstate type-eq-decl nil rreduction nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (top_releases_reduce formula-decl nil reduction_props nil)
    (reduce_ndr judgement-tcc nil rreduction nil)
    (reduce_arm judgement-tcc nil reduction_props nil)
    (decref_preserves_jdg application-judgement "{rS2 |
   rS2`redex = rS`redex AND
    rS2`stack = rS`stack AND
     rS2`context = rS`context AND rS2`error = rS`error}"
     reduction_props nil)
    (IExpression_release_eta formula-decl nil IExpression_adt nil)
    (IContext_popc_eta formula-decl nil IL nil)
    (popc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (letc? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (IContext_letc_eta formula-decl nil IL nil)
    (releaseReduce const-decl "rstate" rreduction nil)
    (release? adt-recognizer-decl "[IExpression -> boolean]"
     IExpression_adt nil)
    (rexpr adt-accessor-decl "[(release?) -> IExpression]"
     IExpression_adt nil)
    (top_release_reduce formula-decl nil reduction_props nil)
    (translate_popDepth formula-decl nil reduction_props nil)
    (unmark_popDepth_ctx formula-decl nil preprocess nil)
    (contextPurefill formula-decl nil IL nil)
    (vars_mark_type application-judgement "{C | vars(C) = vars(B)}"
     preprocess nil)
    (refs_fill formula-decl nil IL nil)
    (unmark_vars formula-decl nil preprocess nil)
    (unmark_vars_ctx formula-decl nil preprocess nil)
    (translate_vars formula-decl nil reduction_props nil)
    (unmark_popDepth formula-decl nil preprocess nil)
    (releaseReduce_match formula-decl nil reduction_props nil)
    (translate_fill formula-decl nil reduction_props nil)
    (unmark_fill formula-decl nil preprocess nil)
    (to_topstate_match formula-decl nil reduction_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cvars_fill formula-decl nil preprocess nil)
    (finite_emptyset name-judgement "finite_set[T]" countability
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" sigma_set
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak)
  (bisimulation_lemma-1 nil 3701442930
   ("" (measure-induct+ "top_releases_ct(grS`redex)" ("grS"))
    (("" (name-replace grS "x!1")
      (("" (with-labels (skeep) ((ndr arm armc atom1 atom2 stam obj)))
        (("" (case-replace "top_releases_ct(grS`redex) = 0")
          (("1" (delete -2)
            (("1" (expand rreduce_n)
              (("1" (expand rreduce_n)
                (("1" (typepred grS)
                  (("1" (assert)
                    (("1" (expand reduce)
                      (("1"
                        (name-replace rS
                         "make_redex(to_topstate(grS))")
                        (("1"
                          (name-replace eS
                           "make_redex_e(to_topstate(gS))")
                          (("1" (case "pureLetRedex?(rS`redex)")
                            (("1" (case "pureLetRedex?(eS`redex)")
                              (("1"
                                (assert)
                                (("1"
                                  (use letReduce_match)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (delete obj)
                                (("2"
                                  (expand state_matches?)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand state_matches)
                                      (("2"
                                        (with-labels
                                         (flatten)
                                         ((err trr unm stam stom)))
                                        (("2"
                                          (replace trr :dir RL)
                                          (("2"
                                            (expand pureLetRedex?)
                                            (("2"
                                              (split)
                                              (("1"
                                                (apply-eta
                                                 "rS`redex"
                                                 "(letexpr?)")
                                                (("1"
                                                  (replace -1 :dir RL)
                                                  (("1"
                                                    (expand unmark)
                                                    (("1"
                                                      (expand
                                                       translate_refs)
                                                      (("1"
                                                        (expand
                                                         letRedex?)
                                                        (("1"
                                                          (use
                                                           translate_refs_atom)
                                                          (("1"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply-eta
                                                 "rS`redex"
                                                 "(letexpr?)")
                                                (("2"
                                                  (replace -1 :dir RL)
                                                  (("2"
                                                    (expand unmark)
                                                    (("2"
                                                      (expand
                                                       translate_refs)
                                                      (("2"
                                                        (use
                                                         translate_refs_pure)
                                                        (("2"
                                                          (rewrite
                                                           unmark_pure)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) (("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (bisimulation_theorem 0
  (bisimulation_theorem-1 nil 3701528769
   ("" (skeep)
    (("" (inst 1 "top_releases_ct(grS`redex) + 1")
      (("" (use bisimulation_lemma)
        (("" (case "state_matches?(to_topstate(gS), to_topstate(grS))")
          (("1" (split)
            (("1" (propax) nil nil) ("2" (propax) nil nil)
             ("3" (propax) nil nil) ("4" (propax) nil nil)
             ("5" (propax) nil nil))
            nil)
           ("2" (use to_topstate_match)
            (("2" (expand state_matches?)
              (("2" (skeep)
                (("2" (inst?)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IExpression type-decl nil IExpression_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (top_releases_ct def-decl "nat" reduction_props nil)
    (IContext type-decl nil IL nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpure? def-decl "bool" IL nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (markc def-decl "IContext" preprocess nil)
    (emptyset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (value? const-decl "bool" IL nil) (Stack type-eq-decl nil IL nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (every const-decl "bool" finseq_theorems nil)
    (domainValue? const-decl "bool" IL nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (refs def-decl "bool" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (< const-decl "bool" reals nil) (popDepth def-decl "nat" IL nil)
    (vars def-decl "finite_set[nat]" IL nil)
    (popDepth def-decl "nat" IL nil) (<= const-decl "bool" reals nil)
    (contextPure? def-decl "bool" IL nil)
    (mark def-decl "IExpression" preprocess nil)
    (cvars def-decl "finite_set[nat]" preprocess nil)
    (Store type-eq-decl nil reduction nil)
    (refcount const-decl "nat" rreduction nil)
    (rstate type-eq-decl nil rreduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (goodrstate type-eq-decl nil reduction_props nil)
    (state_matches? const-decl "boolean" reduction_props nil)
    (hole? adt-recognizer-decl "[IContext -> boolean]" IL nil)
    (hole adt-constructor-decl "(hole?)" IL nil)
    (topstate type-eq-decl nil reduction nil)
    (to_topstate const-decl "topstate" reduction nil)
    (rtopstate type-eq-decl nil rreduction nil)
    (to_topstate const-decl "rtopstate" rreduction nil)
    (to_topstate_match formula-decl nil reduction_props nil)
    (goodstate type-eq-decl nil reduction nil)
    (estate type-eq-decl nil reduction nil)
    (Defs type-eq-decl nil reduction_props nil)
    (Definition type-eq-decl nil reduction_props nil)
    (unmark def-decl "IExpression" preprocess nil)
    (pure? def-decl "bool" IL nil)
    (bisimulation_lemma formula-decl nil reduction_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)))

