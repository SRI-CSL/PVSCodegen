reduction_props: THEORY
  BEGIN
    IMPORTING IExpression, IL, finite_set_theorems, finseq_theorems, preprocess, reduction, rreduction

    A, B, C: VAR IExpression
    K, K1, K2: VAR IContext
  
%    a, b, c: VAR (atom?)
    u, v, w: VAR (value?)
    x, y, z: VAR (variable?)
    i, j, k, r: VAR nat
    F, X, Y: VAR finite_set[nat]

    S, S1, S2: VAR Stack
    nS: VAR neStack

    dom, dom1, dom2: VAR finite_set[nat]

    Definition: TYPE = [# arity: nat, body: {A |  pure?(A) AND (FORALL i: vars(A)(i) IMPLIES i < arity) AND unmark(A) = A} #]

    Defs: TYPE = finseq[Definition]

    D: VAR Defs

    eS, eS2: VAR estate
    gS, gS2: VAR goodstate
    rS, rS2: VAR rstate
    trS: VAR rtopstate
    goodrstate: TYPE = {rS | NOT rS`error}
    grS: VAR goodrstate
    grdS: VAR {grS | noDanglingRefs?(grS)}

    decref_induction: LEMMA
      FORALL (P: pred[rstate]):
        (FORALL (rS, (r: (rS`domain)), (i: below(rS`store(r)`length))):
          P(rS) AND rS`count(r) = 0 AND ref?(rS`store(r)`seq(i)) IMPLIES
              P(rS WITH [`store(r)`seq(i) := nil,
                         `count(refindex(rS`store(r)`seq(i))) := rS`count(refindex(rS`store(r)`seq(i))) - 1])
        ) IMPLIES
        FORALL (rS: (noDanglingRefs?), r: (rS`domain), i: upto(rS`store(r)`length)):
          P(rS) IMPLIES P(decref(rS, r, i))

    % decref_preserves: RECURSIVE JUDGEMENT
    %   decref(rS: (noDanglingRefs?), (r: (rS`domain)), (i: upto(rS`store(r)`length))) HAS_TYPE
    %     {rS2 | rS2`redex = rS`redex AND rS2`stack = rS`stack AND rS2`context = rS`context AND rS2`error = rS`error}
    decref1_preserves: LEMMA
      FORALL (rS, (r: (rS`domain)), (i: upto(rS`store(r)`length))):
        decref1(rS, r, i)`redex = rS`redex AND
        decref1(rS, r, i)`stack = rS`stack AND
        decref1(rS, r, i)`context = rS`context AND
        decref1(rS, r, i)`error = rS`error        

    decref1_preserves_redex: LEMMA
      FORALL (rS, (r: (rS`domain)), (i: upto(rS`store(r)`length))):
        decref1(rS, r, i)`redex = rS`redex

    decref1_preserves_stack: LEMMA
      FORALL (rS, (r: (rS`domain)), (i: upto(rS`store(r)`length))):
        decref1(rS, r, i)`stack = rS`stack

    decref1_preserves_context: LEMMA
      FORALL (rS, (r: (rS`domain)), (i: upto(rS`store(r)`length))):
        decref1(rS, r, i)`context = rS`context

    decref1_preserves_error: LEMMA
      FORALL (rS, (r: (rS`domain)), (i: upto(rS`store(r)`length))):
        decref1(rS, r, i)`error = rS`error

    AUTO_REWRITE+ decref1_preserves_redex
    AUTO_REWRITE+ decref1_preserves_stack
    AUTO_REWRITE+ decref1_preserves_context
    AUTO_REWRITE+ decref1_preserves_error

    decref_preserves: LEMMA
      FORALL (rS: (noDanglingRefs?), r: (rS`domain), i: upto(rS`store(r)`length)):
        decref(rS, r, i)`redex = rS`redex AND
        decref(rS, r, i)`stack = rS`stack AND
        decref(rS, r, i)`context = rS`context AND
        decref(rS, r, i)`error = rS`error

    decref_preserves_jdg: JUDGEMENT
      decref(rS: (noDanglingRefs?), r: (rS`domain), t: upto(rS`store(r)`length)) HAS_TYPE
        { rS2 | rS2`redex = rS`redex AND rS2`stack = rS`stack AND rS2`context = rS`context AND rS2`error = rS`error }

    % has_wfStore?(rS): bool = wfStore?(rS`domain)(rS`store)

    % decref_wfStore: RECURSIVE JUDGEMENT
    %  decref(rS: (noDanglingRefs?) | wfStore?(rS`domain)(rS`store),
    %    (r: (rS`domain)), (i: upto(rS`store(r)`length))) HAS_TYPE
    %      {rS2 | wfStore?(rS2`domain)(rS2`store)}

    % decref_has_wfStore: LEMMA
    %   FORALL (rS: (noDanglingRefs?), r: (rS`domain), i: upto(rS`store(r)`length)):
    %     has_wfStore?(rS) IMPLIES has_wfStore?(decref(rS, r, i))

    % wfStore_add: LEMMA
    %   FORALL (store: Store(dom), r: nat, T: finseq[(domainValue?(dom))]):
    %     wfStore?(dom)(store) AND NOT dom(r) IMPLIES
    %       wfStore?(add(r, dom))(store WITH [(r) |-> T])

    % rupdate_wfStore: LEMMA
    %   updateRedex?(grdS`redex) AND has_wfStore?(grdS) IMPLIES
    %     has_wfStore?(updateReduce(D)(grdS))

    % rreduce_wfStore: LEMMA
    %   has_wfStore?(grdS) IMPLIES has_wfStore?(reduce(D)(grdS))

    % translate_refs((dom, dom1), translation: [(dom) -> (dom1)])(A | contextPure?(A) AND FORALL i: refs(A)(i) IMPLIES dom(i)): RECURSIVE IExpression =
    %   CASES A OF
    %     ref(r): ref(translation(r)),
    %     letexpr(B, C): letexpr(translate_refs(dom, dom1, translation)(B),
    %                            translate_refs(dom, dom1, translation)(C)),
    %     ift(x, B, C): ift(x, translate_refs(dom, dom1, translation)(B),
    %                          translate_refs(dom, dom1, translation)(C)),
    %     pop(B): pop(translate_refs(dom, dom1, translation)(B)),
    %     release(x, B): release(x, translate_refs(dom, dom1, translation)(B))
    %     ELSE A
    %   ENDCASES
    % MEASURE A BY <<

    % translate_refs_pure: LEMMA
    %   FORALL (translation: [(dom) -> (dom1)]):
    %     pure?(A) IMPLIES pure?(translate_refs(dom, dom1, translation)(A))

    % translate_refs_restrict: LEMMA
    %   (FORALL (i: (dom2)): dom(i)) AND (FORALL i: refs(A)(i) IMPLIES dom2(i)) AND contextPure?(A) IMPLIES
    %     FORALL (translation: [(dom) -> (dom1)]):
    %       translate_refs(dom, dom1, translation)(A) = translate_refs(dom2, dom1, LAMBDA (i: (dom2)): translation(i))(A)

    % translate_refs_restrict2: LEMMA
    %   FORALL (translation: [(dom) -> (dom1)], translation2: [(dom2) -> (dom1)]):
    %     (FORALL (i: (dom2)): dom(i)) AND (FORALL i: refs(A)(i) IMPLIES dom2(i)) AND contextPure?(A) AND (FORALL (i: (dom2)): translation(i) = translation2(i)) IMPLIES
    %       translate_refs(dom, dom1, translation)(A) = translate_refs(dom2, dom1, translation2)(A)

    % %translate_stack(dom, dom1, translation)(S | every(domainValue?(dom))(S)):
    % %    {S1 | every(domainValue?(dom1))(S)} =
    % %  map(translate_refs(dom, dom1, translation))(S)

    % stack_matches((dom, dom1), translation: [(dom) -> (dom1)])((S | every(domainValue?(dom))(S)), (S1 | every(domainValue?(dom1))(S1)), X: finite_set[nat]): boolean =
    %   S`length = S1`length AND
    %     FORALL (i: (X)):
    %       (i < S`length AND
    %       translate_refs(dom, dom1, translation)(S`seq(S`length - i - 1)) =
    %         S1`seq(S1`length - i - 1))

    % store_matches((dom, dom1), translation: [(dom) -> (dom1)])(store: Store(dom), store1: Store(dom1)): boolean =
    %   FORALL (r: (dom)): store1(translation(r))`length = store(r)`length AND
    %     FORALL (j: below(store(r)`length)):
    %       translate_refs(dom, dom1, translation)(store(r)`seq(j)) = store1(translation(r))`seq(j)

    % state_matches(eS: estate, rS: rstate)(translate: [{r: (rS`domain) | rS`count(r) > 0} -> (eS`domain)]): boolean =
    %   LET dom = {r: (rS`domain) | rS`count(r) > 0} IN
    %       eS`error = rS`error
    %     AND translate_refs(dom, eS`domain, translate)(unmark(rS`redex)) = eS`redex
    %     AND unmark(rS`context) = eS`context
    %     AND stack_matches(dom, eS`domain, translate)(rS`stack, eS`stack, union(cvars(rS`redex), bumpn(cvars(rS`context), popDepth(rS`redex))))
    %     AND store_matches(dom, eS`domain, translate)((LAMBDA (r: (dom)): rS`store(r)), eS`store)

    % extend_finite: LEMMA
    %   FORALL (dom_pred: pred[(dom)]):
    %     is_finite[nat](extend[nat, (dom), bool, FALSE]({r: (dom) | dom_pred(r)}))

    % redex_stillmatch: LEMMA
    %   LET dom = {r: (rS`domain) | rS`count(r) > 0},
    %       dom2 = {r: (rS2`domain) | rS2`count(r) > 0}
    %   IN
    %   FORALL (translate: [(dom) -> (eS`domain)], translate2: [(dom2) -> (eS`domain)]):
    %     rS`domain = rS2`domain AND
    %     rS`redex = rS2`redex AND
    %     (FORALL (r: (rS`domain)): rS`count(r) = 0 IMPLIES rS2`count(r) = 0) AND
    %     translate_refs(dom, eS`domain, translate)(unmark(rS`redex)) = eS`redex AND
    %     (FORALL (r: (dom2)): translate(r) = translate2(r))
    %   IMPLIES
    %       translate_refs(dom2, eS`domain, translate2)(unmark(rS2`redex)) = eS`redex

    % stack_stillmatch: LEMMA
    %   LET dom = {r: (rS`domain) | rS`count(r) > 0},
    %       dom2 = {r: (rS2`domain) | rS2`count(r) > 0} 
    %   IN
    %   FORALL (translate: [(dom) -> (eS`domain)], translate2: [(dom2) -> (eS`domain)]):
    %     rS`domain = rS2`domain AND
    %     rS`stack`length = rS2`stack`length AND
    %     (FORALL (i: (F)): i < rS`stack`length AND rS`stack`seq(rS`stack`length - i - 1) = rS2`stack`seq(rS2`stack`length - i - 1)) AND
    %     (FORALL (r: (rS`domain)): rS`count(r) = 0 IMPLIES rS2`count(r) = 0) AND
    %     stack_matches(dom, eS`domain, translate)(rS`stack, eS`stack, F) AND
    %     (FORALL (r: (dom2)): translate(r) = translate2(r))
    %   IMPLIES
    %       stack_matches(dom2, eS`domain, translate2)(rS2`stack, eS`stack, F)

    % stack_subset_match: LEMMA
    %   FORALL (translation: [(dom) -> (dom1)], (S | every(domainValue?(dom))(S)), (S1 | every(domainValue?(dom1))(S1)), X, Y: finite_set[nat]):
    %     (FORALL (i: (X)): Y(i)) AND stack_matches(dom, dom1, translation)(S, S1, Y) IMPLIES
    %       stack_matches(dom, dom1, translation)(S, S1, X)

    % state_matches?(eS: estate, rS: rstate): boolean =
    %   EXISTS (translate: [{r: (rS`domain) | rS`count(r) > 0} -> (eS`domain)]): state_matches(eS, rS)(translate)

    translate, translate2: VAR [nat -> nat]

    translate_refs(translate)(A): RECURSIVE IExpression =
      CASES A OF
        ref(r): ref(translate(r)),
        letexpr(B, C): letexpr(translate_refs(translate)(B),
                               translate_refs(translate)(C)),
        ift(x, B, C): ift(x, translate_refs(translate)(B),
                             translate_refs(translate)(C)),
        pop(B): pop(translate_refs(translate)(B)),
        release(x, B): release(x, translate_refs(translate)(B))
        ELSE A
      ENDCASES
    MEASURE A BY <<

    translate_refs_pure: RECURSIVE JUDGEMENT
      translate_refs(translate)(A | pure?(A)) HAS_TYPE (pure?)

    translate_refs_contextPure: RECURSIVE JUDGEMENT
      translate_refs(translate)(A | contextPure?(A)) HAS_TYPE (contextPure?)

    translate_refs_value: JUDGEMENT
      translate_refs(translate)(A | value?(A)) HAS_TYPE (value?)

    translate_refs_atom: JUDGEMENT
      translate_refs(translate)(A | atom?(A)) HAS_TYPE (atom?)

    translate_refs_pure_eq: LEMMA
      pure?(A) IMPLIES translate_refs(translate)(A) = A

    translate_refs_eq: LEMMA
      contextPure?(A) AND (FORALL i: refs(A)(i) IMPLIES translate(i) = translate2(i)) IMPLIES
        translate_refs(translate)(A) = translate_refs(translate2)(A)

    translate_refs_refs: LEMMA
      refs(A)(i) IMPLIES refs(translate_refs(translate)(A))(translate(i))

    value_translate_rev_ref: LEMMA
      value?(A) AND ref?(translate_refs(translate)(A)) IMPLIES ref?(A)

    value_translate_rev_constant: LEMMA
      value?(A) AND constant?(translate_refs(translate)(A)) IMPLIES constant?(A)

    value_translate_rev_nil: LEMMA
      value?(A) AND translate_refs(translate)(A) = nil IMPLIES A = nil

    translate_fill: LEMMA
      cpure?(K) IMPLIES translate_refs(translate)(fill(K, A)) = fill(K, translate_refs(translate)(A))

    translate_vars: LEMMA
      vars(translate_refs(translate)(A)) = vars(A)

    translate_popDepth: LEMMA
      popDepth(translate_refs(translate)(A)) = popDepth(A)

    stack_matches(translate)(S, S1, X): boolean =
      S`length = S1`length AND
        FORALL (i: (X)):
          (i < S`length AND
          translate_refs(translate)(S`seq(S`length - i - 1)) =
            S1`seq(S1`length - i - 1))

    store_matches(translate)(rS, dom1, (store1: Store(dom1))): boolean =
      FORALL (r: (rS`domain)):
        rS`count(r) > 0 IMPLIES
          dom1(translate(r)) AND store1(translate(r))`length = rS`store(r)`length AND
            FORALL (j: below(rS`store(r)`length)):
              translate_refs(translate)(rS`store(r)`seq(j)) = store1(translate(r))`seq(j)

    state_matches(eS, rS)(translate): boolean =
          eS`error = rS`error
        AND translate_refs(translate)(unmark(rS`redex)) = eS`redex
        AND unmark(rS`context) = eS`context
        AND stack_matches(translate)(rS`stack, eS`stack, union(cvars(rS`redex), bumpn(cvars(rS`context), popDepth(rS`redex))))
        AND store_matches(translate)(rS, eS`domain, eS`store)

    state_matches_eq: LEMMA
      state_matches(eS, rS)(translate) AND (FORALL (i: (rS`domain)): rS`count(i) > 0 IMPLIES translate(i) = translate2(i)) IMPLIES
        state_matches(eS, rS)(translate2)

    match_domain: LEMMA
      noDanglingRefs?(rS) AND state_matches(eS, rS)(translate) AND rS`domain(r) AND rS`count(r) > 0 IMPLIES
        eS`domain(translate(r))

    % subs_finite: LEMMA
    %   FORALL (dom_pred: pred[(dom)]):
    %     is_finite[nat](extend[nat, (dom), bool, FALSE]({r: (dom) | dom_pred(r)}))

    stack_stillmatch: LEMMA
      S`length = S2`length AND
      stack_matches(translate)(S, S1, X) AND
      (FORALL (i: (X)):
        S`seq(S`length - i - 1) = S2`seq(S2`length - i - 1) AND
        (ref?(S`seq(S`length - i - 1)) IMPLIES translate(refindex(S`seq(S`length - i - 1))) = translate2(refindex(S`seq(S`length - i - 1))))
      )
        IMPLIES
          stack_matches(translate2)(S2, S1, X)

    maybe_clear_stack_at_match: LEMMA
      FORALL (dom, (str: Store(dom)), (S: Stack | every(domainValue?(dom))(S)), A,
              (cnt: [i:(dom) -> {j | j = refcount(dom, str, S, A)(i)}]),
              (x: (variable?) | index(x) < S`length)):
         stack_matches(translate)(S, S1, X) AND
         (marked(x) IMPLIES NOT X(index(x)))
           IMPLIES
             stack_matches(translate)(maybe_clear_stack_at(dom,str,S,A,cnt,x)`1,S1,X)

    maybe_clear_stack_at_count: LEMMA
      FORALL (dom, (str: Store(dom)), (S: Stack | every(domainValue?(dom))(S)), A,
              (cnt: [i:(dom) -> {j | j = refcount(dom, str, S, A)(i)}]),
              (x: (variable?) | index(x) < S`length),r:(dom)):
         maybe_clear_stack_at(dom,str,S,A,cnt,x)`2(r) > 0 IMPLIES cnt(r) > 0

    update_store_count: LEMMA
      FORALL (dom, (str: Store(dom)), S, A,
              (cnt: [i:(dom) -> {j | j = refcount(dom, str, S, A)(i)}]), (r: (dom)),
              (i: below(str(r)`length)), (nv: (domainValue?(dom))), (t: (dom))):
        update_store(dom,str,S,A,cnt,r,i,nv)`2(t) > 0 IMPLIES
          nv = ref(t) OR cnt(t) > 0

    count_copy_count: LEMMA
      FORALL (dom, (cnt: [(dom)->nat]), (V: finseq[(domainValue?(dom))]), r:(dom)):
        count_copy(dom,cnt,V,V`length)(r) > 0 IMPLIES
          cnt(r) > 0 OR refcountArray(V)(r) > 0

    store_stillmatch: LEMMA
      FORALL (store1: Store(dom1)):
        rS`domain = rS2`domain AND
        (FORALL (r: (rS`domain)): rS`count(r) = 0 IMPLIES rS2`count(r) = 0) AND
        (FORALL (r: (rS`domain)): rS2`count(r) > 0 IMPLIES rS`store(r) = rS2`store(r)) AND
        store_matches(translate)(rS, dom1, store1)
          IMPLIES
            store_matches(translate)(rS2, dom1, store1)

    stack_subset_match: LEMMA
      (FORALL (i: (X)): Y(i)) AND stack_matches(translate)(S, S1, Y) IMPLIES
          stack_matches(translate)(S, S1, X)

    stack_subvar_match: LEMMA
      rS`stack = rS2`stack AND
        rS`context = rS2`context AND
        popDepth(rS`redex) = 0 AND popDepth(rS2`redex) = 0 AND
        (FORALL i: vars(rS2`redex)(i) IMPLIES vars(rS`redex)(i)) AND
        stack_matches(translate)(rS`stack, eS`stack, union(cvars(rS`redex), bumpn(cvars(rS`context), popDepth(rS`redex))))
      IMPLIES
        stack_matches(translate)(rS2`stack, eS`stack, union(cvars(rS2`redex), bumpn(cvars(rS2`context), popDepth(rS2`redex))))

    state_error_match: LEMMA
      state_matches(eS, rS)(translate) IMPLIES
        state_matches(eS WITH [`error := TRUE], rS WITH [`error := TRUE])(translate)

    % subredex_stillmatch: LEMMA
    %   state_matches(eS, rS)(translate) AND
    %     rS2`domain = rS`domain AND
    %     rS2`store = rS`store AND
    %     rS2`stack = rS`stack AND
    %     (FORALL (r: (rS`domain)): rS`count(r) = 0 IMPLIES rS2`count(r) = 0) AND
    %     (FORALL i: refs(rS2`redex)(i) IMPLIES refs(rS`redex)(i)) AND
    %     (FORALL i: vars(rS2`redex)(i) IMPLIES vars(rS`redex)(i)) AND
    %     popDepth(rS2`redex) = 0 AND popDepth(rS`redex) = 0
    %   IMPLIES
    %     state_matches(eS, rS2)(translate)

    state_matches?(eS, rS): boolean =
      EXISTS (translate): state_matches(eS, rS)(translate)

    top_releases_ct(A): RECURSIVE nat =
      CASES A OF
        letexpr(B, C): top_releases_ct(B),
        pop(B): top_releases_ct(B),
        release(x, B): 1 + top_releases_ct(B)
        ELSE 0
      ENDCASES
    MEASURE A BY <<

    top_releases_ct_fill: LEMMA
      top_releases_ct(fill(K, A)) = top_releases_ct(A)

    top_releases_rs(rS): nat = top_releases_ct(rS`redex)

    top_releases_build_redex: LEMMA
      top_releases_ct(A) > 0 IFF releaseRedex?(buildRedex(A)`2)

    top_release_reduce: LEMMA
      noDanglingRefs?(grS) AND top_releases_ct(grS`redex) > 0 IMPLIES
        reduce(D)(grS) = releaseReduce(D)(make_redex(to_topstate(grS)))

    top_releases_reduce: LEMMA
      noDanglingRefs?(grS) AND top_releases_ct(grS`redex) > 0 IMPLIES
        top_releases_ct(reduce(D)(grS)`redex) = top_releases_ct(grS`redex) - 1

    % decref_match: RECURSIVE JUDGEMENT
    %   decref(rS: (noDanglingRefs?), r: (rS`domain), i: upto(rS`store(r)`length)) HAS_TYPE
    %     {rS2 | FORALL (eS, translate): state_matches(eS, rS)(translate) IMPLIES state_matches(eS, rS2)(translate)}

    decref1_stillmatch: LEMMA
      FORALL (rS, (r: (rS`domain)), i: upto(rS`store(r)`length)):
        state_matches(eS, rS)(translate) IMPLIES state_matches(eS, decref1(rS, r, i))(translate)

    decref_stillmatch: LEMMA
      FORALL (rS: (noDanglingRefs?), r: (rS`domain), i: upto(rS`store(r)`length)):
        state_matches(eS, rS)(translate) IMPLIES state_matches(eS, decref(rS, r, i))(translate)

    decref1_chk_stillmatch: LEMMA
      FORALL (rS, (u: (domainValue?(rS`domain)))):
        state_matches(eS, rS)(translate) IMPLIES state_matches(eS, decref1_chk(rS, u))(translate)

    releaseReduce_match: LEMMA
      pureReleaseRedex?(grS`redex) AND noDanglingRefs?(grS) AND allReleaseMarked?(grS`redex) AND
        state_matches(eS, grS)(translate) IMPLIES
          state_matches(eS, releaseReduce(D)(grS))(translate)


    release_marked_match: LEMMA
      index(x) + popDepth(rS`redex) < rS`stack`length AND
      (marked(x) IMPLIES
        NOT member(index(x), vars(rS`redex)) AND
        NOT member(index(x), cvars(rS`context))) AND
      state_matches(eS, rS)(translate) AND
      translate_refs(translate)
        (rS`stack`seq(rS`stack`length - index(x) - popDepth(rS`redex) - 1)) =
           eS`stack`seq(rS`stack`length - index(x) - popDepth(rS`redex) - 1) 
      IMPLIES
        state_matches(eS, release_marked(rS)(x))(translate)

    letApply_unmark: LEMMA
      FORALL i, (args: list[(variable?)] | length(args) = i), A: 
       unmark(rreduction.letApply(i, args, A)) =
         reduction.letApply(i, unmarkvars(args), unmark(A))

    applyReduce_match: LEMMA
      applyRedex?(grS`redex) AND state_matches?(gS, grS) IMPLIES
        state_matches?(applyReduce(D)(gS), applyReduce(D)(grS))

    ift_match: LEMMA
      pureIftRedex?(grS`redex) AND state_matches?(gS, grS) IMPLIES
        pureIftRedex?(gS`redex)

    ift_condtion_match: LEMMA
      pureIftRedex?(grS`redex) AND state_matches?(gS, grS) IMPLIES
        (get(grS`stack)(condition(grS`redex)) = constant(0)) =
          (get(gS`stack)(condition(gS`redex)) = constant(0))

    ifReduce_match: LEMMA
      pureIftRedex?(grS`redex) AND state_matches?(gS, grS) IMPLIES
        state_matches?(ifReduce(D)(gS), ifReduce(D)(grS))

    lookup_match: LEMMA
      lookupRedex?(grS`redex) AND state_matches(gS, grS)(translate) IMPLIES
        lookupRedex?(gS`redex)

    arrayvalue_translate: LEMMA
      lookupRedex?(grS`redex) AND state_matches(gS, grS)(translate) IMPLIES
        translate_refs(translate)(get(grS`stack)(arrayvalue(grS`redex))) =
          get(gS`stack)(arrayvalue(gS`redex))

    position_translate: LEMMA
      lookupRedex?(grS`redex) AND state_matches(gS, grS)(translate) IMPLIES
        translate_refs(translate)(get(grS`stack)(position(grS`redex))) =
          get(gS`stack)(position(gS`redex))

    lookupReduce_match: LEMMA
      lookupRedex?(grS`redex) AND state_matches?(gS, grS) IMPLIES
        state_matches?(lookupReduce(D)(gS), lookupReduce(D)(grS))

    newintReduce_match: LEMMA
      newintRedex?(grS`redex) AND state_matches?(gS, grS) AND noDanglingRefs?(grS) IMPLIES
        state_matches?(newintReduce(D)(gS), newintReduce(D)(grS))

    newrefReduce_match: LEMMA
      newrefRedex?(grS`redex) AND state_matches?(gS, grS) AND noDanglingRefs?(grS)  IMPLIES
        state_matches?(newrefReduce(D)(gS), newrefReduce(D)(grS))

    popReduce_match: LEMMA
      popRedex?(grS`redex) AND noDanglingRefs?(grS) AND state_matches?(gS, grS) IMPLIES
        state_matches?(popReduce(D)(gS), popReduce(D)(grS))

    letReduce_match: LEMMA
      pureLetRedex?(grS`redex) AND state_matches?(gS, grS) IMPLIES
        state_matches?(letReduce(D)(gS), letReduce(D)(grS))

    % count_redundant: LEMMA
    %   rS`error = rS2`error AND rS`domain = rS2`domain AND rS`store = rS2`store AND
    %   rS`stack = rS2`stack AND rS`context = rS2`context AND rS`redex = rS2`redex IMPLIES
    %     rS = rS2

    % stack_clear_if_marked_ref(S)(x | index(x) < S`length): Stack =
    %   IF marked(x) AND ref?(get(S)(x)) THEN
    %     S WITH [`seq(S`length - index(x) - 1) := nil]
    %   ELSE
    %     S
    %   ENDIF

    % updateReduce_nocount(grS | updateRedex?(grS`redex) AND noDanglingRefs?(grS)): rstate =
    %   LET aval = get(grS`stack)(target(grS`redex)),
    %       lval = get(grS`stack)(lhs(grS`redex)),
    %       rval = get(grS`stack)(rhs(grS`redex))
    %   IN
    %   IF (ref?(aval) AND constant?(lval) AND value(lval) >= 0
    %                  AND value(lval) < grS`store(refindex(aval))`length) THEN
    %      LET nstack = stack_clear_if_marked_ref(grS`stack)(rhs(grS`redex)) IN
    %      IF grS`count(refindex(aval)) > 1 OR NOT marked(target(grS`redex)) OR rval = aval THEN
    %        LET newref = least_out(grS`domain),
    %            newdomain = add(newref, grS`domain)
    %        IN
    %        LET nnstack = stack_clear_if_marked_ref(nstack)(target(grS`redex)) IN
    %        grS WITH [`redex := ref(newref),
    %                  `domain := newdomain,
    %                  `store := grS`store WITH [(newref) |-> grS`store(refindex(aval)) WITH [`seq(value(lval)) := rval]],
    %                  `stack := nnstack,
    %                  `count := refcount(newdomain, (grS`store WITH [(newref) |-> grS`store(refindex(aval)) WITH [`seq(value(lval)) := rval]]), nnstack, ref(newref))]
    %      ELSE
    %        % Update in-place
    %        LET oldref = refindex(aval),
    %            newstore = grS`store WITH [(oldref)`seq(value(lval)) := rval],
    %            oldvalue = grS`store(oldref)`seq(value(lval)),
    %            nnstack = nstack WITH [`seq(grS`stack`length - 1 - index(target(grS`redex))) := nil],
    %            nncount = refcount(grS`domain, newstore, nnstack, aval),
    %            nrs = grS WITH [
    %              `redex := aval,
    %              `store := newstore,
    %              `stack := nnstack,
    %              `count := nncount
    %            ]
    %        IN
    %        IF ref?(oldvalue) THEN
    %          LET orf = refindex(oldvalue) IN
    %          decref(nrs, orf, newstore(orf)`length)
    %        ELSE
    %          nrs
    %        ENDIF
    %      ENDIF
    %    ELSE
    %      grS WITH [error := TRUE]
    %    ENDIF

    % updateReduce_nocount_same: LEMMA
    %   updateRedex?(grS`redex) AND noDanglingRefs?(grS) IMPLIES
    %     updateReduce(D)(grS) = updateReduce_nocount(grS)

    update_match: LEMMA
      updateRedex?(grS`redex) AND state_matches(gS, grS)(translate) IMPLIES
        updateRedex?(gS`redex)

    target_translate: LEMMA
      updateRedex?(grS`redex) AND state_matches(gS, grS)(translate) IMPLIES
        translate_refs(translate)(get(grS`stack)(target(grS`redex))) =
          get(gS`stack)(target(gS`redex))

    lhs_translate: LEMMA
      updateRedex?(grS`redex) AND state_matches(gS, grS)(translate) IMPLIES
        translate_refs(translate)(get(grS`stack)(lhs(grS`redex))) =
          get(gS`stack)(lhs(gS`redex))

    rhs_translate: LEMMA
      updateRedex?(grS`redex) AND state_matches(gS, grS)(translate) IMPLIES
        translate_refs(translate)(get(grS`stack)(rhs(grS`redex))) =
          get(gS`stack)(rhs(gS`redex))

    updateReduce_match: LEMMA
      updateRedex?(grS`redex) AND noDanglingRefs?(grS) AND state_matches?(gS, grS) IMPLIES
        state_matches?(updateReduce(D)(gS), updateReduce(D)(grS))

    arm_release_set: LEMMA
      allReleaseMarked?(A) IMPLIES allReleaseMarked?(release_set(A, X))

    arm_mark_unmark: LEMMA
      allReleaseMarked?(mark(X)(unmark(A)))

    arm_letApply: LEMMA
      FORALL i, (args: list[(variable?)] | length(args) = i), A: 
       allReleaseMarked?(A) IMPLIES allReleaseMarked?(rreduction.letApply(i, args, A))

    variableReduce_arm: LEMMA
      variable?(grS`redex) AND noDanglingRefs?(grS) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)
        IMPLIES allReleaseMarked?(variableReduce(D)(grS)`redex) AND armc?(variableReduce(D)(grS)`context)

    releaseReduce_arm: LEMMA
      pureReleaseRedex?(grS`redex) AND noDanglingRefs?(grS) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)
        IMPLIES allReleaseMarked?(releaseReduce(D)(grS)`redex) AND armc?(releaseReduce(D)(grS)`context)

    applyReduce_arm: LEMMA
      applyRedex?(grS`redex) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)
        IMPLIES allReleaseMarked?(applyReduce(D)(grS)`redex) AND armc?(applyReduce(D)(grS)`context)

    ifReduce_arm: LEMMA
      pureIftRedex?(grS`redex) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)
        IMPLIES allReleaseMarked?(ifReduce(D)(grS)`redex) AND armc?(ifReduce(D)(grS)`context)

    lookupReduce_arm: LEMMA
      lookupRedex?(grS`redex) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)
        IMPLIES allReleaseMarked?(lookupReduce(D)(grS)`redex) AND armc?(lookupReduce(D)(grS)`context)

    newintReduce_arm: LEMMA
      newintRedex?(grS`redex) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)
        IMPLIES allReleaseMarked?(newintReduce(D)(grS)`redex) AND armc?(newintReduce(D)(grS)`context)

    newrefReduce_arm: LEMMA
      newrefRedex?(grS`redex) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)
        IMPLIES allReleaseMarked?(newrefReduce(D)(grS)`redex) AND armc?(newrefReduce(D)(grS)`context)

    popReduce_arm: LEMMA
      popRedex?(grS`redex) AND noDanglingRefs?(grS) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)
        IMPLIES allReleaseMarked?(popReduce(D)(grS)`redex) AND armc?(popReduce(D)(grS)`context)

    letReduce_arm: LEMMA
      pureLetRedex?(grS`redex) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)
        IMPLIES allReleaseMarked?(letReduce(D)(grS)`redex) AND armc?(letReduce(D)(grS)`context)

    updateReduce_arm: LEMMA
      updateRedex?(grS`redex) AND noDanglingRefs?(grS) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)
        IMPLIES allReleaseMarked?(updateReduce(D)(grS)`redex) AND armc?(updateReduce(D)(grS)`context)

    reduce_arm: JUDGEMENT
      reduce(D)(grS | noDanglingRefs?(grS) AND allReleaseMarked?(grS`redex) AND armc?(grS`context)) HAS_TYPE
        { rS | allReleaseMarked?(rS`redex) AND armc?(rS`context) }

    rreduce_n(D)(n: nat, rS: (noDanglingRefs?)) : RECURSIVE rstate =
      IF n = 0 OR rS`error THEN rS ELSE rreduce_n(D)(n - 1, reduce(D)(rS)) ENDIF
    MEASURE n

    build_redex_match: LEMMA
      contextPure?(A) AND contextPure?(B) AND
      translate_refs(translate)(unmark(A)) = B AND NOT release?(buildRedex(A)`2) IMPLIES
        translate_refs(translate)(unmark(buildRedex(A)`2)) = buildRedex(B)`2 AND
        unmark(buildRedex(A)`1) = buildRedex(B)`1

    make_redex_match: LEMMA
      FORALL (eS: topstate, rS: rtopstate):
        NOT value?(rS`redex) AND NOT value?(eS`redex) AND
        NOT releaseRedex?(make_redex(rS)`redex) AND state_matches?(eS, rS) IMPLIES
          state_matches?(make_redex_e(eS), make_redex(rS))

    to_topstate_match: LEMMA
      state_matches(eS, rS)(translate) IMPLIES
        state_matches(to_topstate(eS), to_topstate(rS))(translate)

    releaseReduce_reduce_match: LEMMA
      noDanglingRefs?(grS) AND allReleaseMarked?(grS`redex) AND armc?(grS`context) AND
          state_matches(to_topstate(gS), to_topstate(grS))(translate) AND
          top_releases_ct(grS`redex) > 0
          IMPLIES
        state_matches(to_topstate(gS),
          to_topstate(releaseReduce(D)(make_redex(to_topstate(grS)))))(translate)

    bisimulation_lemma: THEOREM
      noDanglingRefs?(grS) AND allReleaseMarked?(grS`redex) AND armc?(grS`context) AND
          state_matches?(to_topstate(gS), to_topstate(grS)) IMPLIES
        state_matches?(reduce(D)(gS), rreduce_n(D)(top_releases_ct(grS`redex) + 1, grS))

    bisimulation_theorem: THEOREM
      noDanglingRefs?(grS) AND allReleaseMarked?(grS`redex) AND armc?(grS`context) AND
          state_matches?(gS, grS) IMPLIES
        EXISTS (n: posnat): state_matches?(reduce(D)(gS), rreduce_n(D)(n, grS))

END reduction_props
